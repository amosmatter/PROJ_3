
PROJ_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b088  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5fc  0800b5fc  0001b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800b600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00041192  20000070  0800b670  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  20041202  0800b670  00021202  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 11 .debug_info   000291d9  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000051a4  00000000  00000000  000492c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002280  00000000  00000000  0004e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001b72  00000000  00000000  000506e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00008271  00000000  00000000  0005225a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ae36  00000000  00000000  0005a4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015af52  00000000  00000000  00085301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009c28  00000000  00000000  001e0254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001e9e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000070 	.word	0x20000070
 800025c:	00000000 	.word	0x00000000
 8000260:	0800b2b0 	.word	0x0800b2b0

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000074 	.word	0x20000074
 800027c:	0800b2b0 	.word	0x0800b2b0

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b982 	b.w	80005ac <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d146      	bne.n	800035e <__udivmoddi4+0x9e>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d95e      	bls.n	8000394 <__udivmoddi4+0xd4>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	409c      	lsls	r4, r3
 80002e8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ec:	4317      	orrs	r7, r2
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	0c22      	lsrs	r2, r4, #16
 80002f8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	fb01 f005 	mul.w	r0, r1, r5
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x5e>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x5c>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 8134 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	b2a4      	uxth	r4, r4
 8000322:	fbb2 f0fe 	udiv	r0, r2, lr
 8000326:	fb0e 2210 	mls	r2, lr, r0, r2
 800032a:	fb00 f505 	mul.w	r5, r0, r5
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	42a5      	cmp	r5, r4
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x88>
 8000336:	eb1c 0404 	adds.w	r4, ip, r4
 800033a:	f100 32ff 	add.w	r2, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x86>
 8000340:	42a5      	cmp	r5, r4
 8000342:	f200 8119 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 8000346:	4610      	mov	r0, r2
 8000348:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	2100      	movs	r1, #0
 8000350:	b11e      	cbz	r6, 800035a <__udivmoddi4+0x9a>
 8000352:	40dc      	lsrs	r4, r3
 8000354:	2300      	movs	r3, #0
 8000356:	e9c6 4300 	strd	r4, r3, [r6]
 800035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0xb4>
 8000362:	2e00      	cmp	r6, #0
 8000364:	f000 80fc 	beq.w	8000560 <__udivmoddi4+0x2a0>
 8000368:	2100      	movs	r1, #0
 800036a:	e9c6 0500 	strd	r0, r5, [r6]
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14c      	bne.n	8000416 <__udivmoddi4+0x156>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2a6>
 8000382:	4282      	cmp	r2, r0
 8000384:	f240 80ef 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000388:	4608      	mov	r0, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e5      	beq.n	800035a <__udivmoddi4+0x9a>
 800038e:	e9c6 4700 	strd	r4, r7, [r6]
 8000392:	e7e2      	b.n	800035a <__udivmoddi4+0x9a>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xd8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f382 	clz	r3, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 809f 	bne.w	80004e0 <__udivmoddi4+0x220>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a8:	fa1f f78c 	uxth.w	r7, ip
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b6:	0c22      	lsrs	r2, r4, #16
 80003b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003bc:	fb07 f005 	mul.w	r0, r7, r5
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d90f      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	bf2c      	ite	cs
 80003ce:	f04f 0901 	movcs.w	r9, #1
 80003d2:	f04f 0900 	movcc.w	r9, #0
 80003d6:	4290      	cmp	r0, r2
 80003d8:	d903      	bls.n	80003e2 <__udivmoddi4+0x122>
 80003da:	f1b9 0f00 	cmp.w	r9, #0
 80003de:	f000 80ce 	beq.w	800057e <__udivmoddi4+0x2be>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ec:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f0:	fb00 f707 	mul.w	r7, r0, r7
 80003f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	42a7      	cmp	r7, r4
 8000408:	f200 80b3 	bhi.w	8000572 <__udivmoddi4+0x2b2>
 800040c:	4610      	mov	r0, r2
 800040e:	1be4      	subs	r4, r4, r7
 8000410:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000414:	e79c      	b.n	8000350 <__udivmoddi4+0x90>
 8000416:	f1c1 0420 	rsb	r4, r1, #32
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000420:	fa22 f704 	lsr.w	r7, r2, r4
 8000424:	40e5      	lsrs	r5, r4
 8000426:	408a      	lsls	r2, r1
 8000428:	431f      	orrs	r7, r3
 800042a:	fa20 f304 	lsr.w	r3, r0, r4
 800042e:	4088      	lsls	r0, r1
 8000430:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fbb5 fef8 	udiv	lr, r5, r8
 8000444:	fb08 551e 	mls	r5, r8, lr, r5
 8000448:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044c:	fb0e f90c 	mul.w	r9, lr, ip
 8000450:	45a9      	cmp	r9, r5
 8000452:	d90e      	bls.n	8000472 <__udivmoddi4+0x1b2>
 8000454:	197d      	adds	r5, r7, r5
 8000456:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045a:	bf2c      	ite	cs
 800045c:	f04f 0b01 	movcs.w	fp, #1
 8000460:	f04f 0b00 	movcc.w	fp, #0
 8000464:	45a9      	cmp	r9, r5
 8000466:	d903      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000468:	f1bb 0f00 	cmp.w	fp, #0
 800046c:	f000 808d 	beq.w	800058a <__udivmoddi4+0x2ca>
 8000470:	46d6      	mov	lr, sl
 8000472:	eba5 0509 	sub.w	r5, r5, r9
 8000476:	fa1f f983 	uxth.w	r9, r3
 800047a:	fbb5 f3f8 	udiv	r3, r5, r8
 800047e:	fb08 5513 	mls	r5, r8, r3, r5
 8000482:	fb03 fc0c 	mul.w	ip, r3, ip
 8000486:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048a:	45ac      	cmp	ip, r5
 800048c:	d906      	bls.n	800049c <__udivmoddi4+0x1dc>
 800048e:	197d      	adds	r5, r7, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295
 8000494:	d201      	bcs.n	800049a <__udivmoddi4+0x1da>
 8000496:	45ac      	cmp	ip, r5
 8000498:	d87e      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 800049a:	4643      	mov	r3, r8
 800049c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a0:	eba5 050c 	sub.w	r5, r5, ip
 80004a4:	fba3 9802 	umull	r9, r8, r3, r2
 80004a8:	4545      	cmp	r5, r8
 80004aa:	46ce      	mov	lr, r9
 80004ac:	46c4      	mov	ip, r8
 80004ae:	d302      	bcc.n	80004b6 <__udivmoddi4+0x1f6>
 80004b0:	d106      	bne.n	80004c0 <__udivmoddi4+0x200>
 80004b2:	4548      	cmp	r0, r9
 80004b4:	d204      	bcs.n	80004c0 <__udivmoddi4+0x200>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004bc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d06f      	beq.n	80005a4 <__udivmoddi4+0x2e4>
 80004c4:	ebb0 020e 	subs.w	r2, r0, lr
 80004c8:	eb65 050c 	sbc.w	r5, r5, ip
 80004cc:	40ca      	lsrs	r2, r1
 80004ce:	fa05 f404 	lsl.w	r4, r5, r4
 80004d2:	40cd      	lsrs	r5, r1
 80004d4:	4618      	mov	r0, r3
 80004d6:	4314      	orrs	r4, r2
 80004d8:	2100      	movs	r1, #0
 80004da:	e9c6 4500 	strd	r4, r5, [r6]
 80004de:	e73c      	b.n	800035a <__udivmoddi4+0x9a>
 80004e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e4:	f1c3 0220 	rsb	r2, r3, #32
 80004e8:	4099      	lsls	r1, r3
 80004ea:	409c      	lsls	r4, r3
 80004ec:	40d5      	lsrs	r5, r2
 80004ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f2:	fa20 f202 	lsr.w	r2, r0, r2
 80004f6:	fa1f f78c 	uxth.w	r7, ip
 80004fa:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fe:	430a      	orrs	r2, r1
 8000500:	fb0e 5510 	mls	r5, lr, r0, r5
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f507 	mul.w	r5, r0, r7
 800050e:	428d      	cmp	r5, r1
 8000510:	d90e      	bls.n	8000530 <__udivmoddi4+0x270>
 8000512:	eb1c 0101 	adds.w	r1, ip, r1
 8000516:	f100 38ff 	add.w	r8, r0, #4294967295
 800051a:	bf2c      	ite	cs
 800051c:	f04f 0901 	movcs.w	r9, #1
 8000520:	f04f 0900 	movcc.w	r9, #0
 8000524:	428d      	cmp	r5, r1
 8000526:	d902      	bls.n	800052e <__udivmoddi4+0x26e>
 8000528:	f1b9 0f00 	cmp.w	r9, #0
 800052c:	d031      	beq.n	8000592 <__udivmoddi4+0x2d2>
 800052e:	4640      	mov	r0, r8
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5fe 	udiv	r5, r1, lr
 8000538:	fb0e 1115 	mls	r1, lr, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f107 	mul.w	r1, r5, r7
 8000544:	4291      	cmp	r1, r2
 8000546:	d907      	bls.n	8000558 <__udivmoddi4+0x298>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x296>
 8000552:	4291      	cmp	r1, r2
 8000554:	d823      	bhi.n	800059e <__udivmoddi4+0x2de>
 8000556:	4645      	mov	r5, r8
 8000558:	1a52      	subs	r2, r2, r1
 800055a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055e:	e726      	b.n	80003ae <__udivmoddi4+0xee>
 8000560:	4631      	mov	r1, r6
 8000562:	4630      	mov	r0, r6
 8000564:	e6f9      	b.n	800035a <__udivmoddi4+0x9a>
 8000566:	1a84      	subs	r4, r0, r2
 8000568:	eb65 0203 	sbc.w	r2, r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	4617      	mov	r7, r2
 8000570:	e70b      	b.n	800038a <__udivmoddi4+0xca>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14e>
 8000578:	4464      	add	r4, ip
 800057a:	3802      	subs	r0, #2
 800057c:	e6e4      	b.n	8000348 <__udivmoddi4+0x88>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	3902      	subs	r1, #2
 8000586:	4462      	add	r2, ip
 8000588:	e6c9      	b.n	800031e <__udivmoddi4+0x5e>
 800058a:	f1ae 0e02 	sub.w	lr, lr, #2
 800058e:	443d      	add	r5, r7
 8000590:	e76f      	b.n	8000472 <__udivmoddi4+0x1b2>
 8000592:	3802      	subs	r0, #2
 8000594:	4461      	add	r1, ip
 8000596:	e7cb      	b.n	8000530 <__udivmoddi4+0x270>
 8000598:	3b02      	subs	r3, #2
 800059a:	443d      	add	r5, r7
 800059c:	e77e      	b.n	800049c <__udivmoddi4+0x1dc>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e7d9      	b.n	8000558 <__udivmoddi4+0x298>
 80005a4:	4618      	mov	r0, r3
 80005a6:	4631      	mov	r1, r6
 80005a8:	e6d7      	b.n	800035a <__udivmoddi4+0x9a>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <MX_FREERTOS_Init+0x28>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <MX_FREERTOS_Init+0x2c>)
 80005ba:	f007 fc2b 	bl	8007e14 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <MX_FREERTOS_Init+0x30>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // PTH_TaskHandle = osThreadNew(PTH_task, NULL, &PTH_TaskAttributes);
  // IMU_TaskHandle = osThreadNew(IMU_task, NULL, &IMU_TaskAttributes);
  GPS_TaskHandle = osThreadNew(GPS_task, NULL, &GPS_TaskAttributes);
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <MX_FREERTOS_Init+0x34>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <MX_FREERTOS_Init+0x38>)
 80005ca:	f007 fc23 	bl	8007e14 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <MX_FREERTOS_Init+0x3c>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0800b398 	.word	0x0800b398
 80005dc:	080005f1 	.word	0x080005f1
 80005e0:	20000090 	.word	0x20000090
 80005e4:	0800b374 	.word	0x0800b374
 80005e8:	080016f9 	.word	0x080016f9
 80005ec:	2000008c 	.word	0x2000008c

080005f0 <StartDefaultTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for (;;)
  {

    osDelay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f007 fc9b 	bl	8007f36 <osDelay>
 8000600:	e7fa      	b.n	80005f8 <StartDefaultTask+0x8>
	...

08000604 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <__io_putchar+0x20>)
 8000616:	f006 fc13 	bl	8006e40 <HAL_UART_Transmit>
  return ch;
 800061a:	687b      	ldr	r3, [r7, #4]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000178 	.word	0x20000178

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f001 f8da 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f817 	bl	8000662 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000634:	f000 f871 	bl	800071a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 fa38 	bl	8000aac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f952 	bl	80008e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000640:	f000 f88c 	bl	800075c <MX_I2C2_Init>
  MX_SPI3_Init();
 8000644:	f000 f8de 	bl	8000804 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f998 	bl	800097c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800064c:	f000 f9e2 	bl	8000a14 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000650:	f000 f8c4 	bl	80007dc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f007 fb8e 	bl	8007d74 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000658:	f7ff ffaa 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800065c:	f007 fbb0 	bl	8007dc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x38>

08000662 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b09e      	sub	sp, #120	; 0x78
 8000666:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	2260      	movs	r2, #96	; 0x60
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f009 ff47 	bl	800a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
 8000684:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000686:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800068a:	f001 fde5 	bl	8002258 <HAL_PWREx_ControlVoltageScaling>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000694:	f000 fb4a 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000698:	2310      	movs	r3, #16
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006ba:	2350      	movs	r3, #80	; 0x50
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 feba 	bl	8002450 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e2:	f000 fb23 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	231f      	movs	r3, #31
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fd80 	bl	8003208 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800070e:	f000 fb0d 	bl	8000d2c <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3778      	adds	r7, #120	; 0x78
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000720:	f001 fe76 	bl	8002410 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000734:	463b      	mov	r3, r7
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fd10 	bl	800215c <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800073c:	f001 fd7c 	bl	8002238 <HAL_PWR_EnablePVD>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000740:	f001 fe76 	bl	8002430 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000744:	2002      	movs	r0, #2
 8000746:	f001 fe13 	bl	8002370 <HAL_PWREx_ConfigSupply>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8000750:	f000 faec 	bl	8000d2c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_I2C2_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <MX_I2C2_Init+0x7c>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000774:	2201      	movs	r2, #1
 8000776:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C2_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000798:	f001 fb7e 	bl	8001e98 <HAL_I2C_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007a2:	f000 fac3 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_I2C2_Init+0x74>)
 80007aa:	f001 fc10 	bl	8001fce <HAL_I2CEx_ConfigAnalogFilter>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007b4:	f000 faba 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_I2C2_Init+0x74>)
 80007bc:	f001 fc52 	bl	8002064 <HAL_I2CEx_ConfigDigitalFilter>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 fab1 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000094 	.word	0x20000094
 80007d4:	40005800 	.word	0x40005800
 80007d8:	30909dec 	.word	0x30909dec

080007dc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007e0:	2000      	movs	r0, #0
 80007e2:	f001 fc8b 	bl	80020fc <HAL_ICACHE_ConfigAssociativityMode>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007ec:	f000 fa9e 	bl	8000d2c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007f0:	f001 fca4 	bl	800213c <HAL_ICACHE_Enable>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007fa:	f000 fa97 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000816:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <MX_SPI3_Init+0xdc>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_SPI3_Init+0xd8>)
 800081c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000820:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_SPI3_Init+0xd8>)
 800082a:	2207      	movs	r2, #7
 800082c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_SPI3_Init+0xd8>)
 800083c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000840:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000848:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_SPI3_Init+0xd8>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_SPI3_Init+0xd8>)
 800085e:	2207      	movs	r2, #7
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_SPI3_Init+0xd8>)
 800086c:	2200      	movs	r2, #0
 800086e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000872:	2200      	movs	r2, #0
 8000874:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000878:	2200      	movs	r2, #0
 800087a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_SPI3_Init+0xd8>)
 800087e:	2200      	movs	r2, #0
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000884:	2200      	movs	r2, #0
 8000886:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_SPI3_Init+0xd8>)
 800088a:	2200      	movs	r2, #0
 800088c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000890:	2200      	movs	r2, #0
 8000892:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_SPI3_Init+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_SPI3_Init+0xd8>)
 800089c:	2200      	movs	r2, #0
 800089e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008a0:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_SPI3_Init+0xd8>)
 80008a2:	f005 fd51 	bl	8006348 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 80008ac:	f000 fa3e 	bl	8000d2c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80008b4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008b8:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_SPI3_Init+0xd8>)
 80008c4:	f005 fe71 	bl	80065aa <HAL_SPIEx_SetConfigAutonomousMode>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 80008ce:	f000 fa2d 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	46002000 	.word	0x46002000

080008e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART1_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART1_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART1_UART_Init+0x90>)
 800092e:	f006 fa37 	bl	8006da0 <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f9f8 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000940:	f007 f823 	bl	800798a <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f9ef 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000952:	f007 f858 	bl	8007a06 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f9e6 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000962:	f006 ffd9 	bl	8007918 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f9de 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000178 	.word	0x20000178
 8000978:	40013800 	.word	0x40013800

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 8000988:	f242 32f0 	movw	r2, #9200	; 0x23f0
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009c6:	f006 f9eb 	bl	8006da0 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f9ac 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009d8:	f006 ffd7 	bl	800798a <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f9a3 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009ea:	f007 f80c 	bl	8007a06 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f99a 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USART2_UART_Init+0x90>)
 80009fa:	f006 ff52 	bl	80078a2 <HAL_UARTEx_EnableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f992 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000020c 	.word	0x2000020c
 8000a10:	40004400 	.word	0x40004400

08000a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART3_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a5e:	f006 f99f 	bl	8006da0 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f960 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a70:	f006 ff8b 	bl	800798a <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f957 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a82:	f006 ffc0 	bl	8007a06 <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 f94e 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART3_UART_Init+0x90>)
 8000a92:	f006 ff41 	bl	8007918 <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f946 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200002a0 	.word	0x200002a0
 8000aa8:	40004800 	.word	0x40004800

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b88      	ldr	r3, [pc, #544]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac8:	4a86      	ldr	r2, [pc, #536]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ad2:	4b84      	ldr	r3, [pc, #528]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae0:	4b80      	ldr	r3, [pc, #512]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ae6:	4a7f      	ldr	r2, [pc, #508]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000ae8:	f043 0320 	orr.w	r3, r3, #32
 8000aec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000af0:	4b7c      	ldr	r3, [pc, #496]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b79      	ldr	r3, [pc, #484]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b04:	4a77      	ldr	r2, [pc, #476]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b0e:	4b75      	ldr	r3, [pc, #468]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1c:	4b71      	ldr	r3, [pc, #452]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b22:	4a70      	ldr	r2, [pc, #448]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b2c:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b40:	4a68      	ldr	r2, [pc, #416]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b4a:	4b66      	ldr	r3, [pc, #408]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b58:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b5e:	4a61      	ldr	r2, [pc, #388]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b68:	4b5e      	ldr	r3, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b7c:	4a59      	ldr	r2, [pc, #356]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b86:	4b57      	ldr	r3, [pc, #348]	; (8000ce4 <MX_GPIO_Init+0x238>)
 8000b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_FSYNC_GPIO_Port, IMU_FSYNC_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	4853      	ldr	r0, [pc, #332]	; (8000ce8 <MX_GPIO_Init+0x23c>)
 8000b9a:	f001 f929 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_nCS_Pin|RPI_nCS_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ba4:	4850      	ldr	r0, [pc, #320]	; (8000ce8 <MX_GPIO_Init+0x23c>)
 8000ba6:	f001 f923 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTH_nCS_GPIO_Port, PTH_nCS_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb0:	484e      	ldr	r0, [pc, #312]	; (8000cec <MX_GPIO_Init+0x240>)
 8000bb2:	f001 f91d 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2104      	movs	r1, #4
 8000bba:	484d      	ldr	r0, [pc, #308]	; (8000cf0 <MX_GPIO_Init+0x244>)
 8000bbc:	f001 f918 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	484b      	ldr	r0, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x248>)
 8000bc6:	f001 f913 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2104      	movs	r1, #4
 8000bce:	484a      	ldr	r0, [pc, #296]	; (8000cf8 <MX_GPIO_Init+0x24c>)
 8000bd0:	f001 f90e 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	4848      	ldr	r0, [pc, #288]	; (8000cfc <MX_GPIO_Init+0x250>)
 8000bda:	f001 f909 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT_REF_INT_Pin */
  GPIO_InitStruct.Pin = BUT_REF_INT_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be4:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <MX_GPIO_Init+0x254>)
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUT_REF_INT_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4840      	ldr	r0, [pc, #256]	; (8000cf4 <MX_GPIO_Init+0x248>)
 8000bf4:	f000 ff24 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_FSYNC_Pin SD_nCS_Pin RPI_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_FSYNC_Pin|SD_nCS_Pin|RPI_nCS_Pin;
 8000bf8:	f246 0308 	movw	r3, #24584	; 0x6008
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4835      	ldr	r0, [pc, #212]	; (8000ce8 <MX_GPIO_Init+0x23c>)
 8000c12:	f000 ff15 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <MX_GPIO_Init+0x258>)
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	482f      	ldr	r0, [pc, #188]	; (8000ce8 <MX_GPIO_Init+0x23c>)
 8000c2a:	f000 ff09 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTH_nCS_Pin */
  GPIO_InitStruct.Pin = PTH_nCS_Pin;
 8000c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PTH_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4829      	ldr	r0, [pc, #164]	; (8000cec <MX_GPIO_Init+0x240>)
 8000c48:	f000 fefa 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <MX_GPIO_Init+0x244>)
 8000c64:	f000 feec 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481d      	ldr	r0, [pc, #116]	; (8000cf4 <MX_GPIO_Init+0x248>)
 8000c80:	f000 fede 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin;
 8000c84:	2304      	movs	r3, #4
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0x24c>)
 8000c9c:	f000 fed0 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_READY_Pin */
  GPIO_InitStruct.Pin = LED_READY_Pin;
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_READY_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_GPIO_Init+0x250>)
 8000cb8:	f000 fec2 	bl	8001a40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 5, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2010      	movs	r0, #16
 8000cc2:	f000 fe95 	bl	80019f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000cc6:	2010      	movs	r0, #16
 8000cc8:	f000 feac 	bl	8001a24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2105      	movs	r1, #5
 8000cd0:	2018      	movs	r0, #24
 8000cd2:	f000 fe8d 	bl	80019f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000cd6:	2018      	movs	r0, #24
 8000cd8:	f000 fea4 	bl	8001a24 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	46020c00 	.word	0x46020c00
 8000ce8:	42021400 	.word	0x42021400
 8000cec:	42021000 	.word	0x42021000
 8000cf0:	42021800 	.word	0x42021800
 8000cf4:	42020800 	.word	0x42020800
 8000cf8:	42020c00 	.word	0x42020c00
 8000cfc:	42020400 	.word	0x42020400
 8000d00:	10210000 	.word	0x10210000
 8000d04:	10110000 	.word	0x10110000

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f000 fd91 	bl	8001840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40012c00 	.word	0x40012c00

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>

08000d36 <delay_ms>:

#include "cmsis_os2.h"
#include <string.h>

void delay_ms(uint32_t period)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f007 f8f9 	bl	8007f36 <osDelay>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_MspInit+0x38>)
 8000d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_MspInit+0x38>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_MspInit+0x38>)
 8000d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	210f      	movs	r1, #15
 8000d74:	f06f 0001 	mvn.w	r0, #1
 8000d78:	f000 fe3a 	bl	80019f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	46020c00 	.word	0x46020c00

08000d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ba      	sub	sp, #232	; 0xe8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	22c0      	movs	r2, #192	; 0xc0
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f009 fbab 	bl	800a504 <memset>
  if(hi2c->Instance==I2C2)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_I2C_MspInit+0xc4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d144      	bne.n	8000e42 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000db8:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 fe23 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000dd8:	f7ff ffa8 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_I2C_MspInit+0xc8>)
 8000dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <HAL_I2C_MspInit+0xc8>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_I2C_MspInit+0xc8>)
 8000dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e00:	2312      	movs	r3, #18
 8000e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e12:	2304      	movs	r3, #4
 8000e14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <HAL_I2C_MspInit+0xcc>)
 8000e20:	f000 fe0e 	bl	8001a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_I2C_MspInit+0xc8>)
 8000e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_I2C_MspInit+0xc8>)
 8000e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_I2C_MspInit+0xc8>)
 8000e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	37e8      	adds	r7, #232	; 0xe8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40005800 	.word	0x40005800
 8000e50:	46020c00 	.word	0x46020c00
 8000e54:	42021400 	.word	0x42021400

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0ba      	sub	sp, #232	; 0xe8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	22c0      	movs	r2, #192	; 0xc0
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f009 fb43 	bl	800a504 <memset>
  if(hspi->Instance==SPI3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <HAL_SPI_MspInit+0xc8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d146      	bne.n	8000f16 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000e88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8000e94:	2308      	movs	r3, #8
 8000e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fdba 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000eaa:	f7ff ff3f 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_SPI_MspInit+0xcc>)
 8000eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_SPI_MspInit+0xcc>)
 8000eb6:	f043 0320 	orr.w	r3, r3, #32
 8000eba:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_SPI_MspInit+0xcc>)
 8000ec0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_SPI_MspInit+0xcc>)
 8000ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_SPI_MspInit+0xcc>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_SPI_MspInit+0xcc>)
 8000ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000eea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f04:	2306      	movs	r3, #6
 8000f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_SPI_MspInit+0xd0>)
 8000f12:	f000 fd95 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	37e8      	adds	r7, #232	; 0xe8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	46002000 	.word	0x46002000
 8000f24:	46020c00 	.word	0x46020c00
 8000f28:	42020800 	.word	0x42020800

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0be      	sub	sp, #248	; 0xf8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	22c0      	movs	r2, #192	; 0xc0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f009 fad9 	bl	800a504 <memset>
  if(huart->Instance==USART1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a72      	ldr	r2, [pc, #456]	; (8001120 <HAL_UART_MspInit+0x1f4>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d146      	bne.n	8000fea <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f5c:	f04f 0201 	mov.w	r2, #1
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fd51 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f7c:	f7ff fed6 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f80:	4b68      	ldr	r3, [pc, #416]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8000f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f86:	4a67      	ldr	r2, [pc, #412]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000f90:	4b64      	ldr	r3, [pc, #400]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8000f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b61      	ldr	r3, [pc, #388]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa4:	4a5f      	ldr	r2, [pc, #380]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8000fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000fbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4851      	ldr	r0, [pc, #324]	; (8001128 <HAL_UART_MspInit+0x1fc>)
 8000fe4:	f000 fd2c 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe8:	e095      	b.n	8001116 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_UART_MspInit+0x200>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d145      	bne.n	8001080 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff4:	f04f 0202 	mov.w	r2, #2
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fd05 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001014:	f7ff fe8a 	bl	8000d2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 800101a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800101e:	4a41      	ldr	r2, [pc, #260]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001028:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 800102a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103c:	4a39      	ldr	r2, [pc, #228]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 8001048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001054:	230c      	movs	r3, #12
 8001056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106c:	2307      	movs	r3, #7
 800106e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001076:	4619      	mov	r1, r3
 8001078:	482b      	ldr	r0, [pc, #172]	; (8001128 <HAL_UART_MspInit+0x1fc>)
 800107a:	f000 fce1 	bl	8001a40 <HAL_GPIO_Init>
}
 800107e:	e04a      	b.n	8001116 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <HAL_UART_MspInit+0x204>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d145      	bne.n	8001116 <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800108a:	f04f 0204 	mov.w	r2, #4
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001096:	2300      	movs	r3, #0
 8001098:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fcba 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x182>
      Error_Handler();
 80010aa:	f7ff fe3f 	bl	8000d2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 80010b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010b4:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 80010b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 80010c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 80010ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x1f8>)
 80010de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800110e:	4619      	mov	r1, r3
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <HAL_UART_MspInit+0x208>)
 8001112:	f000 fc95 	bl	8001a40 <HAL_GPIO_Init>
}
 8001116:	bf00      	nop
 8001118:	37f8      	adds	r7, #248	; 0xf8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40013800 	.word	0x40013800
 8001124:	46020c00 	.word	0x46020c00
 8001128:	42020000 	.word	0x42020000
 800112c:	40004400 	.word	0x40004400
 8001130:	40004800 	.word	0x40004800
 8001134:	42020400 	.word	0x42020400

08001138 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_InitTick+0xcc>)
 800114a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <HAL_InitTick+0xcc>)
 8001150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001154:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_InitTick+0xcc>)
 800115a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800115e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001166:	f107 0210 	add.w	r2, r7, #16
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fb93 	bl	800389c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001176:	f002 fb69 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 800117a:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_InitTick+0xd0>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	0c9b      	lsrs	r3, r3, #18
 8001186:	3b01      	subs	r3, #1
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_InitTick+0xd4>)
 800118c:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_InitTick+0xd8>)
 800118e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_InitTick+0xd4>)
 8001192:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001196:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <HAL_InitTick+0xd4>)
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_InitTick+0xd4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_InitTick+0xd4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80011aa:	4818      	ldr	r0, [pc, #96]	; (800120c <HAL_InitTick+0xd4>)
 80011ac:	f005 fa3e 	bl	800662c <HAL_TIM_Base_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80011b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011be:	4813      	ldr	r0, [pc, #76]	; (800120c <HAL_InitTick+0xd4>)
 80011c0:	f005 fa96 	bl	80066f0 <HAL_TIM_Base_Start_IT>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80011ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10e      	bne.n	80011f0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d808      	bhi.n	80011ea <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	202a      	movs	r0, #42	; 0x2a
 80011de:	f000 fc07 	bl	80019f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_InitTick+0xdc>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e002      	b.n	80011f0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011f0:	202a      	movs	r0, #42	; 0x2a
 80011f2:	f000 fc17 	bl	8001a24 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80011f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3738      	adds	r7, #56	; 0x38
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	46020c00 	.word	0x46020c00
 8001208:	431bde83 	.word	0x431bde83
 800120c:	20000334 	.word	0x20000334
 8001210:	40012c00 	.word	0x40012c00
 8001214:	20000004 	.word	0x20000004

08001218 <print_binary_section>:
/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim1;

/* USER CODE BEGIN EV */
void print_binary_section(unsigned int number, int start_bit, int end_bit)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  if (start_bit < 0 || end_bit < 0 || start_bit > 31 || end_bit > 31 || start_bit > end_bit)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0c      	blt.n	8001244 <print_binary_section+0x2c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db09      	blt.n	8001244 <print_binary_section+0x2c>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b1f      	cmp	r3, #31
 8001234:	dc06      	bgt.n	8001244 <print_binary_section+0x2c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b1f      	cmp	r3, #31
 800123a:	dc03      	bgt.n	8001244 <print_binary_section+0x2c>
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dd03      	ble.n	800124c <print_binary_section+0x34>
  {
    printf("Invalid bit positions\n");
 8001244:	481d      	ldr	r0, [pc, #116]	; (80012bc <print_binary_section+0xa4>)
 8001246:	f009 f85d 	bl	800a304 <puts>
    return;
 800124a:	e033      	b.n	80012b4 <print_binary_section+0x9c>
  }

  unsigned int mask = (1u << (end_bit - start_bit + 1)) - 1;
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	3301      	adds	r3, #1
 8001254:	2201      	movs	r2, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	3b01      	subs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  mask <<= start_bit;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	61bb      	str	r3, [r7, #24]

  unsigned int section = (number & mask) >> start_bit;
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	401a      	ands	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]

  for (int i = end_bit; i >= start_bit; --i)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e014      	b.n	80012a6 <print_binary_section+0x8e>
  {

    printf("%d", (section >> i) & 1);
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <print_binary_section+0xa8>)
 800128c:	f008 ffcc 	bl	800a228 <iprintf>
    if (i % 8 == 0)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <print_binary_section+0x88>
    {
      printf("'");
 800129a:	2027      	movs	r0, #39	; 0x27
 800129c:	f008 ffd6 	bl	800a24c <putchar>
  for (int i = end_bit; i >= start_bit; --i)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dae6      	bge.n	800127c <print_binary_section+0x64>
    }
  }
  printf("\n");
 80012ae:	200a      	movs	r0, #10
 80012b0:	f008 ffcc 	bl	800a24c <putchar>
}
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800b2ec 	.word	0x0800b2ec
 80012c0:	0800b304 	.word	0x0800b304

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>
	...

080012cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HFSR:");
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <HardFault_Handler+0x94>)
 80012d2:	f008 ffa9 	bl	800a228 <iprintf>
  print_binary_section(SCB->HFSR, 0, 31);
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HardFault_Handler+0x98>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	221f      	movs	r2, #31
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff9a 	bl	8001218 <print_binary_section>
  printf("\n\r");
 80012e4:	4820      	ldr	r0, [pc, #128]	; (8001368 <HardFault_Handler+0x9c>)
 80012e6:	f008 ff9f 	bl	800a228 <iprintf>

  if (SCB->HFSR & (1 << 30))
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HardFault_Handler+0x98>)
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d033      	beq.n	800135e <HardFault_Handler+0x92>
  {
    printf("BFAR:");
 80012f6:	481d      	ldr	r0, [pc, #116]	; (800136c <HardFault_Handler+0xa0>)
 80012f8:	f008 ff96 	bl	800a228 <iprintf>
    print_binary_section(SCB->BFAR, 0, 31);
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HardFault_Handler+0x98>)
 80012fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001300:	221f      	movs	r2, #31
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff87 	bl	8001218 <print_binary_section>
    printf("\n\r");
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <HardFault_Handler+0x9c>)
 800130c:	f008 ff8c 	bl	800a228 <iprintf>

    printf("CFSR:");
 8001310:	4817      	ldr	r0, [pc, #92]	; (8001370 <HardFault_Handler+0xa4>)
 8001312:	f008 ff89 	bl	800a228 <iprintf>
    print_binary_section(SCB->CFSR, 0, 31);
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HardFault_Handler+0x98>)
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	221f      	movs	r2, #31
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff7a 	bl	8001218 <print_binary_section>
    printf("\n\r");
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <HardFault_Handler+0x9c>)
 8001326:	f008 ff7f 	bl	800a228 <iprintf>

    printf("DFSR:");
 800132a:	4812      	ldr	r0, [pc, #72]	; (8001374 <HardFault_Handler+0xa8>)
 800132c:	f008 ff7c 	bl	800a228 <iprintf>
    print_binary_section(SCB->DFSR, 0, 31);
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HardFault_Handler+0x98>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	221f      	movs	r2, #31
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff6d 	bl	8001218 <print_binary_section>
    printf("\n\r");
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <HardFault_Handler+0x9c>)
 8001340:	f008 ff72 	bl	800a228 <iprintf>

    printf("AFSR:");
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <HardFault_Handler+0xac>)
 8001346:	f008 ff6f 	bl	800a228 <iprintf>
    print_binary_section(SCB->AFSR, 0, 31);
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HardFault_Handler+0x98>)
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	221f      	movs	r2, #31
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff60 	bl	8001218 <print_binary_section>
    printf("\n\r");
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <HardFault_Handler+0x9c>)
 800135a:	f008 ff65 	bl	800a228 <iprintf>
  // printf("HFSR:);
  // binary_printf("DFSR = 0x%b\r\n", SCB->DFSR);
  // binary_printf("AFSR = 0x%b\r\n", SCB->AFSR);

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x92>
 8001360:	0800b308 	.word	0x0800b308
 8001364:	e000ed00 	.word	0xe000ed00
 8001368:	0800b310 	.word	0x0800b310
 800136c:	0800b314 	.word	0x0800b314
 8001370:	0800b31c 	.word	0x0800b31c
 8001374:	0800b324 	.word	0x0800b324
 8001378:	0800b32c 	.word	0x0800b32c

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80013a0:	2020      	movs	r0, #32
 80013a2:	f000 fd3d 	bl	8001e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_REF_INT_Pin);
 80013ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b2:	f000 fd35 	bl	8001e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <TIM1_UP_IRQHandler+0x10>)
 80013c2:	f005 fa35 	bl	8006830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000334 	.word	0x20000334

080013d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
  }

  return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e009      	b.n	8001430 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8ed 	bl	8000604 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf1      	blt.n	800141c <_write+0x12>
  }
  return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_close>:

int _close(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	605a      	str	r2, [r3, #4]
  return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_isatty>:

int _isatty(int file)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f009 f870 	bl	800a5c0 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200c0000 	.word	0x200c0000
 800150c:	00000400 	.word	0x00000400
 8001510:	20000380 	.word	0x20000380
 8001514:	20041208 	.word	0x20041208

08001518 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <SystemInit+0x68>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <SystemInit+0x68>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <SystemInit+0x6c>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <SystemInit+0x6c>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <SystemInit+0x6c>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <SystemInit+0x6c>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <SystemInit+0x6c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <SystemInit+0x6c>)
 800154a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800154e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001552:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <SystemInit+0x6c>)
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <SystemInit+0x6c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <SystemInit+0x6c>)
 8001560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001564:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <SystemInit+0x6c>)
 8001568:	2200      	movs	r2, #0
 800156a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SystemInit+0x68>)
 800156e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001572:	609a      	str	r2, [r3, #8]
  #endif
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00
 8001584:	46020c00 	.word	0x46020c00

08001588 <gps_rcv_line>:
#include <stdlib.h>

extern UART_HandleTypeDef GPS_UART;

static HAL_StatusTypeDef gps_rcv_line(char *buffer, uint16_t length)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
    size_t i = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret;

    for (i = 0; i < length; i++)
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e016      	b.n	80015cc <gps_rcv_line+0x44>
    {
        ret = HAL_UART_Receive(&GPS_UART, (uint8_t *)&buffer[i], 1, HAL_MAX_DELAY);
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	18d1      	adds	r1, r2, r3
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	2201      	movs	r2, #1
 80015aa:	4810      	ldr	r0, [pc, #64]	; (80015ec <gps_rcv_line+0x64>)
 80015ac:	f005 fce6 	bl	8006f7c <HAL_UART_Receive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	72fb      	strb	r3, [r7, #11]

        if (buffer[i] == '\n' || ret != HAL_OK)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d009      	beq.n	80015d4 <gps_rcv_line+0x4c>
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <gps_rcv_line+0x4c>
    for (i = 0; i < length; i++)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3e4      	bcc.n	800159e <gps_rcv_line+0x16>
        {
            break;
        }
    }
    buffer[i + 1] = '\0';
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    return ret;
 80015e0:	7afb      	ldrb	r3, [r7, #11]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000020c 	.word	0x2000020c

080015f0 <get_len_of_cmd>:

size_t get_len_of_cmd(const char *str)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

	uint8_t i = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
    	while(i < 128 - 6)
 80015fc:	e01e      	b.n	800163c <get_len_of_cmd+0x4c>
        {
    	switch (str[i])
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b2a      	cmp	r3, #42	; 0x2a
 8001608:	dc15      	bgt.n	8001636 <get_len_of_cmd+0x46>
 800160a:	2b0d      	cmp	r3, #13
 800160c:	da04      	bge.n	8001618 <get_len_of_cmd+0x28>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00f      	beq.n	8001632 <get_len_of_cmd+0x42>
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d00d      	beq.n	8001632 <get_len_of_cmd+0x42>
 8001616:	e00e      	b.n	8001636 <get_len_of_cmd+0x46>
 8001618:	3b0d      	subs	r3, #13
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <get_len_of_cmd+0x60>)
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <get_len_of_cmd+0x46>
        case '\0':
        case '\n':
        case '\r':
        case '*':
        case ' ':
            return i;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	e006      	b.n	8001644 <get_len_of_cmd+0x54>
        }
        i++;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	3301      	adds	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
    	while(i < 128 - 6)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b79      	cmp	r3, #121	; 0x79
 8001640:	d9dd      	bls.n	80015fe <get_len_of_cmd+0xe>
        }

    return 0; // Invalid command
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20080001 	.word	0x20080001

08001654 <gps_send_line>:

static HAL_StatusTypeDef gps_send_line(const char *buffer)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]

	size_t cmdlen = get_len_of_cmd(buffer);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ffc5 	bl	80015f0 <get_len_of_cmd>
 8001666:	61b8      	str	r0, [r7, #24]
	const line_len = cmdlen + 6;// Buffer + '*'+ Checksum (2 Hex Chars) + CR + LF + null
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	3306      	adds	r3, #6
 800166c:	617b      	str	r3, [r7, #20]
	char *outbuf = (char *)malloc(line_len);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4618      	mov	r0, r3
 8001672:	f008 fc5b 	bl	8009f2c <malloc>
 8001676:	4603      	mov	r3, r0
 8001678:	613b      	str	r3, [r7, #16]
	if (outbuf == NULL)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <gps_send_line+0x30>
	{
		return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e031      	b.n	80016e8 <gps_send_line+0x94>
	}

	memcpy(outbuf, buffer, cmdlen);
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	6938      	ldr	r0, [r7, #16]
 800168a:	f008 ffc6 	bl	800a61a <memcpy>
	outbuf[cmdlen] = '\0';
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	4413      	add	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

	uint8_t chck = minmea_checksum(outbuf);
 8001698:	6938      	ldr	r0, [r7, #16]
 800169a:	f006 fa69 	bl	8007b70 <minmea_checksum>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
	sprintf(outbuf + cmdlen, "*%02X\n\r",chck );
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4413      	add	r3, r2
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	4911      	ldr	r1, [pc, #68]	; (80016f0 <gps_send_line+0x9c>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f008 fe31 	bl	800a314 <siprintf>
    if (minmea_check(outbuf, true))
 80016b2:	2101      	movs	r1, #1
 80016b4:	6938      	ldr	r0, [r7, #16]
 80016b6:	f006 fa7f 	bl	8007bb8 <minmea_check>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00d      	beq.n	80016dc <gps_send_line+0x88>
    {
        ret = HAL_UART_Transmit(&GPS_UART, outbuf, strlen(outbuf),HAL_MAX_DELAY);
 80016c0:	6938      	ldr	r0, [r7, #16]
 80016c2:	f7fe fddd 	bl	8000280 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	6939      	ldr	r1, [r7, #16]
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <gps_send_line+0xa0>)
 80016d2:	f005 fbb5 	bl	8006e40 <HAL_UART_Transmit>
 80016d6:	4603      	mov	r3, r0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	e001      	b.n	80016e0 <gps_send_line+0x8c>
    }
    else
    {
    	ret = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
    }

    free(outbuf);
 80016e0:	6938      	ldr	r0, [r7, #16]
 80016e2:	f008 fc2b 	bl	8009f3c <free>

    return ret;
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	0800b334 	.word	0x0800b334
 80016f4:	2000020c 	.word	0x2000020c

080016f8 <GPS_task>:

void GPS_task(void *pvParameters)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80016fe:	af00      	add	r7, sp, #0
 8001700:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001704:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001708:	6018      	str	r0, [r3, #0]
    char line[500] = {};
 800170a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800170e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	3304      	adds	r3, #4
 8001718:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f008 fef0 	bl	800a504 <memset>
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <GPS_task+0x90>)
 8001726:	f008 fded 	bl	800a304 <puts>
    HAL_StatusTypeDef ret = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
  //  	printf("line2 failed\n");
  //  }

    while (1)
    {
        ret =gps_send_line("$PGKC463");
 8001730:	4816      	ldr	r0, [pc, #88]	; (800178c <GPS_task+0x94>)
 8001732:	f7ff ff8f 	bl	8001654 <gps_send_line>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256

        delay_ms(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff fafa 	bl	8000d36 <delay_ms>
        size_t i = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
        HAL_StatusTypeDef ret;

        ret = gps_rcv_line(line, sizeof(line));
 8001748:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800174c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff19 	bl	8001588 <gps_rcv_line>
 8001756:	4603      	mov	r3, r0
 8001758:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        while (ret != HAL_OK)
 800175c:	e009      	b.n	8001772 <GPS_task+0x7a>
        {
            ret = gps_rcv_line(line, sizeof(line));
 800175e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001762:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff0e 	bl	8001588 <gps_rcv_line>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
        while (ret != HAL_OK)
 8001772:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f1      	bne.n	800175e <GPS_task+0x66>
        }

        printf("%s\n", line);
 800177a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800177e:	4618      	mov	r0, r3
 8001780:	f008 fdc0 	bl	800a304 <puts>



        continue;
 8001784:	bf00      	nop
    {
 8001786:	e7d3      	b.n	8001730 <GPS_task+0x38>
 8001788:	0800b33c 	.word	0x0800b33c
 800178c:	0800b350 	.word	0x0800b350

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001794:	f7ff fec0 	bl	8001518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001798:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800179a:	e003      	b.n	80017a4 <LoopCopyDataInit>

0800179c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800179e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017a2:	3104      	adds	r1, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017ac:	d3f6      	bcc.n	800179c <CopyDataInit>
	ldr	r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017b0:	e002      	b.n	80017b8 <LoopFillZerobss>

080017b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017b4:	f842 3b04 	str.w	r3, [r2], #4

080017b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <LoopForever+0x16>)
	cmp	r2, r3
 80017ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017bc:	d3f9      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f008 ff05 	bl	800a5cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7fe ff31 	bl	8000628 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80017c8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80017cc:	0800b600 	.word	0x0800b600
	ldr	r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017d4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80017d8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80017dc:	20041202 	.word	0x20041202

080017e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_Init+0x4c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_Init+0x4c>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f8f0 	bl	80019da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017fa:	f001 fef7 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_Init+0x50>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	490b      	ldr	r1, [pc, #44]	; (8001838 <HAL_Init+0x54>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x58>)
 8001812:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001814:	200f      	movs	r0, #15
 8001816:	f7ff fc8f 	bl	8001138 <HAL_InitTick>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e002      	b.n	800182a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fa92 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40022000 	.word	0x40022000
 8001834:	46020c00 	.word	0x46020c00
 8001838:	0800b3bc 	.word	0x0800b3bc
 800183c:	20000000 	.word	0x20000000

08001840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	20000384 	.word	0x20000384

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000384 	.word	0x20000384

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff4c 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019fe:	f7ff ff63 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	6978      	ldr	r0, [r7, #20]
 8001a0a:	f7ff ffb3 	bl	8001974 <NVIC_EncodePriority>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff82 	bl	8001920 <__NVIC_SetPriority>
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff56 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a52:	e1ba      	b.n	8001dca <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 81aa 	beq.w	8001dc4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_GPIO_Init+0x188>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d15d      	bne.n	8001b34 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001aa8:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x18c>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ab0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001ab2:	4a46      	ldr	r2, [pc, #280]	; (8001bcc <HAL_GPIO_Init+0x18c>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220b      	movs	r2, #11
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69f9      	ldr	r1, [r7, #28]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2202      	movs	r2, #2
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e067      	b.n	8001c04 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x104>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b12      	cmp	r3, #18
 8001b42:	d145      	bne.n	8001bd0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f003 020f 	and.w	r2, r3, #15
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	69f9      	ldr	r1, [r7, #28]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e01e      	b.n	8001c04 <HAL_GPIO_Init+0x1c4>
 8001bc6:	bf00      	nop
 8001bc8:	46020000 	.word	0x46020000
 8001bcc:	0800b414 	.word	0x0800b414
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d00b      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c18:	2b11      	cmp	r3, #17
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d130      	bne.n	8001c86 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 0201 	and.w	r2, r3, #1
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d017      	beq.n	8001cbe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d07c      	beq.n	8001dc4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001cca:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3318      	adds	r3, #24
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0a9a      	lsrs	r2, r3, #10
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_GPIO_Init+0x3ac>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d06:	4938      	ldr	r1, [pc, #224]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3318      	adds	r3, #24
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001d62:	4a21      	ldr	r2, [pc, #132]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_GPIO_Init+0x3a8>)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f ae3d 	bne.w	8001a54 <HAL_GPIO_Init+0x14>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	3724      	adds	r7, #36	; 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	46022000 	.word	0x46022000
 8001dec:	002f7f7f 	.word	0x002f7f7f

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001e36:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f814 	bl	8001e6c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f812 	bl	8001e82 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	46022000 	.word	0x46022000

08001e6c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08d      	b.n	8001fc6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe ff62 	bl	8000d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e006      	b.n	8001f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d108      	bne.n	8001f3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	e007      	b.n	8001f4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69d9      	ldr	r1, [r3, #28]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d138      	bne.n	8002056 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e032      	b.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2224      	movs	r2, #36	; 0x24
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002020:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6819      	ldr	r1, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b20      	cmp	r3, #32
 8002078:	d139      	bne.n	80020ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002084:	2302      	movs	r3, #2
 8002086:	e033      	b.n	80020f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2224      	movs	r2, #36	; 0x24
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e007      	b.n	800212a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0204 	bic.w	r2, r3, #4
 8002122:	4905      	ldr	r1, [pc, #20]	; (8002138 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
  }

  return status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40030400 	.word	0x40030400

0800213c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_ICACHE_Enable+0x1c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_ICACHE_Enable+0x1c>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40030400 	.word	0x40030400

0800215c <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e059      	b.n	8002222 <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_PWR_ConfigPVD+0xd4>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	492d      	ldr	r1, [pc, #180]	; (8002230 <HAL_PWR_ConfigPVD+0xd4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002180:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 8002182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002186:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 8002192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a20      	ldr	r2, [pc, #128]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ca:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a06      	ldr	r2, [pc, #24]	; (8002234 <HAL_PWR_ConfigPVD+0xd8>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221e:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	46020800 	.word	0x46020800
 8002234:	46022000 	.word	0x46022000

08002238 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_PWR_EnablePVD+0x1c>)
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_PWR_EnablePVD+0x1c>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6113      	str	r3, [r2, #16]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	46020800 	.word	0x46020800

08002258 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002260:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002268:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d10b      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d905      	bls.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800227a:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a32      	ldr	r2, [pc, #200]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002284:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e057      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d90a      	bls.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	60d3      	str	r3, [r2, #12]
 80022a6:	e007      	b.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80022b0:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	2232      	movs	r2, #50	; 0x32
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	4a21      	ldr	r2, [pc, #132]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	3301      	adds	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80022d6:	e002      	b.n	80022de <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3b01      	subs	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f3      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01b      	beq.n	800232e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	2232      	movs	r2, #50	; 0x32
 8002304:	fb02 f303 	mul.w	r3, r2, r3
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	3301      	adds	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002314:	e002      	b.n	800231c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3b01      	subs	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f3      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e000      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	46020800 	.word	0x46020800
 800234c:	20000000 	.word	0x20000000
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_PWREx_GetVoltageRange+0x18>)
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	46020800 	.word	0x46020800

08002370 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_PWREx_ConfigSupply+0x94>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_PWREx_ConfigSupply+0x98>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	2232      	movs	r2, #50	; 0x32
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_PWREx_ConfigSupply+0x98>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d113      	bne.n	80023c4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_PWREx_ConfigSupply+0x9c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_PWREx_ConfigSupply+0x9c>)
 80023a2:	f023 0302 	bic.w	r3, r3, #2
 80023a6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80023a8:	e002      	b.n	80023b0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_PWREx_ConfigSupply+0x9c>)
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d116      	bne.n	80023ea <HAL_PWREx_ConfigSupply+0x7a>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f3      	bne.n	80023aa <HAL_PWREx_ConfigSupply+0x3a>
 80023c2:	e012      	b.n	80023ea <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_PWREx_ConfigSupply+0x9c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_PWREx_ConfigSupply+0x9c>)
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80023d0:	e002      	b.n	80023d8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_PWREx_ConfigSupply+0x9c>)
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <HAL_PWREx_ConfigSupply+0x7a>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f3      	bne.n	80023d2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e000      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000
 8002408:	10624dd3 	.word	0x10624dd3
 800240c:	46020800 	.word	0x46020800

08002410 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_PWREx_EnableVddIO2+0x1c>)
 800241a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800241e:	6113      	str	r3, [r2, #16]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	46020800 	.word	0x46020800

08002430 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	46020800 	.word	0x46020800

08002450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f000 bec8 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b99      	ldr	r3, [pc, #612]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002474:	4b96      	ldr	r3, [pc, #600]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 816c 	beq.w	8002764 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_RCC_OscConfig+0x52>
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	2b0c      	cmp	r3, #12
 8002496:	f040 80de 	bne.w	8002656 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	2b01      	cmp	r3, #1
 800249e:	f040 80da 	bne.w	8002656 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f000 bea5 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b4:	4b86      	ldr	r3, [pc, #536]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_RCC_OscConfig+0x7a>
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024c8:	e005      	b.n	80024d6 <HAL_RCC_OscConfig+0x86>
 80024ca:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024d0:	041b      	lsls	r3, r3, #16
 80024d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d255      	bcs.n	8002586 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 fa11 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f000 be82 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002500:	6093      	str	r3, [r2, #8]
 8002502:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	4970      	ldr	r1, [pc, #448]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800251c:	d309      	bcc.n	8002532 <HAL_RCC_OscConfig+0xe2>
 800251e:	4b6c      	ldr	r3, [pc, #432]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 021f 	bic.w	r2, r3, #31
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4969      	ldr	r1, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800252c:	4313      	orrs	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
 8002530:	e07e      	b.n	8002630 <HAL_RCC_OscConfig+0x1e0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	da0a      	bge.n	8002550 <HAL_RCC_OscConfig+0x100>
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	4961      	ldr	r1, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800254a:	4313      	orrs	r3, r2
 800254c:	60cb      	str	r3, [r1, #12]
 800254e:	e06f      	b.n	8002630 <HAL_RCC_OscConfig+0x1e0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d30a      	bcc.n	8002570 <HAL_RCC_OscConfig+0x120>
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	029b      	lsls	r3, r3, #10
 8002568:	4959      	ldr	r1, [pc, #356]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800256a:	4313      	orrs	r3, r2
 800256c:	60cb      	str	r3, [r1, #12]
 800256e:	e05f      	b.n	8002630 <HAL_RCC_OscConfig+0x1e0>
 8002570:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	03db      	lsls	r3, r3, #15
 800257e:	4954      	ldr	r1, [pc, #336]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
 8002584:	e054      	b.n	8002630 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002586:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4a51      	ldr	r2, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800258c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002590:	6093      	str	r3, [r2, #8]
 8002592:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	494c      	ldr	r1, [pc, #304]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025ac:	d309      	bcc.n	80025c2 <HAL_RCC_OscConfig+0x172>
 80025ae:	4b48      	ldr	r3, [pc, #288]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 021f 	bic.w	r2, r3, #31
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4945      	ldr	r1, [pc, #276]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
 80025c0:	e028      	b.n	8002614 <HAL_RCC_OscConfig+0x1c4>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da0a      	bge.n	80025e0 <HAL_RCC_OscConfig+0x190>
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	493d      	ldr	r1, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
 80025de:	e019      	b.n	8002614 <HAL_RCC_OscConfig+0x1c4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d30a      	bcc.n	8002600 <HAL_RCC_OscConfig+0x1b0>
 80025ea:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	029b      	lsls	r3, r3, #10
 80025f8:	4935      	ldr	r1, [pc, #212]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
 80025fe:	e009      	b.n	8002614 <HAL_RCC_OscConfig+0x1c4>
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	03db      	lsls	r3, r3, #15
 800260e:	4930      	ldr	r1, [pc, #192]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	4618      	mov	r0, r3
 8002620:	f001 f974 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f000 bde5 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002630:	f001 f8de 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x284>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fd7d 	bl	8001138 <HAL_InitTick>
 800263e:	4603      	mov	r3, r0
 8002640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 808a 	beq.w	8002762 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800264e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002652:	f000 bdd2 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d066      	beq.n	800272c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800266a:	f7ff f8fd 	bl	8001868 <HAL_GetTick>
 800266e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002670:	e009      	b.n	8002686 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002672:	f7ff f8f9 	bl	8001868 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d902      	bls.n	8002686 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	f000 bdba 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ef      	beq.n	8002672 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800269c:	6093      	str	r3, [r2, #8]
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80026b8:	d30e      	bcc.n	80026d8 <HAL_RCC_OscConfig+0x288>
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 021f 	bic.w	r2, r3, #31
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4902      	ldr	r1, [pc, #8]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60cb      	str	r3, [r1, #12]
 80026cc:	e04a      	b.n	8002764 <HAL_RCC_OscConfig+0x314>
 80026ce:	bf00      	nop
 80026d0:	46020c00 	.word	0x46020c00
 80026d4:	20000004 	.word	0x20000004
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da0a      	bge.n	80026f6 <HAL_RCC_OscConfig+0x2a6>
 80026e0:	4b98      	ldr	r3, [pc, #608]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	015b      	lsls	r3, r3, #5
 80026ee:	4995      	ldr	r1, [pc, #596]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
 80026f4:	e036      	b.n	8002764 <HAL_RCC_OscConfig+0x314>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fe:	d30a      	bcc.n	8002716 <HAL_RCC_OscConfig+0x2c6>
 8002700:	4b90      	ldr	r3, [pc, #576]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	029b      	lsls	r3, r3, #10
 800270e:	498d      	ldr	r1, [pc, #564]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
 8002714:	e026      	b.n	8002764 <HAL_RCC_OscConfig+0x314>
 8002716:	4b8b      	ldr	r3, [pc, #556]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	03db      	lsls	r3, r3, #15
 8002724:	4987      	ldr	r1, [pc, #540]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	60cb      	str	r3, [r1, #12]
 800272a:	e01b      	b.n	8002764 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800272c:	4b85      	ldr	r3, [pc, #532]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a84      	ldr	r2, [pc, #528]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002738:	f7ff f896 	bl	8001868 <HAL_GetTick>
 800273c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800273e:	e009      	b.n	8002754 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002740:	f7ff f892 	bl	8001868 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	f000 bd53 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002754:	4b7b      	ldr	r3, [pc, #492]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ef      	bne.n	8002740 <HAL_RCC_OscConfig+0x2f0>
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002762:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 808b 	beq.w	8002888 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	2b08      	cmp	r3, #8
 8002776:	d005      	beq.n	8002784 <HAL_RCC_OscConfig+0x334>
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d109      	bne.n	8002792 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	2b03      	cmp	r3, #3
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17d      	bne.n	8002888 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f000 bd34 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x35a>
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a68      	ldr	r2, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e041      	b.n	800282e <HAL_RCC_OscConfig+0x3de>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b2:	d112      	bne.n	80027da <HAL_RCC_OscConfig+0x38a>
 80027b4:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a62      	ldr	r2, [pc, #392]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b60      	ldr	r3, [pc, #384]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a5f      	ldr	r2, [pc, #380]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e029      	b.n	800282e <HAL_RCC_OscConfig+0x3de>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80027e2:	d112      	bne.n	800280a <HAL_RCC_OscConfig+0x3ba>
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b54      	ldr	r3, [pc, #336]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a53      	ldr	r2, [pc, #332]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b51      	ldr	r3, [pc, #324]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e011      	b.n	800282e <HAL_RCC_OscConfig+0x3de>
 800280a:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4a      	ldr	r2, [pc, #296]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a47      	ldr	r2, [pc, #284]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800282c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d014      	beq.n	8002860 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002836:	f7ff f817 	bl	8001868 <HAL_GetTick>
 800283a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283c:	e009      	b.n	8002852 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283e:	f7ff f813 	bl	8001868 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b64      	cmp	r3, #100	; 0x64
 800284a:	d902      	bls.n	8002852 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	f000 bcd4 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	4b3c      	ldr	r3, [pc, #240]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ef      	beq.n	800283e <HAL_RCC_OscConfig+0x3ee>
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002860:	f7ff f802 	bl	8001868 <HAL_GetTick>
 8002864:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002866:	e009      	b.n	800287c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fffe 	bl	8001868 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d902      	bls.n	800287c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	f000 bcbf 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ef      	bne.n	8002868 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05f      	beq.n	8002954 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	2b04      	cmp	r3, #4
 8002898:	d005      	beq.n	80028a6 <HAL_RCC_OscConfig+0x456>
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d114      	bne.n	80028ca <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d111      	bne.n	80028ca <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f000 bca3 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	4920      	ldr	r1, [pc, #128]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028c8:	e044      	b.n	8002954 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80028de:	f7fe ffc3 	bl	8001868 <HAL_GetTick>
 80028e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e4:	e009      	b.n	80028fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe ffbf 	bl	8001868 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d902      	bls.n	80028fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f000 bc80 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ef      	beq.n	80028e6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	490b      	ldr	r1, [pc, #44]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_RCC_OscConfig+0x4f4>)
 8002922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002928:	f7fe ff9e 	bl	8001868 <HAL_GetTick>
 800292c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7fe ff9a 	bl	8001868 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d904      	bls.n	8002948 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	f000 bc5b 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
 8002944:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002948:	4baf      	ldr	r3, [pc, #700]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1ed      	bne.n	8002930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80c8 	beq.w	8002af2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002968:	4ba7      	ldr	r3, [pc, #668]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d111      	bne.n	800299a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4ba4      	ldr	r3, [pc, #656]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297c:	4aa2      	ldr	r2, [pc, #648]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002986:	4ba0      	ldr	r3, [pc, #640]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800299a:	4b9c      	ldr	r3, [pc, #624]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d119      	bne.n	80029da <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029a6:	4b99      	ldr	r3, [pc, #612]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	4a98      	ldr	r2, [pc, #608]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7fe ff59 	bl	8001868 <HAL_GetTick>
 80029b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029b8:	e009      	b.n	80029ce <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe ff55 	bl	8001868 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d902      	bls.n	80029ce <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	f000 bc16 	b.w	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029ce:	4b8f      	ldr	r3, [pc, #572]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ef      	beq.n	80029ba <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d05f      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80029e2:	4b89      	ldr	r3, [pc, #548]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 80029e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029e8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d037      	beq.n	8002a68 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e3f4      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01b      	beq.n	8002a52 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a1a:	4b7b      	ldr	r3, [pc, #492]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a20:	4a79      	ldr	r2, [pc, #484]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a22:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002a26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002a2a:	f7fe ff1d 	bl	8001868 <HAL_GetTick>
 8002a2e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe ff19 	bl	8001868 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e3da      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a44:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ef      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002a52:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a58:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4969      	ldr	r1, [pc, #420]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002a68:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a6e:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002a78:	f7fe fef6 	bl	8001868 <HAL_GetTick>
 8002a7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fef2 	bl	8001868 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e3b3      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a92:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCC_OscConfig+0x630>
 8002aa0:	e01b      	b.n	8002ada <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002aa2:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002aaa:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002aae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002ab2:	f7fe fed9 	bl	8001868 <HAL_GetTick>
 8002ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe fed5 	bl	8001868 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e396      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002acc:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ef      	bne.n	8002aba <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ada:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae8:	4a47      	ldr	r2, [pc, #284]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8111 	beq.w	8002d22 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b06:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b14:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b38:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d118      	bne.n	8002b76 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fe8a 	bl	8001868 <HAL_GetTick>
 8002b54:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fe fe86 	bl	8001868 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e347      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_RCC_OscConfig+0x7bc>)
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01f      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bae:	e018      	b.n	8002be2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bc0:	e00f      	b.n	8002be2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bc8:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bd8:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x7b8>)
 8002bda:	f023 0304 	bic.w	r3, r3, #4
 8002bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d057      	beq.n	8002c9a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002bea:	f7fe fe3d 	bl	8001868 <HAL_GetTick>
 8002bee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf0:	e00e      	b.n	8002c10 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe fe39 	bl	8001868 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d905      	bls.n	8002c10 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e2f8      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
 8002c08:	46020c00 	.word	0x46020c00
 8002c0c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c10:	4b9c      	ldr	r3, [pc, #624]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0e9      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c2a:	4b96      	ldr	r3, [pc, #600]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c30:	4a94      	ldr	r2, [pc, #592]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fe14 	bl	8001868 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e2d3      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c52:	4b8c      	ldr	r3, [pc, #560]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ed      	beq.n	8002c3c <HAL_RCC_OscConfig+0x7ec>
 8002c60:	e053      	b.n	8002d0a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c68:	4a86      	ldr	r2, [pc, #536]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe fdf8 	bl	8001868 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2b7      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c8a:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ed      	bne.n	8002c74 <HAL_RCC_OscConfig+0x824>
 8002c98:	e037      	b.n	8002d0a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fde5 	bl	8001868 <HAL_GetTick>
 8002c9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe fde1 	bl	8001868 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e2a0      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb8:	4b72      	ldr	r3, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ed      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01a      	beq.n	8002d0a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cda:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fdbf 	bl	8001868 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e27e      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ed      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d18:	4a5a      	ldr	r2, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d1a:	f023 0304 	bic.w	r3, r3, #4
 8002d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d036      	beq.n	8002d9c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d40:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d42:	f7fe fd91 	bl	8001868 <HAL_GetTick>
 8002d46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4a:	f7fe fd8d 	bl	8001868 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e24e      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002d5c:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x8fa>
 8002d68:	e018      	b.n	8002d9c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002d6a:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a45      	ldr	r2, [pc, #276]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d74:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d76:	f7fe fd77 	bl	8001868 <HAL_GetTick>
 8002d7a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7e:	f7fe fd73 	bl	8001868 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e234      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d90:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d036      	beq.n	8002e16 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d019      	beq.n	8002de4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dbc:	f7fe fd54 	bl	8001868 <HAL_GetTick>
 8002dc0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fd50 	bl	8001868 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e211      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x974>
 8002de2:	e018      	b.n	8002e16 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002df0:	f7fe fd3a 	bl	8001868 <HAL_GetTick>
 8002df4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002df8:	f7fe fd36 	bl	8001868 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1f7      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d07f      	beq.n	8002f22 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d062      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e34:	6093      	str	r3, [r2, #8]
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	4910      	ldr	r1, [pc, #64]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e50:	d309      	bcc.n	8002e66 <HAL_RCC_OscConfig+0xa16>
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 021f 	bic.w	r2, r3, #31
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4909      	ldr	r1, [pc, #36]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
 8002e64:	e02a      	b.n	8002ebc <HAL_RCC_OscConfig+0xa6c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da0c      	bge.n	8002e88 <HAL_RCC_OscConfig+0xa38>
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	4901      	ldr	r1, [pc, #4]	; (8002e84 <HAL_RCC_OscConfig+0xa34>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60cb      	str	r3, [r1, #12]
 8002e82:	e01b      	b.n	8002ebc <HAL_RCC_OscConfig+0xa6c>
 8002e84:	46020c00 	.word	0x46020c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d30a      	bcc.n	8002ea8 <HAL_RCC_OscConfig+0xa58>
 8002e92:	4ba1      	ldr	r3, [pc, #644]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	499d      	ldr	r1, [pc, #628]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]
 8002ea6:	e009      	b.n	8002ebc <HAL_RCC_OscConfig+0xa6c>
 8002ea8:	4b9b      	ldr	r3, [pc, #620]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	03db      	lsls	r3, r3, #15
 8002eb6:	4998      	ldr	r1, [pc, #608]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002ebc:	4b96      	ldr	r3, [pc, #600]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a95      	ldr	r2, [pc, #596]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ec2:	f043 0310 	orr.w	r3, r3, #16
 8002ec6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ec8:	f7fe fcce 	bl	8001868 <HAL_GetTick>
 8002ecc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ed0:	f7fe fcca 	bl	8001868 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e18b      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xa80>
 8002eee:	e018      	b.n	8002f22 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002ef0:	4b89      	ldr	r3, [pc, #548]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a88      	ldr	r2, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ef6:	f023 0310 	bic.w	r3, r3, #16
 8002efa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002efc:	f7fe fcb4 	bl	8001868 <HAL_GetTick>
 8002f00:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f04:	f7fe fcb0 	bl	8001868 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e171      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f16:	4b80      	ldr	r3, [pc, #512]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8166 	beq.w	80031f8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f32:	4b79      	ldr	r3, [pc, #484]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	f000 80f2 	beq.w	8003124 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	f040 80c5 	bne.w	80030d4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b73      	ldr	r3, [pc, #460]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a72      	ldr	r2, [pc, #456]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f54:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f56:	f7fe fc87 	bl	8001868 <HAL_GetTick>
 8002f5a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe fc83 	bl	8001868 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e144      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f70:	4b69      	ldr	r3, [pc, #420]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7c:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d111      	bne.n	8002fae <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	4a61      	ldr	r2, [pc, #388]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002fae:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0xccc>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fba:	d102      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002fc2:	4b56      	ldr	r3, [pc, #344]	; (800311c <HAL_RCC_OscConfig+0xccc>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a55      	ldr	r2, [pc, #340]	; (800311c <HAL_RCC_OscConfig+0xccc>)
 8002fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fcc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002fce:	4b52      	ldr	r3, [pc, #328]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0212      	lsls	r2, r2, #8
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fec:	430a      	orrs	r2, r1
 8002fee:	494a      	ldr	r1, [pc, #296]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	628b      	str	r3, [r1, #40]	; 0x28
 8002ff4:	4b48      	ldr	r3, [pc, #288]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8002ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_RCC_OscConfig+0xcd0>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003000:	3a01      	subs	r2, #1
 8003002:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800300a:	3a01      	subs	r2, #1
 800300c:	0252      	lsls	r2, r2, #9
 800300e:	b292      	uxth	r2, r2
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003016:	3a01      	subs	r2, #1
 8003018:	0412      	lsls	r2, r2, #16
 800301a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003024:	3a01      	subs	r2, #1
 8003026:	0612      	lsls	r2, r2, #24
 8003028:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800302c:	430a      	orrs	r2, r1
 800302e:	493a      	ldr	r1, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003034:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	4a37      	ldr	r2, [pc, #220]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 800303a:	f023 0310 	bic.w	r3, r3, #16
 800303e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	4a34      	ldr	r2, [pc, #208]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800304a:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	4a32      	ldr	r2, [pc, #200]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003050:	f043 0310 	orr.w	r3, r3, #16
 8003054:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003056:	4b30      	ldr	r3, [pc, #192]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	f023 020c 	bic.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	492d      	ldr	r1, [pc, #180]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003064:	4313      	orrs	r3, r2
 8003066:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_RCC_OscConfig+0xccc>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_RCC_OscConfig+0xccc>)
 8003076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800307a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800307c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308a:	4a23      	ldr	r2, [pc, #140]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 800309a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800309e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030ac:	f7fe fbdc 	bl	8001868 <HAL_GetTick>
 80030b0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe fbd8 	bl	8001868 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e099      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc64>
 80030d2:	e091      	b.n	80031f8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0f      	ldr	r2, [pc, #60]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80030e0:	f7fe fbc2 	bl	8001868 <HAL_GetTick>
 80030e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fbbe 	bl	8001868 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	4a03      	ldr	r2, [pc, #12]	; (8003118 <HAL_RCC_OscConfig+0xcc8>)
 800310c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003110:	f023 0303 	bic.w	r3, r3, #3
 8003114:	6293      	str	r3, [r2, #40]	; 0x28
 8003116:	e06f      	b.n	80031f8 <HAL_RCC_OscConfig+0xda8>
 8003118:	46020c00 	.word	0x46020c00
 800311c:	46020800 	.word	0x46020800
 8003120:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003124:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	2b01      	cmp	r3, #1
 8003136:	d039      	beq.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0203 	and.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d132      	bne.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d129      	bne.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d122      	bne.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	0a5b      	lsrs	r3, r3, #9
 800317a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003194:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d108      	bne.n	80031ac <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	0e1b      	lsrs	r3, r3, #24
 800319e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e024      	b.n	80031fa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	08db      	lsrs	r3, r3, #3
 80031b6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031be:	429a      	cmp	r2, r3
 80031c0:	d01a      	beq.n	80031f8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 80031c8:	f023 0310 	bic.w	r3, r3, #16
 80031cc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fb4b 	bl	8001868 <HAL_GetTick>
 80031d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80031d4:	bf00      	nop
 80031d6:	f7fe fb47 	bl	8001868 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	4293      	cmp	r3, r2
 80031e0:	d0f9      	beq.n	80031d6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	4a04      	ldr	r2, [pc, #16]	; (8003204 <HAL_RCC_OscConfig+0xdb4>)
 80031f2:	f043 0310 	orr.w	r3, r3, #16
 80031f6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3738      	adds	r7, #56	; 0x38
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	46020c00 	.word	0x46020c00

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e1d9      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b9b      	ldr	r3, [pc, #620]	; (800348c <HAL_RCC_ClockConfig+0x284>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b98      	ldr	r3, [pc, #608]	; (800348c <HAL_RCC_ClockConfig+0x284>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4996      	ldr	r1, [pc, #600]	; (800348c <HAL_RCC_ClockConfig+0x284>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b94      	ldr	r3, [pc, #592]	; (800348c <HAL_RCC_ClockConfig+0x284>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e1c1      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	4b8c      	ldr	r3, [pc, #560]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003264:	429a      	cmp	r2, r3
 8003266:	d908      	bls.n	800327a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003268:	4b89      	ldr	r3, [pc, #548]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	4986      	ldr	r1, [pc, #536]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003276:	4313      	orrs	r3, r2
 8003278:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d012      	beq.n	80032ac <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	4b81      	ldr	r3, [pc, #516]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003294:	429a      	cmp	r2, r3
 8003296:	d909      	bls.n	80032ac <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003298:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	497a      	ldr	r1, [pc, #488]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	4b74      	ldr	r3, [pc, #464]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d908      	bls.n	80032da <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80032c8:	4b71      	ldr	r3, [pc, #452]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	496e      	ldr	r1, [pc, #440]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	4b69      	ldr	r3, [pc, #420]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d908      	bls.n	8003308 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80032f6:	4b66      	ldr	r3, [pc, #408]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 020f 	bic.w	r2, r3, #15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4963      	ldr	r1, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003304:	4313      	orrs	r3, r2
 8003306:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80d2 	beq.w	80034ba <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d143      	bne.n	80033aa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003322:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d110      	bne.n	8003352 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	4a56      	ldr	r2, [pc, #344]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003352:	f7fe fa89 	bl	8001868 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003358:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <HAL_RCC_ClockConfig+0x28c>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00f      	beq.n	8003384 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003366:	f7fe fa7f 	bl	8001868 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e12b      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003378:	4b46      	ldr	r3, [pc, #280]	; (8003494 <HAL_RCC_ClockConfig+0x28c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003390:	4a3f      	ldr	r2, [pc, #252]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003392:	f023 0304 	bic.w	r3, r3, #4
 8003396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d121      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e112      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e106      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0fa      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033da:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0f2      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4926      	ldr	r1, [pc, #152]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80033fc:	f7fe fa34 	bl	8001868 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d112      	bne.n	8003430 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fa2c 	bl	8001868 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0d6      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d1ee      	bne.n	800340c <HAL_RCC_ClockConfig+0x204>
 800342e:	e044      	b.n	80034ba <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d112      	bne.n	800345e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343a:	f7fe fa15 	bl	8001868 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0bf      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_ClockConfig+0x232>
 800345c:	e02d      	b.n	80034ba <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d123      	bne.n	80034ae <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fe f9fe 	bl	8001868 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0a8      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <HAL_RCC_ClockConfig+0x288>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ee      	bne.n	8003468 <HAL_RCC_ClockConfig+0x260>
 800348a:	e016      	b.n	80034ba <HAL_RCC_ClockConfig+0x2b2>
 800348c:	40022000 	.word	0x40022000
 8003490:	46020c00 	.word	0x46020c00
 8003494:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe f9e6 	bl	8001868 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e090      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d208      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80034d6:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 020f 	bic.w	r2, r3, #15
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	493d      	ldr	r1, [pc, #244]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_RCC_ClockConfig+0x3d4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d210      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_RCC_ClockConfig+0x3d4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 020f 	bic.w	r2, r3, #15
 80034fe:	4937      	ldr	r1, [pc, #220]	; (80035dc <HAL_RCC_ClockConfig+0x3d4>)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b35      	ldr	r3, [pc, #212]	; (80035dc <HAL_RCC_ClockConfig+0x3d4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e05b      	b.n	80035d0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003530:	429a      	cmp	r2, r3
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4925      	ldr	r1, [pc, #148]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003560:	429a      	cmp	r2, r3
 8003562:	d209      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4919      	ldr	r1, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003590:	429a      	cmp	r2, r3
 8003592:	d208      	bcs.n	80035a6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	490d      	ldr	r1, [pc, #52]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80035a6:	f000 f821 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x3d0>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x3d8>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x3dc>)
 80035be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x3e0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fdb7 	bl	8001138 <HAL_InitTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	46020c00 	.word	0x46020c00
 80035dc:	40022000 	.word	0x40022000
 80035e0:	0800b3bc 	.word	0x0800b3bc
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b08b      	sub	sp, #44	; 0x2c
 80035f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	4b78      	ldr	r3, [pc, #480]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003604:	4b75      	ldr	r3, [pc, #468]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x34>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d121      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d11e      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003620:	4b6e      	ldr	r3, [pc, #440]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800362c:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800362e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003632:	0b1b      	lsrs	r3, r3, #12
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e005      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800363c:	4b67      	ldr	r3, [pc, #412]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	0f1b      	lsrs	r3, r3, #28
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003648:	4a65      	ldr	r2, [pc, #404]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d110      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800365c:	e00d      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365e:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d102      	bne.n	8003670 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800366a:	4b5e      	ldr	r3, [pc, #376]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	e004      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d101      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003678:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	f040 80a5 	bne.w	80037cc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003682:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800368c:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036a6:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	08db      	lsrs	r3, r3, #3
 80036ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d003      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xe4>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d022      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x128>
 80036ce:	e043      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036da:	eddf 6a43 	vldr	s13, [pc, #268]	; 80037e8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e2:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036f2:	ed97 6a01 	vldr	s12, [r7, #4]
 80036f6:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80037ec <HAL_RCC_GetSysClockFreq+0x200>
 80036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003706:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003712:	e046      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eddf 6a32 	vldr	s13, [pc, #200]	; 80037e8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003736:	ed97 6a01 	vldr	s12, [r7, #4]
 800373a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80037ec <HAL_RCC_GetSysClockFreq+0x200>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003756:	e024      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003780:	ed97 6a01 	vldr	s12, [r7, #4]
 8003784:	eddf 5a19 	vldr	s11, [pc, #100]	; 80037ec <HAL_RCC_GetSysClockFreq+0x200>
 8003788:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800378c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003794:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037a0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	0e1b      	lsrs	r3, r3, #24
 80037a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ac:	3301      	adds	r3, #1
 80037ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80037be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c6:	ee17 3a90 	vmov	r3, s15
 80037ca:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	372c      	adds	r7, #44	; 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	46020c00 	.word	0x46020c00
 80037e0:	0800b3d4 	.word	0x0800b3d4
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	4b742400 	.word	0x4b742400
 80037ec:	46000000 	.word	0x46000000

080037f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80037f4:	f7ff fefa 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_RCC_GetHCLKFreq+0x28>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	4906      	ldr	r1, [pc, #24]	; (800381c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <HAL_RCC_GetHCLKFreq+0x30>)
 800380c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <HAL_RCC_GetHCLKFreq+0x30>)
 8003810:	681b      	ldr	r3, [r3, #0]
}
 8003812:	4618      	mov	r0, r3
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	46020c00 	.word	0x46020c00
 800381c:	0800b3bc 	.word	0x0800b3bc
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003828:	f7ff ffe2 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	46020c00 	.word	0x46020c00
 8003848:	0800b3cc 	.word	0x0800b3cc

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003850:	f7ff ffce 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	46020c00 	.word	0x46020c00
 8003870:	0800b3cc 	.word	0x0800b3cc

08003874 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003878:	f7ff ffba 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	; (8003898 <HAL_RCC_GetPCLK3Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	46020c00 	.word	0x46020c00
 8003898:	0800b3cc 	.word	0x0800b3cc

0800389c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	221f      	movs	r2, #31
 80038aa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_RCC_GetClockConfig+0x68>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f003 0203 	and.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCC_GetClockConfig+0x68>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 020f 	and.w	r2, r3, #15
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_RCC_GetClockConfig+0x68>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_RCC_GetClockConfig+0x68>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_GetClockConfig+0x68>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <HAL_RCC_GetClockConfig+0x6c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	46020c00 	.word	0x46020c00
 8003908:	40022000 	.word	0x40022000

0800390c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003922:	f7fe fd17 	bl	8002354 <HAL_PWREx_GetVoltageRange>
 8003926:	6178      	str	r0, [r7, #20]
 8003928:	e019      	b.n	800395e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800393c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003948:	f7fe fd04 	bl	8002354 <HAL_PWREx_GetVoltageRange>
 800394c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003964:	d003      	beq.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800396c:	d109      	bne.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003974:	d202      	bcs.n	800397c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003976:	2301      	movs	r3, #1
 8003978:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800397a:	e033      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003980:	e030      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003988:	d208      	bcs.n	800399c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d102      	bne.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003992:	2303      	movs	r3, #3
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e025      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e035      	b.n	8003a08 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a2:	d90f      	bls.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b0:	d902      	bls.n	80039b8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	e015      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80039b8:	2301      	movs	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e012      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e00f      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ca:	d109      	bne.n	80039e0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d102      	bne.n	80039da <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80039d4:	2301      	movs	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e004      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80039da:	2302      	movs	r3, #2
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e001      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80039e0:	2301      	movs	r3, #1
 80039e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f023 020f 	bic.w	r2, r3, #15
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	46020c00 	.word	0x46020c00
 8003a14:	40022000 	.word	0x40022000

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a1c:	b0b8      	sub	sp, #224	; 0xe0
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f002 0401 	and.w	r4, r2, #1
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	ea54 0305 	orrs.w	r3, r4, r5
 8003a42:	d00b      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003a44:	4bca      	ldr	r3, [pc, #808]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4a:	f023 0103 	bic.w	r1, r3, #3
 8003a4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	4ac6      	ldr	r2, [pc, #792]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 0802 	and.w	r8, r2, #2
 8003a68:	f04f 0900 	mov.w	r9, #0
 8003a6c:	ea58 0309 	orrs.w	r3, r8, r9
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003a72:	4bbf      	ldr	r3, [pc, #764]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a78:	f023 010c 	bic.w	r1, r3, #12
 8003a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	4abb      	ldr	r2, [pc, #748]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	f002 0a04 	and.w	sl, r2, #4
 8003a96:	f04f 0b00 	mov.w	fp, #0
 8003a9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003aa0:	4bb3      	ldr	r3, [pc, #716]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4aaf      	ldr	r2, [pc, #700]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 0308 	and.w	r3, r2, #8
 8003ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ace:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003ad8:	4ba5      	ldr	r3, [pc, #660]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	4aa1      	ldr	r2, [pc, #644]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f002 0310 	and.w	r3, r2, #16
 8003afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003b10:	4b97      	ldr	r3, [pc, #604]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	4a93      	ldr	r2, [pc, #588]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f002 0320 	and.w	r3, r2, #32
 8003b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b48:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b4e:	f023 0107 	bic.w	r1, r3, #7
 8003b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b58:	4a85      	ldr	r2, [pc, #532]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b80:	4b7b      	ldr	r3, [pc, #492]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b86:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b90:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b92:	430b      	orrs	r3, r1
 8003b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bae:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003bb8:	4b6d      	ldr	r3, [pc, #436]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	4a69      	ldr	r2, [pc, #420]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003be6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003bf0:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a5b      	ldr	r2, [pc, #364]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c28:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	4a4d      	ldr	r2, [pc, #308]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003c60:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c66:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003c6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c70:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c92:	460b      	mov	r3, r1
 8003c94:	4313      	orrs	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c9e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003ca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca8:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003cb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cc2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	d00c      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	677b      	str	r3, [r7, #116]	; 0x74
 8003cf8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	d04f      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d02d      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d827      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d12:	2b60      	cmp	r3, #96	; 0x60
 8003d14:	d02e      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003d16:	2b60      	cmp	r3, #96	; 0x60
 8003d18:	d823      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d006      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d81f      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d011      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003d2a:	e01a      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d38:	e01d      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d3e:	3308      	adds	r3, #8
 8003d40:	4618      	mov	r0, r3
 8003d42:	f002 f9d1 	bl	80060e8 <RCCEx_PLL2_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d4c:	e013      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d52:	332c      	adds	r3, #44	; 0x2c
 8003d54:	4618      	mov	r0, r3
 8003d56:	f002 fa5f 	bl	8006218 <RCCEx_PLL3_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d60:	e009      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8003d6a:	bf00      	nop
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d6e:	bf00      	nop
 8003d70:	46020c00 	.word	0x46020c00
        break;
 8003d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d76:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d7e:	4bb6      	ldr	r3, [pc, #728]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d84:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	4ab1      	ldr	r2, [pc, #708]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d92:	430b      	orrs	r3, r1
 8003d94:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d9e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db0:	2300      	movs	r3, #0
 8003db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003db8:	460b      	mov	r3, r1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	d053      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003dbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d033      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d82c      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd6:	d02f      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ddc:	d826      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d008      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d820      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	d011      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003df4:	e01a      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003df6:	4b98      	ldr	r3, [pc, #608]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	4a97      	ldr	r2, [pc, #604]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e02:	e01a      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e08:	3308      	adds	r3, #8
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 f96c 	bl	80060e8 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e16:	e010      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e1c:	332c      	adds	r3, #44	; 0x2c
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f002 f9fa 	bl	8006218 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e2a:	e006      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003e42:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e48:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e54:	4a80      	ldr	r2, [pc, #512]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e5c:	e003      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003e62:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003e72:	663b      	str	r3, [r7, #96]	; 0x60
 8003e74:	2300      	movs	r3, #0
 8003e76:	667b      	str	r3, [r7, #100]	; 0x64
 8003e78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d046      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003e82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e8a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e8e:	d028      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e90:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e94:	d821      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9a:	d022      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	d81b      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ea6:	d01c      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eac:	d815      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb8:	d80f      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d011      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ec4:	e009      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eca:	3308      	adds	r3, #8
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 f90b 	bl	80060e8 <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003eec:	4b5a      	ldr	r3, [pc, #360]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003efe:	4a56      	ldr	r2, [pc, #344]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f0c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f1e:	2300      	movs	r3, #0
 8003f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d03f      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d81e      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f63 	.word	0x08003f63
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f60:	e00e      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f66:	332c      	adds	r3, #44	; 0x2c
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f002 f955 	bl	8006218 <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8003f7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f80:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003f88:	4b33      	ldr	r3, [pc, #204]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f8e:	f023 0107 	bic.w	r1, r3, #7
 8003f92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003fa2:	e003      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003fa8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8003fba:	2300      	movs	r3, #0
 8003fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d04d      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fd4:	d028      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fda:	d821      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fe0:	d024      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003fe2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fe6:	d81b      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fec:	d00e      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff2:	d815      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01b      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d110      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ffe:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800400a:	e012      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800400c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004010:	332c      	adds	r3, #44	; 0x2c
 8004012:	4618      	mov	r0, r3
 8004014:	f002 f900 	bl	8006218 <RCCEx_PLL3_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800401e:	e008      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004028:	bf00      	nop
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004030:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004032:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004036:	2b00      	cmp	r3, #0
 8004038:	d110      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800403c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004040:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404c:	4a02      	ldr	r2, [pc, #8]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800404e:	430b      	orrs	r3, r1
 8004050:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004056:	bf00      	nop
 8004058:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004060:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004070:	64bb      	str	r3, [r7, #72]	; 0x48
 8004072:	2300      	movs	r3, #0
 8004074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004076:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	f000 80b5 	beq.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004088:	4b9d      	ldr	r3, [pc, #628]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800408a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d113      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	4b9a      	ldr	r3, [pc, #616]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409c:	4a98      	ldr	r2, [pc, #608]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80040a6:	4b96      	ldr	r3, [pc, #600]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80040be:	4b91      	ldr	r3, [pc, #580]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	4a90      	ldr	r2, [pc, #576]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ca:	f7fd fbcd 	bl	8001868 <HAL_GetTick>
 80040ce:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80040d2:	e00b      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d4:	f7fd fbc8 	bl	8001868 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d903      	bls.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80040ea:	e005      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80040ec:	4b85      	ldr	r3, [pc, #532]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ed      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 80040f8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d165      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004100:	4b7f      	ldr	r3, [pc, #508]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800410e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004112:	2b00      	cmp	r3, #0
 8004114:	d023      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800411a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800411e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004122:	4293      	cmp	r3, r2
 8004124:	d01b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004126:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004134:	4b72      	ldr	r3, [pc, #456]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800413a:	4a71      	ldr	r2, [pc, #452]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	4b6e      	ldr	r3, [pc, #440]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800414a:	4a6d      	ldr	r2, [pc, #436]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004150:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004154:	4a6a      	ldr	r2, [pc, #424]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800415e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fd fb7d 	bl	8001868 <HAL_GetTick>
 800416e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	e00d      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd fb78 	bl	8001868 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	f241 3388 	movw	r3, #5000	; 0x1388
 8004184:	429a      	cmp	r2, r3
 8004186:	d903      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 800418e:	e006      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004190:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ea      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800419e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80041a6:	4b56      	ldr	r3, [pc, #344]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041b8:	4a51      	ldr	r2, [pc, #324]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041ba:	430b      	orrs	r3, r1
 80041bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041c0:	e008      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041c2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041c6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80041ca:	e003      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041d0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d4:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d107      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041dc:	4b48      	ldr	r3, [pc, #288]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	4a47      	ldr	r2, [pc, #284]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80041ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041f8:	643b      	str	r3, [r7, #64]	; 0x40
 80041fa:	2300      	movs	r3, #0
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
 80041fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004202:	460b      	mov	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	d042      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800420c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004210:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004214:	d022      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004216:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800421a:	d81b      	bhi.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800421c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004220:	d011      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004226:	d815      	bhi.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d019      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800422c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004230:	d110      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004236:	3308      	adds	r3, #8
 8004238:	4618      	mov	r0, r3
 800423a:	f001 ff55 	bl	80060e8 <RCCEx_PLL2_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004244:	e00d      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004246:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800424c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004250:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004252:	e006      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800425a:	e002      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004260:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004262:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10d      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800426c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004270:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800427c:	4a20      	ldr	r2, [pc, #128]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800427e:	430b      	orrs	r3, r1
 8004280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800428a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800428e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
 800429c:	2300      	movs	r3, #0
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d032      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80042aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	d00b      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d804      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80042c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c6:	d007      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80042ce:	e004      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80042d0:	bf00      	nop
 80042d2:	e002      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80042d4:	bf00      	nop
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80042d8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80042da:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d112      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80042e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042f4:	4a02      	ldr	r2, [pc, #8]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80042fc:	e008      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80042fe:	bf00      	nop
 8004300:	46020c00 	.word	0x46020c00
 8004304:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800430c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	d019      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800432c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004338:	d105      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800433a:	4b88      	ldr	r3, [pc, #544]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a87      	ldr	r2, [pc, #540]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004346:	4b85      	ldr	r3, [pc, #532]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004348:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800434c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004358:	4a80      	ldr	r2, [pc, #512]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800435a:	430b      	orrs	r3, r1
 800435c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
 800436e:	2300      	movs	r3, #0
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004372:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d00c      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800437c:	4b77      	ldr	r3, [pc, #476]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800437e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800438a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800438e:	4973      	ldr	r1, [pc, #460]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80043a2:	623b      	str	r3, [r7, #32]
 80043a4:	2300      	movs	r3, #0
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043ac:	460b      	mov	r3, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	d00c      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80043b2:	4b6a      	ldr	r3, [pc, #424]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043c4:	4965      	ldr	r1, [pc, #404]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80043cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d00c      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80043e8:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ee:	f023 0218 	bic.w	r2, r3, #24
 80043f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043fa:	4958      	ldr	r1, [pc, #352]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004418:	460b      	mov	r3, r1
 800441a:	4313      	orrs	r3, r2
 800441c:	d032      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800441e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004422:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442a:	d105      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	4a4a      	ldr	r2, [pc, #296]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800443c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004444:	d108      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800444a:	3308      	adds	r3, #8
 800444c:	4618      	mov	r0, r3
 800444e:	f001 fe4b 	bl	80060e8 <RCCEx_PLL2_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 8004458:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004460:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800446a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800446e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004472:	493a      	ldr	r1, [pc, #232]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004480:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d03a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80044a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ac:	d00e      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80044ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b2:	d815      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d017      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044bc:	d110      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	4a26      	ldr	r2, [pc, #152]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80044ca:	e00e      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044d0:	3308      	adds	r3, #8
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fe08 	bl	80060e8 <RCCEx_PLL2_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80044de:	e004      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80044e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80044ea:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004504:	4915      	ldr	r1, [pc, #84]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004512:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004516:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	e9d7 1200 	ldrd	r1, r2, [r7]
 800452c:	460b      	mov	r3, r1
 800452e:	4313      	orrs	r3, r2
 8004530:	d00c      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004538:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800453c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004544:	4905      	ldr	r1, [pc, #20]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800454c:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8004550:	4618      	mov	r0, r3
 8004552:	37e0      	adds	r7, #224	; 0xe0
 8004554:	46bd      	mov	sp, r7
 8004556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455a:	bf00      	nop
 800455c:	46020c00 	.word	0x46020c00

08004560 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004568:	4ba6      	ldr	r3, [pc, #664]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004572:	4ba4      	ldr	r3, [pc, #656]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800457c:	4ba1      	ldr	r3, [pc, #644]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	0a1b      	lsrs	r3, r3, #8
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	3301      	adds	r3, #1
 8004588:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800458a:	4b9e      	ldr	r3, [pc, #632]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004596:	4b9b      	ldr	r3, [pc, #620]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	08db      	lsrs	r3, r3, #3
 800459c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d062      	beq.n	800467e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	f200 8081 	bhi.w	80046c2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d024      	beq.n	8004610 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d17a      	bne.n	80046c2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004808 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b89      	ldr	r3, [pc, #548]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f2:	eddf 5a86 	vldr	s11, [pc, #536]	; 800480c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800460e:	e08f      	b.n	8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004610:	4b7c      	ldr	r3, [pc, #496]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800461c:	4b79      	ldr	r3, [pc, #484]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	0f1b      	lsrs	r3, r3, #28
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	e006      	b.n	8004636 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004628:	4b76      	ldr	r3, [pc, #472]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800462a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	0f1b      	lsrs	r3, r3, #28
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	4a76      	ldr	r2, [pc, #472]	; (8004810 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004660:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800480c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004670:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800467c:	e058      	b.n	8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004688:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004808 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800468c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004690:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800480c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80046a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046c0:	e036      	b.n	8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80046c2:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80046ce:	4b4d      	ldr	r3, [pc, #308]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	0f1b      	lsrs	r3, r3, #28
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	4a49      	ldr	r2, [pc, #292]	; (8004810 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80046ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004712:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800480c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004722:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800472e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004730:	4b34      	ldr	r3, [pc, #208]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800473c:	4b31      	ldr	r3, [pc, #196]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	0a5b      	lsrs	r3, r3, #9
 8004742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800474e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004752:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004756:	edd7 6a07 	vldr	s13, [r7, #28]
 800475a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004762:	ee17 2a90 	vmov	r2, s15
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e002      	b.n	8004772 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d017      	beq.n	80047ae <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	0c1b      	lsrs	r3, r3, #16
 8004784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004794:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004798:	edd7 6a07 	vldr	s13, [r7, #28]
 800479c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a4:	ee17 2a90 	vmov	r2, s15
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d017      	beq.n	80047f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	0e1b      	lsrs	r3, r3, #24
 80047c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80047d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80047da:	edd7 6a07 	vldr	s13, [r7, #28]
 80047de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e6:	ee17 2a90 	vmov	r2, s15
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80047ee:	e002      	b.n	80047f6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
}
 80047f6:	bf00      	nop
 80047f8:	3724      	adds	r7, #36	; 0x24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	46020c00 	.word	0x46020c00
 8004808:	4b742400 	.word	0x4b742400
 800480c:	46000000 	.word	0x46000000
 8004810:	0800b3d4 	.word	0x0800b3d4

08004814 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800481c:	4ba6      	ldr	r3, [pc, #664]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004824:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004826:	4ba4      	ldr	r3, [pc, #656]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004830:	4ba1      	ldr	r3, [pc, #644]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3301      	adds	r3, #1
 800483c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800483e:	4b9e      	ldr	r3, [pc, #632]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800484a:	4b9b      	ldr	r3, [pc, #620]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d062      	beq.n	8004932 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b03      	cmp	r3, #3
 8004870:	f200 8081 	bhi.w	8004976 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d024      	beq.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d17a      	bne.n	8004976 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b89      	ldr	r3, [pc, #548]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048a6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048c2:	e08f      	b.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80048c4:	4b7c      	ldr	r3, [pc, #496]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80048d0:	4b79      	ldr	r3, [pc, #484]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	0f1b      	lsrs	r3, r3, #28
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	e006      	b.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80048dc:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	0f1b      	lsrs	r3, r3, #28
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	4a76      	ldr	r2, [pc, #472]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80048ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004910:	ed97 6a02 	vldr	s12, [r7, #8]
 8004914:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004924:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004930:	e058      	b.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004944:	4b5c      	ldr	r3, [pc, #368]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004954:	ed97 6a02 	vldr	s12, [r7, #8]
 8004958:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800495c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004960:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004968:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004974:	e036      	b.n	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004976:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004982:	4b4d      	ldr	r3, [pc, #308]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0f1b      	lsrs	r3, r3, #28
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	e006      	b.n	800499c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800498e:	4b4a      	ldr	r3, [pc, #296]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	0f1b      	lsrs	r3, r3, #28
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	4a49      	ldr	r2, [pc, #292]	; (8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049e2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80049e4:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049f0:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004a26:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d017      	beq.n	8004a62 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a32:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a48:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a58:	ee17 2a90 	vmov	r2, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004a68:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d017      	beq.n	8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	0e1b      	lsrs	r3, r3, #24
 8004a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9a:	ee17 2a90 	vmov	r2, s15
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004aa2:	e002      	b.n	8004aaa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
}
 8004aaa:	bf00      	nop
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	46020c00 	.word	0x46020c00
 8004abc:	4b742400 	.word	0x4b742400
 8004ac0:	46000000 	.word	0x46000000
 8004ac4:	0800b3d4 	.word	0x0800b3d4

08004ac8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004ad0:	4ba6      	ldr	r3, [pc, #664]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004ada:	4ba4      	ldr	r3, [pc, #656]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004ae4:	4ba1      	ldr	r3, [pc, #644]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	3301      	adds	r3, #1
 8004af0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004af2:	4b9e      	ldr	r3, [pc, #632]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004afe:	4b9b      	ldr	r3, [pc, #620]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d062      	beq.n	8004be6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	f200 8081 	bhi.w	8004c2a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d024      	beq.n	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d17a      	bne.n	8004c2a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b89      	ldr	r3, [pc, #548]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b5a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004b76:	e08f      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b78:	4b7c      	ldr	r3, [pc, #496]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004b84:	4b79      	ldr	r3, [pc, #484]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	0f1b      	lsrs	r3, r3, #28
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	e006      	b.n	8004b9e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004b90:	4b76      	ldr	r3, [pc, #472]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	0f1b      	lsrs	r3, r3, #28
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	4a76      	ldr	r2, [pc, #472]	; (8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bc8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004be4:	e058      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf8:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c08:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c0c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c28:	e036      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c2a:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004c36:	4b4d      	ldr	r3, [pc, #308]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0f1b      	lsrs	r3, r3, #28
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	e006      	b.n	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	0f1b      	lsrs	r3, r3, #28
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	4a49      	ldr	r2, [pc, #292]	; (8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c7a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c96:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004c98:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d017      	beq.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	0a5b      	lsrs	r3, r3, #9
 8004caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cca:	ee17 2a90 	vmov	r2, s15
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d017      	beq.n	8004d16 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0c:	ee17 2a90 	vmov	r2, s15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d017      	beq.n	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004d28:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	0e1b      	lsrs	r3, r3, #24
 8004d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d4e:	ee17 2a90 	vmov	r2, s15
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d56:	e002      	b.n	8004d5e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	46020c00 	.word	0x46020c00
 8004d70:	4b742400 	.word	0x4b742400
 8004d74:	46000000 	.word	0x46000000
 8004d78:	0800b3d4 	.word	0x0800b3d4

08004d7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08e      	sub	sp, #56	; 0x38
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	d145      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d92:	4baa      	ldr	r3, [pc, #680]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004d9e:	4ba7      	ldr	r3, [pc, #668]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d108      	bne.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db2:	d104      	bne.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004db4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	f001 b987 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004dbe:	4b9f      	ldr	r3, [pc, #636]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dcc:	d114      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d110      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dd6:	4b99      	ldr	r3, [pc, #612]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de4:	d103      	bne.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004de6:	23fa      	movs	r3, #250	; 0xfa
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004dea:	f001 b96f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8004dee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004df4:	f001 b96a 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004df8:	4b90      	ldr	r3, [pc, #576]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d107      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0c:	d103      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004e0e:	4b8c      	ldr	r3, [pc, #560]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
 8004e12:	f001 b95b 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1a:	f001 b957 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e22:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004e26:	430b      	orrs	r3, r1
 8004e28:	d151      	bne.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004e2a:	4b84      	ldr	r3, [pc, #528]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e30:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004e34:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d035      	beq.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d841      	bhi.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2b60      	cmp	r3, #96	; 0x60
 8004e46:	d02a      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	2b60      	cmp	r3, #96	; 0x60
 8004e4c:	d83b      	bhi.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d009      	beq.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2b40      	cmp	r3, #64	; 0x40
 8004e58:	d835      	bhi.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d012      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e66:	e02e      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fb77 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e76:	f001 b929 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e7a:	f107 0318 	add.w	r3, r7, #24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fcc8 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e88:	f001 b920 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fe19 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e9a:	f001 b917 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ea4:	f001 b912 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ea8:	4b64      	ldr	r3, [pc, #400]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb4:	d103      	bne.n	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004eb6:	4b63      	ldr	r3, [pc, #396]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004eba:	f001 b907 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ec2:	f001 b903 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eca:	f001 b8ff 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ed2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	d158      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004eda:	4b58      	ldr	r3, [pc, #352]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d03b      	beq.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef4:	d846      	bhi.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efc:	d02e      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f04:	d83e      	bhi.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d00b      	beq.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d836      	bhi.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f22:	d012      	beq.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004f24:	e02e      	b.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fb18 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f34:	f001 b8ca 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f38:	f107 0318 	add.w	r3, r7, #24
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fc69 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f46:	f001 b8c1 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f4a:	f107 030c 	add.w	r3, r7, #12
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fdba 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f58:	f001 b8b8 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004f5c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f62:	f001 b8b3 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f66:	4b35      	ldr	r3, [pc, #212]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f72:	d103      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004f74:	4b33      	ldr	r3, [pc, #204]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f78:	f001 b8a8 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f80:	f001 b8a4 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f88:	f001 b8a0 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f90:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004f94:	430b      	orrs	r3, r1
 8004f96:	d16e      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f9e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004faa:	d034      	beq.n	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fb2:	d85c      	bhi.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fba:	d00b      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc2:	d854      	bhi.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004fd2:	e04c      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fac1 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fe2:	f001 b873 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe6:	f107 0318 	add.w	r3, r7, #24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fc12 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ff4:	f001 b86a 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005004:	d103      	bne.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800500a:	f001 b85f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005012:	f001 b85b 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b20      	cmp	r3, #32
 8005020:	d121      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005022:	4b06      	ldr	r3, [pc, #24]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00e      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800502e:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0e1b      	lsrs	r3, r3, #24
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	e00f      	b.n	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800503a:	bf00      	nop
 800503c:	46020c00 	.word	0x46020c00
 8005040:	0007a120 	.word	0x0007a120
 8005044:	00f42400 	.word	0x00f42400
 8005048:	02dc6c00 	.word	0x02dc6c00
 800504c:	4ba7      	ldr	r3, [pc, #668]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800504e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005052:	041b      	lsls	r3, r3, #16
 8005054:	0e1b      	lsrs	r3, r3, #24
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	4aa5      	ldr	r2, [pc, #660]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800505c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005062:	f001 b833 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800506a:	f001 b82f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005072:	f001 b82b 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800507a:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800507e:	430b      	orrs	r3, r1
 8005080:	d17f      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005082:	4b9a      	ldr	r3, [pc, #616]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005084:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d165      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005094:	4b95      	ldr	r3, [pc, #596]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800509a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800509e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050a6:	d034      	beq.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80050ae:	d853      	bhi.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b6:	d00b      	beq.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050be:	d84b      	bhi.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050cc:	d009      	beq.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80050ce:	e043      	b.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fa43 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050de:	f000 bff5 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e2:	f107 0318 	add.w	r3, r7, #24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fb94 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050f0:	f000 bfec 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80050f4:	4b7d      	ldr	r3, [pc, #500]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d103      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005102:	4b7c      	ldr	r3, [pc, #496]	; (80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005106:	f000 bfe1 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800510e:	f000 bfdd 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005112:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b20      	cmp	r3, #32
 800511c:	d118      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	0e1b      	lsrs	r3, r3, #24
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	4a6a      	ldr	r2, [pc, #424]	; (80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800514c:	f000 bfbe 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005154:	f000 bfba 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800515c:	f000 bfb6 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005166:	d108      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff f9f7 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
 8005176:	f000 bfa9 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
 800517e:	f000 bfa5 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005186:	1e51      	subs	r1, r2, #1
 8005188:	430b      	orrs	r3, r1
 800518a:	d136      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800518c:	4b57      	ldr	r3, [pc, #348]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800519e:	f7fe fb55 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 80051a2:	6378      	str	r0, [r7, #52]	; 0x34
 80051a4:	f000 bf92 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d104      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051ae:	f7fe fa1d 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80051b2:	6378      	str	r0, [r7, #52]	; 0x34
 80051b4:	f000 bf8a 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80051b8:	4b4c      	ldr	r3, [pc, #304]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c4:	d106      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d103      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
 80051d0:	f000 bf7c 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80051d4:	4b45      	ldr	r3, [pc, #276]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d107      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d104      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80051e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	f000 bf6d 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
 80051f6:	f000 bf69 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80051fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fe:	1e91      	subs	r1, r2, #2
 8005200:	430b      	orrs	r3, r1
 8005202:	d136      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005204:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005216:	f7fe fb05 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 800521a:	6378      	str	r0, [r7, #52]	; 0x34
 800521c:	f000 bf56 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2b04      	cmp	r3, #4
 8005224:	d104      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005226:	f7fe f9e1 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800522a:	6378      	str	r0, [r7, #52]	; 0x34
 800522c:	f000 bf4e 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005230:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d106      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	2b08      	cmp	r3, #8
 8005242:	d103      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8005244:	4b2c      	ldr	r3, [pc, #176]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
 8005248:	f000 bf40 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800524e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	2b0c      	cmp	r3, #12
 800525e:	d104      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8005260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
 8005266:	f000 bf31 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
 800526e:	f000 bf2d 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005276:	1f11      	subs	r1, r2, #4
 8005278:	430b      	orrs	r3, r1
 800527a:	d13f      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800527e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005282:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005286:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800528e:	f7fe fac9 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005292:	6378      	str	r0, [r7, #52]	; 0x34
 8005294:	f000 bf1a 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	2b10      	cmp	r3, #16
 800529c:	d104      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800529e:	f7fe f9a5 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80052a2:	6378      	str	r0, [r7, #52]	; 0x34
 80052a4:	f000 bf12 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b4:	d106      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d103      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
 80052c0:	f000 bf04 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80052c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d107      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d104      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80052d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	f000 bef5 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	f000 bef1 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80052ea:	bf00      	nop
 80052ec:	46020c00 	.word	0x46020c00
 80052f0:	0800b3d4 	.word	0x0800b3d4
 80052f4:	02dc6c00 	.word	0x02dc6c00
 80052f8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80052fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005300:	f1a2 0108 	sub.w	r1, r2, #8
 8005304:	430b      	orrs	r3, r1
 8005306:	d136      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005308:	4ba4      	ldr	r3, [pc, #656]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800530a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800530e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005312:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800531a:	f7fe fa83 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 800531e:	6378      	str	r0, [r7, #52]	; 0x34
 8005320:	f000 bed4 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d104      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800532a:	f7fe f95f 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800532e:	6378      	str	r0, [r7, #52]	; 0x34
 8005330:	f000 becc 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005340:	d106      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d103      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8005348:	4b95      	ldr	r3, [pc, #596]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
 800534c:	f000 bebe 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005350:	4b92      	ldr	r3, [pc, #584]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d107      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	2bc0      	cmp	r3, #192	; 0xc0
 8005362:	d104      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
 800536a:	f000 beaf 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	f000 beab 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800537a:	f1a2 0110 	sub.w	r1, r2, #16
 800537e:	430b      	orrs	r3, r1
 8005380:	d139      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005382:	4b86      	ldr	r3, [pc, #536]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005394:	f7fe fa46 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005398:	6378      	str	r0, [r7, #52]	; 0x34
 800539a:	f000 be97 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a4:	d104      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053a6:	f7fe f921 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80053aa:	6378      	str	r0, [r7, #52]	; 0x34
 80053ac:	f000 be8e 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80053b0:	4b7a      	ldr	r3, [pc, #488]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d107      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c4:	d103      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80053c6:	4b76      	ldr	r3, [pc, #472]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ca:	f000 be7f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80053ce:	4b73      	ldr	r3, [pc, #460]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d108      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e2:	d104      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80053e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ea:	f000 be6f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	f000 be6b 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80053f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053fa:	f1a2 0120 	sub.w	r1, r2, #32
 80053fe:	430b      	orrs	r3, r1
 8005400:	d158      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005402:	4b66      	ldr	r3, [pc, #408]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005414:	f7fe fa2e 	bl	8003874 <HAL_RCC_GetPCLK3Freq>
 8005418:	6378      	str	r0, [r7, #52]	; 0x34
 800541a:	f000 be57 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	2b01      	cmp	r3, #1
 8005422:	d104      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005424:	f7fe f8e2 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8005428:	6378      	str	r0, [r7, #52]	; 0x34
 800542a:	f000 be4f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800542e:	4b5b      	ldr	r3, [pc, #364]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543a:	d106      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	2b02      	cmp	r3, #2
 8005440:	d103      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8005442:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005444:	637b      	str	r3, [r7, #52]	; 0x34
 8005446:	f000 be41 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800544a:	4b54      	ldr	r3, [pc, #336]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800544c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b02      	cmp	r3, #2
 8005456:	d107      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	2b03      	cmp	r3, #3
 800545c:	d104      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800545e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
 8005464:	f000 be32 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005468:	4b4c      	ldr	r3, [pc, #304]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d11b      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	2b04      	cmp	r3, #4
 8005478:	d118      	bne.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800547a:	4b48      	ldr	r3, [pc, #288]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8005486:	4b45      	ldr	r3, [pc, #276]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0e1b      	lsrs	r3, r3, #24
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005492:	4b42      	ldr	r3, [pc, #264]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	0e1b      	lsrs	r3, r3, #24
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	4a40      	ldr	r2, [pc, #256]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80054a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	f000 be10 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	f000 be0c 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80054b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80054bc:	430b      	orrs	r3, r1
 80054be:	d173      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80054c0:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80054ca:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d104      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054d4:	f7fe f88a 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80054d8:	6378      	str	r0, [r7, #52]	; 0x34
 80054da:	f000 bdf7 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e4:	d108      	bne.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e6:	f107 0318 	add.w	r3, r7, #24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff f992 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	637b      	str	r3, [r7, #52]	; 0x34
 80054f4:	f000 bdea 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80054fe:	f7fe f977 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8005502:	6378      	str	r0, [r7, #52]	; 0x34
 8005504:	f000 bde2 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800550e:	d122      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005510:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b20      	cmp	r3, #32
 800551a:	d118      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800551c:	4b1f      	ldr	r3, [pc, #124]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005528:	4b1c      	ldr	r3, [pc, #112]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	0e1b      	lsrs	r3, r3, #24
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	e006      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	0e1b      	lsrs	r3, r3, #24
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	f000 bdbf 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
 8005552:	f000 bdbb 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005562:	d107      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800556a:	d103      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	f000 bdac 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005580:	d107      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005588:	d103      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
 800558e:	f000 bd9d 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
 8005596:	f000 bd99 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800559a:	bf00      	nop
 800559c:	46020c00 	.word	0x46020c00
 80055a0:	00f42400 	.word	0x00f42400
 80055a4:	0800b3d4 	.word	0x0800b3d4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80055a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ac:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80055b0:	430b      	orrs	r3, r1
 80055b2:	d158      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80055b4:	4bad      	ldr	r3, [pc, #692]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80055b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d84b      	bhi.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	08005605 	.word	0x08005605
 80055d0:	080055e1 	.word	0x080055e1
 80055d4:	080055f3 	.word	0x080055f3
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	08005619 	.word	0x08005619
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fe ffbb 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055ee:	f000 bd6d 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fa66 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005600:	f000 bd64 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005604:	f7fe f8f4 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 8005608:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800560a:	f000 bd5f 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800560e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005614:	f000 bd5a 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005618:	4b94      	ldr	r3, [pc, #592]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b20      	cmp	r3, #32
 8005622:	d118      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005624:	4b91      	ldr	r3, [pc, #580]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8005630:	4b8e      	ldr	r3, [pc, #568]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	e006      	b.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800563c:	4b8b      	ldr	r3, [pc, #556]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800563e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	0e1b      	lsrs	r3, r3, #24
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	4a89      	ldr	r2, [pc, #548]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800564c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005652:	f000 bd3b 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800565a:	f000 bd37 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005662:	f000 bd33 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800566a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800566e:	430b      	orrs	r3, r1
 8005670:	d167      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005672:	4b7e      	ldr	r3, [pc, #504]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005678:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800567c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005684:	d036      	beq.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800568c:	d855      	bhi.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005694:	d029      	beq.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800569c:	d84d      	bhi.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a4:	d013      	beq.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ac:	d845      	bhi.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d13e      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe ff4d 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ca:	f000 bcff 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f9f8 	bl	8004ac8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056dc:	f000 bcf6 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80056e0:	f7fe f886 	bl	80037f0 <HAL_RCC_GetHCLKFreq>
 80056e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80056e6:	f000 bcf1 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80056ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f0:	f000 bcec 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056f4:	4b5d      	ldr	r3, [pc, #372]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d118      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005700:	4b5a      	ldr	r3, [pc, #360]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800570c:	4b57      	ldr	r3, [pc, #348]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	0e1b      	lsrs	r3, r3, #24
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	e006      	b.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005718:	4b54      	ldr	r3, [pc, #336]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800571a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	0e1b      	lsrs	r3, r3, #24
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	4a52      	ldr	r2, [pc, #328]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800572e:	f000 bccd 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005736:	f000 bcc9 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800573e:	f000 bcc5 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005746:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800574a:	430b      	orrs	r3, r1
 800574c:	d14c      	bne.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800574e:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005754:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005758:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005760:	f7fe f860 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005764:	6378      	str	r0, [r7, #52]	; 0x34
 8005766:	f000 bcb1 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d104      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005772:	f7fd ff3b 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8005776:	6378      	str	r0, [r7, #52]	; 0x34
 8005778:	f000 bca8 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800577c:	4b3b      	ldr	r3, [pc, #236]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005788:	d107      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005790:	d103      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	f000 bc99 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d11c      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ac:	d118      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057ae:	4b2f      	ldr	r3, [pc, #188]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	0e1b      	lsrs	r3, r3, #24
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	e006      	b.n	80057d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	0e1b      	lsrs	r3, r3, #24
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	4a26      	ldr	r2, [pc, #152]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80057d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
 80057dc:	f000 bc76 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
 80057e4:	f000 bc72 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80057e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ec:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80057f0:	430b      	orrs	r3, r1
 80057f2:	d152      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2b00      	cmp	r3, #0
 8005804:	d104      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005806:	f7fe f80d 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 800580a:	6378      	str	r0, [r7, #52]	; 0x34
 800580c:	f000 bc5e 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	d104      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005818:	f7fd fee8 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800581c:	6378      	str	r0, [r7, #52]	; 0x34
 800581e:	f000 bc55 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d107      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005836:	d103      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8005838:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	f000 bc46 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b20      	cmp	r3, #32
 800584a:	d122      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005852:	d11e      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	0e1b      	lsrs	r3, r3, #24
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	e00c      	b.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800586c:	46020c00 	.word	0x46020c00
 8005870:	0800b3d4 	.word	0x0800b3d4
 8005874:	00f42400 	.word	0x00f42400
 8005878:	4ba1      	ldr	r3, [pc, #644]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800587a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a9f      	ldr	r2, [pc, #636]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
 800588e:	f000 bc1d 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
 8005896:	f000 bc19 	b.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800589a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80058a2:	430b      	orrs	r3, r1
 80058a4:	d151      	bne.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80058a6:	4b96      	ldr	r3, [pc, #600]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2bc0      	cmp	r3, #192	; 0xc0
 80058b6:	d024      	beq.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	2bc0      	cmp	r3, #192	; 0xc0
 80058bc:	d842      	bhi.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d00d      	beq.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d83c      	bhi.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d011      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80058d6:	e035      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80058d8:	f7fd ffcc 	bl	8003874 <HAL_RCC_GetPCLK3Freq>
 80058dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80058de:	e3f5      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058e0:	4b87      	ldr	r3, [pc, #540]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ec:	d102      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80058ee:	4b86      	ldr	r3, [pc, #536]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058f2:	e3eb      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058f8:	e3e8      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fd fe77 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80058fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005900:	e3e4      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005902:	4b7f      	ldr	r3, [pc, #508]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b20      	cmp	r3, #32
 800590c:	d117      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800590e:	4b7c      	ldr	r3, [pc, #496]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800591a:	4b79      	ldr	r3, [pc, #484]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	0e1b      	lsrs	r3, r3, #24
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005926:	4b76      	ldr	r3, [pc, #472]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800592c:	041b      	lsls	r3, r3, #16
 800592e:	0e1b      	lsrs	r3, r3, #24
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	4a73      	ldr	r2, [pc, #460]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800593c:	e3c6      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005942:	e3c3      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005948:	e3c0      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800594a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005952:	430b      	orrs	r3, r1
 8005954:	d147      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005956:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800595c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005960:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005968:	f7fd ff5c 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 800596c:	6378      	str	r0, [r7, #52]	; 0x34
 800596e:	e3ad      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005976:	d103      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005978:	f7fd fe38 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 800597c:	6378      	str	r0, [r7, #52]	; 0x34
 800597e:	e3a5      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005980:	4b5f      	ldr	r3, [pc, #380]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d106      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005994:	d102      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8005996:	4b5c      	ldr	r3, [pc, #368]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
 800599a:	e397      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800599c:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d11b      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059ae:	d117      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059b0:	4b53      	ldr	r3, [pc, #332]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80059bc:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	0e1b      	lsrs	r3, r3, #24
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	e006      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80059c8:	4b4d      	ldr	r3, [pc, #308]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	0e1b      	lsrs	r3, r3, #24
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	4a4b      	ldr	r2, [pc, #300]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80059d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059dc:	637b      	str	r3, [r7, #52]	; 0x34
 80059de:	e375      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	e372      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80059e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80059ee:	430b      	orrs	r3, r1
 80059f0:	d164      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80059f2:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d120      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a04:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d117      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a10:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005a1c:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	0e1b      	lsrs	r3, r3, #24
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	e006      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005a28:	4b35      	ldr	r3, [pc, #212]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	0e1b      	lsrs	r3, r3, #24
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	4a33      	ldr	r2, [pc, #204]	; (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	e345      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34
 8005a44:	e342      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005a46:	4b2e      	ldr	r3, [pc, #184]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a54:	d112      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5c:	d10e      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a5e:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6c:	d102      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005a6e:	23fa      	movs	r3, #250	; 0xfa
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a72:	e32b      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a7a:	e327      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005a7c:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a88:	d106      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a90:	d102      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005a92:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	e319      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005a98:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aac:	d103      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab4:	e30a      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	e307      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	d16b      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ace:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ad2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d127      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ada:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d11e      	bne.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8005af2:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0e1b      	lsrs	r3, r3, #24
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	e00d      	b.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005afe:	bf00      	nop
 8005b00:	46020c00 	.word	0x46020c00
 8005b04:	0800b3d4 	.word	0x0800b3d4
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	4b94      	ldr	r3, [pc, #592]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	0e1b      	lsrs	r3, r3, #24
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	4a92      	ldr	r2, [pc, #584]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	e2d3      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	e2d0      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b38:	d112      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b40:	d10e      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b42:	4b87      	ldr	r3, [pc, #540]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b50:	d102      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8005b52:	23fa      	movs	r3, #250	; 0xfa
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b56:	e2b9      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005b58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b5e:	e2b5      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005b60:	4b7f      	ldr	r3, [pc, #508]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b74:	d102      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8005b76:	4b7c      	ldr	r3, [pc, #496]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7a:	e2a7      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005b7c:	4b78      	ldr	r3, [pc, #480]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d107      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b90:	d103      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
 8005b98:	e298      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9e:	e295      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	d147      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005bac:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bb2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005bbe:	f7fd fe31 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005bc2:	6378      	str	r0, [r7, #52]	; 0x34
 8005bc4:	e282      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005bc6:	4b66      	ldr	r3, [pc, #408]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd4:	d112      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bdc:	d10e      	bne.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bde:	4b60      	ldr	r3, [pc, #384]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bec:	d102      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8005bee:	23fa      	movs	r3, #250	; 0xfa
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bf2:	e26b      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005bf4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bfa:	e267      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005bfc:	4b58      	ldr	r3, [pc, #352]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c08:	d106      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c10:	d102      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8005c12:	4b55      	ldr	r3, [pc, #340]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	e259      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005c18:	4b51      	ldr	r3, [pc, #324]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d107      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c2c:	d103      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8005c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
 8005c34:	e24a      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3a:	e247      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c40:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005c44:	430b      	orrs	r3, r1
 8005c46:	d12d      	bne.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005c48:	4b45      	ldr	r3, [pc, #276]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c4e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005c52:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005c54:	4b42      	ldr	r3, [pc, #264]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c60:	d105      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d102      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8005c68:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c6c:	e22e      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c74:	d107      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fc70 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	e222      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8e:	f107 0318 	add.w	r3, r7, #24
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fdbe 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9c:	e216      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca2:	e213      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005cac:	430b      	orrs	r3, r1
 8005cae:	d15d      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005cb0:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc2:	d028      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cca:	d845      	bhi.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd2:	d013      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cda:	d83d      	bhi.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce8:	d004      	beq.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8005cea:	e035      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7fd fdae 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 8005cf0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cf2:	e1eb      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005cf4:	f7fd fc7a 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8005cf8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cfa:	e1e7      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d08:	d102      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d0e:	e1dd      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d14:	e1da      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d117      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0e1b      	lsrs	r3, r3, #24
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	e006      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	0e1b      	lsrs	r3, r3, #24
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d50:	e1bc      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d56:	e1b9      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d5c:	e1b6      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005d5e:	bf00      	nop
 8005d60:	46020c00 	.word	0x46020c00
 8005d64:	0800b3d4 	.word	0x0800b3d4
 8005d68:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d70:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005d74:	430b      	orrs	r3, r1
 8005d76:	d156      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005d78:	4ba5      	ldr	r3, [pc, #660]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d8a:	d028      	beq.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d92:	d845      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9a:	d013      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da2:	d83d      	bhi.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d004      	beq.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005db2:	e035      	b.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005db4:	f7fd fd36 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005db8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dba:	e187      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005dbc:	f7fd fc16 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8005dc0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dc2:	e183      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc4:	4b92      	ldr	r3, [pc, #584]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd0:	d102      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8005dd2:	4b90      	ldr	r3, [pc, #576]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dd6:	e179      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ddc:	e176      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005dde:	4b8c      	ldr	r3, [pc, #560]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d117      	bne.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005dea:	4b89      	ldr	r3, [pc, #548]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8005df6:	4b86      	ldr	r3, [pc, #536]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	0e1b      	lsrs	r3, r3, #24
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	e006      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8005e02:	4b83      	ldr	r3, [pc, #524]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	0e1b      	lsrs	r3, r3, #24
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	4a81      	ldr	r2, [pc, #516]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e18:	e158      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e1e:	e155      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e24:	e152      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e2a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	d177      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005e32:	4b77      	ldr	r3, [pc, #476]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e38:	f003 0318 	and.w	r3, r3, #24
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	2b18      	cmp	r3, #24
 8005e42:	d86b      	bhi.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005eb1 	.word	0x08005eb1
 8005e50:	08005f1d 	.word	0x08005f1d
 8005e54:	08005f1d 	.word	0x08005f1d
 8005e58:	08005f1d 	.word	0x08005f1d
 8005e5c:	08005f1d 	.word	0x08005f1d
 8005e60:	08005f1d 	.word	0x08005f1d
 8005e64:	08005f1d 	.word	0x08005f1d
 8005e68:	08005f1d 	.word	0x08005f1d
 8005e6c:	08005eb9 	.word	0x08005eb9
 8005e70:	08005f1d 	.word	0x08005f1d
 8005e74:	08005f1d 	.word	0x08005f1d
 8005e78:	08005f1d 	.word	0x08005f1d
 8005e7c:	08005f1d 	.word	0x08005f1d
 8005e80:	08005f1d 	.word	0x08005f1d
 8005e84:	08005f1d 	.word	0x08005f1d
 8005e88:	08005f1d 	.word	0x08005f1d
 8005e8c:	08005ec1 	.word	0x08005ec1
 8005e90:	08005f1d 	.word	0x08005f1d
 8005e94:	08005f1d 	.word	0x08005f1d
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08005f1d 	.word	0x08005f1d
 8005ea0:	08005f1d 	.word	0x08005f1d
 8005ea4:	08005f1d 	.word	0x08005f1d
 8005ea8:	08005f1d 	.word	0x08005f1d
 8005eac:	08005edb 	.word	0x08005edb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005eb0:	f7fd fce0 	bl	8003874 <HAL_RCC_GetPCLK3Freq>
 8005eb4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005eb6:	e109      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005eb8:	f7fd fb98 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8005ebc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ebe:	e105      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ec0:	4b53      	ldr	r3, [pc, #332]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8005ece:	4b51      	ldr	r3, [pc, #324]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ed2:	e0fb      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed8:	e0f8      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005eda:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d117      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	0e1b      	lsrs	r3, r3, #24
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	e006      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	0e1b      	lsrs	r3, r3, #24
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	4a42      	ldr	r2, [pc, #264]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f14:	e0da      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f1a:	e0d7      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f20:	e0d4      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f26:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	d155      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005f2e:	4b38      	ldr	r3, [pc, #224]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f40:	d013      	beq.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f48:	d844      	bhi.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f50:	d013      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f58:	d83c      	bhi.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d014      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d014      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8005f68:	e034      	b.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f6a:	f107 0318 	add.w	r3, r7, #24
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fc50 	bl	8004814 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f78:	e0a8      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe faee 	bl	8004560 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f88:	e0a0      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7fd fb2f 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 8005f8e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f90:	e09c      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f92:	4b1f      	ldr	r3, [pc, #124]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d117      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f9e:	4b1c      	ldr	r3, [pc, #112]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005faa:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0e1b      	lsrs	r3, r3, #24
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	e006      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8005fb6:	4b16      	ldr	r3, [pc, #88]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	0e1b      	lsrs	r3, r3, #24
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	4a14      	ldr	r2, [pc, #80]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fcc:	e07e      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd2:	e07b      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd8:	e078      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fde:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	d138      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d10d      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10a      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
 800600c:	e05e      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800600e:	bf00      	nop
 8006010:	46020c00 	.word	0x46020c00
 8006014:	00f42400 	.word	0x00f42400
 8006018:	0800b3d4 	.word	0x0800b3d4
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800601e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800602a:	d112      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d10e      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006034:	4b28      	ldr	r3, [pc, #160]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800603a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006042:	d102      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006044:	23fa      	movs	r3, #250	; 0xfa
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006048:	e040      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800604a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006050:	e03c      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
 8006056:	e039      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006060:	430b      	orrs	r3, r1
 8006062:	d131      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006064:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006066:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800606a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800606e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006070:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607c:	d105      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006084:	4b15      	ldr	r3, [pc, #84]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
 8006088:	e020      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006096:	d106      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	d102      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
 80060a4:	e012      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80060a6:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b2:	d106      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ba:	d102      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80060bc:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
 80060c0:	e004      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
 80060c6:	e001      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3738      	adds	r7, #56	; 0x38
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	46020c00 	.word	0x46020c00
 80060dc:	02dc6c00 	.word	0x02dc6c00
 80060e0:	016e3600 	.word	0x016e3600
 80060e4:	00f42400 	.word	0x00f42400

080060e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80060f0:	4b47      	ldr	r3, [pc, #284]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a46      	ldr	r2, [pc, #280]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80060f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060fc:	f7fb fbb4 	bl	8001868 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006102:	e008      	b.n	8006116 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006104:	f7fb fbb0 	bl	8001868 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e077      	b.n	8006206 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006116:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006122:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6811      	ldr	r1, [r2, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6852      	ldr	r2, [r2, #4]
 8006136:	3a01      	subs	r2, #1
 8006138:	0212      	lsls	r2, r2, #8
 800613a:	430a      	orrs	r2, r1
 800613c:	4934      	ldr	r1, [pc, #208]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 800613e:	4313      	orrs	r3, r2
 8006140:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006142:	4b33      	ldr	r3, [pc, #204]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 8006144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006146:	4b33      	ldr	r3, [pc, #204]	; (8006214 <RCCEx_PLL2_Config+0x12c>)
 8006148:	4013      	ands	r3, r2
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6892      	ldr	r2, [r2, #8]
 800614e:	3a01      	subs	r2, #1
 8006150:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68d2      	ldr	r2, [r2, #12]
 8006158:	3a01      	subs	r2, #1
 800615a:	0252      	lsls	r2, r2, #9
 800615c:	b292      	uxth	r2, r2
 800615e:	4311      	orrs	r1, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6912      	ldr	r2, [r2, #16]
 8006164:	3a01      	subs	r2, #1
 8006166:	0412      	lsls	r2, r2, #16
 8006168:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800616c:	4311      	orrs	r1, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6952      	ldr	r2, [r2, #20]
 8006172:	3a01      	subs	r2, #1
 8006174:	0612      	lsls	r2, r2, #24
 8006176:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800617a:	430a      	orrs	r2, r1
 800617c:	4924      	ldr	r1, [pc, #144]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 800617e:	4313      	orrs	r3, r2
 8006180:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006182:	4b23      	ldr	r3, [pc, #140]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	f023 020c 	bic.w	r2, r3, #12
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	4920      	ldr	r1, [pc, #128]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 8006190:	4313      	orrs	r3, r2
 8006192:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006194:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 8006196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	491c      	ldr	r1, [pc, #112]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80061a2:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	4a1a      	ldr	r2, [pc, #104]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061a8:	f023 0310 	bic.w	r3, r3, #16
 80061ac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061ae:	4b18      	ldr	r3, [pc, #96]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	69d2      	ldr	r2, [r2, #28]
 80061be:	00d2      	lsls	r2, r2, #3
 80061c0:	4913      	ldr	r1, [pc, #76]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80061c6:	4b12      	ldr	r3, [pc, #72]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4a11      	ldr	r2, [pc, #68]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061cc:	f043 0310 	orr.w	r3, r3, #16
 80061d0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80061d2:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a0e      	ldr	r2, [pc, #56]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061de:	f7fb fb43 	bl	8001868 <HAL_GetTick>
 80061e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061e4:	e008      	b.n	80061f8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061e6:	f7fb fb3f 	bl	8001868 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e006      	b.n	8006206 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061f8:	4b05      	ldr	r3, [pc, #20]	; (8006210 <RCCEx_PLL2_Config+0x128>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0f0      	beq.n	80061e6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0

}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	46020c00 	.word	0x46020c00
 8006214:	80800000 	.word	0x80800000

08006218 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006220:	4b47      	ldr	r3, [pc, #284]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a46      	ldr	r2, [pc, #280]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800622a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800622c:	f7fb fb1c 	bl	8001868 <HAL_GetTick>
 8006230:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006232:	e008      	b.n	8006246 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006234:	f7fb fb18 	bl	8001868 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e077      	b.n	8006336 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006246:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1f0      	bne.n	8006234 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006252:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6811      	ldr	r1, [r2, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6852      	ldr	r2, [r2, #4]
 8006266:	3a01      	subs	r2, #1
 8006268:	0212      	lsls	r2, r2, #8
 800626a:	430a      	orrs	r2, r1
 800626c:	4934      	ldr	r1, [pc, #208]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 800626e:	4313      	orrs	r3, r2
 8006270:	630b      	str	r3, [r1, #48]	; 0x30
 8006272:	4b33      	ldr	r3, [pc, #204]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006276:	4b33      	ldr	r3, [pc, #204]	; (8006344 <RCCEx_PLL3_Config+0x12c>)
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	3a01      	subs	r2, #1
 8006280:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68d2      	ldr	r2, [r2, #12]
 8006288:	3a01      	subs	r2, #1
 800628a:	0252      	lsls	r2, r2, #9
 800628c:	b292      	uxth	r2, r2
 800628e:	4311      	orrs	r1, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6912      	ldr	r2, [r2, #16]
 8006294:	3a01      	subs	r2, #1
 8006296:	0412      	lsls	r2, r2, #16
 8006298:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800629c:	4311      	orrs	r1, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6952      	ldr	r2, [r2, #20]
 80062a2:	3a01      	subs	r2, #1
 80062a4:	0612      	lsls	r2, r2, #24
 80062a6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80062aa:	430a      	orrs	r2, r1
 80062ac:	4924      	ldr	r1, [pc, #144]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80062b2:	4b23      	ldr	r3, [pc, #140]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f023 020c 	bic.w	r2, r3, #12
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	4920      	ldr	r1, [pc, #128]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80062c4:	4b1e      	ldr	r3, [pc, #120]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	491c      	ldr	r1, [pc, #112]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062d8:	f023 0310 	bic.w	r3, r3, #16
 80062dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062de:	4b18      	ldr	r3, [pc, #96]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	69d2      	ldr	r2, [r2, #28]
 80062ee:	00d2      	lsls	r2, r2, #3
 80062f0:	4913      	ldr	r1, [pc, #76]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 80062fc:	f043 0310 	orr.w	r3, r3, #16
 8006300:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 8006308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800630c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800630e:	f7fb faab 	bl	8001868 <HAL_GetTick>
 8006312:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006314:	e008      	b.n	8006328 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006316:	f7fb faa7 	bl	8001868 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e006      	b.n	8006336 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <RCCEx_PLL3_Config+0x128>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	46020c00 	.word	0x46020c00
 8006344:	80800000 	.word	0x80800000

08006348 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e0fb      	b.n	8006552 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7f      	ldr	r2, [pc, #508]	; (800655c <HAL_SPI_Init+0x214>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d004      	beq.n	800636e <HAL_SPI_Init+0x26>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a7d      	ldr	r2, [pc, #500]	; (8006560 <HAL_SPI_Init+0x218>)
 800636a:	4293      	cmp	r3, r2
 800636c:	e000      	b.n	8006370 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800636e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a78      	ldr	r2, [pc, #480]	; (800655c <HAL_SPI_Init+0x214>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_SPI_Init+0x42>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a76      	ldr	r2, [pc, #472]	; (8006560 <HAL_SPI_Init+0x218>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d105      	bne.n	8006396 <HAL_SPI_Init+0x4e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2b0f      	cmp	r3, #15
 8006390:	d901      	bls.n	8006396 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e0dd      	b.n	8006552 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f8ec 	bl	8006574 <SPI_GetPacketSize>
 800639c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a6e      	ldr	r2, [pc, #440]	; (800655c <HAL_SPI_Init+0x214>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_SPI_Init+0x6a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6c      	ldr	r2, [pc, #432]	; (8006560 <HAL_SPI_Init+0x218>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d102      	bne.n	80063b8 <HAL_SPI_Init+0x70>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d816      	bhi.n	80063e6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063bc:	4a69      	ldr	r2, [pc, #420]	; (8006564 <HAL_SPI_Init+0x21c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00e      	beq.n	80063e0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a68      	ldr	r2, [pc, #416]	; (8006568 <HAL_SPI_Init+0x220>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_SPI_Init+0x98>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a66      	ldr	r2, [pc, #408]	; (800656c <HAL_SPI_Init+0x224>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_SPI_Init+0x98>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a65      	ldr	r2, [pc, #404]	; (8006570 <HAL_SPI_Init+0x228>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d104      	bne.n	80063ea <HAL_SPI_Init+0xa2>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b10      	cmp	r3, #16
 80063e4:	d901      	bls.n	80063ea <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0b3      	b.n	8006552 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fa fd2a 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0201 	bic.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006426:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006430:	d119      	bne.n	8006466 <HAL_SPI_Init+0x11e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643a:	d103      	bne.n	8006444 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10c      	bne.n	8006466 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006454:	d107      	bne.n	8006466 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00f      	beq.n	8006492 <HAL_SPI_Init+0x14a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b06      	cmp	r3, #6
 8006478:	d90b      	bls.n	8006492 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e007      	b.n	80064a2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b4:	ea42 0103 	orr.w	r1, r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	ea42 0103 	orr.w	r1, r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	46002000 	.word	0x46002000
 8006560:	56002000 	.word	0x56002000
 8006564:	40013000 	.word	0x40013000
 8006568:	50013000 	.word	0x50013000
 800656c:	40003800 	.word	0x40003800
 8006570:	50003800 	.word	0x50003800

08006574 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	3307      	adds	r3, #7
 8006592:	08db      	lsrs	r3, r3, #3
 8006594:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	fb02 f303 	mul.w	r3, r2, r3
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d12e      	bne.n	800661e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e028      	b.n	8006620 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80065fa:	ea42 0103 	orr.w	r1, r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e049      	b.n	80066d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f841 	bl	80066da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4619      	mov	r1, r3
 800666a:	4610      	mov	r0, r2
 800666c:	f000 fa58 	bl	8006b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d001      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e072      	b.n	80067ee <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a35      	ldr	r2, [pc, #212]	; (80067fc <HAL_TIM_Base_Start_IT+0x10c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d040      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a34      	ldr	r2, [pc, #208]	; (8006800 <HAL_TIM_Base_Start_IT+0x110>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d03b      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d036      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006746:	d031      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a2d      	ldr	r2, [pc, #180]	; (8006804 <HAL_TIM_Base_Start_IT+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d02c      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2c      	ldr	r2, [pc, #176]	; (8006808 <HAL_TIM_Base_Start_IT+0x118>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d027      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2a      	ldr	r2, [pc, #168]	; (800680c <HAL_TIM_Base_Start_IT+0x11c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d022      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a29      	ldr	r2, [pc, #164]	; (8006810 <HAL_TIM_Base_Start_IT+0x120>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d01d      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a27      	ldr	r2, [pc, #156]	; (8006814 <HAL_TIM_Base_Start_IT+0x124>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d018      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a26      	ldr	r2, [pc, #152]	; (8006818 <HAL_TIM_Base_Start_IT+0x128>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a24      	ldr	r2, [pc, #144]	; (800681c <HAL_TIM_Base_Start_IT+0x12c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00e      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a23      	ldr	r2, [pc, #140]	; (8006820 <HAL_TIM_Base_Start_IT+0x130>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d009      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a21      	ldr	r2, [pc, #132]	; (8006824 <HAL_TIM_Base_Start_IT+0x134>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0xbc>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a20      	ldr	r2, [pc, #128]	; (8006828 <HAL_TIM_Base_Start_IT+0x138>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d115      	bne.n	80067d8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	4b1e      	ldr	r3, [pc, #120]	; (800682c <HAL_TIM_Base_Start_IT+0x13c>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d015      	beq.n	80067ea <HAL_TIM_Base_Start_IT+0xfa>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d011      	beq.n	80067ea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d6:	e008      	b.n	80067ea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e000      	b.n	80067ec <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	50012c00 	.word	0x50012c00
 8006804:	40000400 	.word	0x40000400
 8006808:	50000400 	.word	0x50000400
 800680c:	40000800 	.word	0x40000800
 8006810:	50000800 	.word	0x50000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	50000c00 	.word	0x50000c00
 800681c:	40013400 	.word	0x40013400
 8006820:	50013400 	.word	0x50013400
 8006824:	40014000 	.word	0x40014000
 8006828:	50014000 	.word	0x50014000
 800682c:	00010007 	.word	0x00010007

08006830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d020      	beq.n	8006894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01b      	beq.n	8006894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0202 	mvn.w	r2, #2
 8006864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f931 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 8006880:	e005      	b.n	800688e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f923 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f934 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d020      	beq.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01b      	beq.n	80068e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0204 	mvn.w	r2, #4
 80068b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f90b 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 80068cc:	e005      	b.n	80068da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8fd 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f90e 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d020      	beq.n	800692c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0208 	mvn.w	r2, #8
 80068fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2204      	movs	r2, #4
 8006902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8e5 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8d7 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8e8 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b00      	cmp	r3, #0
 8006934:	d020      	beq.n	8006978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0210 	mvn.w	r2, #16
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2208      	movs	r2, #8
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8bf 	bl	8006ae2 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8b1 	bl	8006ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8c2 	bl	8006af6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0201 	mvn.w	r2, #1
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fa f9b6 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80069c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f9af 	bl	8006d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00c      	beq.n	80069ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f9a7 	bl	8006d3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00c      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f87c 	bl	8006b0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f06f 0220 	mvn.w	r2, #32
 8006a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f96f 	bl	8006d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f97b 	bl	8006d50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00c      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f973 	bl	8006d64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00c      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f96b 	bl	8006d78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00c      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f963 	bl	8006d8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a68      	ldr	r2, [pc, #416]	; (8006cd4 <TIM_Base_SetConfig+0x1b4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d02b      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a67      	ldr	r2, [pc, #412]	; (8006cd8 <TIM_Base_SetConfig+0x1b8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d027      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b46:	d023      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b4e:	d01f      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a62      	ldr	r2, [pc, #392]	; (8006cdc <TIM_Base_SetConfig+0x1bc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d01b      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a61      	ldr	r2, [pc, #388]	; (8006ce0 <TIM_Base_SetConfig+0x1c0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d017      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a60      	ldr	r2, [pc, #384]	; (8006ce4 <TIM_Base_SetConfig+0x1c4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a5f      	ldr	r2, [pc, #380]	; (8006ce8 <TIM_Base_SetConfig+0x1c8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00f      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a5e      	ldr	r2, [pc, #376]	; (8006cec <TIM_Base_SetConfig+0x1cc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <TIM_Base_SetConfig+0x1d0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a5c      	ldr	r2, [pc, #368]	; (8006cf4 <TIM_Base_SetConfig+0x1d4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_Base_SetConfig+0x70>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a5b      	ldr	r2, [pc, #364]	; (8006cf8 <TIM_Base_SetConfig+0x1d8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d108      	bne.n	8006ba2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4b      	ldr	r2, [pc, #300]	; (8006cd4 <TIM_Base_SetConfig+0x1b4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d043      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a4a      	ldr	r2, [pc, #296]	; (8006cd8 <TIM_Base_SetConfig+0x1b8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d03f      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d03b      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bc0:	d037      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a45      	ldr	r2, [pc, #276]	; (8006cdc <TIM_Base_SetConfig+0x1bc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d033      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a44      	ldr	r2, [pc, #272]	; (8006ce0 <TIM_Base_SetConfig+0x1c0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02f      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a43      	ldr	r2, [pc, #268]	; (8006ce4 <TIM_Base_SetConfig+0x1c4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d02b      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a42      	ldr	r2, [pc, #264]	; (8006ce8 <TIM_Base_SetConfig+0x1c8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d027      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a41      	ldr	r2, [pc, #260]	; (8006cec <TIM_Base_SetConfig+0x1cc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d023      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a40      	ldr	r2, [pc, #256]	; (8006cf0 <TIM_Base_SetConfig+0x1d0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01f      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a3f      	ldr	r2, [pc, #252]	; (8006cf4 <TIM_Base_SetConfig+0x1d4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d01b      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a3e      	ldr	r2, [pc, #248]	; (8006cf8 <TIM_Base_SetConfig+0x1d8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d017      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a3d      	ldr	r2, [pc, #244]	; (8006cfc <TIM_Base_SetConfig+0x1dc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a3c      	ldr	r2, [pc, #240]	; (8006d00 <TIM_Base_SetConfig+0x1e0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00f      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a3b      	ldr	r2, [pc, #236]	; (8006d04 <TIM_Base_SetConfig+0x1e4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00b      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a3a      	ldr	r2, [pc, #232]	; (8006d08 <TIM_Base_SetConfig+0x1e8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d007      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a39      	ldr	r2, [pc, #228]	; (8006d0c <TIM_Base_SetConfig+0x1ec>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_Base_SetConfig+0x112>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a38      	ldr	r2, [pc, #224]	; (8006d10 <TIM_Base_SetConfig+0x1f0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d108      	bne.n	8006c44 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <TIM_Base_SetConfig+0x1b4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d023      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <TIM_Base_SetConfig+0x1b8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d01f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <TIM_Base_SetConfig+0x1d4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d01b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <TIM_Base_SetConfig+0x1d8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d017      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <TIM_Base_SetConfig+0x1dc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <TIM_Base_SetConfig+0x1e0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	; (8006d04 <TIM_Base_SetConfig+0x1e4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <TIM_Base_SetConfig+0x1e8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a18      	ldr	r2, [pc, #96]	; (8006d0c <TIM_Base_SetConfig+0x1ec>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x198>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <TIM_Base_SetConfig+0x1f0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d103      	bne.n	8006cc0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	615a      	str	r2, [r3, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	50012c00 	.word	0x50012c00
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	50000400 	.word	0x50000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	50000800 	.word	0x50000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	50000c00 	.word	0x50000c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	50013400 	.word	0x50013400
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	50014000 	.word	0x50014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	50014400 	.word	0x50014400
 8006d0c:	40014800 	.word	0x40014800
 8006d10:	50014800 	.word	0x50014800

08006d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e042      	b.n	8006e38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fa f8b1 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	; 0x24
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0201 	bic.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fb40 	bl	8007470 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f99b 	bl	800712c <UART_SetConfig>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e01b      	b.n	8006e38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fbbf 	bl	80075b4 <UART_CheckIdleState>
 8006e36:	4603      	mov	r3, r0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	f040 808b 	bne.w	8006f72 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_UART_Transmit+0x28>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e083      	b.n	8006f74 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	d107      	bne.n	8006e8a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e88:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2221      	movs	r2, #33	; 0x21
 8006e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e9a:	f7fa fce5 	bl	8001868 <HAL_GetTick>
 8006e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb8:	d108      	bne.n	8006ecc <HAL_UART_Transmit+0x8c>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	e003      	b.n	8006ed4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ed4:	e030      	b.n	8006f38 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2200      	movs	r2, #0
 8006ede:	2180      	movs	r1, #128	; 0x80
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 fc11 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d005      	beq.n	8006ef8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e03d      	b.n	8006f74 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10b      	bne.n	8006f16 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	3302      	adds	r3, #2
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	e007      	b.n	8006f26 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1c8      	bne.n	8006ed6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fbda 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e006      	b.n	8006f74 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e000      	b.n	8006f74 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
  }
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	f040 80c4 	bne.w	8007120 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_UART_Receive+0x28>
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0bc      	b.n	8007122 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d107      	bne.n	8006fc6 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2222      	movs	r2, #34	; 0x22
 8006fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fdc:	f7fa fc44 	bl	8001868 <HAL_GetTick>
 8006fe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d10e      	bne.n	800701a <HAL_UART_Receive+0x9e>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <HAL_UART_Receive+0x94>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f240 12ff 	movw	r2, #511	; 0x1ff
 800700a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800700e:	e02d      	b.n	800706c <HAL_UART_Receive+0xf0>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	22ff      	movs	r2, #255	; 0xff
 8007014:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007018:	e028      	b.n	800706c <HAL_UART_Receive+0xf0>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10d      	bne.n	800703e <HAL_UART_Receive+0xc2>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <HAL_UART_Receive+0xb8>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007032:	e01b      	b.n	800706c <HAL_UART_Receive+0xf0>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	227f      	movs	r2, #127	; 0x7f
 8007038:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800703c:	e016      	b.n	800706c <HAL_UART_Receive+0xf0>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007046:	d10d      	bne.n	8007064 <HAL_UART_Receive+0xe8>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_UART_Receive+0xde>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	227f      	movs	r2, #127	; 0x7f
 8007054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007058:	e008      	b.n	800706c <HAL_UART_Receive+0xf0>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	223f      	movs	r2, #63	; 0x3f
 800705e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007062:	e003      	b.n	800706c <HAL_UART_Receive+0xf0>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007072:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d108      	bne.n	8007090 <HAL_UART_Receive+0x114>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e003      	b.n	8007098 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007098:	e036      	b.n	8007108 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2200      	movs	r2, #0
 80070a2:	2120      	movs	r1, #32
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fb2f 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e032      	b.n	8007122 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10c      	bne.n	80070dc <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	8a7b      	ldrh	r3, [r7, #18]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3302      	adds	r3, #2
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e00c      	b.n	80070f6 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	8a7b      	ldrh	r3, [r7, #18]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	4013      	ands	r3, r2
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	3301      	adds	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1c2      	bne.n	800709a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	e000      	b.n	8007122 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800712c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007130:	b094      	sub	sp, #80	; 0x50
 8007132:	af00      	add	r7, sp, #0
 8007134:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b7e      	ldr	r3, [pc, #504]	; (800733c <UART_SetConfig+0x210>)
 8007142:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	431a      	orrs	r2, r3
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	431a      	orrs	r2, r3
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	4313      	orrs	r3, r2
 800715a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4977      	ldr	r1, [pc, #476]	; (8007340 <UART_SetConfig+0x214>)
 8007164:	4019      	ands	r1, r3
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716c:	430b      	orrs	r3, r1
 800716e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	68d9      	ldr	r1, [r3, #12]
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	ea40 0301 	orr.w	r3, r0, r1
 8007186:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b6a      	ldr	r3, [pc, #424]	; (800733c <UART_SetConfig+0x210>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d009      	beq.n	80071ac <UART_SetConfig+0x80>
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b69      	ldr	r3, [pc, #420]	; (8007344 <UART_SetConfig+0x218>)
 800719e:	429a      	cmp	r2, r3
 80071a0:	d004      	beq.n	80071ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	4313      	orrs	r3, r2
 80071aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80071b6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	f023 000f 	bic.w	r0, r3, #15
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	ea40 0301 	orr.w	r3, r0, r1
 80071da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b59      	ldr	r3, [pc, #356]	; (8007348 <UART_SetConfig+0x21c>)
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d102      	bne.n	80071ec <UART_SetConfig+0xc0>
 80071e6:	2301      	movs	r3, #1
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ea:	e029      	b.n	8007240 <UART_SetConfig+0x114>
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4b56      	ldr	r3, [pc, #344]	; (800734c <UART_SetConfig+0x220>)
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d102      	bne.n	80071fc <UART_SetConfig+0xd0>
 80071f6:	2302      	movs	r3, #2
 80071f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071fa:	e021      	b.n	8007240 <UART_SetConfig+0x114>
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	4b53      	ldr	r3, [pc, #332]	; (8007350 <UART_SetConfig+0x224>)
 8007202:	429a      	cmp	r2, r3
 8007204:	d102      	bne.n	800720c <UART_SetConfig+0xe0>
 8007206:	2304      	movs	r3, #4
 8007208:	64bb      	str	r3, [r7, #72]	; 0x48
 800720a:	e019      	b.n	8007240 <UART_SetConfig+0x114>
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b50      	ldr	r3, [pc, #320]	; (8007354 <UART_SetConfig+0x228>)
 8007212:	429a      	cmp	r2, r3
 8007214:	d102      	bne.n	800721c <UART_SetConfig+0xf0>
 8007216:	2308      	movs	r3, #8
 8007218:	64bb      	str	r3, [r7, #72]	; 0x48
 800721a:	e011      	b.n	8007240 <UART_SetConfig+0x114>
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b4d      	ldr	r3, [pc, #308]	; (8007358 <UART_SetConfig+0x22c>)
 8007222:	429a      	cmp	r2, r3
 8007224:	d102      	bne.n	800722c <UART_SetConfig+0x100>
 8007226:	2310      	movs	r3, #16
 8007228:	64bb      	str	r3, [r7, #72]	; 0x48
 800722a:	e009      	b.n	8007240 <UART_SetConfig+0x114>
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4b42      	ldr	r3, [pc, #264]	; (800733c <UART_SetConfig+0x210>)
 8007232:	429a      	cmp	r2, r3
 8007234:	d102      	bne.n	800723c <UART_SetConfig+0x110>
 8007236:	2320      	movs	r3, #32
 8007238:	64bb      	str	r3, [r7, #72]	; 0x48
 800723a:	e001      	b.n	8007240 <UART_SetConfig+0x114>
 800723c:	2300      	movs	r3, #0
 800723e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4b3d      	ldr	r3, [pc, #244]	; (800733c <UART_SetConfig+0x210>)
 8007246:	429a      	cmp	r2, r3
 8007248:	d005      	beq.n	8007256 <UART_SetConfig+0x12a>
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b3d      	ldr	r3, [pc, #244]	; (8007344 <UART_SetConfig+0x218>)
 8007250:	429a      	cmp	r2, r3
 8007252:	f040 8085 	bne.w	8007360 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007258:	2200      	movs	r2, #0
 800725a:	623b      	str	r3, [r7, #32]
 800725c:	627a      	str	r2, [r7, #36]	; 0x24
 800725e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007262:	f7fd fd8b 	bl	8004d7c <HAL_RCCEx_GetPeriphCLKFreq>
 8007266:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80e8 	beq.w	8007440 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	4a39      	ldr	r2, [pc, #228]	; (800735c <UART_SetConfig+0x230>)
 8007276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727a:	461a      	mov	r2, r3
 800727c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007282:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	4613      	mov	r3, r2
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	4413      	add	r3, r2
 800728e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007290:	429a      	cmp	r2, r3
 8007292:	d305      	bcc.n	80072a0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800729a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800729c:	429a      	cmp	r2, r3
 800729e:	d903      	bls.n	80072a8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80072a6:	e048      	b.n	800733a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072aa:	2200      	movs	r2, #0
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	61fa      	str	r2, [r7, #28]
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	4a29      	ldr	r2, [pc, #164]	; (800735c <UART_SetConfig+0x230>)
 80072b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2200      	movs	r2, #0
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	617a      	str	r2, [r7, #20]
 80072c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072ca:	f7f8 ffe1 	bl	8000290 <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	020b      	lsls	r3, r1, #8
 80072e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072e4:	0202      	lsls	r2, r0, #8
 80072e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e8:	6849      	ldr	r1, [r1, #4]
 80072ea:	0849      	lsrs	r1, r1, #1
 80072ec:	2000      	movs	r0, #0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4605      	mov	r5, r0
 80072f2:	eb12 0804 	adds.w	r8, r2, r4
 80072f6:	eb43 0905 	adc.w	r9, r3, r5
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	60fa      	str	r2, [r7, #12]
 8007304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f8 ffc0 	bl	8000290 <__aeabi_uldivmod>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4613      	mov	r3, r2
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731e:	d308      	bcc.n	8007332 <UART_SetConfig+0x206>
 8007320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007326:	d204      	bcs.n	8007332 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800732e:	60da      	str	r2, [r3, #12]
 8007330:	e003      	b.n	800733a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007338:	e082      	b.n	8007440 <UART_SetConfig+0x314>
 800733a:	e081      	b.n	8007440 <UART_SetConfig+0x314>
 800733c:	46002400 	.word	0x46002400
 8007340:	cfff69f3 	.word	0xcfff69f3
 8007344:	56002400 	.word	0x56002400
 8007348:	40013800 	.word	0x40013800
 800734c:	40004400 	.word	0x40004400
 8007350:	40004800 	.word	0x40004800
 8007354:	40004c00 	.word	0x40004c00
 8007358:	40005000 	.word	0x40005000
 800735c:	0800b494 	.word	0x0800b494
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007368:	d13c      	bne.n	80073e4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800736a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800736c:	2200      	movs	r2, #0
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007376:	f7fd fd01 	bl	8004d7c <HAL_RCCEx_GetPeriphCLKFreq>
 800737a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800737c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d05e      	beq.n	8007440 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	4a39      	ldr	r2, [pc, #228]	; (800746c <UART_SetConfig+0x340>)
 8007388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738c:	461a      	mov	r2, r3
 800738e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007390:	fbb3 f3f2 	udiv	r3, r3, r2
 8007394:	005a      	lsls	r2, r3, #1
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	441a      	add	r2, r3
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d916      	bls.n	80073dc <UART_SetConfig+0x2b0>
 80073ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b4:	d212      	bcs.n	80073dc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f023 030f 	bic.w	r3, r3, #15
 80073be:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073ce:	4313      	orrs	r3, r2
 80073d0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80073d8:	60da      	str	r2, [r3, #12]
 80073da:	e031      	b.n	8007440 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073e2:	e02d      	b.n	8007440 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e6:	2200      	movs	r2, #0
 80073e8:	469a      	mov	sl, r3
 80073ea:	4693      	mov	fp, r2
 80073ec:	4650      	mov	r0, sl
 80073ee:	4659      	mov	r1, fp
 80073f0:	f7fd fcc4 	bl	8004d7c <HAL_RCCEx_GetPeriphCLKFreq>
 80073f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80073f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d021      	beq.n	8007440 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	4a1a      	ldr	r2, [pc, #104]	; (800746c <UART_SetConfig+0x340>)
 8007402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007406:	461a      	mov	r2, r3
 8007408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740a:	fbb3 f2f2 	udiv	r2, r3, r2
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	441a      	add	r2, r3
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	fbb2 f3f3 	udiv	r3, r2, r3
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007422:	2b0f      	cmp	r3, #15
 8007424:	d909      	bls.n	800743a <UART_SetConfig+0x30e>
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800742c:	d205      	bcs.n	800743a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800742e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007430:	b29a      	uxth	r2, r3
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60da      	str	r2, [r3, #12]
 8007438:	e002      	b.n	8007440 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	2201      	movs	r2, #1
 8007444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	2201      	movs	r2, #1
 800744c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	2200      	movs	r2, #0
 8007454:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2200      	movs	r2, #0
 800745a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800745c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007460:	4618      	mov	r0, r3
 8007462:	3750      	adds	r7, #80	; 0x50
 8007464:	46bd      	mov	sp, r7
 8007466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800746a:	bf00      	nop
 800746c:	0800b494 	.word	0x0800b494

08007470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01a      	beq.n	8007586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756e:	d10a      	bne.n	8007586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	605a      	str	r2, [r3, #4]
  }
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b098      	sub	sp, #96	; 0x60
 80075b8:	af02      	add	r7, sp, #8
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075c4:	f7fa f950 	bl	8001868 <HAL_GetTick>
 80075c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d12f      	bne.n	8007638 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e0:	2200      	movs	r2, #0
 80075e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f88e 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d022      	beq.n	8007638 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007606:	653b      	str	r3, [r7, #80]	; 0x50
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007610:	647b      	str	r3, [r7, #68]	; 0x44
 8007612:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800761e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e063      	b.n	8007700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b04      	cmp	r3, #4
 8007644:	d149      	bne.n	80076da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007646:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800764e:	2200      	movs	r2, #0
 8007650:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f857 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d03c      	beq.n	80076da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	623b      	str	r3, [r7, #32]
   return(result);
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800767e:	633b      	str	r3, [r7, #48]	; 0x30
 8007680:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076b2:	61fa      	str	r2, [r7, #28]
 80076b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	69b9      	ldr	r1, [r7, #24]
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	617b      	str	r3, [r7, #20]
   return(result);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e012      	b.n	8007700 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3758      	adds	r7, #88	; 0x58
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007718:	e049      	b.n	80077ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d045      	beq.n	80077ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007722:	f7fa f8a1 	bl	8001868 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	429a      	cmp	r2, r3
 8007730:	d302      	bcc.n	8007738 <UART_WaitOnFlagUntilTimeout+0x30>
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e048      	b.n	80077ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0304 	and.w	r3, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d031      	beq.n	80077ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b08      	cmp	r3, #8
 8007756:	d110      	bne.n	800777a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2208      	movs	r2, #8
 800775e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f838 	bl	80077d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2208      	movs	r2, #8
 800776a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e029      	b.n	80077ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007788:	d111      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f81e 	bl	80077d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e00f      	b.n	80077ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4013      	ands	r3, r2
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	bf0c      	ite	eq
 80077be:	2301      	moveq	r3, #1
 80077c0:	2300      	movne	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d0a6      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b095      	sub	sp, #84	; 0x54
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fc:	643b      	str	r3, [r7, #64]	; 0x40
 80077fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3308      	adds	r3, #8
 8007816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007826:	f023 0301 	bic.w	r3, r3, #1
 800782a:	64bb      	str	r3, [r7, #72]	; 0x48
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3308      	adds	r3, #8
 8007832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800783a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e3      	bne.n	8007810 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d118      	bne.n	8007882 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	60bb      	str	r3, [r7, #8]
   return(result);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f023 0310 	bic.w	r3, r3, #16
 8007864:	647b      	str	r3, [r7, #68]	; 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786e:	61bb      	str	r3, [r7, #24]
 8007870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6979      	ldr	r1, [r7, #20]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	613b      	str	r3, [r7, #16]
   return(result);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e6      	bne.n	8007850 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007896:	bf00      	nop
 8007898:	3754      	adds	r7, #84	; 0x54
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_UARTEx_EnableFifoMode+0x16>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e02b      	b.n	8007910 <HAL_UARTEx_EnableFifoMode+0x6e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2224      	movs	r2, #36	; 0x24
 80078c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0201 	bic.w	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80078ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8c3 	bl	8007a84 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2220      	movs	r2, #32
 8007902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_UARTEx_DisableFifoMode+0x16>
 800792a:	2302      	movs	r3, #2
 800792c:	e027      	b.n	800797e <HAL_UARTEx_DisableFifoMode+0x66>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2224      	movs	r2, #36	; 0x24
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800795c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800799e:	2302      	movs	r3, #2
 80079a0:	e02d      	b.n	80079fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2224      	movs	r2, #36	; 0x24
 80079ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f850 	bl	8007a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e02d      	b.n	8007a7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2224      	movs	r2, #36	; 0x24
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f812 	bl	8007a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d108      	bne.n	8007aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007aa4:	e031      	b.n	8007b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aaa:	2308      	movs	r3, #8
 8007aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	0e5b      	lsrs	r3, r3, #25
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	0f5b      	lsrs	r3, r3, #29
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	7b3a      	ldrb	r2, [r7, #12]
 8007ad2:	4911      	ldr	r1, [pc, #68]	; (8007b18 <UARTEx_SetNbDataToProcess+0x94>)
 8007ad4:	5c8a      	ldrb	r2, [r1, r2]
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ada:	7b3a      	ldrb	r2, [r7, #12]
 8007adc:	490f      	ldr	r1, [pc, #60]	; (8007b1c <UARTEx_SetNbDataToProcess+0x98>)
 8007ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	7b7a      	ldrb	r2, [r7, #13]
 8007af0:	4909      	ldr	r1, [pc, #36]	; (8007b18 <UARTEx_SetNbDataToProcess+0x94>)
 8007af2:	5c8a      	ldrb	r2, [r1, r2]
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007af8:	7b7a      	ldrb	r2, [r7, #13]
 8007afa:	4908      	ldr	r1, [pc, #32]	; (8007b1c <UARTEx_SetNbDataToProcess+0x98>)
 8007afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	0800b4ac 	.word	0x0800b4ac
 8007b1c:	0800b4b4 	.word	0x0800b4b4

08007b20 <hex2int>:
#include <stdarg.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b2e:	d905      	bls.n	8007b3c <hex2int+0x1c>
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b39      	cmp	r3, #57	; 0x39
 8007b34:	d802      	bhi.n	8007b3c <hex2int+0x1c>
        return c - '0';
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	3b30      	subs	r3, #48	; 0x30
 8007b3a:	e013      	b.n	8007b64 <hex2int+0x44>
    if (c >= 'A' && c <= 'F')
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b40      	cmp	r3, #64	; 0x40
 8007b40:	d905      	bls.n	8007b4e <hex2int+0x2e>
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	2b46      	cmp	r3, #70	; 0x46
 8007b46:	d802      	bhi.n	8007b4e <hex2int+0x2e>
        return c - 'A' + 10;
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	3b37      	subs	r3, #55	; 0x37
 8007b4c:	e00a      	b.n	8007b64 <hex2int+0x44>
    if (c >= 'a' && c <= 'f')
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	2b60      	cmp	r3, #96	; 0x60
 8007b52:	d905      	bls.n	8007b60 <hex2int+0x40>
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	2b66      	cmp	r3, #102	; 0x66
 8007b58:	d802      	bhi.n	8007b60 <hex2int+0x40>
        return c - 'a' + 10;
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	3b57      	subs	r3, #87	; 0x57
 8007b5e:	e001      	b.n	8007b64 <hex2int+0x44>
    return -1;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <minmea_checksum>:

uint8_t minmea_checksum(const char *sentence)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
    // Support senteces with or without the starting dollar sign.
    if (*sentence == '$')
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b24      	cmp	r3, #36	; 0x24
 8007b7e:	d102      	bne.n	8007b86 <minmea_checksum+0x16>
        sentence++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3301      	adds	r3, #1
 8007b84:	607b      	str	r3, [r7, #4]

    uint8_t checksum = 0x00;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*')
 8007b8a:	e006      	b.n	8007b9a <minmea_checksum+0x2a>
        checksum ^= *sentence++;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	4053      	eors	r3, r2
 8007b98:	73fb      	strb	r3, [r7, #15]
    while (*sentence && *sentence != '*')
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <minmea_checksum+0x3a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba8:	d1f0      	bne.n	8007b8c <minmea_checksum+0x1c>

    return checksum;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <minmea_check>:

bool minmea_check(const char *sentence, bool strict)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0x00;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b24      	cmp	r3, #36	; 0x24
 8007bd2:	d008      	beq.n	8007be6 <minmea_check+0x2e>
        return false;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e05d      	b.n	8007c94 <minmea_check+0xdc>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	4053      	eors	r3, r2
 8007be4:	75fb      	strb	r3, [r7, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00d      	beq.n	8007c0a <minmea_check+0x52>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf4:	d009      	beq.n	8007c0a <minmea_check+0x52>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	4a27      	ldr	r2, [pc, #156]	; (8007c9c <minmea_check+0xe4>)
 8007bfe:	4413      	add	r3, r2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e6      	bne.n	8007bd8 <minmea_check+0x20>

    // If checksum is present...
    if (*sentence == '*') {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c10:	d129      	bne.n	8007c66 <minmea_check+0xae>
        // Extract checksum.
        sentence++;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3301      	adds	r3, #1
 8007c16:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff ff7d 	bl	8007b20 <hex2int>
 8007c26:	6138      	str	r0, [r7, #16]
        if (upper == -1)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d101      	bne.n	8007c34 <minmea_check+0x7c>
            return false;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e02f      	b.n	8007c94 <minmea_check+0xdc>
        int lower = hex2int(*sentence++);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff ff6f 	bl	8007b20 <hex2int>
 8007c42:	60f8      	str	r0, [r7, #12]
        if (lower == -1)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d101      	bne.n	8007c50 <minmea_check+0x98>
            return false;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e021      	b.n	8007c94 <minmea_check+0xdc>
        int expected = upper << 4 | lower;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d009      	beq.n	8007c76 <minmea_check+0xbe>
            return false;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e016      	b.n	8007c94 <minmea_check+0xdc>
    } else if (strict) {
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d004      	beq.n	8007c76 <minmea_check+0xbe>
        // Discard non-checksummed frames in strict mode.
        return false;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e011      	b.n	8007c94 <minmea_check+0xdc>
    }

    // The only stuff allowed at this point is a newline.
    while (*sentence == '\r' || *sentence == '\n') {
        sentence++;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3301      	adds	r3, #1
 8007c74:	607b      	str	r3, [r7, #4]
    while (*sentence == '\r' || *sentence == '\n') {
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b0d      	cmp	r3, #13
 8007c7c:	d0f8      	beq.n	8007c70 <minmea_check+0xb8>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b0a      	cmp	r3, #10
 8007c84:	d0f4      	beq.n	8007c70 <minmea_check+0xb8>
    }
    
    if (*sentence) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <minmea_check+0xda>
        return false;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e000      	b.n	8007c94 <minmea_check+0xdc>
    }

    return true;
 8007c92:	2301      	movs	r3, #1
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	0800b4bc 	.word	0x0800b4bc

08007ca0 <__NVIC_SetPriority>:
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	db0a      	blt.n	8007cca <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	490c      	ldr	r1, [pc, #48]	; (8007cec <__NVIC_SetPriority+0x4c>)
 8007cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cbe:	0112      	lsls	r2, r2, #4
 8007cc0:	b2d2      	uxtb	r2, r2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007cc8:	e00a      	b.n	8007ce0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	4908      	ldr	r1, [pc, #32]	; (8007cf0 <__NVIC_SetPriority+0x50>)
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	3b04      	subs	r3, #4
 8007cd8:	0112      	lsls	r2, r2, #4
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	440b      	add	r3, r1
 8007cde:	761a      	strb	r2, [r3, #24]
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	e000e100 	.word	0xe000e100
 8007cf0:	e000ed00 	.word	0xe000ed00

08007cf4 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <SysTick_Handler+0x1c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cfc:	f001 fb98 	bl	8009430 <xTaskGetSchedulerState>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d001      	beq.n	8007d0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d06:	f001 ff3b 	bl	8009b80 <xPortSysTickHandler>
  }
}
 8007d0a:	bf00      	nop
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	e000e010 	.word	0xe000e010

08007d14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8007d18:	2100      	movs	r1, #0
 8007d1a:	f06f 0004 	mvn.w	r0, #4
 8007d1e:	f7ff ffbf 	bl	8007ca0 <__NVIC_SetPriority>
#endif
}
 8007d22:	bf00      	nop
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d30:	f3ef 8305 	mrs	r3, IPSR
 8007d34:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d36:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	e013      	b.n	8007d6a <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8007d42:	f001 fb75 	bl	8009430 <xTaskGetSchedulerState>
 8007d46:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d00d      	beq.n	8007d6a <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d54:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8007d66:	2301      	movs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8007d6a:	697b      	ldr	r3, [r7, #20]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8007d7a:	f7ff ffd4 	bl	8007d26 <IRQ_Context>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <osKernelInitialize+0x18>
    stat = osErrorISR;
 8007d84:	f06f 0305 	mvn.w	r3, #5
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	e012      	b.n	8007db2 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8007d8c:	f001 fb50 	bl	8009430 <xTaskGetSchedulerState>
 8007d90:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d109      	bne.n	8007dac <osKernelInitialize+0x38>
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <osKernelInitialize+0x48>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007da0:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <osKernelInitialize+0x48>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	e002      	b.n	8007db2 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8007dac:	f04f 33ff 	mov.w	r3, #4294967295
 8007db0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8007db2:	687b      	ldr	r3, [r7, #4]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000388 	.word	0x20000388

08007dc0 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8007dc6:	f7ff ffae 	bl	8007d26 <IRQ_Context>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <osKernelStart+0x18>
    stat = osErrorISR;
 8007dd0:	f06f 0305 	mvn.w	r3, #5
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	e016      	b.n	8007e06 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8007dd8:	f001 fb2a 	bl	8009430 <xTaskGetSchedulerState>
 8007ddc:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10d      	bne.n	8007e00 <osKernelStart+0x40>
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <osKernelStart+0x50>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d109      	bne.n	8007e00 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dec:	f7ff ff92 	bl	8007d14 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <osKernelStart+0x50>)
 8007df2:	2202      	movs	r2, #2
 8007df4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007df6:	f000 fdf1 	bl	80089dc <vTaskStartScheduler>
      stat = osOK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	e002      	b.n	8007e06 <osKernelStart+0x46>
    } else {
      stat = osError;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8007e06:	687b      	ldr	r3, [r7, #4]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000388 	.word	0x20000388

08007e14 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08e      	sub	sp, #56	; 0x38
 8007e18:	af04      	add	r7, sp, #16
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8007e24:	f7ff ff7f 	bl	8007d26 <IRQ_Context>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d17e      	bne.n	8007f2c <osThreadNew+0x118>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d07b      	beq.n	8007f2c <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e38:	2318      	movs	r3, #24
 8007e3a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d045      	beq.n	8007ed8 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <osThreadNew+0x46>
        name = attr->name;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <osThreadNew+0x6c>
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	2b38      	cmp	r3, #56	; 0x38
 8007e72:	d805      	bhi.n	8007e80 <osThreadNew+0x6c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8007e80:	2300      	movs	r3, #0
 8007e82:	e054      	b.n	8007f2e <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	089b      	lsrs	r3, r3, #2
 8007e92:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00e      	beq.n	8007eba <osThreadNew+0xa6>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b5b      	cmp	r3, #91	; 0x5b
 8007ea2:	d90a      	bls.n	8007eba <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e010      	b.n	8007edc <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10c      	bne.n	8007edc <osThreadNew+0xc8>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d108      	bne.n	8007edc <osThreadNew+0xc8>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e001      	b.n	8007edc <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d110      	bne.n	8007f04 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6a3a      	ldr	r2, [r7, #32]
 8007ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fb9b 	bl	8008634 <xTaskCreateStatic>
 8007efe:	4603      	mov	r3, r0
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e013      	b.n	8007f2c <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d110      	bne.n	8007f2c <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f107 0314 	add.w	r3, r7, #20
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fbce 	bl	80086be <xTaskCreate>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d001      	beq.n	8007f2c <osThreadNew+0x118>
            hTask = NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8007f2c:	697b      	ldr	r3, [r7, #20]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3728      	adds	r7, #40	; 0x28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8007f3e:	f7ff fef2 	bl	8007d26 <IRQ_Context>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <osDelay+0x1a>
    stat = osErrorISR;
 8007f48:	f06f 0305 	mvn.w	r3, #5
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e007      	b.n	8007f60 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <osDelay+0x2a>
      vTaskDelay(ticks);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fd1a 	bl	8008994 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8007f60:	68fb      	ldr	r3, [r7, #12]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4a07      	ldr	r2, [pc, #28]	; (8007f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4a06      	ldr	r2, [pc, #24]	; (8007f9c <vApplicationGetIdleTaskMemory+0x30>)
 8007f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2280      	movs	r2, #128	; 0x80
 8007f88:	601a      	str	r2, [r3, #0]
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	2000038c 	.word	0x2000038c
 8007f9c:	200003e8 	.word	0x200003e8

08007fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a07      	ldr	r2, [pc, #28]	; (8007fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8007fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	4a06      	ldr	r2, [pc, #24]	; (8007fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8007fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fbe:	601a      	str	r2, [r3, #0]
}
 8007fc0:	bf00      	nop
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	200005e8 	.word	0x200005e8
 8007fd0:	20000644 	.word	0x20000644

08007fd4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f103 0208 	add.w	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f103 0208 	add.w	r2, r3, #8
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f103 0208 	add.w	r2, r3, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d103      	bne.n	800804e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e00c      	b.n	8008068 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3308      	adds	r3, #8
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e002      	b.n	800805c <vListInsert+0x2e>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	429a      	cmp	r2, r3
 8008066:	d2f6      	bcs.n	8008056 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6892      	ldr	r2, [r2, #8]
 80080b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6852      	ldr	r2, [r2, #4]
 80080c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d103      	bne.n	80080d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	1e5a      	subs	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80080fe:	2301      	movs	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <xQueueGenericReset+0x1e>
 800810c:	f001 fe4c 	bl	8009da8 <ulSetInterruptMask>
 8008110:	e7fe      	b.n	8008110 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d057      	beq.n	80081c8 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800811c:	2b00      	cmp	r3, #0
 800811e:	d053      	beq.n	80081c8 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008128:	2100      	movs	r1, #0
 800812a:	fba3 2302 	umull	r2, r3, r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d000      	beq.n	8008134 <xQueueGenericReset+0x40>
 8008132:	2101      	movs	r1, #1
 8008134:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008136:	2b00      	cmp	r3, #0
 8008138:	d146      	bne.n	80081c8 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800813a:	f001 fcf5 	bl	8009b28 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800814a:	fb01 f303 	mul.w	r3, r1, r3
 800814e:	441a      	add	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	3b01      	subs	r3, #1
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	441a      	add	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	22ff      	movs	r2, #255	; 0xff
 800817e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10e      	bne.n	80081ae <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d014      	beq.n	80081c2 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3310      	adds	r3, #16
 800819c:	4618      	mov	r0, r3
 800819e:	f000 ff3f 	bl	8009020 <xTaskRemoveFromEventList>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00c      	beq.n	80081c2 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80081a8:	f001 fcac 	bl	8009b04 <vPortYield>
 80081ac:	e009      	b.n	80081c2 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3310      	adds	r3, #16
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff ff0e 	bl	8007fd4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3324      	adds	r3, #36	; 0x24
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff ff09 	bl	8007fd4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80081c2:	f001 fcc3 	bl	8009b4c <vPortExitCritical>
 80081c6:	e001      	b.n	80081cc <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <xQueueGenericReset+0xe4>
 80081d2:	f001 fde9 	bl	8009da8 <ulSetInterruptMask>
 80081d6:	e7fe      	b.n	80081d6 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b088      	sub	sp, #32
 80081e6:	af02      	add	r7, sp, #8
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <xQueueGenericCreateStatic+0x1e>
 80081fa:	f001 fdd5 	bl	8009da8 <ulSetInterruptMask>
 80081fe:	e7fe      	b.n	80081fe <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d028      	beq.n	8008258 <xQueueGenericCreateStatic+0x76>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d025      	beq.n	8008258 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01f      	beq.n	8008258 <xQueueGenericCreateStatic+0x76>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d119      	bne.n	8008258 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                     * the real queue and semaphore structures. */
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8008224:	2350      	movs	r3, #80	; 0x50
 8008226:	613b      	str	r3, [r7, #16]

                    /* This assertion cannot be branch covered in unit tests */
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	2b50      	cmp	r3, #80	; 0x50
 800822c:	d002      	beq.n	8008234 <xQueueGenericCreateStatic+0x52>
 800822e:	f001 fdbb 	bl	8009da8 <ulSetInterruptMask>
 8008232:	e7fe      	b.n	8008232 <xQueueGenericCreateStatic+0x50>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8008234:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008242:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4613      	mov	r3, r2
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	68b9      	ldr	r1, [r7, #8]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f80c 	bl	800826e <prvInitialiseNewQueue>
 8008256:	e005      	b.n	8008264 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <xQueueGenericCreateStatic+0x82>
 800825e:	f001 fda3 	bl	8009da8 <ulSetInterruptMask>
 8008262:	e7fe      	b.n	8008262 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008264:	697b      	ldr	r3, [r7, #20]
    }
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
 800827a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d103      	bne.n	800828a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	e002      	b.n	8008290 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800829c:	2101      	movs	r1, #1
 800829e:	69b8      	ldr	r0, [r7, #24]
 80082a0:	f7ff ff28 	bl	80080f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	; 0x28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <xQueueReceive+0x20>
 80082ce:	f001 fd6b 	bl	8009da8 <ulSetInterruptMask>
 80082d2:	e7fe      	b.n	80082d2 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <xQueueReceive+0x2e>
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <xQueueReceive+0x32>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <xQueueReceive+0x34>
 80082e6:	2300      	movs	r3, #0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <xQueueReceive+0x3e>
 80082ec:	f001 fd5c 	bl	8009da8 <ulSetInterruptMask>
 80082f0:	e7fe      	b.n	80082f0 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f2:	f001 f89d 	bl	8009430 <xTaskGetSchedulerState>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xQueueReceive+0x4e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <xQueueReceive+0x52>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <xQueueReceive+0x54>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d102      	bne.n	8008312 <xQueueReceive+0x5e>
 800830c:	f001 fd4c 	bl	8009da8 <ulSetInterruptMask>
 8008310:	e7fe      	b.n	8008310 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008312:	f001 fc09 	bl	8009b28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d019      	beq.n	8008356 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	6a38      	ldr	r0, [r7, #32]
 8008326:	f000 f87e 	bl	8008426 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	3310      	adds	r3, #16
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fe6e 	bl	8009020 <xTaskRemoveFromEventList>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800834a:	f001 fbdb 	bl	8009b04 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800834e:	f001 fbfd 	bl	8009b4c <vPortExitCritical>
                return pdPASS;
 8008352:	2301      	movs	r3, #1
 8008354:	e063      	b.n	800841e <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800835c:	f001 fbf6 	bl	8009b4c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008360:	2300      	movs	r3, #0
 8008362:	e05c      	b.n	800841e <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	4618      	mov	r0, r3
 8008370:	f000 ff24 	bl	80091bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008378:	f001 fbe8 	bl	8009b4c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800837c:	f000 fb88 	bl	8008a90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008380:	f001 fbd2 	bl	8009b28 <vPortEnterCritical>
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800838a:	b25b      	sxtb	r3, r3
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008390:	d103      	bne.n	800839a <xQueueReceive+0xe6>
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083a0:	b25b      	sxtb	r3, r3
 80083a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a6:	d103      	bne.n	80083b0 <xQueueReceive+0xfc>
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083b0:	f001 fbcc 	bl	8009b4c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083b4:	1d3a      	adds	r2, r7, #4
 80083b6:	f107 0314 	add.w	r3, r7, #20
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 ff13 	bl	80091e8 <xTaskCheckForTimeOut>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d11d      	bne.n	8008404 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083c8:	6a38      	ldr	r0, [r7, #32]
 80083ca:	f000 f8a4 	bl	8008516 <prvIsQueueEmpty>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d011      	beq.n	80083f8 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fdc5 	bl	8008f6c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80083e2:	6a38      	ldr	r0, [r7, #32]
 80083e4:	f000 f845 	bl	8008472 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80083e8:	f000 fb60 	bl	8008aac <xTaskResumeAll>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d18f      	bne.n	8008312 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80083f2:	f001 fb87 	bl	8009b04 <vPortYield>
 80083f6:	e78c      	b.n	8008312 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80083f8:	6a38      	ldr	r0, [r7, #32]
 80083fa:	f000 f83a 	bl	8008472 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80083fe:	f000 fb55 	bl	8008aac <xTaskResumeAll>
 8008402:	e786      	b.n	8008312 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008404:	6a38      	ldr	r0, [r7, #32]
 8008406:	f000 f834 	bl	8008472 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800840a:	f000 fb4f 	bl	8008aac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800840e:	6a38      	ldr	r0, [r7, #32]
 8008410:	f000 f881 	bl	8008516 <prvIsQueueEmpty>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	f43f af7b 	beq.w	8008312 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800841c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800841e:	4618      	mov	r0, r3
 8008420:	3728      	adds	r7, #40	; 0x28
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d018      	beq.n	800846a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	441a      	add	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	d303      	bcc.n	800845a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68d9      	ldr	r1, [r3, #12]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	461a      	mov	r2, r3
 8008464:	6838      	ldr	r0, [r7, #0]
 8008466:	f002 f8d8 	bl	800a61a <memcpy>
    }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800847a:	f001 fb55 	bl	8009b28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008484:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008486:	e011      	b.n	80084ac <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d012      	beq.n	80084b6 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3324      	adds	r3, #36	; 0x24
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fdc3 	bl	8009020 <xTaskRemoveFromEventList>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80084a0:	f000 fef8 	bl	8009294 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dce9      	bgt.n	8008488 <prvUnlockQueue+0x16>
 80084b4:	e000      	b.n	80084b8 <prvUnlockQueue+0x46>
                        break;
 80084b6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	22ff      	movs	r2, #255	; 0xff
 80084bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80084c0:	f001 fb44 	bl	8009b4c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80084c4:	f001 fb30 	bl	8009b28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ce:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80084d0:	e011      	b.n	80084f6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d012      	beq.n	8008500 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3310      	adds	r3, #16
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fd9e 	bl	8009020 <xTaskRemoveFromEventList>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80084ea:	f000 fed3 	bl	8009294 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80084f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dce9      	bgt.n	80084d2 <prvUnlockQueue+0x60>
 80084fe:	e000      	b.n	8008502 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008500:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800850a:	f001 fb1f 	bl	8009b4c <vPortExitCritical>
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800851e:	f001 fb03 	bl	8009b28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800852a:	2301      	movs	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	e001      	b.n	8008534 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008534:	f001 fb0a 	bl	8009b4c <vPortExitCritical>

    return xReturn;
 8008538:	68fb      	ldr	r3, [r7, #12]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <vQueueAddToRegistry+0x16>
 8008554:	f001 fc28 	bl	8009da8 <ulSetInterruptMask>
 8008558:	e7fe      	b.n	8008558 <vQueueAddToRegistry+0x14>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d024      	beq.n	80085ae <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e01e      	b.n	80085a8 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800856a:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <vQueueAddToRegistry+0x84>)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	4413      	add	r3, r2
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d105      	bne.n	8008586 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	4a12      	ldr	r2, [pc, #72]	; (80085c8 <vQueueAddToRegistry+0x84>)
 8008580:	4413      	add	r3, r2
 8008582:	60bb      	str	r3, [r7, #8]
                    break;
 8008584:	e013      	b.n	80085ae <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <vQueueAddToRegistry+0x5e>
 800858c:	4a0e      	ldr	r2, [pc, #56]	; (80085c8 <vQueueAddToRegistry+0x84>)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	4a0a      	ldr	r2, [pc, #40]	; (80085c8 <vQueueAddToRegistry+0x84>)
 800859e:	4413      	add	r3, r2
 80085a0:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3301      	adds	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b07      	cmp	r3, #7
 80085ac:	d9dd      	bls.n	800856a <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000a44 	.word	0x20000a44

080085cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80085dc:	f001 faa4 	bl	8009b28 <vPortEnterCritical>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085e6:	b25b      	sxtb	r3, r3
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d103      	bne.n	80085f6 <vQueueWaitForMessageRestricted+0x2a>
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085fc:	b25b      	sxtb	r3, r3
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008602:	d103      	bne.n	800860c <vQueueWaitForMessageRestricted+0x40>
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800860c:	f001 fa9e 	bl	8009b4c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	3324      	adds	r3, #36	; 0x24
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	68b9      	ldr	r1, [r7, #8]
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fcbf 	bl	8008fa4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008626:	6978      	ldr	r0, [r7, #20]
 8008628:	f7ff ff23 	bl	8008472 <prvUnlockQueue>
    }
 800862c:	bf00      	nop
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af04      	add	r7, sp, #16
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <xTaskCreateStatic+0x1a>
 8008648:	f001 fbae 	bl	8009da8 <ulSetInterruptMask>
 800864c:	e7fe      	b.n	800864c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <xTaskCreateStatic+0x26>
 8008654:	f001 fba8 	bl	8009da8 <ulSetInterruptMask>
 8008658:	e7fe      	b.n	8008658 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800865a:	235c      	movs	r3, #92	; 0x5c
 800865c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b5c      	cmp	r3, #92	; 0x5c
 8008662:	d002      	beq.n	800866a <xTaskCreateStatic+0x36>
 8008664:	f001 fba0 	bl	8009da8 <ulSetInterruptMask>
 8008668:	e7fe      	b.n	8008668 <xTaskCreateStatic+0x34>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800866a:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01e      	beq.n	80086b0 <xTaskCreateStatic+0x7c>
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01b      	beq.n	80086b0 <xTaskCreateStatic+0x7c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008680:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	2202      	movs	r2, #2
 8008686:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800868a:	2300      	movs	r3, #0
 800868c:	9303      	str	r3, [sp, #12]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	9302      	str	r3, [sp, #8]
 8008692:	f107 0318 	add.w	r3, r7, #24
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f000 f850 	bl	8008748 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80086a8:	69f8      	ldr	r0, [r7, #28]
 80086aa:	f000 f8e3 	bl	8008874 <prvAddNewTaskToReadyList>
 80086ae:	e001      	b.n	80086b4 <xTaskCreateStatic+0x80>
        }
        else
        {
            xReturn = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80086b4:	69bb      	ldr	r3, [r7, #24]
    }
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80086be:	b580      	push	{r7, lr}
 80086c0:	b08c      	sub	sp, #48	; 0x30
 80086c2:	af04      	add	r7, sp, #16
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	4613      	mov	r3, r2
 80086cc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086ce:	88fb      	ldrh	r3, [r7, #6]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fbc8 	bl	8009e68 <pvPortMalloc>
 80086d8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00e      	beq.n	80086fe <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086e0:	205c      	movs	r0, #92	; 0x5c
 80086e2:	f001 fbc1 	bl	8009e68 <pvPortMalloc>
 80086e6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	631a      	str	r2, [r3, #48]	; 0x30
 80086f4:	e005      	b.n	8008702 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80086f6:	6978      	ldr	r0, [r7, #20]
 80086f8:	f001 fc0a 	bl	8009f10 <vPortFree>
 80086fc:	e001      	b.n	8008702 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d017      	beq.n	8008738 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008710:	88fa      	ldrh	r2, [r7, #6]
 8008712:	2300      	movs	r3, #0
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	9302      	str	r3, [sp, #8]
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f80e 	bl	8008748 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800872c:	69f8      	ldr	r0, [r7, #28]
 800872e:	f000 f8a1 	bl	8008874 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008732:	2301      	movs	r3, #1
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	e002      	b.n	800873e <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008738:	f04f 33ff 	mov.w	r3, #4294967295
 800873c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800873e:	69bb      	ldr	r3, [r7, #24]
    }
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008758:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	461a      	mov	r2, r3
 8008760:	21a5      	movs	r1, #165	; 0xa5
 8008762:	f001 fecf 	bl	800a504 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008770:	3b01      	subs	r3, #1
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f023 0307 	bic.w	r3, r3, #7
 800877e:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f003 0307 	and.w	r3, r3, #7
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <prvInitialiseNewTask+0x48>
 800878a:	f001 fb0d 	bl	8009da8 <ulSetInterruptMask>
 800878e:	e7fe      	b.n	800878e <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01f      	beq.n	80087d6 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008796:	2300      	movs	r3, #0
 8008798:	617b      	str	r3, [r7, #20]
 800879a:	e012      	b.n	80087c2 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	7819      	ldrb	r1, [r3, #0]
 80087a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4413      	add	r3, r2
 80087aa:	3334      	adds	r3, #52	; 0x34
 80087ac:	460a      	mov	r2, r1
 80087ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	4413      	add	r3, r2
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d006      	beq.n	80087ca <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3301      	adds	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b0f      	cmp	r3, #15
 80087c6:	d9e9      	bls.n	800879c <prvInitialiseNewTask+0x54>
 80087c8:	e000      	b.n	80087cc <prvInitialiseNewTask+0x84>
            {
                break;
 80087ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087d4:	e003      	b.n	80087de <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	2b37      	cmp	r3, #55	; 0x37
 80087e2:	d902      	bls.n	80087ea <prvInitialiseNewTask+0xa2>
 80087e4:	f001 fae0 	bl	8009da8 <ulSetInterruptMask>
 80087e8:	e7fe      	b.n	80087e8 <prvInitialiseNewTask+0xa0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	2b37      	cmp	r3, #55	; 0x37
 80087ee:	d901      	bls.n	80087f4 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087f0:	2337      	movs	r3, #55	; 0x37
 80087f2:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	6a3a      	ldr	r2, [r7, #32]
 80087f8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	6a3a      	ldr	r2, [r7, #32]
 80087fe:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	2200      	movs	r2, #0
 8008804:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	3304      	adds	r3, #4
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff fc02 	bl	8008014 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	3318      	adds	r3, #24
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff fbfd 	bl	8008014 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800882e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	3354      	adds	r3, #84	; 0x54
 8008834:	2204      	movs	r2, #4
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fe63 	bl	800a504 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	3358      	adds	r3, #88	; 0x58
 8008842:	2201      	movs	r2, #1
 8008844:	2100      	movs	r1, #0
 8008846:	4618      	mov	r0, r3
 8008848:	f001 fe5c 	bl	800a504 <memset>
             * function as well. */
            #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
                {
                    #if ( portSTACK_GROWTH < 0 )
                        {
                            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	6938      	ldr	r0, [r7, #16]
 8008856:	f001 f9c3 	bl	8009be0 <pxPortInitialiseStack>
 800885a:	4602      	mov	r2, r0
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800886a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800886c:	bf00      	nop
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800887c:	f001 f954 	bl	8009b28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008880:	4b3e      	ldr	r3, [pc, #248]	; (800897c <prvAddNewTaskToReadyList+0x108>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3301      	adds	r3, #1
 8008886:	4a3d      	ldr	r2, [pc, #244]	; (800897c <prvAddNewTaskToReadyList+0x108>)
 8008888:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800888a:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <prvAddNewTaskToReadyList+0x10c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008892:	4a3b      	ldr	r2, [pc, #236]	; (8008980 <prvAddNewTaskToReadyList+0x10c>)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008898:	4b38      	ldr	r3, [pc, #224]	; (800897c <prvAddNewTaskToReadyList+0x108>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d110      	bne.n	80088c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80088a0:	f000 fd14 	bl	80092cc <prvInitialiseTaskLists>
 80088a4:	e00d      	b.n	80088c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <prvAddNewTaskToReadyList+0x110>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088ae:	4b34      	ldr	r3, [pc, #208]	; (8008980 <prvAddNewTaskToReadyList+0x10c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d802      	bhi.n	80088c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80088bc:	4a30      	ldr	r2, [pc, #192]	; (8008980 <prvAddNewTaskToReadyList+0x10c>)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80088c2:	4b31      	ldr	r3, [pc, #196]	; (8008988 <prvAddNewTaskToReadyList+0x114>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3301      	adds	r3, #1
 80088c8:	4a2f      	ldr	r2, [pc, #188]	; (8008988 <prvAddNewTaskToReadyList+0x114>)
 80088ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088cc:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <prvAddNewTaskToReadyList+0x114>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	4b2c      	ldr	r3, [pc, #176]	; (800898c <prvAddNewTaskToReadyList+0x118>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d903      	bls.n	80088e8 <prvAddNewTaskToReadyList+0x74>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	4a29      	ldr	r2, [pc, #164]	; (800898c <prvAddNewTaskToReadyList+0x118>)
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4928      	ldr	r1, [pc, #160]	; (8008990 <prvAddNewTaskToReadyList+0x11c>)
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	3304      	adds	r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	609a      	str	r2, [r3, #8]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	60da      	str	r2, [r3, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	3204      	adds	r2, #4
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	609a      	str	r2, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4a19      	ldr	r2, [pc, #100]	; (8008990 <prvAddNewTaskToReadyList+0x11c>)
 800892c:	441a      	add	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	615a      	str	r2, [r3, #20]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008936:	4916      	ldr	r1, [pc, #88]	; (8008990 <prvAddNewTaskToReadyList+0x11c>)
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	440b      	add	r3, r1
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	1c59      	adds	r1, r3, #1
 8008946:	4812      	ldr	r0, [pc, #72]	; (8008990 <prvAddNewTaskToReadyList+0x11c>)
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4403      	add	r3, r0
 8008952:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008954:	f001 f8fa 	bl	8009b4c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <prvAddNewTaskToReadyList+0x110>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <prvAddNewTaskToReadyList+0x10c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	429a      	cmp	r2, r3
 800896c:	d201      	bcs.n	8008972 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800896e:	f001 f8c9 	bl	8009b04 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	20000f58 	.word	0x20000f58
 8008980:	20000a84 	.word	0x20000a84
 8008984:	20000f64 	.word	0x20000f64
 8008988:	20000f74 	.word	0x20000f74
 800898c:	20000f60 	.word	0x20000f60
 8008990:	20000a88 	.word	0x20000a88

08008994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00f      	beq.n	80089c6 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80089a6:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <vTaskDelay+0x44>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <vTaskDelay+0x20>
 80089ae:	f001 f9fb 	bl	8009da8 <ulSetInterruptMask>
 80089b2:	e7fe      	b.n	80089b2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 80089b4:	f000 f86c 	bl	8008a90 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fd56 	bl	800946c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80089c0:	f000 f874 	bl	8008aac <xTaskResumeAll>
 80089c4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 80089cc:	f001 f89a 	bl	8009b04 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80089d0:	bf00      	nop
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000f80 	.word	0x20000f80

080089dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089ea:	463a      	mov	r2, r7
 80089ec:	1d39      	adds	r1, r7, #4
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff faba 	bl	8007f6c <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	9202      	str	r2, [sp, #8]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2300      	movs	r3, #0
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	2300      	movs	r3, #0
 8008a08:	460a      	mov	r2, r1
 8008a0a:	491a      	ldr	r1, [pc, #104]	; (8008a74 <vTaskStartScheduler+0x98>)
 8008a0c:	481a      	ldr	r0, [pc, #104]	; (8008a78 <vTaskStartScheduler+0x9c>)
 8008a0e:	f7ff fe11 	bl	8008634 <xTaskCreateStatic>
 8008a12:	4603      	mov	r3, r0
 8008a14:	4a19      	ldr	r2, [pc, #100]	; (8008a7c <vTaskStartScheduler+0xa0>)
 8008a16:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 8008a18:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <vTaskStartScheduler+0xa0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e001      	b.n	8008a2a <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d102      	bne.n	8008a36 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 8008a30:	f000 fd8a 	bl	8009548 <xTimerCreateTimerTask>
 8008a34:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d10e      	bne.n	8008a5a <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8008a3c:	f001 f9b4 	bl	8009da8 <ulSetInterruptMask>
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8008a40:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <vTaskStartScheduler+0xa4>)
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008a48:	4b0e      	ldr	r3, [pc, #56]	; (8008a84 <vTaskStartScheduler+0xa8>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <vTaskStartScheduler+0xac>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8008a54:	f001 f94e 	bl	8009cf4 <xPortStartScheduler>
 8008a58:	e006      	b.n	8008a68 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d102      	bne.n	8008a68 <vTaskStartScheduler+0x8c>
 8008a62:	f001 f9a1 	bl	8009da8 <ulSetInterruptMask>
 8008a66:	e7fe      	b.n	8008a66 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008a68:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <vTaskStartScheduler+0xb0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	0800b35c 	.word	0x0800b35c
 8008a78:	080092ad 	.word	0x080092ad
 8008a7c:	20000f7c 	.word	0x20000f7c
 8008a80:	20000f78 	.word	0x20000f78
 8008a84:	20000f64 	.word	0x20000f64
 8008a88:	20000f5c 	.word	0x20000f5c
 8008a8c:	2000000c 	.word	0x2000000c

08008a90 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <vTaskSuspendAll+0x18>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a03      	ldr	r2, [pc, #12]	; (8008aa8 <vTaskSuspendAll+0x18>)
 8008a9c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	20000f80 	.word	0x20000f80

08008aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8008aba:	4b6a      	ldr	r3, [pc, #424]	; (8008c64 <xTaskResumeAll+0x1b8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <xTaskResumeAll+0x1c>
 8008ac2:	f001 f971 	bl	8009da8 <ulSetInterruptMask>
 8008ac6:	e7fe      	b.n	8008ac6 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8008ac8:	f001 f82e 	bl	8009b28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008acc:	4b65      	ldr	r3, [pc, #404]	; (8008c64 <xTaskResumeAll+0x1b8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	4a64      	ldr	r2, [pc, #400]	; (8008c64 <xTaskResumeAll+0x1b8>)
 8008ad4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad6:	4b63      	ldr	r3, [pc, #396]	; (8008c64 <xTaskResumeAll+0x1b8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 80bb 	bne.w	8008c56 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ae0:	4b61      	ldr	r3, [pc, #388]	; (8008c68 <xTaskResumeAll+0x1bc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 80b6 	beq.w	8008c56 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aea:	e08b      	b.n	8008c04 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aec:	4b5f      	ldr	r3, [pc, #380]	; (8008c6c <xTaskResumeAll+0x1c0>)
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	6a12      	ldr	r2, [r2, #32]
 8008b02:	609a      	str	r2, [r3, #8]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	69d2      	ldr	r2, [r2, #28]
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	3318      	adds	r3, #24
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d103      	bne.n	8008b22 <xTaskResumeAll+0x76>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	6a1a      	ldr	r2, [r3, #32]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	605a      	str	r2, [r3, #4]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	629a      	str	r2, [r3, #40]	; 0x28
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	1e5a      	subs	r2, r3, #1
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	607b      	str	r3, [r7, #4]
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	68d2      	ldr	r2, [r2, #12]
 8008b40:	609a      	str	r2, [r3, #8]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	6892      	ldr	r2, [r2, #8]
 8008b4a:	605a      	str	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	3304      	adds	r3, #4
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d103      	bne.n	8008b60 <xTaskResumeAll+0xb4>
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	605a      	str	r2, [r3, #4]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2200      	movs	r2, #0
 8008b64:	615a      	str	r2, [r3, #20]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	1e5a      	subs	r2, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4b3e      	ldr	r3, [pc, #248]	; (8008c70 <xTaskResumeAll+0x1c4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d903      	bls.n	8008b84 <xTaskResumeAll+0xd8>
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4a3b      	ldr	r2, [pc, #236]	; (8008c70 <xTaskResumeAll+0x1c4>)
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	493a      	ldr	r1, [pc, #232]	; (8008c74 <xTaskResumeAll+0x1c8>)
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	3304      	adds	r3, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	603b      	str	r3, [r7, #0]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	609a      	str	r2, [r3, #8]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	60da      	str	r2, [r3, #12]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	3204      	adds	r2, #4
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	1d1a      	adds	r2, r3, #4
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	609a      	str	r2, [r3, #8]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a2b      	ldr	r2, [pc, #172]	; (8008c74 <xTaskResumeAll+0x1c8>)
 8008bc8:	441a      	add	r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	615a      	str	r2, [r3, #20]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	4928      	ldr	r1, [pc, #160]	; (8008c74 <xTaskResumeAll+0x1c8>)
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	1c59      	adds	r1, r3, #1
 8008be2:	4824      	ldr	r0, [pc, #144]	; (8008c74 <xTaskResumeAll+0x1c8>)
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4403      	add	r3, r0
 8008bee:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <xTaskResumeAll+0x1cc>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d302      	bcc.n	8008c04 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 8008bfe:	4b1f      	ldr	r3, [pc, #124]	; (8008c7c <xTaskResumeAll+0x1d0>)
 8008c00:	2201      	movs	r2, #1
 8008c02:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c04:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <xTaskResumeAll+0x1c0>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f47f af6f 	bne.w	8008aec <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008c14:	f000 fbf0 	bl	80093f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <xTaskResumeAll+0x1d4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d010      	beq.n	8008c46 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008c24:	f000 f83e 	bl	8008ca4 <xTaskIncrementTick>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <xTaskResumeAll+0x1d0>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f1      	bne.n	8008c24 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <xTaskResumeAll+0x1d4>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <xTaskResumeAll+0x1d0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008c52:	f000 ff57 	bl	8009b04 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008c56:	f000 ff79 	bl	8009b4c <vPortExitCritical>

    return xAlreadyYielded;
 8008c5a:	693b      	ldr	r3, [r7, #16]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000f80 	.word	0x20000f80
 8008c68:	20000f58 	.word	0x20000f58
 8008c6c:	20000f18 	.word	0x20000f18
 8008c70:	20000f60 	.word	0x20000f60
 8008c74:	20000a88 	.word	0x20000a88
 8008c78:	20000a84 	.word	0x20000a84
 8008c7c:	20000f6c 	.word	0x20000f6c
 8008c80:	20000f68 	.word	0x20000f68

08008c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8008c8a:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <xTaskGetTickCount+0x1c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008c90:	687b      	ldr	r3, [r7, #4]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20000f5c 	.word	0x20000f5c

08008ca4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cae:	4b7a      	ldr	r3, [pc, #488]	; (8008e98 <xTaskIncrementTick+0x1f4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 80e5 	bne.w	8008e82 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb8:	4b78      	ldr	r3, [pc, #480]	; (8008e9c <xTaskIncrementTick+0x1f8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008cc0:	4a76      	ldr	r2, [pc, #472]	; (8008e9c <xTaskIncrementTick+0x1f8>)
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d118      	bne.n	8008cfe <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8008ccc:	4b74      	ldr	r3, [pc, #464]	; (8008ea0 <xTaskIncrementTick+0x1fc>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <xTaskIncrementTick+0x38>
 8008cd6:	f001 f867 	bl	8009da8 <ulSetInterruptMask>
 8008cda:	e7fe      	b.n	8008cda <xTaskIncrementTick+0x36>
 8008cdc:	4b70      	ldr	r3, [pc, #448]	; (8008ea0 <xTaskIncrementTick+0x1fc>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	4b70      	ldr	r3, [pc, #448]	; (8008ea4 <xTaskIncrementTick+0x200>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a6e      	ldr	r2, [pc, #440]	; (8008ea0 <xTaskIncrementTick+0x1fc>)
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4a6e      	ldr	r2, [pc, #440]	; (8008ea4 <xTaskIncrementTick+0x200>)
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	4b6d      	ldr	r3, [pc, #436]	; (8008ea8 <xTaskIncrementTick+0x204>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	4a6c      	ldr	r2, [pc, #432]	; (8008ea8 <xTaskIncrementTick+0x204>)
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	f000 fb7d 	bl	80093f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008cfe:	4b6b      	ldr	r3, [pc, #428]	; (8008eac <xTaskIncrementTick+0x208>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	f0c0 80a7 	bcc.w	8008e58 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d0a:	4b65      	ldr	r3, [pc, #404]	; (8008ea0 <xTaskIncrementTick+0x1fc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d104      	bne.n	8008d1e <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d14:	4b65      	ldr	r3, [pc, #404]	; (8008eac <xTaskIncrementTick+0x208>)
 8008d16:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1a:	601a      	str	r2, [r3, #0]
                    break;
 8008d1c:	e09c      	b.n	8008e58 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d1e:	4b60      	ldr	r3, [pc, #384]	; (8008ea0 <xTaskIncrementTick+0x1fc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d203      	bcs.n	8008d3e <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008d36:	4a5d      	ldr	r2, [pc, #372]	; (8008eac <xTaskIncrementTick+0x208>)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008d3c:	e08c      	b.n	8008e58 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	60bb      	str	r3, [r7, #8]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	68d2      	ldr	r2, [r2, #12]
 8008d4c:	609a      	str	r2, [r3, #8]
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	6892      	ldr	r2, [r2, #8]
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d103      	bne.n	8008d6c <xTaskIncrementTick+0xc8>
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	615a      	str	r2, [r3, #20]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	1e5a      	subs	r2, r3, #1
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01e      	beq.n	8008dc2 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	607b      	str	r3, [r7, #4]
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	6a12      	ldr	r2, [r2, #32]
 8008d92:	609a      	str	r2, [r3, #8]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	69d2      	ldr	r2, [r2, #28]
 8008d9c:	605a      	str	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3318      	adds	r3, #24
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d103      	bne.n	8008db2 <xTaskIncrementTick+0x10e>
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6a1a      	ldr	r2, [r3, #32]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2200      	movs	r2, #0
 8008db6:	629a      	str	r2, [r3, #40]	; 0x28
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	1e5a      	subs	r2, r3, #1
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc6:	4b3a      	ldr	r3, [pc, #232]	; (8008eb0 <xTaskIncrementTick+0x20c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d903      	bls.n	8008dd6 <xTaskIncrementTick+0x132>
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	4a37      	ldr	r2, [pc, #220]	; (8008eb0 <xTaskIncrementTick+0x20c>)
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dda:	4936      	ldr	r1, [pc, #216]	; (8008eb4 <xTaskIncrementTick+0x210>)
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	3304      	adds	r3, #4
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	609a      	str	r2, [r3, #8]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	60da      	str	r2, [r3, #12]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	3204      	adds	r2, #4
 8008e02:	605a      	str	r2, [r3, #4]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	609a      	str	r2, [r3, #8]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4a26      	ldr	r2, [pc, #152]	; (8008eb4 <xTaskIncrementTick+0x210>)
 8008e1a:	441a      	add	r2, r3
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	615a      	str	r2, [r3, #20]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e24:	4923      	ldr	r1, [pc, #140]	; (8008eb4 <xTaskIncrementTick+0x210>)
 8008e26:	4613      	mov	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	1c59      	adds	r1, r3, #1
 8008e34:	481f      	ldr	r0, [pc, #124]	; (8008eb4 <xTaskIncrementTick+0x210>)
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4403      	add	r3, r0
 8008e40:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e46:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <xTaskIncrementTick+0x214>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	f4ff af5c 	bcc.w	8008d0a <xTaskIncrementTick+0x66>
                            {
                                xSwitchRequired = pdTRUE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e56:	e758      	b.n	8008d0a <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <xTaskIncrementTick+0x214>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5e:	4915      	ldr	r1, [pc, #84]	; (8008eb4 <xTaskIncrementTick+0x210>)
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d901      	bls.n	8008e74 <xTaskIncrementTick+0x1d0>
                {
                    xSwitchRequired = pdTRUE;
 8008e70:	2301      	movs	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8008e74:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <xTaskIncrementTick+0x218>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d007      	beq.n	8008e8c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	e004      	b.n	8008e8c <xTaskIncrementTick+0x1e8>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008e82:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <xTaskIncrementTick+0x21c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3301      	adds	r3, #1
 8008e88:	4a0d      	ldr	r2, [pc, #52]	; (8008ec0 <xTaskIncrementTick+0x21c>)
 8008e8a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000f80 	.word	0x20000f80
 8008e9c:	20000f5c 	.word	0x20000f5c
 8008ea0:	20000f10 	.word	0x20000f10
 8008ea4:	20000f14 	.word	0x20000f14
 8008ea8:	20000f70 	.word	0x20000f70
 8008eac:	20000f78 	.word	0x20000f78
 8008eb0:	20000f60 	.word	0x20000f60
 8008eb4:	20000a88 	.word	0x20000a88
 8008eb8:	20000a84 	.word	0x20000a84
 8008ebc:	20000f6c 	.word	0x20000f6c
 8008ec0:	20000f68 	.word	0x20000f68

08008ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008eca:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <vTaskSwitchContext+0x94>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008ed2:	4b22      	ldr	r3, [pc, #136]	; (8008f5c <vTaskSwitchContext+0x98>)
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008ed8:	e039      	b.n	8008f4e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8008eda:	4b20      	ldr	r3, [pc, #128]	; (8008f5c <vTaskSwitchContext+0x98>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee0:	4b1f      	ldr	r3, [pc, #124]	; (8008f60 <vTaskSwitchContext+0x9c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	e008      	b.n	8008efa <vTaskSwitchContext+0x36>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <vTaskSwitchContext+0x30>
 8008eee:	f000 ff5b 	bl	8009da8 <ulSetInterruptMask>
 8008ef2:	e7fe      	b.n	8008ef2 <vTaskSwitchContext+0x2e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	491a      	ldr	r1, [pc, #104]	; (8008f64 <vTaskSwitchContext+0xa0>)
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0ec      	beq.n	8008ee8 <vTaskSwitchContext+0x24>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4a12      	ldr	r2, [pc, #72]	; (8008f64 <vTaskSwitchContext+0xa0>)
 8008f1a:	4413      	add	r3, r2
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	605a      	str	r2, [r3, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d104      	bne.n	8008f3e <vTaskSwitchContext+0x7a>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	605a      	str	r2, [r3, #4]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <vTaskSwitchContext+0xa4>)
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	4a05      	ldr	r2, [pc, #20]	; (8008f60 <vTaskSwitchContext+0x9c>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6013      	str	r3, [r2, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000f80 	.word	0x20000f80
 8008f5c:	20000f6c 	.word	0x20000f6c
 8008f60:	20000f60 	.word	0x20000f60
 8008f64:	20000a88 	.word	0x20000a88
 8008f68:	20000a84 	.word	0x20000a84

08008f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <vTaskPlaceOnEventList+0x16>
 8008f7c:	f000 ff14 	bl	8009da8 <ulSetInterruptMask>
 8008f80:	e7fe      	b.n	8008f80 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f82:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <vTaskPlaceOnEventList+0x34>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3318      	adds	r3, #24
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff f84f 	bl	800802e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f90:	2101      	movs	r1, #1
 8008f92:	6838      	ldr	r0, [r7, #0]
 8008f94:	f000 fa6a 	bl	800946c <prvAddCurrentTaskToDelayedList>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000a84 	.word	0x20000a84

08008fa4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d102      	bne.n	8008fbc <vTaskPlaceOnEventListRestricted+0x18>
 8008fb6:	f000 fef7 	bl	8009da8 <ulSetInterruptMask>
 8008fba:	e7fe      	b.n	8008fba <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	4b16      	ldr	r3, [pc, #88]	; (800901c <vTaskPlaceOnEventListRestricted+0x78>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	61da      	str	r2, [r3, #28]
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <vTaskPlaceOnEventListRestricted+0x78>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	6892      	ldr	r2, [r2, #8]
 8008fd2:	621a      	str	r2, [r3, #32]
 8008fd4:	4b11      	ldr	r3, [pc, #68]	; (800901c <vTaskPlaceOnEventListRestricted+0x78>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	3218      	adds	r2, #24
 8008fde:	605a      	str	r2, [r3, #4]
 8008fe0:	4b0e      	ldr	r3, [pc, #56]	; (800901c <vTaskPlaceOnEventListRestricted+0x78>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f103 0218 	add.w	r2, r3, #24
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	609a      	str	r2, [r3, #8]
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <vTaskPlaceOnEventListRestricted+0x78>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8009004:	f04f 33ff 	mov.w	r3, #4294967295
 8009008:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f000 fa2d 	bl	800946c <prvAddCurrentTaskToDelayedList>
    }
 8009012:	bf00      	nop
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000a84 	.word	0x20000a84

08009020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <xTaskRemoveFromEventList+0x1c>
 8009036:	f000 feb7 	bl	8009da8 <ulSetInterruptMask>
 800903a:	e7fe      	b.n	800903a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	6a12      	ldr	r2, [r2, #32]
 800904a:	609a      	str	r2, [r3, #8]
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	69d2      	ldr	r2, [r2, #28]
 8009054:	605a      	str	r2, [r3, #4]
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	3318      	adds	r3, #24
 800905e:	429a      	cmp	r2, r3
 8009060:	d103      	bne.n	800906a <xTaskRemoveFromEventList+0x4a>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	6a1a      	ldr	r2, [r3, #32]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2200      	movs	r2, #0
 800906e:	629a      	str	r2, [r3, #40]	; 0x28
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	1e5a      	subs	r2, r3, #1
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907a:	4b4a      	ldr	r3, [pc, #296]	; (80091a4 <xTaskRemoveFromEventList+0x184>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d15f      	bne.n	8009142 <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	68d2      	ldr	r2, [r2, #12]
 8009090:	609a      	str	r2, [r3, #8]
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	6892      	ldr	r2, [r2, #8]
 800909a:	605a      	str	r2, [r3, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	3304      	adds	r3, #4
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d103      	bne.n	80090b0 <xTaskRemoveFromEventList+0x90>
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	605a      	str	r2, [r3, #4]
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2200      	movs	r2, #0
 80090b4:	615a      	str	r2, [r3, #20]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1e5a      	subs	r2, r3, #1
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4b38      	ldr	r3, [pc, #224]	; (80091a8 <xTaskRemoveFromEventList+0x188>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d903      	bls.n	80090d4 <xTaskRemoveFromEventList+0xb4>
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a35      	ldr	r2, [pc, #212]	; (80091a8 <xTaskRemoveFromEventList+0x188>)
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d8:	4934      	ldr	r1, [pc, #208]	; (80091ac <xTaskRemoveFromEventList+0x18c>)
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	3304      	adds	r3, #4
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	60bb      	str	r3, [r7, #8]
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	609a      	str	r2, [r3, #8]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	60da      	str	r2, [r3, #12]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	3204      	adds	r2, #4
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	1d1a      	adds	r2, r3, #4
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	609a      	str	r2, [r3, #8]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4a25      	ldr	r2, [pc, #148]	; (80091ac <xTaskRemoveFromEventList+0x18c>)
 8009118:	441a      	add	r2, r3
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	615a      	str	r2, [r3, #20]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	4922      	ldr	r1, [pc, #136]	; (80091ac <xTaskRemoveFromEventList+0x18c>)
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	1c59      	adds	r1, r3, #1
 8009132:	481e      	ldr	r0, [pc, #120]	; (80091ac <xTaskRemoveFromEventList+0x18c>)
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4403      	add	r3, r0
 800913e:	6019      	str	r1, [r3, #0]
 8009140:	e01b      	b.n	800917a <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009142:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <xTaskRemoveFromEventList+0x190>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	61da      	str	r2, [r3, #28]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	621a      	str	r2, [r3, #32]
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	3218      	adds	r2, #24
 800915e:	605a      	str	r2, [r3, #4]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f103 0218 	add.w	r2, r3, #24
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	609a      	str	r2, [r3, #8]
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	4a10      	ldr	r2, [pc, #64]	; (80091b0 <xTaskRemoveFromEventList+0x190>)
 800916e:	629a      	str	r2, [r3, #40]	; 0x28
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <xTaskRemoveFromEventList+0x190>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	4a0e      	ldr	r2, [pc, #56]	; (80091b0 <xTaskRemoveFromEventList+0x190>)
 8009178:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <xTaskRemoveFromEventList+0x194>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	429a      	cmp	r2, r3
 8009186:	d905      	bls.n	8009194 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009188:	2301      	movs	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <xTaskRemoveFromEventList+0x198>)
 800918e:	2201      	movs	r2, #1
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e001      	b.n	8009198 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8009198:	69fb      	ldr	r3, [r7, #28]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3720      	adds	r7, #32
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000f80 	.word	0x20000f80
 80091a8:	20000f60 	.word	0x20000f60
 80091ac:	20000a88 	.word	0x20000a88
 80091b0:	20000f18 	.word	0x20000f18
 80091b4:	20000a84 	.word	0x20000a84
 80091b8:	20000f6c 	.word	0x20000f6c

080091bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091c4:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <vTaskInternalSetTimeOutState+0x24>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80091cc:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <vTaskInternalSetTimeOutState+0x28>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	605a      	str	r2, [r3, #4]
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20000f70 	.word	0x20000f70
 80091e4:	20000f5c 	.word	0x20000f5c

080091e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <xTaskCheckForTimeOut+0x16>
 80091f8:	f000 fdd6 	bl	8009da8 <ulSetInterruptMask>
 80091fc:	e7fe      	b.n	80091fc <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <xTaskCheckForTimeOut+0x22>
 8009204:	f000 fdd0 	bl	8009da8 <ulSetInterruptMask>
 8009208:	e7fe      	b.n	8009208 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800920a:	f000 fc8d 	bl	8009b28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800920e:	4b1f      	ldr	r3, [pc, #124]	; (800928c <xTaskCheckForTimeOut+0xa4>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d102      	bne.n	800922e <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	e026      	b.n	800927c <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b17      	ldr	r3, [pc, #92]	; (8009290 <xTaskCheckForTimeOut+0xa8>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d00a      	beq.n	8009250 <xTaskCheckForTimeOut+0x68>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d305      	bcc.n	8009250 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	e015      	b.n	800927c <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	429a      	cmp	r2, r3
 8009258:	d20b      	bcs.n	8009272 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1ad2      	subs	r2, r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff ffa8 	bl	80091bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e004      	b.n	800927c <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009278:	2301      	movs	r3, #1
 800927a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800927c:	f000 fc66 	bl	8009b4c <vPortExitCritical>

    return xReturn;
 8009280:	697b      	ldr	r3, [r7, #20]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20000f5c 	.word	0x20000f5c
 8009290:	20000f70 	.word	0x20000f70

08009294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009298:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <vTaskMissedYield+0x14>)
 800929a:	2201      	movs	r2, #1
 800929c:	601a      	str	r2, [r3, #0]
}
 800929e:	bf00      	nop
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	20000f6c 	.word	0x20000f6c

080092ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80092b4:	f000 f84a 	bl	800934c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092b8:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <prvIdleTask+0x1c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d9f9      	bls.n	80092b4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80092c0:	f000 fc20 	bl	8009b04 <vPortYield>
        prvCheckTasksWaitingTermination();
 80092c4:	e7f6      	b.n	80092b4 <prvIdleTask+0x8>
 80092c6:	bf00      	nop
 80092c8:	20000a88 	.word	0x20000a88

080092cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092d2:	2300      	movs	r3, #0
 80092d4:	607b      	str	r3, [r7, #4]
 80092d6:	e00c      	b.n	80092f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a12      	ldr	r2, [pc, #72]	; (800932c <prvInitialiseTaskLists+0x60>)
 80092e4:	4413      	add	r3, r2
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fe74 	bl	8007fd4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3301      	adds	r3, #1
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b37      	cmp	r3, #55	; 0x37
 80092f6:	d9ef      	bls.n	80092d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80092f8:	480d      	ldr	r0, [pc, #52]	; (8009330 <prvInitialiseTaskLists+0x64>)
 80092fa:	f7fe fe6b 	bl	8007fd4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80092fe:	480d      	ldr	r0, [pc, #52]	; (8009334 <prvInitialiseTaskLists+0x68>)
 8009300:	f7fe fe68 	bl	8007fd4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009304:	480c      	ldr	r0, [pc, #48]	; (8009338 <prvInitialiseTaskLists+0x6c>)
 8009306:	f7fe fe65 	bl	8007fd4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800930a:	480c      	ldr	r0, [pc, #48]	; (800933c <prvInitialiseTaskLists+0x70>)
 800930c:	f7fe fe62 	bl	8007fd4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8009310:	480b      	ldr	r0, [pc, #44]	; (8009340 <prvInitialiseTaskLists+0x74>)
 8009312:	f7fe fe5f 	bl	8007fd4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <prvInitialiseTaskLists+0x78>)
 8009318:	4a05      	ldr	r2, [pc, #20]	; (8009330 <prvInitialiseTaskLists+0x64>)
 800931a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <prvInitialiseTaskLists+0x7c>)
 800931e:	4a05      	ldr	r2, [pc, #20]	; (8009334 <prvInitialiseTaskLists+0x68>)
 8009320:	601a      	str	r2, [r3, #0]
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000a88 	.word	0x20000a88
 8009330:	20000ee8 	.word	0x20000ee8
 8009334:	20000efc 	.word	0x20000efc
 8009338:	20000f18 	.word	0x20000f18
 800933c:	20000f2c 	.word	0x20000f2c
 8009340:	20000f44 	.word	0x20000f44
 8009344:	20000f10 	.word	0x20000f10
 8009348:	20000f14 	.word	0x20000f14

0800934c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009352:	e019      	b.n	8009388 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009354:	f000 fbe8 	bl	8009b28 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	4b10      	ldr	r3, [pc, #64]	; (800939c <prvCheckTasksWaitingTermination+0x50>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe fe9b 	bl	80080a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800936a:	4b0d      	ldr	r3, [pc, #52]	; (80093a0 <prvCheckTasksWaitingTermination+0x54>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a0b      	ldr	r2, [pc, #44]	; (80093a0 <prvCheckTasksWaitingTermination+0x54>)
 8009372:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009374:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <prvCheckTasksWaitingTermination+0x58>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	4a0a      	ldr	r2, [pc, #40]	; (80093a4 <prvCheckTasksWaitingTermination+0x58>)
 800937c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800937e:	f000 fbe5 	bl	8009b4c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f810 	bl	80093a8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <prvCheckTasksWaitingTermination+0x58>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e1      	bne.n	8009354 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000f2c 	.word	0x20000f2c
 80093a0:	20000f58 	.word	0x20000f58
 80093a4:	20000f40 	.word	0x20000f40

080093a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d108      	bne.n	80093cc <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fda6 	bl	8009f10 <vPortFree>
                    vPortFree( pxTCB );
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fda3 	bl	8009f10 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80093ca:	e010      	b.n	80093ee <prvDeleteTCB+0x46>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d103      	bne.n	80093de <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fd9a 	bl	8009f10 <vPortFree>
    }
 80093dc:	e007      	b.n	80093ee <prvDeleteTCB+0x46>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d002      	beq.n	80093ee <prvDeleteTCB+0x46>
 80093e8:	f000 fcde 	bl	8009da8 <ulSetInterruptMask>
 80093ec:	e7fe      	b.n	80093ec <prvDeleteTCB+0x44>
    }
 80093ee:	bf00      	nop
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <prvResetNextTaskUnblockTime+0x30>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <prvResetNextTaskUnblockTime+0x34>)
 8009408:	f04f 32ff 	mov.w	r2, #4294967295
 800940c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800940e:	e005      	b.n	800941c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <prvResetNextTaskUnblockTime+0x30>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a04      	ldr	r2, [pc, #16]	; (800942c <prvResetNextTaskUnblockTime+0x34>)
 800941a:	6013      	str	r3, [r2, #0]
}
 800941c:	bf00      	nop
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	20000f10 	.word	0x20000f10
 800942c:	20000f78 	.word	0x20000f78

08009430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009436:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <xTaskGetSchedulerState+0x34>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800943e:	2301      	movs	r3, #1
 8009440:	607b      	str	r3, [r7, #4]
 8009442:	e008      	b.n	8009456 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009444:	4b08      	ldr	r3, [pc, #32]	; (8009468 <xTaskGetSchedulerState+0x38>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d102      	bne.n	8009452 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800944c:	2302      	movs	r3, #2
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	e001      	b.n	8009456 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009452:	2300      	movs	r3, #0
 8009454:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009456:	687b      	ldr	r3, [r7, #4]
    }
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20000f64 	.word	0x20000f64
 8009468:	20000f80 	.word	0x20000f80

0800946c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947c:	4b2d      	ldr	r3, [pc, #180]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3304      	adds	r3, #4
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fe0c 	bl	80080a0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d124      	bne.n	80094da <prvAddCurrentTaskToDelayedList+0x6e>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d021      	beq.n	80094da <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009496:	4b28      	ldr	r3, [pc, #160]	; (8009538 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	4b25      	ldr	r3, [pc, #148]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	609a      	str	r2, [r3, #8]
 80094a4:	4b23      	ldr	r3, [pc, #140]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	6892      	ldr	r2, [r2, #8]
 80094ac:	60da      	str	r2, [r3, #12]
 80094ae:	4b21      	ldr	r3, [pc, #132]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	3204      	adds	r2, #4
 80094b8:	605a      	str	r2, [r3, #4]
 80094ba:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	1d1a      	adds	r2, r3, #4
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	609a      	str	r2, [r3, #8]
 80094c4:	4b1b      	ldr	r3, [pc, #108]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1b      	ldr	r2, [pc, #108]	; (8009538 <prvAddCurrentTaskToDelayedList+0xcc>)
 80094ca:	615a      	str	r2, [r3, #20]
 80094cc:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <prvAddCurrentTaskToDelayedList+0xcc>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3301      	adds	r3, #1
 80094d2:	4a19      	ldr	r2, [pc, #100]	; (8009538 <prvAddCurrentTaskToDelayedList+0xcc>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80094d8:	e026      	b.n	8009528 <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4413      	add	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094e2:	4b14      	ldr	r3, [pc, #80]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d209      	bcs.n	8009506 <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <prvAddCurrentTaskToDelayedList+0xd0>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7fe fd95 	bl	800802e <vListInsert>
}
 8009504:	e010      	b.n	8009528 <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009506:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <prvAddCurrentTaskToDelayedList+0xd4>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe fd8b 	bl	800802e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8009518:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <prvAddCurrentTaskToDelayedList+0xd8>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	429a      	cmp	r2, r3
 8009520:	d202      	bcs.n	8009528 <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 8009522:	4a08      	ldr	r2, [pc, #32]	; (8009544 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6013      	str	r3, [r2, #0]
}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20000f5c 	.word	0x20000f5c
 8009534:	20000a84 	.word	0x20000a84
 8009538:	20000f44 	.word	0x20000f44
 800953c:	20000f14 	.word	0x20000f14
 8009540:	20000f10 	.word	0x20000f10
 8009544:	20000f78 	.word	0x20000f78

08009548 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009552:	f000 fa59 	bl	8009a08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009556:	4b18      	ldr	r3, [pc, #96]	; (80095b8 <xTimerCreateTimerTask+0x70>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d020      	beq.n	80095a0 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009566:	463a      	mov	r2, r7
 8009568:	1d39      	adds	r1, r7, #4
 800956a:	f107 0308 	add.w	r3, r7, #8
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fd16 	bl	8007fa0 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	9202      	str	r2, [sp, #8]
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	2302      	movs	r3, #2
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	460a      	mov	r2, r1
 8009586:	490d      	ldr	r1, [pc, #52]	; (80095bc <xTimerCreateTimerTask+0x74>)
 8009588:	480d      	ldr	r0, [pc, #52]	; (80095c0 <xTimerCreateTimerTask+0x78>)
 800958a:	f7ff f853 	bl	8008634 <xTaskCreateStatic>
 800958e:	4603      	mov	r3, r0
 8009590:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <xTimerCreateTimerTask+0x7c>)
 8009592:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8009594:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <xTimerCreateTimerTask+0x7c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 800959c:	2301      	movs	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <xTimerCreateTimerTask+0x64>
 80095a6:	f000 fbff 	bl	8009da8 <ulSetInterruptMask>
 80095aa:	e7fe      	b.n	80095aa <xTimerCreateTimerTask+0x62>
        return xReturn;
 80095ac:	68fb      	ldr	r3, [r7, #12]
    }
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20000fb4 	.word	0x20000fb4
 80095bc:	0800b364 	.word	0x0800b364
 80095c0:	0800966d 	.word	0x0800966d
 80095c4:	20000fb8 	.word	0x20000fb8

080095c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80095d4:	e008      	b.n	80095e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	18d1      	adds	r1, r2, r3
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f8d5 	bl	80097a4 <prvInsertTimerInActiveList>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1ea      	bne.n	80095d6 <prvReloadTimer+0xe>
        }
    }
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <prvProcessExpiredTimer+0x5c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe fd3b 	bl	80080a0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff ffc3 	bl	80095c8 <prvReloadTimer>
 8009642:	e008      	b.n	8009656 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800964a:	f023 0301 	bic.w	r3, r3, #1
 800964e:	b2da      	uxtb	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	4798      	blx	r3
    }
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20000fac 	.word	0x20000fac

0800966c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009674:	f107 0308 	add.w	r3, r7, #8
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f84f 	bl	800971c <prvGetNextExpireTime>
 800967e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4619      	mov	r1, r3
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 f803 	bl	8009690 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800968a:	f000 f8cd 	bl	8009828 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800968e:	e7f1      	b.n	8009674 <prvTimerTask+0x8>

08009690 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800969a:	f7ff f9f9 	bl	8008a90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800969e:	f107 0308 	add.w	r3, r7, #8
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f85e 	bl	8009764 <prvSampleTimeNow>
 80096a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d12a      	bne.n	8009706 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <prvProcessTimerOrBlockTask+0x3c>
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d806      	bhi.n	80096cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80096be:	f7ff f9f5 	bl	8008aac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff ffa1 	bl	800960c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80096ca:	e01e      	b.n	800970a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d008      	beq.n	80096e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096d2:	4b10      	ldr	r3, [pc, #64]	; (8009714 <prvProcessTimerOrBlockTask+0x84>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <prvProcessTimerOrBlockTask+0x50>
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <prvProcessTimerOrBlockTask+0x52>
 80096e0:	2300      	movs	r3, #0
 80096e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <prvProcessTimerOrBlockTask+0x88>)
 80096e6:	6818      	ldr	r0, [r3, #0]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	4619      	mov	r1, r3
 80096f2:	f7fe ff6b 	bl	80085cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80096f6:	f7ff f9d9 	bl	8008aac <xTaskResumeAll>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8009700:	f000 fa00 	bl	8009b04 <vPortYield>
    }
 8009704:	e001      	b.n	800970a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8009706:	f7ff f9d1 	bl	8008aac <xTaskResumeAll>
    }
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000fb0 	.word	0x20000fb0
 8009718:	20000fb4 	.word	0x20000fb4

0800971c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <prvGetNextExpireTime+0x44>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <prvGetNextExpireTime+0x16>
 800972e:	2201      	movs	r2, #1
 8009730:	e000      	b.n	8009734 <prvGetNextExpireTime+0x18>
 8009732:	2200      	movs	r2, #0
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d105      	bne.n	800974c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <prvGetNextExpireTime+0x44>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]
 800974a:	e001      	b.n	8009750 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009750:	68fb      	ldr	r3, [r7, #12]
    }
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20000fac 	.word	0x20000fac

08009764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800976c:	f7ff fa8a 	bl	8008c84 <xTaskGetTickCount>
 8009770:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <prvSampleTimeNow+0x3c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	429a      	cmp	r2, r3
 800977a:	d205      	bcs.n	8009788 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800977c:	f000 f91e 	bl	80099bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	e002      	b.n	800978e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800978e:	4a04      	ldr	r2, [pc, #16]	; (80097a0 <prvSampleTimeNow+0x3c>)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009794:	68fb      	ldr	r3, [r7, #12]
    }
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000fbc 	.word	0x20000fbc

080097a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d812      	bhi.n	80097f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	1ad2      	subs	r2, r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d302      	bcc.n	80097de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80097d8:	2301      	movs	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e01b      	b.n	8009816 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <prvInsertTimerInActiveList+0x7c>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	4610      	mov	r0, r2
 80097ea:	f7fe fc20 	bl	800802e <vListInsert>
 80097ee:	e012      	b.n	8009816 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d206      	bcs.n	8009806 <prvInsertTimerInActiveList+0x62>
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d302      	bcc.n	8009806 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e007      	b.n	8009816 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <prvInsertTimerInActiveList+0x80>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3304      	adds	r3, #4
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f7fe fc0c 	bl	800802e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8009816:	697b      	ldr	r3, [r7, #20]
    }
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000fb0 	.word	0x20000fb0
 8009824:	20000fac 	.word	0x20000fac

08009828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800982e:	e0b2      	b.n	8009996 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	da10      	bge.n	8009858 <prvProcessReceivedCommands+0x30>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009836:	1d3b      	adds	r3, r7, #4
 8009838:	3304      	adds	r3, #4
 800983a:	61fb      	str	r3, [r7, #28]

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <prvProcessReceivedCommands+0x20>
 8009842:	f000 fab1 	bl	8009da8 <ulSetInterruptMask>
 8009846:	e7fe      	b.n	8009846 <prvProcessReceivedCommands+0x1e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	6850      	ldr	r0, [r2, #4]
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	6892      	ldr	r2, [r2, #8]
 8009854:	4611      	mov	r1, r2
 8009856:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f2c0 809b 	blt.w	8009996 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	3304      	adds	r3, #4
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe fc15 	bl	80080a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009876:	463b      	mov	r3, r7
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff ff73 	bl	8009764 <prvSampleTimeNow>
 800987e:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3b01      	subs	r3, #1
 8009884:	2b08      	cmp	r3, #8
 8009886:	f200 8085 	bhi.w	8009994 <prvProcessReceivedCommands+0x16c>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <prvProcessReceivedCommands+0x68>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098b5 	.word	0x080098b5
 8009894:	080098b5 	.word	0x080098b5
 8009898:	0800991d 	.word	0x0800991d
 800989c:	08009931 	.word	0x08009931
 80098a0:	0800996b 	.word	0x0800996b
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098b5 	.word	0x080098b5
 80098ac:	0800991d 	.word	0x0800991d
 80098b0:	08009931 	.word	0x08009931
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ba:	f043 0301 	orr.w	r3, r3, #1
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	18d1      	adds	r1, r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	69b8      	ldr	r0, [r7, #24]
 80098d4:	f7ff ff66 	bl	80097a4 <prvInsertTimerInActiveList>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d05b      	beq.n	8009996 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d009      	beq.n	8009900 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	4413      	add	r3, r2
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4619      	mov	r1, r3
 80098f8:	69b8      	ldr	r0, [r7, #24]
 80098fa:	f7ff fe65 	bl	80095c8 <prvReloadTimer>
 80098fe:	e008      	b.n	8009912 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009906:	f023 0301 	bic.w	r3, r3, #1
 800990a:	b2da      	uxtb	r2, r3
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	69b8      	ldr	r0, [r7, #24]
 8009918:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800991a:	e03c      	b.n	8009996 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009922:	f023 0301 	bic.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800992e:	e032      	b.n	8009996 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009936:	f043 0301 	orr.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <prvProcessReceivedCommands+0x12e>
 8009950:	f000 fa2a 	bl	8009da8 <ulSetInterruptMask>
 8009954:	e7fe      	b.n	8009954 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	18d1      	adds	r1, r2, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	69b8      	ldr	r0, [r7, #24]
 8009964:	f7ff ff1e 	bl	80097a4 <prvInsertTimerInActiveList>
                        break;
 8009968:	e015      	b.n	8009996 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b00      	cmp	r3, #0
 8009976:	d103      	bne.n	8009980 <prvProcessReceivedCommands+0x158>
                                {
                                    vPortFree( pxTimer );
 8009978:	69b8      	ldr	r0, [r7, #24]
 800997a:	f000 fac9 	bl	8009f10 <vPortFree>
 800997e:	e00a      	b.n	8009996 <prvProcessReceivedCommands+0x16e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	b2da      	uxtb	r2, r3
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8009992:	e000      	b.n	8009996 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8009994:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009996:	4b08      	ldr	r3, [pc, #32]	; (80099b8 <prvProcessReceivedCommands+0x190>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	1d39      	adds	r1, r7, #4
 800999c:	2200      	movs	r2, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fc88 	bl	80082b4 <xQueueReceive>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f47f af42 	bne.w	8009830 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000fb4 	.word	0x20000fb4

080099bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099c2:	e009      	b.n	80099d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099c4:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <prvSwitchTimerLists+0x44>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80099ce:	f04f 31ff 	mov.w	r1, #4294967295
 80099d2:	6838      	ldr	r0, [r7, #0]
 80099d4:	f7ff fe1a 	bl	800960c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099d8:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <prvSwitchTimerLists+0x44>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f0      	bne.n	80099c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <prvSwitchTimerLists+0x44>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <prvSwitchTimerLists+0x48>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <prvSwitchTimerLists+0x44>)
 80099ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80099f0:	4a04      	ldr	r2, [pc, #16]	; (8009a04 <prvSwitchTimerLists+0x48>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6013      	str	r3, [r2, #0]
    }
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000fac 	.word	0x20000fac
 8009a04:	20000fb0 	.word	0x20000fb0

08009a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8009a0e:	f000 f88b 	bl	8009b28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <prvCheckForValidListAndQueue+0x60>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d120      	bne.n	8009a5c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8009a1a:	4814      	ldr	r0, [pc, #80]	; (8009a6c <prvCheckForValidListAndQueue+0x64>)
 8009a1c:	f7fe fada 	bl	8007fd4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8009a20:	4813      	ldr	r0, [pc, #76]	; (8009a70 <prvCheckForValidListAndQueue+0x68>)
 8009a22:	f7fe fad7 	bl	8007fd4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8009a26:	4b13      	ldr	r3, [pc, #76]	; (8009a74 <prvCheckForValidListAndQueue+0x6c>)
 8009a28:	4a10      	ldr	r2, [pc, #64]	; (8009a6c <prvCheckForValidListAndQueue+0x64>)
 8009a2a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8009a2c:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <prvCheckForValidListAndQueue+0x70>)
 8009a2e:	4a10      	ldr	r2, [pc, #64]	; (8009a70 <prvCheckForValidListAndQueue+0x68>)
 8009a30:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a32:	2300      	movs	r3, #0
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <prvCheckForValidListAndQueue+0x74>)
 8009a38:	4a11      	ldr	r2, [pc, #68]	; (8009a80 <prvCheckForValidListAndQueue+0x78>)
 8009a3a:	2110      	movs	r1, #16
 8009a3c:	200a      	movs	r0, #10
 8009a3e:	f7fe fbd0 	bl	80081e2 <xQueueGenericCreateStatic>
 8009a42:	4603      	mov	r3, r0
 8009a44:	4a08      	ldr	r2, [pc, #32]	; (8009a68 <prvCheckForValidListAndQueue+0x60>)
 8009a46:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8009a48:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <prvCheckForValidListAndQueue+0x60>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d005      	beq.n	8009a5c <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a50:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <prvCheckForValidListAndQueue+0x60>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	490b      	ldr	r1, [pc, #44]	; (8009a84 <prvCheckForValidListAndQueue+0x7c>)
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fd74 	bl	8008544 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009a5c:	f000 f876 	bl	8009b4c <vPortExitCritical>
    }
 8009a60:	bf00      	nop
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000fb4 	.word	0x20000fb4
 8009a6c:	20000f84 	.word	0x20000f84
 8009a70:	20000f98 	.word	0x20000f98
 8009a74:	20000fac 	.word	0x20000fac
 8009a78:	20000fb0 	.word	0x20000fb0
 8009a7c:	20001060 	.word	0x20001060
 8009a80:	20000fc0 	.word	0x20000fc0
 8009a84:	0800b36c 	.word	0x0800b36c

08009a88 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8009a88:	b480      	push	{r7}
 8009a8a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <vPortSetupTimerInterrupt+0x34>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a92:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <vPortSetupTimerInterrupt+0x38>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <vPortSetupTimerInterrupt+0x3c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a0a      	ldr	r2, [pc, #40]	; (8009ac8 <vPortSetupTimerInterrupt+0x40>)
 8009a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa2:	099b      	lsrs	r3, r3, #6
 8009aa4:	4a09      	ldr	r2, [pc, #36]	; (8009acc <vPortSetupTimerInterrupt+0x44>)
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009aaa:	4b04      	ldr	r3, [pc, #16]	; (8009abc <vPortSetupTimerInterrupt+0x34>)
 8009aac:	2207      	movs	r2, #7
 8009aae:	601a      	str	r2, [r3, #0]
}
 8009ab0:	bf00      	nop
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	e000e010 	.word	0xe000e010
 8009ac0:	e000e018 	.word	0xe000e018
 8009ac4:	20000000 	.word	0x20000000
 8009ac8:	10624dd3 	.word	0x10624dd3
 8009acc:	e000e014 	.word	0xe000e014

08009ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <prvTaskExitError+0x30>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d002      	beq.n	8009aea <prvTaskExitError+0x1a>
 8009ae4:	f000 f960 	bl	8009da8 <ulSetInterruptMask>
 8009ae8:	e7fe      	b.n	8009ae8 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8009aea:	f000 f95d 	bl	8009da8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8009aee:	bf00      	nop
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0fc      	beq.n	8009af0 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8009af6:	bf00      	nop
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000010 	.word	0x20000010

08009b04 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b08:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <vPortYield+0x20>)
 8009b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8009b10:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009b14:	f3bf 8f6f 	isb	sy
}
 8009b18:	bf00      	nop
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	e000ed04 	.word	0xe000ed04

08009b28 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009b2c:	f000 f93c 	bl	8009da8 <ulSetInterruptMask>
    ulCriticalNesting++;
 8009b30:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <vPortEnterCritical+0x20>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	4a04      	ldr	r2, [pc, #16]	; (8009b48 <vPortEnterCritical+0x20>)
 8009b38:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8009b3a:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009b3e:	f3bf 8f6f 	isb	sy
}
 8009b42:	bf00      	nop
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000010 	.word	0x20000010

08009b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <vPortExitCritical+0x30>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <vPortExitCritical+0x12>
 8009b58:	f000 f926 	bl	8009da8 <ulSetInterruptMask>
 8009b5c:	e7fe      	b.n	8009b5c <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <vPortExitCritical+0x30>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	4a05      	ldr	r2, [pc, #20]	; (8009b7c <vPortExitCritical+0x30>)
 8009b66:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <vPortExitCritical+0x30>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 8009b70:	2000      	movs	r0, #0
 8009b72:	f000 f926 	bl	8009dc2 <vClearInterruptMask>
    }
}
 8009b76:	bf00      	nop
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000010 	.word	0x20000010

08009b80 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b86:	f000 f90f 	bl	8009da8 <ulSetInterruptMask>
 8009b8a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009b8c:	f7ff f88a 	bl	8008ca4 <xTaskIncrementTick>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b96:	4b05      	ldr	r3, [pc, #20]	; (8009bac <xPortSysTickHandler+0x2c>)
 8009b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f90f 	bl	8009dc2 <vClearInterruptMask>
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3b02      	subs	r3, #2
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d102      	bne.n	8009bd2 <vPortSVCHandler_C+0x22>
                }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8009bcc:	f000 f8b8 	bl	8009d40 <vRestoreContextOfFirstTask>
            break;
 8009bd0:	e002      	b.n	8009bd8 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8009bd2:	f000 f8e9 	bl	8009da8 <ulSetInterruptMask>
 8009bd6:	e7fe      	b.n	8009bd6 <vPortSVCHandler_C+0x26>
    }
}
 8009bd8:	bf00      	nop
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3b04      	subs	r3, #4
 8009bf2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bfa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	3b04      	subs	r3, #4
 8009c0c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8009c0e:	4a38      	ldr	r2, [pc, #224]	; (8009cf0 <pxPortInitialiseStack+0x110>)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3b04      	subs	r3, #4
 8009c18:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8009c20:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3b04      	subs	r3, #4
 8009c26:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8009c2e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3b04      	subs	r3, #4
 8009c34:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8009c3c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3b04      	subs	r3, #4
 8009c42:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8009c4a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3b04      	subs	r3, #4
 8009c50:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3b04      	subs	r3, #4
 8009c5c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8009c64:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3b04      	subs	r3, #4
 8009c6a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8009c72:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8009c80:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3b04      	subs	r3, #4
 8009c86:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8009c8e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3b04      	subs	r3, #4
 8009c94:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8009c9c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3b04      	subs	r3, #4
 8009ca2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8009caa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3b04      	subs	r3, #4
 8009cb0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8009cb8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8009cc6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3b04      	subs	r3, #4
 8009ccc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8009cd4:	601a      	str	r2, [r3, #0]
                        *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
                    }
                }
            #endif /* configENABLE_MPU */

            pxTopOfStack--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	08009ad1 	.word	0x08009ad1

08009cf4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <xPortStartScheduler+0x38>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a0b      	ldr	r2, [pc, #44]	; (8009d2c <xPortStartScheduler+0x38>)
 8009cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d02:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009d04:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <xPortStartScheduler+0x38>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a08      	ldr	r2, [pc, #32]	; (8009d2c <xPortStartScheduler+0x38>)
 8009d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0e:	6013      	str	r3, [r2, #0]
        }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009d10:	f7ff feba 	bl	8009a88 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <xPortStartScheduler+0x3c>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 8009d1a:	f000 f831 	bl	8009d80 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009d1e:	f7ff f8d1 	bl	8008ec4 <vTaskSwitchContext>
    prvTaskExitError();
 8009d22:	f7ff fed5 	bl	8009ad0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed20 	.word	0xe000ed20
 8009d30:	20000010 	.word	0x20000010
	...

08009d40 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009d40:	4a0b      	ldr	r2, [pc, #44]	; (8009d70 <pxCurrentTCBConst2>)
 8009d42:	6811      	ldr	r1, [r2, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	c806      	ldmia	r0!, {r1, r2}
 8009d48:	f381 880b 	msr	PSPLIM, r1
 8009d4c:	2102      	movs	r1, #2
 8009d4e:	f381 8814 	msr	CONTROL, r1
 8009d52:	3020      	adds	r0, #32
 8009d54:	f380 8809 	msr	PSP, r0
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f04f 0000 	mov.w	r0, #0
 8009d60:	f380 8811 	msr	BASEPRI, r0
 8009d64:	4710      	bx	r2
 8009d66:	bf00      	nop
 8009d68:	f3af 8000 	nop.w
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst2>:
 8009d70:	20000a84 	.word	0x20000a84
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
	...

08009d80 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009d80:	4807      	ldr	r0, [pc, #28]	; (8009da0 <xVTORConst>)
 8009d82:	6800      	ldr	r0, [r0, #0]
 8009d84:	6800      	ldr	r0, [r0, #0]
 8009d86:	f380 8808 	msr	MSP, r0
 8009d8a:	b662      	cpsie	i
 8009d8c:	b661      	cpsie	f
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	df02      	svc	2
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	f3af 8000 	nop.w

08009da0 <xVTORConst>:
 8009da0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009da8:	f3ef 8011 	mrs	r0, BASEPRI
 8009dac:	f04f 0150 	mov.w	r1, #80	; 0x50
 8009db0:	f381 8811 	msr	BASEPRI, r1
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8009dbe:	bf00      	nop
 8009dc0:	4618      	mov	r0, r3

08009dc2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009dc2:	f380 8811 	msr	BASEPRI, r0
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8009dd0:	bf00      	nop
	...

08009de0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3ef 820b 	mrs	r2, PSPLIM
 8009de8:	4673      	mov	r3, lr
 8009dea:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009dee:	4a10      	ldr	r2, [pc, #64]	; (8009e30 <pxCurrentTCBConst>)
 8009df0:	6811      	ldr	r1, [r2, #0]
 8009df2:	6008      	str	r0, [r1, #0]
 8009df4:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009df8:	f380 8811 	msr	BASEPRI, r0
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f7ff f85e 	bl	8008ec4 <vTaskSwitchContext>
 8009e08:	f04f 0000 	mov.w	r0, #0
 8009e0c:	f380 8811 	msr	BASEPRI, r0
 8009e10:	4a07      	ldr	r2, [pc, #28]	; (8009e30 <pxCurrentTCBConst>)
 8009e12:	6811      	ldr	r1, [r2, #0]
 8009e14:	6808      	ldr	r0, [r1, #0]
 8009e16:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009e1a:	f382 880b 	msr	PSPLIM, r2
 8009e1e:	f380 8809 	msr	PSP, r0
 8009e22:	4718      	bx	r3
 8009e24:	f3af 8000 	nop.w
 8009e28:	f3af 8000 	nop.w
 8009e2c:	f3af 8000 	nop.w

08009e30 <pxCurrentTCBConst>:
 8009e30:	20000a84 	.word	0x20000a84
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
	...

08009e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009e40:	f01e 0f04 	tst.w	lr, #4
 8009e44:	bf0c      	ite	eq
 8009e46:	f3ef 8008 	mrseq	r0, MSP
 8009e4a:	f3ef 8009 	mrsne	r0, PSP
 8009e4e:	4904      	ldr	r1, [pc, #16]	; (8009e60 <svchandler_address_const>)
 8009e50:	4708      	bx	r1
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	f3af 8000 	nop.w
 8009e5c:	f3af 8000 	nop.w

08009e60 <svchandler_address_const>:
 8009e60:	08009bb1 	.word	0x08009bb1
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop

08009e68 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00e      	beq.n	8009e9c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f023 0307 	bic.w	r3, r3, #7
 8009e84:	3308      	adds	r3, #8
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d205      	bcs.n	8009e98 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	3308      	adds	r3, #8
 8009e94:	607b      	str	r3, [r7, #4]
 8009e96:	e001      	b.n	8009e9c <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 8009e9c:	f7fe fdf8 	bl	8008a90 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8009ea0:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <pvPortMalloc+0x98>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d105      	bne.n	8009eb4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009ea8:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <pvPortMalloc+0x9c>)
 8009eaa:	f023 0307 	bic.w	r3, r3, #7
 8009eae:	461a      	mov	r2, r3
 8009eb0:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <pvPortMalloc+0x98>)
 8009eb2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d01a      	beq.n	8009ef0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009eba:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <pvPortMalloc+0xa0>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 8009ec2:	4a12      	ldr	r2, [pc, #72]	; (8009f0c <pvPortMalloc+0xa4>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d813      	bhi.n	8009ef0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8009ec8:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <pvPortMalloc+0xa0>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	441a      	add	r2, r3
 8009ed0:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <pvPortMalloc+0xa0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d90b      	bls.n	8009ef0 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8009ed8:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <pvPortMalloc+0x98>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <pvPortMalloc+0xa0>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8009ee4:	4b08      	ldr	r3, [pc, #32]	; (8009f08 <pvPortMalloc+0xa0>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4413      	add	r3, r2
 8009eec:	4a06      	ldr	r2, [pc, #24]	; (8009f08 <pvPortMalloc+0xa0>)
 8009eee:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009ef0:	f7fe fddc 	bl	8008aac <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	200410b4 	.word	0x200410b4
 8009f04:	200010b7 	.word	0x200010b7
 8009f08:	200410b0 	.word	0x200410b0
 8009f0c:	0003fff7 	.word	0x0003fff7

08009f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <vPortFree+0x14>
 8009f1e:	f7ff ff43 	bl	8009da8 <ulSetInterruptMask>
 8009f22:	e7fe      	b.n	8009f22 <vPortFree+0x12>
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <malloc>:
 8009f2c:	4b02      	ldr	r3, [pc, #8]	; (8009f38 <malloc+0xc>)
 8009f2e:	4601      	mov	r1, r0
 8009f30:	6818      	ldr	r0, [r3, #0]
 8009f32:	f000 b82b 	b.w	8009f8c <_malloc_r>
 8009f36:	bf00      	nop
 8009f38:	2000006c 	.word	0x2000006c

08009f3c <free>:
 8009f3c:	4b02      	ldr	r3, [pc, #8]	; (8009f48 <free+0xc>)
 8009f3e:	4601      	mov	r1, r0
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	f000 bb77 	b.w	800a634 <_free_r>
 8009f46:	bf00      	nop
 8009f48:	2000006c 	.word	0x2000006c

08009f4c <sbrk_aligned>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	4e0e      	ldr	r6, [pc, #56]	; (8009f88 <sbrk_aligned+0x3c>)
 8009f50:	460c      	mov	r4, r1
 8009f52:	4605      	mov	r5, r0
 8009f54:	6831      	ldr	r1, [r6, #0]
 8009f56:	b911      	cbnz	r1, 8009f5e <sbrk_aligned+0x12>
 8009f58:	f000 fb10 	bl	800a57c <_sbrk_r>
 8009f5c:	6030      	str	r0, [r6, #0]
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 fb0b 	bl	800a57c <_sbrk_r>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	d00a      	beq.n	8009f80 <sbrk_aligned+0x34>
 8009f6a:	1cc4      	adds	r4, r0, #3
 8009f6c:	f024 0403 	bic.w	r4, r4, #3
 8009f70:	42a0      	cmp	r0, r4
 8009f72:	d007      	beq.n	8009f84 <sbrk_aligned+0x38>
 8009f74:	1a21      	subs	r1, r4, r0
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 fb00 	bl	800a57c <_sbrk_r>
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d101      	bne.n	8009f84 <sbrk_aligned+0x38>
 8009f80:	f04f 34ff 	mov.w	r4, #4294967295
 8009f84:	4620      	mov	r0, r4
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	200410bc 	.word	0x200410bc

08009f8c <_malloc_r>:
 8009f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f90:	1ccd      	adds	r5, r1, #3
 8009f92:	4607      	mov	r7, r0
 8009f94:	f025 0503 	bic.w	r5, r5, #3
 8009f98:	3508      	adds	r5, #8
 8009f9a:	2d0c      	cmp	r5, #12
 8009f9c:	bf38      	it	cc
 8009f9e:	250c      	movcc	r5, #12
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	db01      	blt.n	8009fa8 <_malloc_r+0x1c>
 8009fa4:	42a9      	cmp	r1, r5
 8009fa6:	d905      	bls.n	8009fb4 <_malloc_r+0x28>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	2600      	movs	r6, #0
 8009fac:	603b      	str	r3, [r7, #0]
 8009fae:	4630      	mov	r0, r6
 8009fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a088 <_malloc_r+0xfc>
 8009fb8:	f000 f868 	bl	800a08c <__malloc_lock>
 8009fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc0:	461c      	mov	r4, r3
 8009fc2:	bb5c      	cbnz	r4, 800a01c <_malloc_r+0x90>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f7ff ffc0 	bl	8009f4c <sbrk_aligned>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	4604      	mov	r4, r0
 8009fd0:	d155      	bne.n	800a07e <_malloc_r+0xf2>
 8009fd2:	f8d8 4000 	ldr.w	r4, [r8]
 8009fd6:	4626      	mov	r6, r4
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	d145      	bne.n	800a068 <_malloc_r+0xdc>
 8009fdc:	2c00      	cmp	r4, #0
 8009fde:	d048      	beq.n	800a072 <_malloc_r+0xe6>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	eb04 0903 	add.w	r9, r4, r3
 8009fea:	f000 fac7 	bl	800a57c <_sbrk_r>
 8009fee:	4581      	cmp	r9, r0
 8009ff0:	d13f      	bne.n	800a072 <_malloc_r+0xe6>
 8009ff2:	6821      	ldr	r1, [r4, #0]
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	1a6d      	subs	r5, r5, r1
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	f7ff ffa7 	bl	8009f4c <sbrk_aligned>
 8009ffe:	3001      	adds	r0, #1
 800a000:	d037      	beq.n	800a072 <_malloc_r+0xe6>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	442b      	add	r3, r5
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	f8d8 3000 	ldr.w	r3, [r8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d038      	beq.n	800a082 <_malloc_r+0xf6>
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	42a2      	cmp	r2, r4
 800a014:	d12b      	bne.n	800a06e <_malloc_r+0xe2>
 800a016:	2200      	movs	r2, #0
 800a018:	605a      	str	r2, [r3, #4]
 800a01a:	e00f      	b.n	800a03c <_malloc_r+0xb0>
 800a01c:	6822      	ldr	r2, [r4, #0]
 800a01e:	1b52      	subs	r2, r2, r5
 800a020:	d41f      	bmi.n	800a062 <_malloc_r+0xd6>
 800a022:	2a0b      	cmp	r2, #11
 800a024:	d917      	bls.n	800a056 <_malloc_r+0xca>
 800a026:	1961      	adds	r1, r4, r5
 800a028:	42a3      	cmp	r3, r4
 800a02a:	6025      	str	r5, [r4, #0]
 800a02c:	bf18      	it	ne
 800a02e:	6059      	strne	r1, [r3, #4]
 800a030:	6863      	ldr	r3, [r4, #4]
 800a032:	bf08      	it	eq
 800a034:	f8c8 1000 	streq.w	r1, [r8]
 800a038:	5162      	str	r2, [r4, r5]
 800a03a:	604b      	str	r3, [r1, #4]
 800a03c:	f104 060b 	add.w	r6, r4, #11
 800a040:	4638      	mov	r0, r7
 800a042:	f000 f829 	bl	800a098 <__malloc_unlock>
 800a046:	1d23      	adds	r3, r4, #4
 800a048:	f026 0607 	bic.w	r6, r6, #7
 800a04c:	1af2      	subs	r2, r6, r3
 800a04e:	d0ae      	beq.n	8009fae <_malloc_r+0x22>
 800a050:	1b9b      	subs	r3, r3, r6
 800a052:	50a3      	str	r3, [r4, r2]
 800a054:	e7ab      	b.n	8009fae <_malloc_r+0x22>
 800a056:	42a3      	cmp	r3, r4
 800a058:	6862      	ldr	r2, [r4, #4]
 800a05a:	d1dd      	bne.n	800a018 <_malloc_r+0x8c>
 800a05c:	f8c8 2000 	str.w	r2, [r8]
 800a060:	e7ec      	b.n	800a03c <_malloc_r+0xb0>
 800a062:	4623      	mov	r3, r4
 800a064:	6864      	ldr	r4, [r4, #4]
 800a066:	e7ac      	b.n	8009fc2 <_malloc_r+0x36>
 800a068:	4634      	mov	r4, r6
 800a06a:	6876      	ldr	r6, [r6, #4]
 800a06c:	e7b4      	b.n	8009fd8 <_malloc_r+0x4c>
 800a06e:	4613      	mov	r3, r2
 800a070:	e7cc      	b.n	800a00c <_malloc_r+0x80>
 800a072:	230c      	movs	r3, #12
 800a074:	4638      	mov	r0, r7
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	f000 f80e 	bl	800a098 <__malloc_unlock>
 800a07c:	e797      	b.n	8009fae <_malloc_r+0x22>
 800a07e:	6025      	str	r5, [r4, #0]
 800a080:	e7dc      	b.n	800a03c <_malloc_r+0xb0>
 800a082:	605b      	str	r3, [r3, #4]
 800a084:	deff      	udf	#255	; 0xff
 800a086:	bf00      	nop
 800a088:	200410b8 	.word	0x200410b8

0800a08c <__malloc_lock>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__malloc_lock+0x8>)
 800a08e:	f000 bac2 	b.w	800a616 <__retarget_lock_acquire_recursive>
 800a092:	bf00      	nop
 800a094:	20041200 	.word	0x20041200

0800a098 <__malloc_unlock>:
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <__malloc_unlock+0x8>)
 800a09a:	f000 babd 	b.w	800a618 <__retarget_lock_release_recursive>
 800a09e:	bf00      	nop
 800a0a0:	20041200 	.word	0x20041200

0800a0a4 <std>:
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	b510      	push	{r4, lr}
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	6083      	str	r3, [r0, #8]
 800a0ac:	8181      	strh	r1, [r0, #12]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6643      	str	r3, [r0, #100]	; 0x64
 800a0b2:	81c2      	strh	r2, [r0, #14]
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	6183      	str	r3, [r0, #24]
 800a0b8:	e9c0 3300 	strd	r3, r3, [r0]
 800a0bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0c0:	305c      	adds	r0, #92	; 0x5c
 800a0c2:	f000 fa1f 	bl	800a504 <memset>
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <std+0x58>)
 800a0c8:	6224      	str	r4, [r4, #32]
 800a0ca:	6263      	str	r3, [r4, #36]	; 0x24
 800a0cc:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <std+0x5c>)
 800a0ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	; (800a104 <std+0x60>)
 800a0d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <std+0x64>)
 800a0d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <std+0x68>)
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	d006      	beq.n	800a0ec <std+0x48>
 800a0de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a0e2:	4294      	cmp	r4, r2
 800a0e4:	d002      	beq.n	800a0ec <std+0x48>
 800a0e6:	33d0      	adds	r3, #208	; 0xd0
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	d105      	bne.n	800a0f8 <std+0x54>
 800a0ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f4:	f000 ba8e 	b.w	800a614 <__retarget_lock_init_recursive>
 800a0f8:	bd10      	pop	{r4, pc}
 800a0fa:	bf00      	nop
 800a0fc:	0800a355 	.word	0x0800a355
 800a100:	0800a377 	.word	0x0800a377
 800a104:	0800a3af 	.word	0x0800a3af
 800a108:	0800a3d3 	.word	0x0800a3d3
 800a10c:	200410c0 	.word	0x200410c0

0800a110 <stdio_exit_handler>:
 800a110:	4a02      	ldr	r2, [pc, #8]	; (800a11c <stdio_exit_handler+0xc>)
 800a112:	4903      	ldr	r1, [pc, #12]	; (800a120 <stdio_exit_handler+0x10>)
 800a114:	4803      	ldr	r0, [pc, #12]	; (800a124 <stdio_exit_handler+0x14>)
 800a116:	f000 b869 	b.w	800a1ec <_fwalk_sglue>
 800a11a:	bf00      	nop
 800a11c:	20000014 	.word	0x20000014
 800a120:	0800b031 	.word	0x0800b031
 800a124:	20000020 	.word	0x20000020

0800a128 <cleanup_stdio>:
 800a128:	6841      	ldr	r1, [r0, #4]
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <cleanup_stdio+0x34>)
 800a12c:	4299      	cmp	r1, r3
 800a12e:	b510      	push	{r4, lr}
 800a130:	4604      	mov	r4, r0
 800a132:	d001      	beq.n	800a138 <cleanup_stdio+0x10>
 800a134:	f000 ff7c 	bl	800b030 <_fflush_r>
 800a138:	68a1      	ldr	r1, [r4, #8]
 800a13a:	4b09      	ldr	r3, [pc, #36]	; (800a160 <cleanup_stdio+0x38>)
 800a13c:	4299      	cmp	r1, r3
 800a13e:	d002      	beq.n	800a146 <cleanup_stdio+0x1e>
 800a140:	4620      	mov	r0, r4
 800a142:	f000 ff75 	bl	800b030 <_fflush_r>
 800a146:	68e1      	ldr	r1, [r4, #12]
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <cleanup_stdio+0x3c>)
 800a14a:	4299      	cmp	r1, r3
 800a14c:	d004      	beq.n	800a158 <cleanup_stdio+0x30>
 800a14e:	4620      	mov	r0, r4
 800a150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a154:	f000 bf6c 	b.w	800b030 <_fflush_r>
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop
 800a15c:	200410c0 	.word	0x200410c0
 800a160:	20041128 	.word	0x20041128
 800a164:	20041190 	.word	0x20041190

0800a168 <global_stdio_init.part.0>:
 800a168:	b510      	push	{r4, lr}
 800a16a:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <global_stdio_init.part.0+0x30>)
 800a16c:	2104      	movs	r1, #4
 800a16e:	4c0b      	ldr	r4, [pc, #44]	; (800a19c <global_stdio_init.part.0+0x34>)
 800a170:	4a0b      	ldr	r2, [pc, #44]	; (800a1a0 <global_stdio_init.part.0+0x38>)
 800a172:	4620      	mov	r0, r4
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	2200      	movs	r2, #0
 800a178:	f7ff ff94 	bl	800a0a4 <std>
 800a17c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a180:	2201      	movs	r2, #1
 800a182:	2109      	movs	r1, #9
 800a184:	f7ff ff8e 	bl	800a0a4 <std>
 800a188:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a18c:	2202      	movs	r2, #2
 800a18e:	2112      	movs	r1, #18
 800a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a194:	f7ff bf86 	b.w	800a0a4 <std>
 800a198:	200411f8 	.word	0x200411f8
 800a19c:	200410c0 	.word	0x200410c0
 800a1a0:	0800a111 	.word	0x0800a111

0800a1a4 <__sfp_lock_acquire>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	; (800a1ac <__sfp_lock_acquire+0x8>)
 800a1a6:	f000 ba36 	b.w	800a616 <__retarget_lock_acquire_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	20041201 	.word	0x20041201

0800a1b0 <__sfp_lock_release>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	; (800a1b8 <__sfp_lock_release+0x8>)
 800a1b2:	f000 ba31 	b.w	800a618 <__retarget_lock_release_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	20041201 	.word	0x20041201

0800a1bc <__sinit>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	4604      	mov	r4, r0
 800a1c0:	f7ff fff0 	bl	800a1a4 <__sfp_lock_acquire>
 800a1c4:	6a23      	ldr	r3, [r4, #32]
 800a1c6:	b11b      	cbz	r3, 800a1d0 <__sinit+0x14>
 800a1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1cc:	f7ff bff0 	b.w	800a1b0 <__sfp_lock_release>
 800a1d0:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <__sinit+0x28>)
 800a1d2:	6223      	str	r3, [r4, #32]
 800a1d4:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <__sinit+0x2c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f5      	bne.n	800a1c8 <__sinit+0xc>
 800a1dc:	f7ff ffc4 	bl	800a168 <global_stdio_init.part.0>
 800a1e0:	e7f2      	b.n	800a1c8 <__sinit+0xc>
 800a1e2:	bf00      	nop
 800a1e4:	0800a129 	.word	0x0800a129
 800a1e8:	200411f8 	.word	0x200411f8

0800a1ec <_fwalk_sglue>:
 800a1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	4688      	mov	r8, r1
 800a1f4:	4614      	mov	r4, r2
 800a1f6:	2600      	movs	r6, #0
 800a1f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1fc:	f1b9 0901 	subs.w	r9, r9, #1
 800a200:	d505      	bpl.n	800a20e <_fwalk_sglue+0x22>
 800a202:	6824      	ldr	r4, [r4, #0]
 800a204:	2c00      	cmp	r4, #0
 800a206:	d1f7      	bne.n	800a1f8 <_fwalk_sglue+0xc>
 800a208:	4630      	mov	r0, r6
 800a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d907      	bls.n	800a224 <_fwalk_sglue+0x38>
 800a214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a218:	3301      	adds	r3, #1
 800a21a:	d003      	beq.n	800a224 <_fwalk_sglue+0x38>
 800a21c:	4629      	mov	r1, r5
 800a21e:	4638      	mov	r0, r7
 800a220:	47c0      	blx	r8
 800a222:	4306      	orrs	r6, r0
 800a224:	3568      	adds	r5, #104	; 0x68
 800a226:	e7e9      	b.n	800a1fc <_fwalk_sglue+0x10>

0800a228 <iprintf>:
 800a228:	b40f      	push	{r0, r1, r2, r3}
 800a22a:	b507      	push	{r0, r1, r2, lr}
 800a22c:	4906      	ldr	r1, [pc, #24]	; (800a248 <iprintf+0x20>)
 800a22e:	ab04      	add	r3, sp, #16
 800a230:	6808      	ldr	r0, [r1, #0]
 800a232:	f853 2b04 	ldr.w	r2, [r3], #4
 800a236:	6881      	ldr	r1, [r0, #8]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	f000 fbc9 	bl	800a9d0 <_vfiprintf_r>
 800a23e:	b003      	add	sp, #12
 800a240:	f85d eb04 	ldr.w	lr, [sp], #4
 800a244:	b004      	add	sp, #16
 800a246:	4770      	bx	lr
 800a248:	2000006c 	.word	0x2000006c

0800a24c <putchar>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <putchar+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	6882      	ldr	r2, [r0, #8]
 800a254:	f000 bf75 	b.w	800b142 <_putc_r>
 800a258:	2000006c 	.word	0x2000006c

0800a25c <_puts_r>:
 800a25c:	6a03      	ldr	r3, [r0, #32]
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	4605      	mov	r5, r0
 800a262:	460e      	mov	r6, r1
 800a264:	6884      	ldr	r4, [r0, #8]
 800a266:	b90b      	cbnz	r3, 800a26c <_puts_r+0x10>
 800a268:	f7ff ffa8 	bl	800a1bc <__sinit>
 800a26c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a26e:	07db      	lsls	r3, r3, #31
 800a270:	d405      	bmi.n	800a27e <_puts_r+0x22>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	0598      	lsls	r0, r3, #22
 800a276:	d402      	bmi.n	800a27e <_puts_r+0x22>
 800a278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27a:	f000 f9cc 	bl	800a616 <__retarget_lock_acquire_recursive>
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	0719      	lsls	r1, r3, #28
 800a282:	d513      	bpl.n	800a2ac <_puts_r+0x50>
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	b18b      	cbz	r3, 800a2ac <_puts_r+0x50>
 800a288:	3e01      	subs	r6, #1
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a290:	3b01      	subs	r3, #1
 800a292:	60a3      	str	r3, [r4, #8]
 800a294:	b9e9      	cbnz	r1, 800a2d2 <_puts_r+0x76>
 800a296:	2b00      	cmp	r3, #0
 800a298:	da2e      	bge.n	800a2f8 <_puts_r+0x9c>
 800a29a:	4622      	mov	r2, r4
 800a29c:	210a      	movs	r1, #10
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 f89b 	bl	800a3da <__swbuf_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d007      	beq.n	800a2b8 <_puts_r+0x5c>
 800a2a8:	250a      	movs	r5, #10
 800a2aa:	e007      	b.n	800a2bc <_puts_r+0x60>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 f8d0 	bl	800a454 <__swsetup_r>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d0e7      	beq.n	800a288 <_puts_r+0x2c>
 800a2b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a2bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2be:	07da      	lsls	r2, r3, #31
 800a2c0:	d405      	bmi.n	800a2ce <_puts_r+0x72>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	059b      	lsls	r3, r3, #22
 800a2c6:	d402      	bmi.n	800a2ce <_puts_r+0x72>
 800a2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ca:	f000 f9a5 	bl	800a618 <__retarget_lock_release_recursive>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	da04      	bge.n	800a2e0 <_puts_r+0x84>
 800a2d6:	69a2      	ldr	r2, [r4, #24]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	dc06      	bgt.n	800a2ea <_puts_r+0x8e>
 800a2dc:	290a      	cmp	r1, #10
 800a2de:	d004      	beq.n	800a2ea <_puts_r+0x8e>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	6022      	str	r2, [r4, #0]
 800a2e6:	7019      	strb	r1, [r3, #0]
 800a2e8:	e7cf      	b.n	800a28a <_puts_r+0x2e>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f000 f874 	bl	800a3da <__swbuf_r>
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d1c9      	bne.n	800a28a <_puts_r+0x2e>
 800a2f6:	e7df      	b.n	800a2b8 <_puts_r+0x5c>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	250a      	movs	r5, #10
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	6022      	str	r2, [r4, #0]
 800a300:	701d      	strb	r5, [r3, #0]
 800a302:	e7db      	b.n	800a2bc <_puts_r+0x60>

0800a304 <puts>:
 800a304:	4b02      	ldr	r3, [pc, #8]	; (800a310 <puts+0xc>)
 800a306:	4601      	mov	r1, r0
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	f7ff bfa7 	b.w	800a25c <_puts_r>
 800a30e:	bf00      	nop
 800a310:	2000006c 	.word	0x2000006c

0800a314 <siprintf>:
 800a314:	b40e      	push	{r1, r2, r3}
 800a316:	b500      	push	{lr}
 800a318:	b09c      	sub	sp, #112	; 0x70
 800a31a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a31e:	ab1d      	add	r3, sp, #116	; 0x74
 800a320:	9002      	str	r0, [sp, #8]
 800a322:	9006      	str	r0, [sp, #24]
 800a324:	9107      	str	r1, [sp, #28]
 800a326:	9104      	str	r1, [sp, #16]
 800a328:	4808      	ldr	r0, [pc, #32]	; (800a34c <siprintf+0x38>)
 800a32a:	4909      	ldr	r1, [pc, #36]	; (800a350 <siprintf+0x3c>)
 800a32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a330:	9105      	str	r1, [sp, #20]
 800a332:	a902      	add	r1, sp, #8
 800a334:	6800      	ldr	r0, [r0, #0]
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	f000 fa22 	bl	800a780 <_svfiprintf_r>
 800a33c:	9b02      	ldr	r3, [sp, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	b01c      	add	sp, #112	; 0x70
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b003      	add	sp, #12
 800a34a:	4770      	bx	lr
 800a34c:	2000006c 	.word	0x2000006c
 800a350:	ffff0208 	.word	0xffff0208

0800a354 <__sread>:
 800a354:	b510      	push	{r4, lr}
 800a356:	460c      	mov	r4, r1
 800a358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35c:	f000 f8fc 	bl	800a558 <_read_r>
 800a360:	2800      	cmp	r0, #0
 800a362:	bfab      	itete	ge
 800a364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a366:	89a3      	ldrhlt	r3, [r4, #12]
 800a368:	181b      	addge	r3, r3, r0
 800a36a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a36e:	bfac      	ite	ge
 800a370:	6563      	strge	r3, [r4, #84]	; 0x54
 800a372:	81a3      	strhlt	r3, [r4, #12]
 800a374:	bd10      	pop	{r4, pc}

0800a376 <__swrite>:
 800a376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37a:	461f      	mov	r7, r3
 800a37c:	898b      	ldrh	r3, [r1, #12]
 800a37e:	4605      	mov	r5, r0
 800a380:	460c      	mov	r4, r1
 800a382:	05db      	lsls	r3, r3, #23
 800a384:	4616      	mov	r6, r2
 800a386:	d505      	bpl.n	800a394 <__swrite+0x1e>
 800a388:	2302      	movs	r3, #2
 800a38a:	2200      	movs	r2, #0
 800a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a390:	f000 f8d0 	bl	800a534 <_lseek_r>
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	4632      	mov	r2, r6
 800a398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a39c:	4628      	mov	r0, r5
 800a39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	463b      	mov	r3, r7
 800a3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	f000 b8f7 	b.w	800a59c <_write_r>

0800a3ae <__sseek>:
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b6:	f000 f8bd 	bl	800a534 <_lseek_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	bf15      	itete	ne
 800a3c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ca:	81a3      	strheq	r3, [r4, #12]
 800a3cc:	bf18      	it	ne
 800a3ce:	81a3      	strhne	r3, [r4, #12]
 800a3d0:	bd10      	pop	{r4, pc}

0800a3d2 <__sclose>:
 800a3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d6:	f000 b89d 	b.w	800a514 <_close_r>

0800a3da <__swbuf_r>:
 800a3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3dc:	460e      	mov	r6, r1
 800a3de:	4614      	mov	r4, r2
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	b118      	cbz	r0, 800a3ec <__swbuf_r+0x12>
 800a3e4:	6a03      	ldr	r3, [r0, #32]
 800a3e6:	b90b      	cbnz	r3, 800a3ec <__swbuf_r+0x12>
 800a3e8:	f7ff fee8 	bl	800a1bc <__sinit>
 800a3ec:	69a3      	ldr	r3, [r4, #24]
 800a3ee:	60a3      	str	r3, [r4, #8]
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	071a      	lsls	r2, r3, #28
 800a3f4:	d525      	bpl.n	800a442 <__swbuf_r+0x68>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	b31b      	cbz	r3, 800a442 <__swbuf_r+0x68>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	b2f6      	uxtb	r6, r6
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	4637      	mov	r7, r6
 800a402:	1a98      	subs	r0, r3, r2
 800a404:	6963      	ldr	r3, [r4, #20]
 800a406:	4283      	cmp	r3, r0
 800a408:	dc04      	bgt.n	800a414 <__swbuf_r+0x3a>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4628      	mov	r0, r5
 800a40e:	f000 fe0f 	bl	800b030 <_fflush_r>
 800a412:	b9e0      	cbnz	r0, 800a44e <__swbuf_r+0x74>
 800a414:	68a3      	ldr	r3, [r4, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	60a3      	str	r3, [r4, #8]
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	6022      	str	r2, [r4, #0]
 800a420:	701e      	strb	r6, [r3, #0]
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	6962      	ldr	r2, [r4, #20]
 800a426:	429a      	cmp	r2, r3
 800a428:	d004      	beq.n	800a434 <__swbuf_r+0x5a>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	07db      	lsls	r3, r3, #31
 800a42e:	d506      	bpl.n	800a43e <__swbuf_r+0x64>
 800a430:	2e0a      	cmp	r6, #10
 800a432:	d104      	bne.n	800a43e <__swbuf_r+0x64>
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 fdfa 	bl	800b030 <_fflush_r>
 800a43c:	b938      	cbnz	r0, 800a44e <__swbuf_r+0x74>
 800a43e:	4638      	mov	r0, r7
 800a440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f000 f805 	bl	800a454 <__swsetup_r>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d0d5      	beq.n	800a3fa <__swbuf_r+0x20>
 800a44e:	f04f 37ff 	mov.w	r7, #4294967295
 800a452:	e7f4      	b.n	800a43e <__swbuf_r+0x64>

0800a454 <__swsetup_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4b2a      	ldr	r3, [pc, #168]	; (800a500 <__swsetup_r+0xac>)
 800a458:	4605      	mov	r5, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	b118      	cbz	r0, 800a468 <__swsetup_r+0x14>
 800a460:	6a03      	ldr	r3, [r0, #32]
 800a462:	b90b      	cbnz	r3, 800a468 <__swsetup_r+0x14>
 800a464:	f7ff feaa 	bl	800a1bc <__sinit>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a46e:	0718      	lsls	r0, r3, #28
 800a470:	d422      	bmi.n	800a4b8 <__swsetup_r+0x64>
 800a472:	06d9      	lsls	r1, r3, #27
 800a474:	d407      	bmi.n	800a486 <__swsetup_r+0x32>
 800a476:	2309      	movs	r3, #9
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a47e:	f04f 30ff 	mov.w	r0, #4294967295
 800a482:	81a3      	strh	r3, [r4, #12]
 800a484:	e034      	b.n	800a4f0 <__swsetup_r+0x9c>
 800a486:	0758      	lsls	r0, r3, #29
 800a488:	d512      	bpl.n	800a4b0 <__swsetup_r+0x5c>
 800a48a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a48c:	b141      	cbz	r1, 800a4a0 <__swsetup_r+0x4c>
 800a48e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a492:	4299      	cmp	r1, r3
 800a494:	d002      	beq.n	800a49c <__swsetup_r+0x48>
 800a496:	4628      	mov	r0, r5
 800a498:	f000 f8cc 	bl	800a634 <_free_r>
 800a49c:	2300      	movs	r3, #0
 800a49e:	6363      	str	r3, [r4, #52]	; 0x34
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6063      	str	r3, [r4, #4]
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f043 0308 	orr.w	r3, r3, #8
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	b94b      	cbnz	r3, 800a4d0 <__swsetup_r+0x7c>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c6:	d003      	beq.n	800a4d0 <__swsetup_r+0x7c>
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 fdfd 	bl	800b0ca <__smakebuf_r>
 800a4d0:	89a0      	ldrh	r0, [r4, #12]
 800a4d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4d6:	f010 0301 	ands.w	r3, r0, #1
 800a4da:	d00a      	beq.n	800a4f2 <__swsetup_r+0x9e>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60a3      	str	r3, [r4, #8]
 800a4e0:	6963      	ldr	r3, [r4, #20]
 800a4e2:	425b      	negs	r3, r3
 800a4e4:	61a3      	str	r3, [r4, #24]
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	b943      	cbnz	r3, 800a4fc <__swsetup_r+0xa8>
 800a4ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4ee:	d1c4      	bne.n	800a47a <__swsetup_r+0x26>
 800a4f0:	bd38      	pop	{r3, r4, r5, pc}
 800a4f2:	0781      	lsls	r1, r0, #30
 800a4f4:	bf58      	it	pl
 800a4f6:	6963      	ldrpl	r3, [r4, #20]
 800a4f8:	60a3      	str	r3, [r4, #8]
 800a4fa:	e7f4      	b.n	800a4e6 <__swsetup_r+0x92>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e7f7      	b.n	800a4f0 <__swsetup_r+0x9c>
 800a500:	2000006c 	.word	0x2000006c

0800a504 <memset>:
 800a504:	4402      	add	r2, r0
 800a506:	4603      	mov	r3, r0
 800a508:	4293      	cmp	r3, r2
 800a50a:	d100      	bne.n	800a50e <memset+0xa>
 800a50c:	4770      	bx	lr
 800a50e:	f803 1b01 	strb.w	r1, [r3], #1
 800a512:	e7f9      	b.n	800a508 <memset+0x4>

0800a514 <_close_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	2300      	movs	r3, #0
 800a518:	4d05      	ldr	r5, [pc, #20]	; (800a530 <_close_r+0x1c>)
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7f6 ff8f 	bl	8001442 <_close>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_close_r+0x1a>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_close_r+0x1a>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	200411fc 	.word	0x200411fc

0800a534 <_lseek_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4604      	mov	r4, r0
 800a538:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_lseek_r+0x20>)
 800a53a:	4608      	mov	r0, r1
 800a53c:	4611      	mov	r1, r2
 800a53e:	2200      	movs	r2, #0
 800a540:	602a      	str	r2, [r5, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	f7f6 ffa4 	bl	8001490 <_lseek>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_lseek_r+0x1e>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_lseek_r+0x1e>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	200411fc 	.word	0x200411fc

0800a558 <_read_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4604      	mov	r4, r0
 800a55c:	4d06      	ldr	r5, [pc, #24]	; (800a578 <_read_r+0x20>)
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	2200      	movs	r2, #0
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f6 ff32 	bl	80013d0 <_read>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_read_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_read_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	200411fc 	.word	0x200411fc

0800a57c <_sbrk_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	2300      	movs	r3, #0
 800a580:	4d05      	ldr	r5, [pc, #20]	; (800a598 <_sbrk_r+0x1c>)
 800a582:	4604      	mov	r4, r0
 800a584:	4608      	mov	r0, r1
 800a586:	602b      	str	r3, [r5, #0]
 800a588:	f7f6 ff90 	bl	80014ac <_sbrk>
 800a58c:	1c43      	adds	r3, r0, #1
 800a58e:	d102      	bne.n	800a596 <_sbrk_r+0x1a>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	b103      	cbz	r3, 800a596 <_sbrk_r+0x1a>
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	bd38      	pop	{r3, r4, r5, pc}
 800a598:	200411fc 	.word	0x200411fc

0800a59c <_write_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4d06      	ldr	r5, [pc, #24]	; (800a5bc <_write_r+0x20>)
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	602a      	str	r2, [r5, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f7f6 ff2d 	bl	800140a <_write>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_write_r+0x1e>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_write_r+0x1e>
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	200411fc 	.word	0x200411fc

0800a5c0 <__errno>:
 800a5c0:	4b01      	ldr	r3, [pc, #4]	; (800a5c8 <__errno+0x8>)
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	2000006c 	.word	0x2000006c

0800a5cc <__libc_init_array>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	4d0d      	ldr	r5, [pc, #52]	; (800a604 <__libc_init_array+0x38>)
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	4c0d      	ldr	r4, [pc, #52]	; (800a608 <__libc_init_array+0x3c>)
 800a5d4:	1b64      	subs	r4, r4, r5
 800a5d6:	10a4      	asrs	r4, r4, #2
 800a5d8:	42a6      	cmp	r6, r4
 800a5da:	d109      	bne.n	800a5f0 <__libc_init_array+0x24>
 800a5dc:	4d0b      	ldr	r5, [pc, #44]	; (800a60c <__libc_init_array+0x40>)
 800a5de:	2600      	movs	r6, #0
 800a5e0:	4c0b      	ldr	r4, [pc, #44]	; (800a610 <__libc_init_array+0x44>)
 800a5e2:	f000 fe65 	bl	800b2b0 <_init>
 800a5e6:	1b64      	subs	r4, r4, r5
 800a5e8:	10a4      	asrs	r4, r4, #2
 800a5ea:	42a6      	cmp	r6, r4
 800a5ec:	d105      	bne.n	800a5fa <__libc_init_array+0x2e>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f4:	3601      	adds	r6, #1
 800a5f6:	4798      	blx	r3
 800a5f8:	e7ee      	b.n	800a5d8 <__libc_init_array+0xc>
 800a5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5fe:	3601      	adds	r6, #1
 800a600:	4798      	blx	r3
 800a602:	e7f2      	b.n	800a5ea <__libc_init_array+0x1e>
 800a604:	0800b5f8 	.word	0x0800b5f8
 800a608:	0800b5f8 	.word	0x0800b5f8
 800a60c:	0800b5f8 	.word	0x0800b5f8
 800a610:	0800b5fc 	.word	0x0800b5fc

0800a614 <__retarget_lock_init_recursive>:
 800a614:	4770      	bx	lr

0800a616 <__retarget_lock_acquire_recursive>:
 800a616:	4770      	bx	lr

0800a618 <__retarget_lock_release_recursive>:
 800a618:	4770      	bx	lr

0800a61a <memcpy>:
 800a61a:	440a      	add	r2, r1
 800a61c:	1e43      	subs	r3, r0, #1
 800a61e:	4291      	cmp	r1, r2
 800a620:	d100      	bne.n	800a624 <memcpy+0xa>
 800a622:	4770      	bx	lr
 800a624:	b510      	push	{r4, lr}
 800a626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a62a:	4291      	cmp	r1, r2
 800a62c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a630:	d1f9      	bne.n	800a626 <memcpy+0xc>
 800a632:	bd10      	pop	{r4, pc}

0800a634 <_free_r>:
 800a634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a636:	2900      	cmp	r1, #0
 800a638:	d043      	beq.n	800a6c2 <_free_r+0x8e>
 800a63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63e:	1f0c      	subs	r4, r1, #4
 800a640:	9001      	str	r0, [sp, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	bfb8      	it	lt
 800a646:	18e4      	addlt	r4, r4, r3
 800a648:	f7ff fd20 	bl	800a08c <__malloc_lock>
 800a64c:	4a1e      	ldr	r2, [pc, #120]	; (800a6c8 <_free_r+0x94>)
 800a64e:	9801      	ldr	r0, [sp, #4]
 800a650:	6813      	ldr	r3, [r2, #0]
 800a652:	b933      	cbnz	r3, 800a662 <_free_r+0x2e>
 800a654:	6063      	str	r3, [r4, #4]
 800a656:	6014      	str	r4, [r2, #0]
 800a658:	b003      	add	sp, #12
 800a65a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a65e:	f7ff bd1b 	b.w	800a098 <__malloc_unlock>
 800a662:	42a3      	cmp	r3, r4
 800a664:	d908      	bls.n	800a678 <_free_r+0x44>
 800a666:	6825      	ldr	r5, [r4, #0]
 800a668:	1961      	adds	r1, r4, r5
 800a66a:	428b      	cmp	r3, r1
 800a66c:	bf01      	itttt	eq
 800a66e:	6819      	ldreq	r1, [r3, #0]
 800a670:	685b      	ldreq	r3, [r3, #4]
 800a672:	1949      	addeq	r1, r1, r5
 800a674:	6021      	streq	r1, [r4, #0]
 800a676:	e7ed      	b.n	800a654 <_free_r+0x20>
 800a678:	461a      	mov	r2, r3
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	b10b      	cbz	r3, 800a682 <_free_r+0x4e>
 800a67e:	42a3      	cmp	r3, r4
 800a680:	d9fa      	bls.n	800a678 <_free_r+0x44>
 800a682:	6811      	ldr	r1, [r2, #0]
 800a684:	1855      	adds	r5, r2, r1
 800a686:	42a5      	cmp	r5, r4
 800a688:	d10b      	bne.n	800a6a2 <_free_r+0x6e>
 800a68a:	6824      	ldr	r4, [r4, #0]
 800a68c:	4421      	add	r1, r4
 800a68e:	1854      	adds	r4, r2, r1
 800a690:	6011      	str	r1, [r2, #0]
 800a692:	42a3      	cmp	r3, r4
 800a694:	d1e0      	bne.n	800a658 <_free_r+0x24>
 800a696:	681c      	ldr	r4, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	440c      	add	r4, r1
 800a69c:	6053      	str	r3, [r2, #4]
 800a69e:	6014      	str	r4, [r2, #0]
 800a6a0:	e7da      	b.n	800a658 <_free_r+0x24>
 800a6a2:	d902      	bls.n	800a6aa <_free_r+0x76>
 800a6a4:	230c      	movs	r3, #12
 800a6a6:	6003      	str	r3, [r0, #0]
 800a6a8:	e7d6      	b.n	800a658 <_free_r+0x24>
 800a6aa:	6825      	ldr	r5, [r4, #0]
 800a6ac:	1961      	adds	r1, r4, r5
 800a6ae:	428b      	cmp	r3, r1
 800a6b0:	bf02      	ittt	eq
 800a6b2:	6819      	ldreq	r1, [r3, #0]
 800a6b4:	685b      	ldreq	r3, [r3, #4]
 800a6b6:	1949      	addeq	r1, r1, r5
 800a6b8:	6063      	str	r3, [r4, #4]
 800a6ba:	bf08      	it	eq
 800a6bc:	6021      	streq	r1, [r4, #0]
 800a6be:	6054      	str	r4, [r2, #4]
 800a6c0:	e7ca      	b.n	800a658 <_free_r+0x24>
 800a6c2:	b003      	add	sp, #12
 800a6c4:	bd30      	pop	{r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	200410b8 	.word	0x200410b8

0800a6cc <__ssputs_r>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	461f      	mov	r7, r3
 800a6d2:	688e      	ldr	r6, [r1, #8]
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	42be      	cmp	r6, r7
 800a6da:	4690      	mov	r8, r2
 800a6dc:	680b      	ldr	r3, [r1, #0]
 800a6de:	d82c      	bhi.n	800a73a <__ssputs_r+0x6e>
 800a6e0:	898a      	ldrh	r2, [r1, #12]
 800a6e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6e6:	d026      	beq.n	800a736 <__ssputs_r+0x6a>
 800a6e8:	6965      	ldr	r5, [r4, #20]
 800a6ea:	6909      	ldr	r1, [r1, #16]
 800a6ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6f0:	eba3 0901 	sub.w	r9, r3, r1
 800a6f4:	1c7b      	adds	r3, r7, #1
 800a6f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6fa:	444b      	add	r3, r9
 800a6fc:	106d      	asrs	r5, r5, #1
 800a6fe:	429d      	cmp	r5, r3
 800a700:	bf38      	it	cc
 800a702:	461d      	movcc	r5, r3
 800a704:	0553      	lsls	r3, r2, #21
 800a706:	d527      	bpl.n	800a758 <__ssputs_r+0x8c>
 800a708:	4629      	mov	r1, r5
 800a70a:	f7ff fc3f 	bl	8009f8c <_malloc_r>
 800a70e:	4606      	mov	r6, r0
 800a710:	b360      	cbz	r0, 800a76c <__ssputs_r+0xa0>
 800a712:	464a      	mov	r2, r9
 800a714:	6921      	ldr	r1, [r4, #16]
 800a716:	f7ff ff80 	bl	800a61a <memcpy>
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	6126      	str	r6, [r4, #16]
 800a728:	444e      	add	r6, r9
 800a72a:	6165      	str	r5, [r4, #20]
 800a72c:	eba5 0509 	sub.w	r5, r5, r9
 800a730:	6026      	str	r6, [r4, #0]
 800a732:	463e      	mov	r6, r7
 800a734:	60a5      	str	r5, [r4, #8]
 800a736:	42be      	cmp	r6, r7
 800a738:	d900      	bls.n	800a73c <__ssputs_r+0x70>
 800a73a:	463e      	mov	r6, r7
 800a73c:	4632      	mov	r2, r6
 800a73e:	4641      	mov	r1, r8
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	f000 fd32 	bl	800b1aa <memmove>
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	2000      	movs	r0, #0
 800a74a:	1b9b      	subs	r3, r3, r6
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	4433      	add	r3, r6
 800a752:	6023      	str	r3, [r4, #0]
 800a754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a758:	462a      	mov	r2, r5
 800a75a:	f000 fd71 	bl	800b240 <_realloc_r>
 800a75e:	4606      	mov	r6, r0
 800a760:	2800      	cmp	r0, #0
 800a762:	d1e0      	bne.n	800a726 <__ssputs_r+0x5a>
 800a764:	6921      	ldr	r1, [r4, #16]
 800a766:	4650      	mov	r0, sl
 800a768:	f7ff ff64 	bl	800a634 <_free_r>
 800a76c:	230c      	movs	r3, #12
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295
 800a772:	f8ca 3000 	str.w	r3, [sl]
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	e7e9      	b.n	800a754 <__ssputs_r+0x88>

0800a780 <_svfiprintf_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	4698      	mov	r8, r3
 800a786:	898b      	ldrh	r3, [r1, #12]
 800a788:	b09d      	sub	sp, #116	; 0x74
 800a78a:	4607      	mov	r7, r0
 800a78c:	061b      	lsls	r3, r3, #24
 800a78e:	460d      	mov	r5, r1
 800a790:	4614      	mov	r4, r2
 800a792:	d50e      	bpl.n	800a7b2 <_svfiprintf_r+0x32>
 800a794:	690b      	ldr	r3, [r1, #16]
 800a796:	b963      	cbnz	r3, 800a7b2 <_svfiprintf_r+0x32>
 800a798:	2140      	movs	r1, #64	; 0x40
 800a79a:	f7ff fbf7 	bl	8009f8c <_malloc_r>
 800a79e:	6028      	str	r0, [r5, #0]
 800a7a0:	6128      	str	r0, [r5, #16]
 800a7a2:	b920      	cbnz	r0, 800a7ae <_svfiprintf_r+0x2e>
 800a7a4:	230c      	movs	r3, #12
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	e0d0      	b.n	800a950 <_svfiprintf_r+0x1d0>
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	616b      	str	r3, [r5, #20]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b8:	f04f 0901 	mov.w	r9, #1
 800a7bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a968 <_svfiprintf_r+0x1e8>
 800a7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c2:	2320      	movs	r3, #32
 800a7c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7c8:	2330      	movs	r3, #48	; 0x30
 800a7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	469a      	mov	sl, r3
 800a7d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d6:	b10a      	cbz	r2, 800a7dc <_svfiprintf_r+0x5c>
 800a7d8:	2a25      	cmp	r2, #37	; 0x25
 800a7da:	d1f9      	bne.n	800a7d0 <_svfiprintf_r+0x50>
 800a7dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7e0:	d00b      	beq.n	800a7fa <_svfiprintf_r+0x7a>
 800a7e2:	465b      	mov	r3, fp
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7ff ff6f 	bl	800a6cc <__ssputs_r>
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f000 80a9 	beq.w	800a946 <_svfiprintf_r+0x1c6>
 800a7f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f6:	445a      	add	r2, fp
 800a7f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 80a1 	beq.w	800a946 <_svfiprintf_r+0x1c6>
 800a804:	2300      	movs	r3, #0
 800a806:	f04f 32ff 	mov.w	r2, #4294967295
 800a80a:	f10a 0a01 	add.w	sl, sl, #1
 800a80e:	9304      	str	r3, [sp, #16]
 800a810:	9307      	str	r3, [sp, #28]
 800a812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a816:	931a      	str	r3, [sp, #104]	; 0x68
 800a818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a81c:	4654      	mov	r4, sl
 800a81e:	2205      	movs	r2, #5
 800a820:	4851      	ldr	r0, [pc, #324]	; (800a968 <_svfiprintf_r+0x1e8>)
 800a822:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a826:	f000 fcfd 	bl	800b224 <memchr>
 800a82a:	9a04      	ldr	r2, [sp, #16]
 800a82c:	b9d8      	cbnz	r0, 800a866 <_svfiprintf_r+0xe6>
 800a82e:	06d0      	lsls	r0, r2, #27
 800a830:	bf44      	itt	mi
 800a832:	2320      	movmi	r3, #32
 800a834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a838:	0711      	lsls	r1, r2, #28
 800a83a:	bf44      	itt	mi
 800a83c:	232b      	movmi	r3, #43	; 0x2b
 800a83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a842:	f89a 3000 	ldrb.w	r3, [sl]
 800a846:	2b2a      	cmp	r3, #42	; 0x2a
 800a848:	d015      	beq.n	800a876 <_svfiprintf_r+0xf6>
 800a84a:	9a07      	ldr	r2, [sp, #28]
 800a84c:	4654      	mov	r4, sl
 800a84e:	2000      	movs	r0, #0
 800a850:	f04f 0c0a 	mov.w	ip, #10
 800a854:	4621      	mov	r1, r4
 800a856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a85a:	3b30      	subs	r3, #48	; 0x30
 800a85c:	2b09      	cmp	r3, #9
 800a85e:	d94d      	bls.n	800a8fc <_svfiprintf_r+0x17c>
 800a860:	b1b0      	cbz	r0, 800a890 <_svfiprintf_r+0x110>
 800a862:	9207      	str	r2, [sp, #28]
 800a864:	e014      	b.n	800a890 <_svfiprintf_r+0x110>
 800a866:	eba0 0308 	sub.w	r3, r0, r8
 800a86a:	46a2      	mov	sl, r4
 800a86c:	fa09 f303 	lsl.w	r3, r9, r3
 800a870:	4313      	orrs	r3, r2
 800a872:	9304      	str	r3, [sp, #16]
 800a874:	e7d2      	b.n	800a81c <_svfiprintf_r+0x9c>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	9103      	str	r1, [sp, #12]
 800a880:	bfbb      	ittet	lt
 800a882:	425b      	neglt	r3, r3
 800a884:	f042 0202 	orrlt.w	r2, r2, #2
 800a888:	9307      	strge	r3, [sp, #28]
 800a88a:	9307      	strlt	r3, [sp, #28]
 800a88c:	bfb8      	it	lt
 800a88e:	9204      	strlt	r2, [sp, #16]
 800a890:	7823      	ldrb	r3, [r4, #0]
 800a892:	2b2e      	cmp	r3, #46	; 0x2e
 800a894:	d10c      	bne.n	800a8b0 <_svfiprintf_r+0x130>
 800a896:	7863      	ldrb	r3, [r4, #1]
 800a898:	2b2a      	cmp	r3, #42	; 0x2a
 800a89a:	d134      	bne.n	800a906 <_svfiprintf_r+0x186>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	3402      	adds	r4, #2
 800a8a0:	1d1a      	adds	r2, r3, #4
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	9203      	str	r2, [sp, #12]
 800a8a8:	bfb8      	it	lt
 800a8aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8ae:	9305      	str	r3, [sp, #20]
 800a8b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a978 <_svfiprintf_r+0x1f8>
 800a8b4:	2203      	movs	r2, #3
 800a8b6:	7821      	ldrb	r1, [r4, #0]
 800a8b8:	4650      	mov	r0, sl
 800a8ba:	f000 fcb3 	bl	800b224 <memchr>
 800a8be:	b138      	cbz	r0, 800a8d0 <_svfiprintf_r+0x150>
 800a8c0:	eba0 000a 	sub.w	r0, r0, sl
 800a8c4:	2240      	movs	r2, #64	; 0x40
 800a8c6:	9b04      	ldr	r3, [sp, #16]
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	4082      	lsls	r2, r0
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	9304      	str	r3, [sp, #16]
 800a8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d4:	2206      	movs	r2, #6
 800a8d6:	4825      	ldr	r0, [pc, #148]	; (800a96c <_svfiprintf_r+0x1ec>)
 800a8d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8dc:	f000 fca2 	bl	800b224 <memchr>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d038      	beq.n	800a956 <_svfiprintf_r+0x1d6>
 800a8e4:	4b22      	ldr	r3, [pc, #136]	; (800a970 <_svfiprintf_r+0x1f0>)
 800a8e6:	bb1b      	cbnz	r3, 800a930 <_svfiprintf_r+0x1b0>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	3307      	adds	r3, #7
 800a8ec:	f023 0307 	bic.w	r3, r3, #7
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	9303      	str	r3, [sp, #12]
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	4433      	add	r3, r6
 800a8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fa:	e768      	b.n	800a7ce <_svfiprintf_r+0x4e>
 800a8fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a900:	460c      	mov	r4, r1
 800a902:	2001      	movs	r0, #1
 800a904:	e7a6      	b.n	800a854 <_svfiprintf_r+0xd4>
 800a906:	2300      	movs	r3, #0
 800a908:	3401      	adds	r4, #1
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4619      	mov	r1, r3
 800a910:	9305      	str	r3, [sp, #20]
 800a912:	4620      	mov	r0, r4
 800a914:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a918:	3a30      	subs	r2, #48	; 0x30
 800a91a:	2a09      	cmp	r2, #9
 800a91c:	d903      	bls.n	800a926 <_svfiprintf_r+0x1a6>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d0c6      	beq.n	800a8b0 <_svfiprintf_r+0x130>
 800a922:	9105      	str	r1, [sp, #20]
 800a924:	e7c4      	b.n	800a8b0 <_svfiprintf_r+0x130>
 800a926:	fb0c 2101 	mla	r1, ip, r1, r2
 800a92a:	4604      	mov	r4, r0
 800a92c:	2301      	movs	r3, #1
 800a92e:	e7f0      	b.n	800a912 <_svfiprintf_r+0x192>
 800a930:	ab03      	add	r3, sp, #12
 800a932:	462a      	mov	r2, r5
 800a934:	a904      	add	r1, sp, #16
 800a936:	4638      	mov	r0, r7
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	4b0e      	ldr	r3, [pc, #56]	; (800a974 <_svfiprintf_r+0x1f4>)
 800a93c:	f3af 8000 	nop.w
 800a940:	1c42      	adds	r2, r0, #1
 800a942:	4606      	mov	r6, r0
 800a944:	d1d6      	bne.n	800a8f4 <_svfiprintf_r+0x174>
 800a946:	89ab      	ldrh	r3, [r5, #12]
 800a948:	065b      	lsls	r3, r3, #25
 800a94a:	f53f af2d 	bmi.w	800a7a8 <_svfiprintf_r+0x28>
 800a94e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a950:	b01d      	add	sp, #116	; 0x74
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	ab03      	add	r3, sp, #12
 800a958:	462a      	mov	r2, r5
 800a95a:	a904      	add	r1, sp, #16
 800a95c:	4638      	mov	r0, r7
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <_svfiprintf_r+0x1f4>)
 800a962:	f000 f9c1 	bl	800ace8 <_printf_i>
 800a966:	e7eb      	b.n	800a940 <_svfiprintf_r+0x1c0>
 800a968:	0800b5bd 	.word	0x0800b5bd
 800a96c:	0800b5c7 	.word	0x0800b5c7
 800a970:	00000000 	.word	0x00000000
 800a974:	0800a6cd 	.word	0x0800a6cd
 800a978:	0800b5c3 	.word	0x0800b5c3

0800a97c <__sfputc_r>:
 800a97c:	6893      	ldr	r3, [r2, #8]
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	6093      	str	r3, [r2, #8]
 800a984:	b410      	push	{r4}
 800a986:	da08      	bge.n	800a99a <__sfputc_r+0x1e>
 800a988:	6994      	ldr	r4, [r2, #24]
 800a98a:	42a3      	cmp	r3, r4
 800a98c:	db01      	blt.n	800a992 <__sfputc_r+0x16>
 800a98e:	290a      	cmp	r1, #10
 800a990:	d103      	bne.n	800a99a <__sfputc_r+0x1e>
 800a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a996:	f7ff bd20 	b.w	800a3da <__swbuf_r>
 800a99a:	6813      	ldr	r3, [r2, #0]
 800a99c:	1c58      	adds	r0, r3, #1
 800a99e:	6010      	str	r0, [r2, #0]
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	7019      	strb	r1, [r3, #0]
 800a9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <__sfputs_r>:
 800a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	18d5      	adds	r5, r2, r3
 800a9b4:	42ac      	cmp	r4, r5
 800a9b6:	d101      	bne.n	800a9bc <__sfputs_r+0x12>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e007      	b.n	800a9cc <__sfputs_r+0x22>
 800a9bc:	463a      	mov	r2, r7
 800a9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffda 	bl	800a97c <__sfputc_r>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d1f3      	bne.n	800a9b4 <__sfputs_r+0xa>
 800a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d0 <_vfiprintf_r>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	b09d      	sub	sp, #116	; 0x74
 800a9d8:	4614      	mov	r4, r2
 800a9da:	4698      	mov	r8, r3
 800a9dc:	4606      	mov	r6, r0
 800a9de:	b118      	cbz	r0, 800a9e8 <_vfiprintf_r+0x18>
 800a9e0:	6a03      	ldr	r3, [r0, #32]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x18>
 800a9e4:	f7ff fbea 	bl	800a1bc <__sinit>
 800a9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ea:	07d9      	lsls	r1, r3, #31
 800a9ec:	d405      	bmi.n	800a9fa <_vfiprintf_r+0x2a>
 800a9ee:	89ab      	ldrh	r3, [r5, #12]
 800a9f0:	059a      	lsls	r2, r3, #22
 800a9f2:	d402      	bmi.n	800a9fa <_vfiprintf_r+0x2a>
 800a9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9f6:	f7ff fe0e 	bl	800a616 <__retarget_lock_acquire_recursive>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	071b      	lsls	r3, r3, #28
 800a9fe:	d501      	bpl.n	800aa04 <_vfiprintf_r+0x34>
 800aa00:	692b      	ldr	r3, [r5, #16]
 800aa02:	b99b      	cbnz	r3, 800aa2c <_vfiprintf_r+0x5c>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff fd24 	bl	800a454 <__swsetup_r>
 800aa0c:	b170      	cbz	r0, 800aa2c <_vfiprintf_r+0x5c>
 800aa0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa10:	07dc      	lsls	r4, r3, #31
 800aa12:	d504      	bpl.n	800aa1e <_vfiprintf_r+0x4e>
 800aa14:	f04f 30ff 	mov.w	r0, #4294967295
 800aa18:	b01d      	add	sp, #116	; 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	0598      	lsls	r0, r3, #22
 800aa22:	d4f7      	bmi.n	800aa14 <_vfiprintf_r+0x44>
 800aa24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa26:	f7ff fdf7 	bl	800a618 <__retarget_lock_release_recursive>
 800aa2a:	e7f3      	b.n	800aa14 <_vfiprintf_r+0x44>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa32:	f04f 0901 	mov.w	r9, #1
 800aa36:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800abf0 <_vfiprintf_r+0x220>
 800aa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa42:	2330      	movs	r3, #48	; 0x30
 800aa44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa48:	4623      	mov	r3, r4
 800aa4a:	469a      	mov	sl, r3
 800aa4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa50:	b10a      	cbz	r2, 800aa56 <_vfiprintf_r+0x86>
 800aa52:	2a25      	cmp	r2, #37	; 0x25
 800aa54:	d1f9      	bne.n	800aa4a <_vfiprintf_r+0x7a>
 800aa56:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5a:	d00b      	beq.n	800aa74 <_vfiprintf_r+0xa4>
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	4622      	mov	r2, r4
 800aa60:	4629      	mov	r1, r5
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ffa1 	bl	800a9aa <__sfputs_r>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f000 80a9 	beq.w	800abc0 <_vfiprintf_r+0x1f0>
 800aa6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa70:	445a      	add	r2, fp
 800aa72:	9209      	str	r2, [sp, #36]	; 0x24
 800aa74:	f89a 3000 	ldrb.w	r3, [sl]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f000 80a1 	beq.w	800abc0 <_vfiprintf_r+0x1f0>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	f10a 0a01 	add.w	sl, sl, #1
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	9307      	str	r3, [sp, #28]
 800aa8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa90:	931a      	str	r3, [sp, #104]	; 0x68
 800aa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa96:	4654      	mov	r4, sl
 800aa98:	2205      	movs	r2, #5
 800aa9a:	4855      	ldr	r0, [pc, #340]	; (800abf0 <_vfiprintf_r+0x220>)
 800aa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa0:	f000 fbc0 	bl	800b224 <memchr>
 800aaa4:	9a04      	ldr	r2, [sp, #16]
 800aaa6:	b9d8      	cbnz	r0, 800aae0 <_vfiprintf_r+0x110>
 800aaa8:	06d1      	lsls	r1, r2, #27
 800aaaa:	bf44      	itt	mi
 800aaac:	2320      	movmi	r3, #32
 800aaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab2:	0713      	lsls	r3, r2, #28
 800aab4:	bf44      	itt	mi
 800aab6:	232b      	movmi	r3, #43	; 0x2b
 800aab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aabc:	f89a 3000 	ldrb.w	r3, [sl]
 800aac0:	2b2a      	cmp	r3, #42	; 0x2a
 800aac2:	d015      	beq.n	800aaf0 <_vfiprintf_r+0x120>
 800aac4:	9a07      	ldr	r2, [sp, #28]
 800aac6:	4654      	mov	r4, sl
 800aac8:	2000      	movs	r0, #0
 800aaca:	f04f 0c0a 	mov.w	ip, #10
 800aace:	4621      	mov	r1, r4
 800aad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad4:	3b30      	subs	r3, #48	; 0x30
 800aad6:	2b09      	cmp	r3, #9
 800aad8:	d94d      	bls.n	800ab76 <_vfiprintf_r+0x1a6>
 800aada:	b1b0      	cbz	r0, 800ab0a <_vfiprintf_r+0x13a>
 800aadc:	9207      	str	r2, [sp, #28]
 800aade:	e014      	b.n	800ab0a <_vfiprintf_r+0x13a>
 800aae0:	eba0 0308 	sub.w	r3, r0, r8
 800aae4:	46a2      	mov	sl, r4
 800aae6:	fa09 f303 	lsl.w	r3, r9, r3
 800aaea:	4313      	orrs	r3, r2
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	e7d2      	b.n	800aa96 <_vfiprintf_r+0xc6>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	1d19      	adds	r1, r3, #4
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	9103      	str	r1, [sp, #12]
 800aafa:	bfbb      	ittet	lt
 800aafc:	425b      	neglt	r3, r3
 800aafe:	f042 0202 	orrlt.w	r2, r2, #2
 800ab02:	9307      	strge	r3, [sp, #28]
 800ab04:	9307      	strlt	r3, [sp, #28]
 800ab06:	bfb8      	it	lt
 800ab08:	9204      	strlt	r2, [sp, #16]
 800ab0a:	7823      	ldrb	r3, [r4, #0]
 800ab0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab0e:	d10c      	bne.n	800ab2a <_vfiprintf_r+0x15a>
 800ab10:	7863      	ldrb	r3, [r4, #1]
 800ab12:	2b2a      	cmp	r3, #42	; 0x2a
 800ab14:	d134      	bne.n	800ab80 <_vfiprintf_r+0x1b0>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	3402      	adds	r4, #2
 800ab1a:	1d1a      	adds	r2, r3, #4
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	9203      	str	r2, [sp, #12]
 800ab22:	bfb8      	it	lt
 800ab24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab28:	9305      	str	r3, [sp, #20]
 800ab2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ac00 <_vfiprintf_r+0x230>
 800ab2e:	2203      	movs	r2, #3
 800ab30:	7821      	ldrb	r1, [r4, #0]
 800ab32:	4650      	mov	r0, sl
 800ab34:	f000 fb76 	bl	800b224 <memchr>
 800ab38:	b138      	cbz	r0, 800ab4a <_vfiprintf_r+0x17a>
 800ab3a:	eba0 000a 	sub.w	r0, r0, sl
 800ab3e:	2240      	movs	r2, #64	; 0x40
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	3401      	adds	r4, #1
 800ab44:	4082      	lsls	r2, r0
 800ab46:	4313      	orrs	r3, r2
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4e:	2206      	movs	r2, #6
 800ab50:	4828      	ldr	r0, [pc, #160]	; (800abf4 <_vfiprintf_r+0x224>)
 800ab52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab56:	f000 fb65 	bl	800b224 <memchr>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d03f      	beq.n	800abde <_vfiprintf_r+0x20e>
 800ab5e:	4b26      	ldr	r3, [pc, #152]	; (800abf8 <_vfiprintf_r+0x228>)
 800ab60:	bb1b      	cbnz	r3, 800abaa <_vfiprintf_r+0x1da>
 800ab62:	9b03      	ldr	r3, [sp, #12]
 800ab64:	3307      	adds	r3, #7
 800ab66:	f023 0307 	bic.w	r3, r3, #7
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	9303      	str	r3, [sp, #12]
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	443b      	add	r3, r7
 800ab72:	9309      	str	r3, [sp, #36]	; 0x24
 800ab74:	e768      	b.n	800aa48 <_vfiprintf_r+0x78>
 800ab76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	2001      	movs	r0, #1
 800ab7e:	e7a6      	b.n	800aace <_vfiprintf_r+0xfe>
 800ab80:	2300      	movs	r3, #0
 800ab82:	3401      	adds	r4, #1
 800ab84:	f04f 0c0a 	mov.w	ip, #10
 800ab88:	4619      	mov	r1, r3
 800ab8a:	9305      	str	r3, [sp, #20]
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab92:	3a30      	subs	r2, #48	; 0x30
 800ab94:	2a09      	cmp	r2, #9
 800ab96:	d903      	bls.n	800aba0 <_vfiprintf_r+0x1d0>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0c6      	beq.n	800ab2a <_vfiprintf_r+0x15a>
 800ab9c:	9105      	str	r1, [sp, #20]
 800ab9e:	e7c4      	b.n	800ab2a <_vfiprintf_r+0x15a>
 800aba0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba4:	4604      	mov	r4, r0
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7f0      	b.n	800ab8c <_vfiprintf_r+0x1bc>
 800abaa:	ab03      	add	r3, sp, #12
 800abac:	462a      	mov	r2, r5
 800abae:	a904      	add	r1, sp, #16
 800abb0:	4630      	mov	r0, r6
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4b11      	ldr	r3, [pc, #68]	; (800abfc <_vfiprintf_r+0x22c>)
 800abb6:	f3af 8000 	nop.w
 800abba:	4607      	mov	r7, r0
 800abbc:	1c78      	adds	r0, r7, #1
 800abbe:	d1d6      	bne.n	800ab6e <_vfiprintf_r+0x19e>
 800abc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc2:	07d9      	lsls	r1, r3, #31
 800abc4:	d405      	bmi.n	800abd2 <_vfiprintf_r+0x202>
 800abc6:	89ab      	ldrh	r3, [r5, #12]
 800abc8:	059a      	lsls	r2, r3, #22
 800abca:	d402      	bmi.n	800abd2 <_vfiprintf_r+0x202>
 800abcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abce:	f7ff fd23 	bl	800a618 <__retarget_lock_release_recursive>
 800abd2:	89ab      	ldrh	r3, [r5, #12]
 800abd4:	065b      	lsls	r3, r3, #25
 800abd6:	f53f af1d 	bmi.w	800aa14 <_vfiprintf_r+0x44>
 800abda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abdc:	e71c      	b.n	800aa18 <_vfiprintf_r+0x48>
 800abde:	ab03      	add	r3, sp, #12
 800abe0:	462a      	mov	r2, r5
 800abe2:	a904      	add	r1, sp, #16
 800abe4:	4630      	mov	r0, r6
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	4b04      	ldr	r3, [pc, #16]	; (800abfc <_vfiprintf_r+0x22c>)
 800abea:	f000 f87d 	bl	800ace8 <_printf_i>
 800abee:	e7e4      	b.n	800abba <_vfiprintf_r+0x1ea>
 800abf0:	0800b5bd 	.word	0x0800b5bd
 800abf4:	0800b5c7 	.word	0x0800b5c7
 800abf8:	00000000 	.word	0x00000000
 800abfc:	0800a9ab 	.word	0x0800a9ab
 800ac00:	0800b5c3 	.word	0x0800b5c3

0800ac04 <_printf_common>:
 800ac04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac08:	4616      	mov	r6, r2
 800ac0a:	4699      	mov	r9, r3
 800ac0c:	688a      	ldr	r2, [r1, #8]
 800ac0e:	4607      	mov	r7, r0
 800ac10:	690b      	ldr	r3, [r1, #16]
 800ac12:	460c      	mov	r4, r1
 800ac14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	bfb8      	it	lt
 800ac1c:	4613      	movlt	r3, r2
 800ac1e:	6033      	str	r3, [r6, #0]
 800ac20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac24:	b10a      	cbz	r2, 800ac2a <_printf_common+0x26>
 800ac26:	3301      	adds	r3, #1
 800ac28:	6033      	str	r3, [r6, #0]
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	0699      	lsls	r1, r3, #26
 800ac2e:	bf42      	ittt	mi
 800ac30:	6833      	ldrmi	r3, [r6, #0]
 800ac32:	3302      	addmi	r3, #2
 800ac34:	6033      	strmi	r3, [r6, #0]
 800ac36:	6825      	ldr	r5, [r4, #0]
 800ac38:	f015 0506 	ands.w	r5, r5, #6
 800ac3c:	d106      	bne.n	800ac4c <_printf_common+0x48>
 800ac3e:	f104 0a19 	add.w	sl, r4, #25
 800ac42:	68e3      	ldr	r3, [r4, #12]
 800ac44:	6832      	ldr	r2, [r6, #0]
 800ac46:	1a9b      	subs	r3, r3, r2
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	dc2b      	bgt.n	800aca4 <_printf_common+0xa0>
 800ac4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac50:	1e13      	subs	r3, r2, #0
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	bf18      	it	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	0692      	lsls	r2, r2, #26
 800ac5a:	d430      	bmi.n	800acbe <_printf_common+0xba>
 800ac5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac60:	4649      	mov	r1, r9
 800ac62:	4638      	mov	r0, r7
 800ac64:	47c0      	blx	r8
 800ac66:	3001      	adds	r0, #1
 800ac68:	d023      	beq.n	800acb2 <_printf_common+0xae>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	341a      	adds	r4, #26
 800ac6e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ac72:	f003 0306 	and.w	r3, r3, #6
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	bf0a      	itet	eq
 800ac7a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ac7e:	2500      	movne	r5, #0
 800ac80:	6833      	ldreq	r3, [r6, #0]
 800ac82:	f04f 0600 	mov.w	r6, #0
 800ac86:	bf08      	it	eq
 800ac88:	1aed      	subeq	r5, r5, r3
 800ac8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ac8e:	bf08      	it	eq
 800ac90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bfc4      	itt	gt
 800ac98:	1a9b      	subgt	r3, r3, r2
 800ac9a:	18ed      	addgt	r5, r5, r3
 800ac9c:	42b5      	cmp	r5, r6
 800ac9e:	d11a      	bne.n	800acd6 <_printf_common+0xd2>
 800aca0:	2000      	movs	r0, #0
 800aca2:	e008      	b.n	800acb6 <_printf_common+0xb2>
 800aca4:	2301      	movs	r3, #1
 800aca6:	4652      	mov	r2, sl
 800aca8:	4649      	mov	r1, r9
 800acaa:	4638      	mov	r0, r7
 800acac:	47c0      	blx	r8
 800acae:	3001      	adds	r0, #1
 800acb0:	d103      	bne.n	800acba <_printf_common+0xb6>
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295
 800acb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acba:	3501      	adds	r5, #1
 800acbc:	e7c1      	b.n	800ac42 <_printf_common+0x3e>
 800acbe:	18e1      	adds	r1, r4, r3
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	2030      	movs	r0, #48	; 0x30
 800acc4:	3302      	adds	r3, #2
 800acc6:	4422      	add	r2, r4
 800acc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800accc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acd4:	e7c2      	b.n	800ac5c <_printf_common+0x58>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4622      	mov	r2, r4
 800acda:	4649      	mov	r1, r9
 800acdc:	4638      	mov	r0, r7
 800acde:	47c0      	blx	r8
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0e6      	beq.n	800acb2 <_printf_common+0xae>
 800ace4:	3601      	adds	r6, #1
 800ace6:	e7d9      	b.n	800ac9c <_printf_common+0x98>

0800ace8 <_printf_i>:
 800ace8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acec:	7e0f      	ldrb	r7, [r1, #24]
 800acee:	4691      	mov	r9, r2
 800acf0:	4680      	mov	r8, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	2f78      	cmp	r7, #120	; 0x78
 800acf6:	469a      	mov	sl, r3
 800acf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acfe:	d807      	bhi.n	800ad10 <_printf_i+0x28>
 800ad00:	2f62      	cmp	r7, #98	; 0x62
 800ad02:	d80a      	bhi.n	800ad1a <_printf_i+0x32>
 800ad04:	2f00      	cmp	r7, #0
 800ad06:	f000 80d3 	beq.w	800aeb0 <_printf_i+0x1c8>
 800ad0a:	2f58      	cmp	r7, #88	; 0x58
 800ad0c:	f000 80bf 	beq.w	800ae8e <_printf_i+0x1a6>
 800ad10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad18:	e03a      	b.n	800ad90 <_printf_i+0xa8>
 800ad1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad1e:	2b15      	cmp	r3, #21
 800ad20:	d8f6      	bhi.n	800ad10 <_printf_i+0x28>
 800ad22:	a101      	add	r1, pc, #4	; (adr r1, 800ad28 <_printf_i+0x40>)
 800ad24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad28:	0800ad81 	.word	0x0800ad81
 800ad2c:	0800ad95 	.word	0x0800ad95
 800ad30:	0800ad11 	.word	0x0800ad11
 800ad34:	0800ad11 	.word	0x0800ad11
 800ad38:	0800ad11 	.word	0x0800ad11
 800ad3c:	0800ad11 	.word	0x0800ad11
 800ad40:	0800ad95 	.word	0x0800ad95
 800ad44:	0800ad11 	.word	0x0800ad11
 800ad48:	0800ad11 	.word	0x0800ad11
 800ad4c:	0800ad11 	.word	0x0800ad11
 800ad50:	0800ad11 	.word	0x0800ad11
 800ad54:	0800ae97 	.word	0x0800ae97
 800ad58:	0800adc1 	.word	0x0800adc1
 800ad5c:	0800ae53 	.word	0x0800ae53
 800ad60:	0800ad11 	.word	0x0800ad11
 800ad64:	0800ad11 	.word	0x0800ad11
 800ad68:	0800aeb9 	.word	0x0800aeb9
 800ad6c:	0800ad11 	.word	0x0800ad11
 800ad70:	0800adc1 	.word	0x0800adc1
 800ad74:	0800ad11 	.word	0x0800ad11
 800ad78:	0800ad11 	.word	0x0800ad11
 800ad7c:	0800ae5b 	.word	0x0800ae5b
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	1d1a      	adds	r2, r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	602a      	str	r2, [r5, #0]
 800ad88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad90:	2301      	movs	r3, #1
 800ad92:	e09e      	b.n	800aed2 <_printf_i+0x1ea>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	682b      	ldr	r3, [r5, #0]
 800ad98:	0607      	lsls	r7, r0, #24
 800ad9a:	f103 0104 	add.w	r1, r3, #4
 800ad9e:	6029      	str	r1, [r5, #0]
 800ada0:	d501      	bpl.n	800ada6 <_printf_i+0xbe>
 800ada2:	681e      	ldr	r6, [r3, #0]
 800ada4:	e003      	b.n	800adae <_printf_i+0xc6>
 800ada6:	0646      	lsls	r6, r0, #25
 800ada8:	d5fb      	bpl.n	800ada2 <_printf_i+0xba>
 800adaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800adae:	2e00      	cmp	r6, #0
 800adb0:	da03      	bge.n	800adba <_printf_i+0xd2>
 800adb2:	232d      	movs	r3, #45	; 0x2d
 800adb4:	4276      	negs	r6, r6
 800adb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adba:	4859      	ldr	r0, [pc, #356]	; (800af20 <_printf_i+0x238>)
 800adbc:	230a      	movs	r3, #10
 800adbe:	e012      	b.n	800ade6 <_printf_i+0xfe>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	6820      	ldr	r0, [r4, #0]
 800adc4:	1d19      	adds	r1, r3, #4
 800adc6:	6029      	str	r1, [r5, #0]
 800adc8:	0605      	lsls	r5, r0, #24
 800adca:	d501      	bpl.n	800add0 <_printf_i+0xe8>
 800adcc:	681e      	ldr	r6, [r3, #0]
 800adce:	e002      	b.n	800add6 <_printf_i+0xee>
 800add0:	0641      	lsls	r1, r0, #25
 800add2:	d5fb      	bpl.n	800adcc <_printf_i+0xe4>
 800add4:	881e      	ldrh	r6, [r3, #0]
 800add6:	2f6f      	cmp	r7, #111	; 0x6f
 800add8:	4851      	ldr	r0, [pc, #324]	; (800af20 <_printf_i+0x238>)
 800adda:	bf0c      	ite	eq
 800addc:	2308      	moveq	r3, #8
 800adde:	230a      	movne	r3, #10
 800ade0:	2100      	movs	r1, #0
 800ade2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ade6:	6865      	ldr	r5, [r4, #4]
 800ade8:	2d00      	cmp	r5, #0
 800adea:	60a5      	str	r5, [r4, #8]
 800adec:	bfa2      	ittt	ge
 800adee:	6821      	ldrge	r1, [r4, #0]
 800adf0:	f021 0104 	bicge.w	r1, r1, #4
 800adf4:	6021      	strge	r1, [r4, #0]
 800adf6:	b90e      	cbnz	r6, 800adfc <_printf_i+0x114>
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	d04a      	beq.n	800ae92 <_printf_i+0x1aa>
 800adfc:	4615      	mov	r5, r2
 800adfe:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae02:	fb03 6711 	mls	r7, r3, r1, r6
 800ae06:	5dc7      	ldrb	r7, [r0, r7]
 800ae08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae0c:	4637      	mov	r7, r6
 800ae0e:	460e      	mov	r6, r1
 800ae10:	42bb      	cmp	r3, r7
 800ae12:	d9f4      	bls.n	800adfe <_printf_i+0x116>
 800ae14:	2b08      	cmp	r3, #8
 800ae16:	d10b      	bne.n	800ae30 <_printf_i+0x148>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	07de      	lsls	r6, r3, #31
 800ae1c:	d508      	bpl.n	800ae30 <_printf_i+0x148>
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	6861      	ldr	r1, [r4, #4]
 800ae22:	4299      	cmp	r1, r3
 800ae24:	bfde      	ittt	le
 800ae26:	2330      	movle	r3, #48	; 0x30
 800ae28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae30:	1b52      	subs	r2, r2, r5
 800ae32:	6122      	str	r2, [r4, #16]
 800ae34:	464b      	mov	r3, r9
 800ae36:	aa03      	add	r2, sp, #12
 800ae38:	4621      	mov	r1, r4
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	f8cd a000 	str.w	sl, [sp]
 800ae40:	f7ff fee0 	bl	800ac04 <_printf_common>
 800ae44:	3001      	adds	r0, #1
 800ae46:	d149      	bne.n	800aedc <_printf_i+0x1f4>
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	b004      	add	sp, #16
 800ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	f043 0320 	orr.w	r3, r3, #32
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	2778      	movs	r7, #120	; 0x78
 800ae5c:	4831      	ldr	r0, [pc, #196]	; (800af24 <_printf_i+0x23c>)
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae64:	061f      	lsls	r7, r3, #24
 800ae66:	6829      	ldr	r1, [r5, #0]
 800ae68:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae6c:	d402      	bmi.n	800ae74 <_printf_i+0x18c>
 800ae6e:	065f      	lsls	r7, r3, #25
 800ae70:	bf48      	it	mi
 800ae72:	b2b6      	uxthmi	r6, r6
 800ae74:	07df      	lsls	r7, r3, #31
 800ae76:	6029      	str	r1, [r5, #0]
 800ae78:	bf44      	itt	mi
 800ae7a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae7e:	6023      	strmi	r3, [r4, #0]
 800ae80:	b91e      	cbnz	r6, 800ae8a <_printf_i+0x1a2>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	f023 0320 	bic.w	r3, r3, #32
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	2310      	movs	r3, #16
 800ae8c:	e7a8      	b.n	800ade0 <_printf_i+0xf8>
 800ae8e:	4824      	ldr	r0, [pc, #144]	; (800af20 <_printf_i+0x238>)
 800ae90:	e7e5      	b.n	800ae5e <_printf_i+0x176>
 800ae92:	4615      	mov	r5, r2
 800ae94:	e7be      	b.n	800ae14 <_printf_i+0x12c>
 800ae96:	682b      	ldr	r3, [r5, #0]
 800ae98:	6826      	ldr	r6, [r4, #0]
 800ae9a:	1d18      	adds	r0, r3, #4
 800ae9c:	6961      	ldr	r1, [r4, #20]
 800ae9e:	6028      	str	r0, [r5, #0]
 800aea0:	0635      	lsls	r5, r6, #24
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	d501      	bpl.n	800aeaa <_printf_i+0x1c2>
 800aea6:	6019      	str	r1, [r3, #0]
 800aea8:	e002      	b.n	800aeb0 <_printf_i+0x1c8>
 800aeaa:	0670      	lsls	r0, r6, #25
 800aeac:	d5fb      	bpl.n	800aea6 <_printf_i+0x1be>
 800aeae:	8019      	strh	r1, [r3, #0]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	e7bd      	b.n	800ae34 <_printf_i+0x14c>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	2100      	movs	r1, #0
 800aebc:	1d1a      	adds	r2, r3, #4
 800aebe:	602a      	str	r2, [r5, #0]
 800aec0:	681d      	ldr	r5, [r3, #0]
 800aec2:	6862      	ldr	r2, [r4, #4]
 800aec4:	4628      	mov	r0, r5
 800aec6:	f000 f9ad 	bl	800b224 <memchr>
 800aeca:	b108      	cbz	r0, 800aed0 <_printf_i+0x1e8>
 800aecc:	1b40      	subs	r0, r0, r5
 800aece:	6060      	str	r0, [r4, #4]
 800aed0:	6863      	ldr	r3, [r4, #4]
 800aed2:	6123      	str	r3, [r4, #16]
 800aed4:	2300      	movs	r3, #0
 800aed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeda:	e7ab      	b.n	800ae34 <_printf_i+0x14c>
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	462a      	mov	r2, r5
 800aee0:	4649      	mov	r1, r9
 800aee2:	4640      	mov	r0, r8
 800aee4:	47d0      	blx	sl
 800aee6:	3001      	adds	r0, #1
 800aee8:	d0ae      	beq.n	800ae48 <_printf_i+0x160>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	079b      	lsls	r3, r3, #30
 800aeee:	d413      	bmi.n	800af18 <_printf_i+0x230>
 800aef0:	68e0      	ldr	r0, [r4, #12]
 800aef2:	9b03      	ldr	r3, [sp, #12]
 800aef4:	4298      	cmp	r0, r3
 800aef6:	bfb8      	it	lt
 800aef8:	4618      	movlt	r0, r3
 800aefa:	e7a7      	b.n	800ae4c <_printf_i+0x164>
 800aefc:	2301      	movs	r3, #1
 800aefe:	4632      	mov	r2, r6
 800af00:	4649      	mov	r1, r9
 800af02:	4640      	mov	r0, r8
 800af04:	47d0      	blx	sl
 800af06:	3001      	adds	r0, #1
 800af08:	d09e      	beq.n	800ae48 <_printf_i+0x160>
 800af0a:	3501      	adds	r5, #1
 800af0c:	68e3      	ldr	r3, [r4, #12]
 800af0e:	9903      	ldr	r1, [sp, #12]
 800af10:	1a5b      	subs	r3, r3, r1
 800af12:	42ab      	cmp	r3, r5
 800af14:	dcf2      	bgt.n	800aefc <_printf_i+0x214>
 800af16:	e7eb      	b.n	800aef0 <_printf_i+0x208>
 800af18:	2500      	movs	r5, #0
 800af1a:	f104 0619 	add.w	r6, r4, #25
 800af1e:	e7f5      	b.n	800af0c <_printf_i+0x224>
 800af20:	0800b5ce 	.word	0x0800b5ce
 800af24:	0800b5df 	.word	0x0800b5df

0800af28 <__sflush_r>:
 800af28:	898a      	ldrh	r2, [r1, #12]
 800af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	4605      	mov	r5, r0
 800af30:	0710      	lsls	r0, r2, #28
 800af32:	460c      	mov	r4, r1
 800af34:	d458      	bmi.n	800afe8 <__sflush_r+0xc0>
 800af36:	684b      	ldr	r3, [r1, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dc05      	bgt.n	800af48 <__sflush_r+0x20>
 800af3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dc02      	bgt.n	800af48 <__sflush_r+0x20>
 800af42:	2000      	movs	r0, #0
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4a:	2e00      	cmp	r6, #0
 800af4c:	d0f9      	beq.n	800af42 <__sflush_r+0x1a>
 800af4e:	2300      	movs	r3, #0
 800af50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af54:	682f      	ldr	r7, [r5, #0]
 800af56:	6a21      	ldr	r1, [r4, #32]
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	d032      	beq.n	800afc2 <__sflush_r+0x9a>
 800af5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	075a      	lsls	r2, r3, #29
 800af62:	d505      	bpl.n	800af70 <__sflush_r+0x48>
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	1ac0      	subs	r0, r0, r3
 800af68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af6a:	b10b      	cbz	r3, 800af70 <__sflush_r+0x48>
 800af6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af6e:	1ac0      	subs	r0, r0, r3
 800af70:	2300      	movs	r3, #0
 800af72:	4602      	mov	r2, r0
 800af74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af76:	4628      	mov	r0, r5
 800af78:	6a21      	ldr	r1, [r4, #32]
 800af7a:	47b0      	blx	r6
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	d106      	bne.n	800af90 <__sflush_r+0x68>
 800af82:	6829      	ldr	r1, [r5, #0]
 800af84:	291d      	cmp	r1, #29
 800af86:	d82b      	bhi.n	800afe0 <__sflush_r+0xb8>
 800af88:	4a28      	ldr	r2, [pc, #160]	; (800b02c <__sflush_r+0x104>)
 800af8a:	410a      	asrs	r2, r1
 800af8c:	07d6      	lsls	r6, r2, #31
 800af8e:	d427      	bmi.n	800afe0 <__sflush_r+0xb8>
 800af90:	2200      	movs	r2, #0
 800af92:	04d9      	lsls	r1, r3, #19
 800af94:	6062      	str	r2, [r4, #4]
 800af96:	6922      	ldr	r2, [r4, #16]
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	d504      	bpl.n	800afa6 <__sflush_r+0x7e>
 800af9c:	1c42      	adds	r2, r0, #1
 800af9e:	d101      	bne.n	800afa4 <__sflush_r+0x7c>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b903      	cbnz	r3, 800afa6 <__sflush_r+0x7e>
 800afa4:	6560      	str	r0, [r4, #84]	; 0x54
 800afa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa8:	602f      	str	r7, [r5, #0]
 800afaa:	2900      	cmp	r1, #0
 800afac:	d0c9      	beq.n	800af42 <__sflush_r+0x1a>
 800afae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb2:	4299      	cmp	r1, r3
 800afb4:	d002      	beq.n	800afbc <__sflush_r+0x94>
 800afb6:	4628      	mov	r0, r5
 800afb8:	f7ff fb3c 	bl	800a634 <_free_r>
 800afbc:	2000      	movs	r0, #0
 800afbe:	6360      	str	r0, [r4, #52]	; 0x34
 800afc0:	e7c0      	b.n	800af44 <__sflush_r+0x1c>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b0      	blx	r6
 800afc8:	1c41      	adds	r1, r0, #1
 800afca:	d1c8      	bne.n	800af5e <__sflush_r+0x36>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0c5      	beq.n	800af5e <__sflush_r+0x36>
 800afd2:	2b1d      	cmp	r3, #29
 800afd4:	d001      	beq.n	800afda <__sflush_r+0xb2>
 800afd6:	2b16      	cmp	r3, #22
 800afd8:	d101      	bne.n	800afde <__sflush_r+0xb6>
 800afda:	602f      	str	r7, [r5, #0]
 800afdc:	e7b1      	b.n	800af42 <__sflush_r+0x1a>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	e7ad      	b.n	800af44 <__sflush_r+0x1c>
 800afe8:	690f      	ldr	r7, [r1, #16]
 800afea:	2f00      	cmp	r7, #0
 800afec:	d0a9      	beq.n	800af42 <__sflush_r+0x1a>
 800afee:	0793      	lsls	r3, r2, #30
 800aff0:	680e      	ldr	r6, [r1, #0]
 800aff2:	600f      	str	r7, [r1, #0]
 800aff4:	bf0c      	ite	eq
 800aff6:	694b      	ldreq	r3, [r1, #20]
 800aff8:	2300      	movne	r3, #0
 800affa:	eba6 0807 	sub.w	r8, r6, r7
 800affe:	608b      	str	r3, [r1, #8]
 800b000:	f1b8 0f00 	cmp.w	r8, #0
 800b004:	dd9d      	ble.n	800af42 <__sflush_r+0x1a>
 800b006:	4643      	mov	r3, r8
 800b008:	463a      	mov	r2, r7
 800b00a:	6a21      	ldr	r1, [r4, #32]
 800b00c:	4628      	mov	r0, r5
 800b00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b010:	47b0      	blx	r6
 800b012:	2800      	cmp	r0, #0
 800b014:	dc06      	bgt.n	800b024 <__sflush_r+0xfc>
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	f04f 30ff 	mov.w	r0, #4294967295
 800b01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	e78f      	b.n	800af44 <__sflush_r+0x1c>
 800b024:	4407      	add	r7, r0
 800b026:	eba8 0800 	sub.w	r8, r8, r0
 800b02a:	e7e9      	b.n	800b000 <__sflush_r+0xd8>
 800b02c:	dfbffffe 	.word	0xdfbffffe

0800b030 <_fflush_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	690b      	ldr	r3, [r1, #16]
 800b034:	4605      	mov	r5, r0
 800b036:	460c      	mov	r4, r1
 800b038:	b913      	cbnz	r3, 800b040 <_fflush_r+0x10>
 800b03a:	2500      	movs	r5, #0
 800b03c:	4628      	mov	r0, r5
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	b118      	cbz	r0, 800b04a <_fflush_r+0x1a>
 800b042:	6a03      	ldr	r3, [r0, #32]
 800b044:	b90b      	cbnz	r3, 800b04a <_fflush_r+0x1a>
 800b046:	f7ff f8b9 	bl	800a1bc <__sinit>
 800b04a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f3      	beq.n	800b03a <_fflush_r+0xa>
 800b052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b054:	07d0      	lsls	r0, r2, #31
 800b056:	d404      	bmi.n	800b062 <_fflush_r+0x32>
 800b058:	0599      	lsls	r1, r3, #22
 800b05a:	d402      	bmi.n	800b062 <_fflush_r+0x32>
 800b05c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b05e:	f7ff fada 	bl	800a616 <__retarget_lock_acquire_recursive>
 800b062:	4628      	mov	r0, r5
 800b064:	4621      	mov	r1, r4
 800b066:	f7ff ff5f 	bl	800af28 <__sflush_r>
 800b06a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b06c:	4605      	mov	r5, r0
 800b06e:	07da      	lsls	r2, r3, #31
 800b070:	d4e4      	bmi.n	800b03c <_fflush_r+0xc>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	059b      	lsls	r3, r3, #22
 800b076:	d4e1      	bmi.n	800b03c <_fflush_r+0xc>
 800b078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07a:	f7ff facd 	bl	800a618 <__retarget_lock_release_recursive>
 800b07e:	e7dd      	b.n	800b03c <_fflush_r+0xc>

0800b080 <__swhatbuf_r>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	460c      	mov	r4, r1
 800b084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b088:	b096      	sub	sp, #88	; 0x58
 800b08a:	4615      	mov	r5, r2
 800b08c:	2900      	cmp	r1, #0
 800b08e:	461e      	mov	r6, r3
 800b090:	da0c      	bge.n	800b0ac <__swhatbuf_r+0x2c>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	2100      	movs	r1, #0
 800b096:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b09a:	bf0c      	ite	eq
 800b09c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0a0:	2340      	movne	r3, #64	; 0x40
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	6031      	str	r1, [r6, #0]
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	b016      	add	sp, #88	; 0x58
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
 800b0ac:	466a      	mov	r2, sp
 800b0ae:	f000 f897 	bl	800b1e0 <_fstat_r>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	dbed      	blt.n	800b092 <__swhatbuf_r+0x12>
 800b0b6:	9901      	ldr	r1, [sp, #4]
 800b0b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0c0:	4259      	negs	r1, r3
 800b0c2:	4159      	adcs	r1, r3
 800b0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c8:	e7eb      	b.n	800b0a2 <__swhatbuf_r+0x22>

0800b0ca <__smakebuf_r>:
 800b0ca:	898b      	ldrh	r3, [r1, #12]
 800b0cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0ce:	079d      	lsls	r5, r3, #30
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	d507      	bpl.n	800b0e6 <__smakebuf_r+0x1c>
 800b0d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	6163      	str	r3, [r4, #20]
 800b0e2:	b002      	add	sp, #8
 800b0e4:	bd70      	pop	{r4, r5, r6, pc}
 800b0e6:	ab01      	add	r3, sp, #4
 800b0e8:	466a      	mov	r2, sp
 800b0ea:	f7ff ffc9 	bl	800b080 <__swhatbuf_r>
 800b0ee:	9900      	ldr	r1, [sp, #0]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7fe ff4a 	bl	8009f8c <_malloc_r>
 800b0f8:	b948      	cbnz	r0, 800b10e <__smakebuf_r+0x44>
 800b0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fe:	059a      	lsls	r2, r3, #22
 800b100:	d4ef      	bmi.n	800b0e2 <__smakebuf_r+0x18>
 800b102:	f023 0303 	bic.w	r3, r3, #3
 800b106:	f043 0302 	orr.w	r3, r3, #2
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	e7e3      	b.n	800b0d6 <__smakebuf_r+0xc>
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	6020      	str	r0, [r4, #0]
 800b112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b116:	6120      	str	r0, [r4, #16]
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	6163      	str	r3, [r4, #20]
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	b15b      	cbz	r3, 800b13a <__smakebuf_r+0x70>
 800b122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b126:	4630      	mov	r0, r6
 800b128:	f000 f86c 	bl	800b204 <_isatty_r>
 800b12c:	b128      	cbz	r0, 800b13a <__smakebuf_r+0x70>
 800b12e:	89a3      	ldrh	r3, [r4, #12]
 800b130:	f023 0303 	bic.w	r3, r3, #3
 800b134:	f043 0301 	orr.w	r3, r3, #1
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	431d      	orrs	r5, r3
 800b13e:	81a5      	strh	r5, [r4, #12]
 800b140:	e7cf      	b.n	800b0e2 <__smakebuf_r+0x18>

0800b142 <_putc_r>:
 800b142:	b570      	push	{r4, r5, r6, lr}
 800b144:	460d      	mov	r5, r1
 800b146:	4614      	mov	r4, r2
 800b148:	4606      	mov	r6, r0
 800b14a:	b118      	cbz	r0, 800b154 <_putc_r+0x12>
 800b14c:	6a03      	ldr	r3, [r0, #32]
 800b14e:	b90b      	cbnz	r3, 800b154 <_putc_r+0x12>
 800b150:	f7ff f834 	bl	800a1bc <__sinit>
 800b154:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b156:	07d8      	lsls	r0, r3, #31
 800b158:	d405      	bmi.n	800b166 <_putc_r+0x24>
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	0599      	lsls	r1, r3, #22
 800b15e:	d402      	bmi.n	800b166 <_putc_r+0x24>
 800b160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b162:	f7ff fa58 	bl	800a616 <__retarget_lock_acquire_recursive>
 800b166:	68a3      	ldr	r3, [r4, #8]
 800b168:	3b01      	subs	r3, #1
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	60a3      	str	r3, [r4, #8]
 800b16e:	da05      	bge.n	800b17c <_putc_r+0x3a>
 800b170:	69a2      	ldr	r2, [r4, #24]
 800b172:	4293      	cmp	r3, r2
 800b174:	db12      	blt.n	800b19c <_putc_r+0x5a>
 800b176:	b2eb      	uxtb	r3, r5
 800b178:	2b0a      	cmp	r3, #10
 800b17a:	d00f      	beq.n	800b19c <_putc_r+0x5a>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	6022      	str	r2, [r4, #0]
 800b182:	701d      	strb	r5, [r3, #0]
 800b184:	b2ed      	uxtb	r5, r5
 800b186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b188:	07da      	lsls	r2, r3, #31
 800b18a:	d405      	bmi.n	800b198 <_putc_r+0x56>
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	059b      	lsls	r3, r3, #22
 800b190:	d402      	bmi.n	800b198 <_putc_r+0x56>
 800b192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b194:	f7ff fa40 	bl	800a618 <__retarget_lock_release_recursive>
 800b198:	4628      	mov	r0, r5
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	4629      	mov	r1, r5
 800b19e:	4622      	mov	r2, r4
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff f91a 	bl	800a3da <__swbuf_r>
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	e7ed      	b.n	800b186 <_putc_r+0x44>

0800b1aa <memmove>:
 800b1aa:	4288      	cmp	r0, r1
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	eb01 0402 	add.w	r4, r1, r2
 800b1b2:	d902      	bls.n	800b1ba <memmove+0x10>
 800b1b4:	4284      	cmp	r4, r0
 800b1b6:	4623      	mov	r3, r4
 800b1b8:	d807      	bhi.n	800b1ca <memmove+0x20>
 800b1ba:	1e43      	subs	r3, r0, #1
 800b1bc:	42a1      	cmp	r1, r4
 800b1be:	d008      	beq.n	800b1d2 <memmove+0x28>
 800b1c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1c8:	e7f8      	b.n	800b1bc <memmove+0x12>
 800b1ca:	4402      	add	r2, r0
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	428a      	cmp	r2, r1
 800b1d0:	d100      	bne.n	800b1d4 <memmove+0x2a>
 800b1d2:	bd10      	pop	{r4, pc}
 800b1d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1dc:	e7f7      	b.n	800b1ce <memmove+0x24>
	...

0800b1e0 <_fstat_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	4d06      	ldr	r5, [pc, #24]	; (800b200 <_fstat_r+0x20>)
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f7f6 f934 	bl	800145a <_fstat>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_fstat_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_fstat_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	200411fc 	.word	0x200411fc

0800b204 <_isatty_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	2300      	movs	r3, #0
 800b208:	4d05      	ldr	r5, [pc, #20]	; (800b220 <_isatty_r+0x1c>)
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7f6 f933 	bl	800147a <_isatty>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_isatty_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_isatty_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	200411fc 	.word	0x200411fc

0800b224 <memchr>:
 800b224:	b2c9      	uxtb	r1, r1
 800b226:	4402      	add	r2, r0
 800b228:	b510      	push	{r4, lr}
 800b22a:	4290      	cmp	r0, r2
 800b22c:	4603      	mov	r3, r0
 800b22e:	d101      	bne.n	800b234 <memchr+0x10>
 800b230:	2300      	movs	r3, #0
 800b232:	e003      	b.n	800b23c <memchr+0x18>
 800b234:	781c      	ldrb	r4, [r3, #0]
 800b236:	3001      	adds	r0, #1
 800b238:	428c      	cmp	r4, r1
 800b23a:	d1f6      	bne.n	800b22a <memchr+0x6>
 800b23c:	4618      	mov	r0, r3
 800b23e:	bd10      	pop	{r4, pc}

0800b240 <_realloc_r>:
 800b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b244:	4680      	mov	r8, r0
 800b246:	4614      	mov	r4, r2
 800b248:	460e      	mov	r6, r1
 800b24a:	b921      	cbnz	r1, 800b256 <_realloc_r+0x16>
 800b24c:	4611      	mov	r1, r2
 800b24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b252:	f7fe be9b 	b.w	8009f8c <_malloc_r>
 800b256:	b92a      	cbnz	r2, 800b264 <_realloc_r+0x24>
 800b258:	4625      	mov	r5, r4
 800b25a:	f7ff f9eb 	bl	800a634 <_free_r>
 800b25e:	4628      	mov	r0, r5
 800b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b264:	f000 f81b 	bl	800b29e <_malloc_usable_size_r>
 800b268:	4284      	cmp	r4, r0
 800b26a:	4607      	mov	r7, r0
 800b26c:	d802      	bhi.n	800b274 <_realloc_r+0x34>
 800b26e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b272:	d812      	bhi.n	800b29a <_realloc_r+0x5a>
 800b274:	4621      	mov	r1, r4
 800b276:	4640      	mov	r0, r8
 800b278:	f7fe fe88 	bl	8009f8c <_malloc_r>
 800b27c:	4605      	mov	r5, r0
 800b27e:	2800      	cmp	r0, #0
 800b280:	d0ed      	beq.n	800b25e <_realloc_r+0x1e>
 800b282:	42bc      	cmp	r4, r7
 800b284:	4622      	mov	r2, r4
 800b286:	4631      	mov	r1, r6
 800b288:	bf28      	it	cs
 800b28a:	463a      	movcs	r2, r7
 800b28c:	f7ff f9c5 	bl	800a61a <memcpy>
 800b290:	4631      	mov	r1, r6
 800b292:	4640      	mov	r0, r8
 800b294:	f7ff f9ce 	bl	800a634 <_free_r>
 800b298:	e7e1      	b.n	800b25e <_realloc_r+0x1e>
 800b29a:	4635      	mov	r5, r6
 800b29c:	e7df      	b.n	800b25e <_realloc_r+0x1e>

0800b29e <_malloc_usable_size_r>:
 800b29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a2:	1f18      	subs	r0, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bfbc      	itt	lt
 800b2a8:	580b      	ldrlt	r3, [r1, r0]
 800b2aa:	18c0      	addlt	r0, r0, r3
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <_init>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	bf00      	nop
 800b2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b6:	bc08      	pop	{r3}
 800b2b8:	469e      	mov	lr, r3
 800b2ba:	4770      	bx	lr

0800b2bc <_fini>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	bf00      	nop
 800b2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c2:	bc08      	pop	{r3}
 800b2c4:	469e      	mov	lr, r3
 800b2c6:	4770      	bx	lr
