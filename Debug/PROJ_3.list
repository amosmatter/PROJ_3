
PROJ_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa98  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029b  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800af84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00041192  20000070  0800aff4  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  20041202  0800aff4  00021202  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028212  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004f25  00000000  00000000  000482fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000021f0  00000000  00000000  0004d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001a50  00000000  00000000  0004f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007fba  00000000  00000000  00050e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029fd0  00000000  00000000  00058e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015a7cc  00000000  00000000  00082dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000097f8  00000000  00000000  001dd5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001e6db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000070 	.word	0x20000070
 800025c:	00000000 	.word	0x00000000
 8000260:	0800acc0 	.word	0x0800acc0

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000074 	.word	0x20000074
 800027c:	0800acc0 	.word	0x0800acc0

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b982 	b.w	800059c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d146      	bne.n	800034e <__udivmoddi4+0x9e>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d95e      	bls.n	8000384 <__udivmoddi4+0xd4>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	409c      	lsls	r4, r3
 80002d8:	fa20 f202 	lsr.w	r2, r0, r2
 80002dc:	4317      	orrs	r7, r2
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	0c22      	lsrs	r2, r4, #16
 80002e8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	fb01 f005 	mul.w	r0, r1, r5
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x5e>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x5c>
 8000306:	4290      	cmp	r0, r2
 8000308:	f200 8134 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 800030c:	4639      	mov	r1, r7
 800030e:	1a12      	subs	r2, r2, r0
 8000310:	b2a4      	uxth	r4, r4
 8000312:	fbb2 f0fe 	udiv	r0, r2, lr
 8000316:	fb0e 2210 	mls	r2, lr, r0, r2
 800031a:	fb00 f505 	mul.w	r5, r0, r5
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	42a5      	cmp	r5, r4
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x88>
 8000326:	eb1c 0404 	adds.w	r4, ip, r4
 800032a:	f100 32ff 	add.w	r2, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x86>
 8000330:	42a5      	cmp	r5, r4
 8000332:	f200 8119 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 8000336:	4610      	mov	r0, r2
 8000338:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	2100      	movs	r1, #0
 8000340:	b11e      	cbz	r6, 800034a <__udivmoddi4+0x9a>
 8000342:	40dc      	lsrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	e9c6 4300 	strd	r4, r3, [r6]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0xb4>
 8000352:	2e00      	cmp	r6, #0
 8000354:	f000 80fc 	beq.w	8000550 <__udivmoddi4+0x2a0>
 8000358:	2100      	movs	r1, #0
 800035a:	e9c6 0500 	strd	r0, r5, [r6]
 800035e:	4608      	mov	r0, r1
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	fab3 f183 	clz	r1, r3
 8000368:	2900      	cmp	r1, #0
 800036a:	d14c      	bne.n	8000406 <__udivmoddi4+0x156>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f0c0 80f2 	bcc.w	8000556 <__udivmoddi4+0x2a6>
 8000372:	4282      	cmp	r2, r0
 8000374:	f240 80ef 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000378:	4608      	mov	r0, r1
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e5      	beq.n	800034a <__udivmoddi4+0x9a>
 800037e:	e9c6 4700 	strd	r4, r7, [r6]
 8000382:	e7e2      	b.n	800034a <__udivmoddi4+0x9a>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xd8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f382 	clz	r3, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	f040 809f 	bne.w	80004d0 <__udivmoddi4+0x220>
 8000392:	1a8a      	subs	r2, r1, r2
 8000394:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000398:	fa1f f78c 	uxth.w	r7, ip
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 f5fe 	udiv	r5, r2, lr
 80003a2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003a6:	0c22      	lsrs	r2, r4, #16
 80003a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ac:	fb07 f005 	mul.w	r0, r7, r5
 80003b0:	4290      	cmp	r0, r2
 80003b2:	d90f      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003b4:	eb1c 0202 	adds.w	r2, ip, r2
 80003b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003bc:	bf2c      	ite	cs
 80003be:	f04f 0901 	movcs.w	r9, #1
 80003c2:	f04f 0900 	movcc.w	r9, #0
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d903      	bls.n	80003d2 <__udivmoddi4+0x122>
 80003ca:	f1b9 0f00 	cmp.w	r9, #0
 80003ce:	f000 80ce 	beq.w	800056e <__udivmoddi4+0x2be>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003dc:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e0:	fb00 f707 	mul.w	r7, r0, r7
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	f200 80b3 	bhi.w	8000562 <__udivmoddi4+0x2b2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	1be4      	subs	r4, r4, r7
 8000400:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0x90>
 8000406:	f1c1 0420 	rsb	r4, r1, #32
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000410:	fa22 f704 	lsr.w	r7, r2, r4
 8000414:	40e5      	lsrs	r5, r4
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f304 	lsr.w	r3, r0, r4
 800041e:	4088      	lsls	r0, r1
 8000420:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb5 fef8 	udiv	lr, r5, r8
 8000434:	fb08 551e 	mls	r5, r8, lr, r5
 8000438:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a9      	cmp	r9, r5
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1b2>
 8000444:	197d      	adds	r5, r7, r5
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a9      	cmp	r9, r5
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 808d 	beq.w	800057a <__udivmoddi4+0x2ca>
 8000460:	46d6      	mov	lr, sl
 8000462:	eba5 0509 	sub.w	r5, r5, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb5 f3f8 	udiv	r3, r5, r8
 800046e:	fb08 5513 	mls	r5, r8, r3, r5
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800047a:	45ac      	cmp	ip, r5
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1dc>
 800047e:	197d      	adds	r5, r7, r5
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1da>
 8000486:	45ac      	cmp	ip, r5
 8000488:	d87e      	bhi.n	8000588 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000490:	eba5 050c 	sub.w	r5, r5, ip
 8000494:	fba3 9802 	umull	r9, r8, r3, r2
 8000498:	4545      	cmp	r5, r8
 800049a:	46ce      	mov	lr, r9
 800049c:	46c4      	mov	ip, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1f6>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x200>
 80004a2:	4548      	cmp	r0, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x200>
 80004a6:	3b01      	subs	r3, #1
 80004a8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ac:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d06f      	beq.n	8000594 <__udivmoddi4+0x2e4>
 80004b4:	ebb0 020e 	subs.w	r2, r0, lr
 80004b8:	eb65 050c 	sbc.w	r5, r5, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	fa05 f404 	lsl.w	r4, r5, r4
 80004c2:	40cd      	lsrs	r5, r1
 80004c4:	4618      	mov	r0, r3
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2100      	movs	r1, #0
 80004ca:	e9c6 4500 	strd	r4, r5, [r6]
 80004ce:	e73c      	b.n	800034a <__udivmoddi4+0x9a>
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	f1c3 0220 	rsb	r2, r3, #32
 80004d8:	4099      	lsls	r1, r3
 80004da:	409c      	lsls	r4, r3
 80004dc:	40d5      	lsrs	r5, r2
 80004de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004e2:	fa20 f202 	lsr.w	r2, r0, r2
 80004e6:	fa1f f78c 	uxth.w	r7, ip
 80004ea:	fbb5 f0fe 	udiv	r0, r5, lr
 80004ee:	430a      	orrs	r2, r1
 80004f0:	fb0e 5510 	mls	r5, lr, r0, r5
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f507 	mul.w	r5, r0, r7
 80004fe:	428d      	cmp	r5, r1
 8000500:	d90e      	bls.n	8000520 <__udivmoddi4+0x270>
 8000502:	eb1c 0101 	adds.w	r1, ip, r1
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	bf2c      	ite	cs
 800050c:	f04f 0901 	movcs.w	r9, #1
 8000510:	f04f 0900 	movcc.w	r9, #0
 8000514:	428d      	cmp	r5, r1
 8000516:	d902      	bls.n	800051e <__udivmoddi4+0x26e>
 8000518:	f1b9 0f00 	cmp.w	r9, #0
 800051c:	d031      	beq.n	8000582 <__udivmoddi4+0x2d2>
 800051e:	4640      	mov	r0, r8
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5fe 	udiv	r5, r1, lr
 8000528:	fb0e 1115 	mls	r1, lr, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f107 	mul.w	r1, r5, r7
 8000534:	4291      	cmp	r1, r2
 8000536:	d907      	bls.n	8000548 <__udivmoddi4+0x298>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x296>
 8000542:	4291      	cmp	r1, r2
 8000544:	d823      	bhi.n	800058e <__udivmoddi4+0x2de>
 8000546:	4645      	mov	r5, r8
 8000548:	1a52      	subs	r2, r2, r1
 800054a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800054e:	e726      	b.n	800039e <__udivmoddi4+0xee>
 8000550:	4631      	mov	r1, r6
 8000552:	4630      	mov	r0, r6
 8000554:	e6f9      	b.n	800034a <__udivmoddi4+0x9a>
 8000556:	1a84      	subs	r4, r0, r2
 8000558:	eb65 0203 	sbc.w	r2, r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	4617      	mov	r7, r2
 8000560:	e70b      	b.n	800037a <__udivmoddi4+0xca>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14e>
 8000568:	4464      	add	r4, ip
 800056a:	3802      	subs	r0, #2
 800056c:	e6e4      	b.n	8000338 <__udivmoddi4+0x88>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	3902      	subs	r1, #2
 8000576:	4462      	add	r2, ip
 8000578:	e6c9      	b.n	800030e <__udivmoddi4+0x5e>
 800057a:	f1ae 0e02 	sub.w	lr, lr, #2
 800057e:	443d      	add	r5, r7
 8000580:	e76f      	b.n	8000462 <__udivmoddi4+0x1b2>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	e7cb      	b.n	8000520 <__udivmoddi4+0x270>
 8000588:	3b02      	subs	r3, #2
 800058a:	443d      	add	r5, r7
 800058c:	e77e      	b.n	800048c <__udivmoddi4+0x1dc>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7d9      	b.n	8000548 <__udivmoddi4+0x298>
 8000594:	4618      	mov	r0, r3
 8000596:	4631      	mov	r1, r6
 8000598:	e6d7      	b.n	800034a <__udivmoddi4+0x9a>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <MX_FREERTOS_Init+0x28>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <MX_FREERTOS_Init+0x2c>)
 80005aa:	f007 fb09 	bl	8007bc0 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <MX_FREERTOS_Init+0x30>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // PTH_TaskHandle = osThreadNew(PTH_task, NULL, &PTH_TaskAttributes);
  // IMU_TaskHandle = osThreadNew(IMU_task, NULL, &IMU_TaskAttributes);
  GPS_TaskHandle = osThreadNew(GPS_task, NULL, &GPS_TaskAttributes);
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <MX_FREERTOS_Init+0x34>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <MX_FREERTOS_Init+0x38>)
 80005ba:	f007 fb01 	bl	8007bc0 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <MX_FREERTOS_Init+0x3c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	0800ae1c 	.word	0x0800ae1c
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	20000090 	.word	0x20000090
 80005d4:	0800adf8 	.word	0x0800adf8
 80005d8:	08001621 	.word	0x08001621
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <StartDefaultTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for (;;)
  {

    osDelay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f007 fb79 	bl	8007ce2 <osDelay>
 80005f0:	e7fa      	b.n	80005e8 <StartDefaultTask+0x8>
	...

080005f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <__io_putchar+0x20>)
 8000606:	f006 fbb1 	bl	8006d6c <HAL_UART_Transmit>
  return ch;
 800060a:	687b      	ldr	r3, [r7, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000178 	.word	0x20000178

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 f878 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f817 	bl	8000652 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000624:	f000 f871 	bl	800070a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa38 	bl	8000a9c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f952 	bl	80008d4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000630:	f000 f88c 	bl	800074c <MX_I2C2_Init>
  MX_SPI3_Init();
 8000634:	f000 f8de 	bl	80007f4 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f998 	bl	800096c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800063c:	f000 f9e2 	bl	8000a04 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000640:	f000 f8c4 	bl	80007cc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f007 fa6c 	bl	8007b20 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000648:	f7ff ffaa 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800064c:	f007 fa8e 	bl	8007b6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x38>

08000652 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b09e      	sub	sp, #120	; 0x78
 8000656:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	2260      	movs	r2, #96	; 0x60
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f009 fdef 	bl	800a244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800067a:	f001 fd83 	bl	8002184 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000684:	f000 fb4a 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000688:	2310      	movs	r3, #16
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800069e:	2301      	movs	r3, #1
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006aa:	2350      	movs	r3, #80	; 0x50
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fe58 	bl	800237c <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d2:	f000 fb23 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	231f      	movs	r3, #31
 80006d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2104      	movs	r1, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd1e 	bl	8003134 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006fe:	f000 fb0d 	bl	8000d1c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3778      	adds	r7, #120	; 0x78
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000710:	f001 fe14 	bl	800233c <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000724:	463b      	mov	r3, r7
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fcae 	bl	8002088 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800072c:	f001 fd1a 	bl	8002164 <HAL_PWR_EnablePVD>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000730:	f001 fe14 	bl	800235c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000734:	2002      	movs	r0, #2
 8000736:	f001 fdb1 	bl	800229c <HAL_PWREx_ConfigSupply>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8000740:	f000 faec 	bl	8000d1c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_I2C2_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <MX_I2C2_Init+0x7c>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000764:	2201      	movs	r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C2_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <MX_I2C2_Init+0x74>)
 8000788:	f001 fb1c 	bl	8001dc4 <HAL_I2C_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000792:	f000 fac3 	bl	8000d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_I2C2_Init+0x74>)
 800079a:	f001 fbae 	bl	8001efa <HAL_I2CEx_ConfigAnalogFilter>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 faba 	bl	8000d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_I2C2_Init+0x74>)
 80007ac:	f001 fbf0 	bl	8001f90 <HAL_I2CEx_ConfigDigitalFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 fab1 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000094 	.word	0x20000094
 80007c4:	40005800 	.word	0x40005800
 80007c8:	30909dec 	.word	0x30909dec

080007cc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 fc29 	bl	8002028 <HAL_ICACHE_ConfigAssociativityMode>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007dc:	f000 fa9e 	bl	8000d1c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007e0:	f001 fc42 	bl	8002068 <HAL_ICACHE_Enable>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007ea:	f000 fa97 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000804:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000806:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <MX_SPI3_Init+0xdc>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_SPI3_Init+0xd8>)
 800080c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_SPI3_Init+0xd8>)
 800081a:	2207      	movs	r2, #7
 800081c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_SPI3_Init+0xd8>)
 800082c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000830:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000838:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_SPI3_Init+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_SPI3_Init+0xd8>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_SPI3_Init+0xd8>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_SPI3_Init+0xd8>)
 800086e:	2200      	movs	r2, #0
 8000870:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_SPI3_Init+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000880:	2200      	movs	r2, #0
 8000882:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000886:	2200      	movs	r2, #0
 8000888:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_SPI3_Init+0xd8>)
 800088c:	2200      	movs	r2, #0
 800088e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_SPI3_Init+0xd8>)
 8000892:	f005 fcef 	bl	8006274 <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 800089c:	f000 fa3e 	bl	8000d1c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80008a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008a8:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_SPI3_Init+0xd8>)
 80008b4:	f005 fe0f 	bl	80064d6 <HAL_SPIEx_SetConfigAutonomousMode>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 80008be:	f000 fa2d 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000e8 	.word	0x200000e8
 80008d0:	46002000 	.word	0x46002000

080008d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_USART1_UART_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_USART1_UART_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_USART1_UART_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_USART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_USART1_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_USART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_USART1_UART_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_USART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_USART1_UART_Init+0x90>)
 800091e:	f006 f9d5 	bl	8006ccc <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f9f8 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000930:	f006 ffc1 	bl	80078b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f9ef 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000942:	f006 fff6 	bl	8007932 <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f9e6 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_USART1_UART_Init+0x90>)
 8000952:	f006 ff77 	bl	8007844 <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f9de 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000178 	.word	0x20000178
 8000968:	40013800 	.word	0x40013800

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_USART2_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9200;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000978:	f242 32f0 	movw	r2, #9200	; 0x23f0
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_USART2_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_USART2_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_USART2_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009b6:	f006 f989 	bl	8006ccc <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f9ac 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009c8:	f006 ff75 	bl	80078b6 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f9a3 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009da:	f006 ffaa 	bl	8007932 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f99a 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USART2_UART_Init+0x90>)
 80009ea:	f006 fef0 	bl	80077ce <HAL_UARTEx_EnableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f992 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000020c 	.word	0x2000020c
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	; (8000a98 <MX_USART3_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f006 f93d 	bl	8006ccc <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f960 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a60:	f006 ff29 	bl	80078b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f957 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a72:	f006 ff5e 	bl	8007932 <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f94e 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a82:	f006 fedf 	bl	8007844 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f946 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200002a0 	.word	0x200002a0
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b88      	ldr	r3, [pc, #544]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab8:	4a86      	ldr	r2, [pc, #536]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ac2:	4b84      	ldr	r3, [pc, #528]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad0:	4b80      	ldr	r3, [pc, #512]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad6:	4a7f      	ldr	r2, [pc, #508]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ae0:	4b7c      	ldr	r3, [pc, #496]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b79      	ldr	r3, [pc, #484]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af4:	4a77      	ldr	r2, [pc, #476]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000afe:	4b75      	ldr	r3, [pc, #468]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0c:	4b71      	ldr	r3, [pc, #452]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b12:	4a70      	ldr	r2, [pc, #448]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b1c:	4b6d      	ldr	r3, [pc, #436]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b30:	4a68      	ldr	r2, [pc, #416]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b3a:	4b66      	ldr	r3, [pc, #408]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b48:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b4e:	4a61      	ldr	r2, [pc, #388]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b58:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b6c:	4a59      	ldr	r2, [pc, #356]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b76:	4b57      	ldr	r3, [pc, #348]	; (8000cd4 <MX_GPIO_Init+0x238>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_FSYNC_GPIO_Port, IMU_FSYNC_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2108      	movs	r1, #8
 8000b88:	4853      	ldr	r0, [pc, #332]	; (8000cd8 <MX_GPIO_Init+0x23c>)
 8000b8a:	f001 f8c7 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_nCS_Pin|RPI_nCS_Pin, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b94:	4850      	ldr	r0, [pc, #320]	; (8000cd8 <MX_GPIO_Init+0x23c>)
 8000b96:	f001 f8c1 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTH_nCS_GPIO_Port, PTH_nCS_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba0:	484e      	ldr	r0, [pc, #312]	; (8000cdc <MX_GPIO_Init+0x240>)
 8000ba2:	f001 f8bb 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2104      	movs	r1, #4
 8000baa:	484d      	ldr	r0, [pc, #308]	; (8000ce0 <MX_GPIO_Init+0x244>)
 8000bac:	f001 f8b6 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	484b      	ldr	r0, [pc, #300]	; (8000ce4 <MX_GPIO_Init+0x248>)
 8000bb6:	f001 f8b1 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	484a      	ldr	r0, [pc, #296]	; (8000ce8 <MX_GPIO_Init+0x24c>)
 8000bc0:	f001 f8ac 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	4848      	ldr	r0, [pc, #288]	; (8000cec <MX_GPIO_Init+0x250>)
 8000bca:	f001 f8a7 	bl	8001d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT_REF_INT_Pin */
  GPIO_InitStruct.Pin = BUT_REF_INT_Pin;
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd4:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <MX_GPIO_Init+0x254>)
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUT_REF_INT_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4840      	ldr	r0, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x248>)
 8000be4:	f000 fec2 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_FSYNC_Pin SD_nCS_Pin RPI_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_FSYNC_Pin|SD_nCS_Pin|RPI_nCS_Pin;
 8000be8:	f246 0308 	movw	r3, #24584	; 0x6008
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4835      	ldr	r0, [pc, #212]	; (8000cd8 <MX_GPIO_Init+0x23c>)
 8000c02:	f000 feb3 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <MX_GPIO_Init+0x258>)
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0x23c>)
 8000c1a:	f000 fea7 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : PTH_nCS_Pin */
  GPIO_InitStruct.Pin = PTH_nCS_Pin;
 8000c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PTH_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4829      	ldr	r0, [pc, #164]	; (8000cdc <MX_GPIO_Init+0x240>)
 8000c38:	f000 fe98 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <MX_GPIO_Init+0x244>)
 8000c54:	f000 fe8a 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <MX_GPIO_Init+0x248>)
 8000c70:	f000 fe7c 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <MX_GPIO_Init+0x24c>)
 8000c8c:	f000 fe6e 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_READY_Pin */
  GPIO_InitStruct.Pin = LED_READY_Pin;
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_READY_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4811      	ldr	r0, [pc, #68]	; (8000cec <MX_GPIO_Init+0x250>)
 8000ca8:	f000 fe60 	bl	800196c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 5, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2105      	movs	r1, #5
 8000cb0:	2010      	movs	r0, #16
 8000cb2:	f000 fe33 	bl	800191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f000 fe4a 	bl	8001950 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2018      	movs	r0, #24
 8000cc2:	f000 fe2b 	bl	800191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000cc6:	2018      	movs	r0, #24
 8000cc8:	f000 fe42 	bl	8001950 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	46020c00 	.word	0x46020c00
 8000cd8:	42021400 	.word	0x42021400
 8000cdc:	42021000 	.word	0x42021000
 8000ce0:	42021800 	.word	0x42021800
 8000ce4:	42020800 	.word	0x42020800
 8000ce8:	42020c00 	.word	0x42020c00
 8000cec:	42020400 	.word	0x42020400
 8000cf0:	10210000 	.word	0x10210000
 8000cf4:	10110000 	.word	0x10110000

08000cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d101      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d0a:	f000 fd2f 	bl	800176c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40012c00 	.word	0x40012c00

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>

08000d26 <delay_ms>:

#include "cmsis_os2.h"
#include <string.h>

void delay_ms(uint32_t period)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f006 ffd7 	bl	8007ce2 <osDelay>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x38>)
 8000d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_MspInit+0x38>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_MspInit+0x38>)
 8000d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	210f      	movs	r1, #15
 8000d64:	f06f 0001 	mvn.w	r0, #1
 8000d68:	f000 fdd8 	bl	800191c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	46020c00 	.word	0x46020c00

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ba      	sub	sp, #232	; 0xe8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	22c0      	movs	r2, #192	; 0xc0
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f009 fa53 	bl	800a244 <memset>
  if(hi2c->Instance==I2C2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_I2C_MspInit+0xc4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d144      	bne.n	8000e32 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000da8:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fdc1 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000dc8:	f7ff ffa8 	bl	8000d1c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_I2C_MspInit+0xc8>)
 8000dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_I2C_MspInit+0xc8>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_I2C_MspInit+0xc8>)
 8000dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <HAL_I2C_MspInit+0xcc>)
 8000e10:	f000 fdac 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_I2C_MspInit+0xc8>)
 8000e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <HAL_I2C_MspInit+0xc8>)
 8000e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_I2C_MspInit+0xc8>)
 8000e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	37e8      	adds	r7, #232	; 0xe8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005800 	.word	0x40005800
 8000e40:	46020c00 	.word	0x46020c00
 8000e44:	42021400 	.word	0x42021400

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ba      	sub	sp, #232	; 0xe8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	22c0      	movs	r2, #192	; 0xc0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f009 f9eb 	bl	800a244 <memset>
  if(hspi->Instance==SPI3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_SPI_MspInit+0xc8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d146      	bne.n	8000f06 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8000e84:	2308      	movs	r3, #8
 8000e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fd58 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000e9a:	f7ff ff3f 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000ea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_SPI_MspInit+0xcc>)
 8000ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000eda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef4:	2306      	movs	r3, #6
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_SPI_MspInit+0xd0>)
 8000f02:	f000 fd33 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	37e8      	adds	r7, #232	; 0xe8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	46002000 	.word	0x46002000
 8000f14:	46020c00 	.word	0x46020c00
 8000f18:	42020800 	.word	0x42020800

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0be      	sub	sp, #248	; 0xf8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	22c0      	movs	r2, #192	; 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f009 f981 	bl	800a244 <memset>
  if(huart->Instance==USART1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a72      	ldr	r2, [pc, #456]	; (8001110 <HAL_UART_MspInit+0x1f4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d146      	bne.n	8000fda <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f4c:	f04f 0201 	mov.w	r2, #1
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fcef 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f6c:	f7ff fed6 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f70:	4b68      	ldr	r3, [pc, #416]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8000f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f76:	4a67      	ldr	r2, [pc, #412]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000f80:	4b64      	ldr	r3, [pc, #400]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8000f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b61      	ldr	r3, [pc, #388]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8000f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f94:	4a5f      	ldr	r2, [pc, #380]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8000fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000fac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4851      	ldr	r0, [pc, #324]	; (8001118 <HAL_UART_MspInit+0x1fc>)
 8000fd4:	f000 fcca 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fd8:	e095      	b.n	8001106 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_UART_MspInit+0x200>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d145      	bne.n	8001070 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fe4:	f04f 0202 	mov.w	r2, #2
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fca3 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001004:	f7ff fe8a 	bl	8000d1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001008:	4b42      	ldr	r3, [pc, #264]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 800100a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800100e:	4a41      	ldr	r2, [pc, #260]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001018:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 800101a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800102c:	4a39      	ldr	r2, [pc, #228]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 8001038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001044:	230c      	movs	r3, #12
 8001046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105c:	2307      	movs	r3, #7
 800105e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001066:	4619      	mov	r1, r3
 8001068:	482b      	ldr	r0, [pc, #172]	; (8001118 <HAL_UART_MspInit+0x1fc>)
 800106a:	f000 fc7f 	bl	800196c <HAL_GPIO_Init>
}
 800106e:	e04a      	b.n	8001106 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <HAL_UART_MspInit+0x204>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d145      	bne.n	8001106 <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800107a:	f04f 0204 	mov.w	r2, #4
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001086:	2300      	movs	r3, #0
 8001088:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fc58 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_UART_MspInit+0x182>
      Error_Handler();
 800109a:	f7ff fe3f 	bl	8000d1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 80010a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 80010a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 80010b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 80010be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_UART_MspInit+0x1f8>)
 80010ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f4:	2307      	movs	r3, #7
 80010f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010fe:	4619      	mov	r1, r3
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <HAL_UART_MspInit+0x208>)
 8001102:	f000 fc33 	bl	800196c <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	37f8      	adds	r7, #248	; 0xf8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40013800 	.word	0x40013800
 8001114:	46020c00 	.word	0x46020c00
 8001118:	42020000 	.word	0x42020000
 800111c:	40004400 	.word	0x40004400
 8001120:	40004800 	.word	0x40004800
 8001124:	42020400 	.word	0x42020400

08001128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	; 0x38
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_InitTick+0xcc>)
 800113a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <HAL_InitTick+0xcc>)
 8001140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001144:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_InitTick+0xcc>)
 800114a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800114e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001156:	f107 0210 	add.w	r2, r7, #16
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fb31 	bl	80037c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001166:	f002 fb07 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 800116a:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_InitTick+0xd0>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0c9b      	lsrs	r3, r3, #18
 8001176:	3b01      	subs	r3, #1
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_InitTick+0xd4>)
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <HAL_InitTick+0xd8>)
 800117e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_InitTick+0xd4>)
 8001182:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001186:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_InitTick+0xd4>)
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_InitTick+0xd4>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_InitTick+0xd4>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800119a:	4818      	ldr	r0, [pc, #96]	; (80011fc <HAL_InitTick+0xd4>)
 800119c:	f005 f9dc 	bl	8006558 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80011a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d118      	bne.n	80011e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <HAL_InitTick+0xd4>)
 80011b0:	f005 fa34 	bl	800661c <HAL_TIM_Base_Start_IT>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80011ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10e      	bne.n	80011e0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d808      	bhi.n	80011da <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	202a      	movs	r0, #42	; 0x2a
 80011ce:	f000 fba5 	bl	800191c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_InitTick+0xdc>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e002      	b.n	80011e0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011e0:	202a      	movs	r0, #42	; 0x2a
 80011e2:	f000 fbb5 	bl	8001950 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80011e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3738      	adds	r7, #56	; 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	46020c00 	.word	0x46020c00
 80011f8:	431bde83 	.word	0x431bde83
 80011fc:	20000334 	.word	0x20000334
 8001200:	40012c00 	.word	0x40012c00
 8001204:	20000004 	.word	0x20000004

08001208 <print_binary_section>:
/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim1;

/* USER CODE BEGIN EV */
void print_binary_section(unsigned int number, int start_bit, int end_bit)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  if (start_bit < 0 || end_bit < 0 || start_bit > 31 || end_bit > 31 || start_bit > end_bit)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0c      	blt.n	8001234 <print_binary_section+0x2c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db09      	blt.n	8001234 <print_binary_section+0x2c>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b1f      	cmp	r3, #31
 8001224:	dc06      	bgt.n	8001234 <print_binary_section+0x2c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b1f      	cmp	r3, #31
 800122a:	dc03      	bgt.n	8001234 <print_binary_section+0x2c>
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dd03      	ble.n	800123c <print_binary_section+0x34>
  {
    printf("Invalid bit positions\n");
 8001234:	481d      	ldr	r0, [pc, #116]	; (80012ac <print_binary_section+0xa4>)
 8001236:	f008 ff25 	bl	800a084 <puts>
    return;
 800123a:	e033      	b.n	80012a4 <print_binary_section+0x9c>
  }

  unsigned int mask = (1u << (end_bit - start_bit + 1)) - 1;
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	3301      	adds	r3, #1
 8001244:	2201      	movs	r2, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	3b01      	subs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  mask <<= start_bit;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	61bb      	str	r3, [r7, #24]

  unsigned int section = (number & mask) >> start_bit;
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	401a      	ands	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]

  for (int i = end_bit; i >= start_bit; --i)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e014      	b.n	8001296 <print_binary_section+0x8e>
  {

    printf("%d", (section >> i) & 1);
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <print_binary_section+0xa8>)
 800127c:	f008 fe94 	bl	8009fa8 <iprintf>
    if (i % 8 == 0)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <print_binary_section+0x88>
    {
      printf("'");
 800128a:	2027      	movs	r0, #39	; 0x27
 800128c:	f008 fe9e 	bl	8009fcc <putchar>
  for (int i = end_bit; i >= start_bit; --i)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3b01      	subs	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	429a      	cmp	r2, r3
 800129c:	dae6      	bge.n	800126c <print_binary_section+0x64>
    }
  }
  printf("\n");
 800129e:	200a      	movs	r0, #10
 80012a0:	f008 fe94 	bl	8009fcc <putchar>
}
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	0800acfc 	.word	0x0800acfc
 80012b0:	0800ad14 	.word	0x0800ad14

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>
	...

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HFSR:");
 80012c0:	4823      	ldr	r0, [pc, #140]	; (8001350 <HardFault_Handler+0x94>)
 80012c2:	f008 fe71 	bl	8009fa8 <iprintf>
  print_binary_section(SCB->HFSR, 0, 31);
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HardFault_Handler+0x98>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	221f      	movs	r2, #31
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff9a 	bl	8001208 <print_binary_section>
  printf("\n\r");
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <HardFault_Handler+0x9c>)
 80012d6:	f008 fe67 	bl	8009fa8 <iprintf>

  if (SCB->HFSR & (1 << 30))
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HardFault_Handler+0x98>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d033      	beq.n	800134e <HardFault_Handler+0x92>
  {
    printf("BFAR:");
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <HardFault_Handler+0xa0>)
 80012e8:	f008 fe5e 	bl	8009fa8 <iprintf>
    print_binary_section(SCB->BFAR, 0, 31);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HardFault_Handler+0x98>)
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	221f      	movs	r2, #31
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff87 	bl	8001208 <print_binary_section>
    printf("\n\r");
 80012fa:	4817      	ldr	r0, [pc, #92]	; (8001358 <HardFault_Handler+0x9c>)
 80012fc:	f008 fe54 	bl	8009fa8 <iprintf>

    printf("CFSR:");
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <HardFault_Handler+0xa4>)
 8001302:	f008 fe51 	bl	8009fa8 <iprintf>
    print_binary_section(SCB->CFSR, 0, 31);
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HardFault_Handler+0x98>)
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	221f      	movs	r2, #31
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff7a 	bl	8001208 <print_binary_section>
    printf("\n\r");
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <HardFault_Handler+0x9c>)
 8001316:	f008 fe47 	bl	8009fa8 <iprintf>

    printf("DFSR:");
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <HardFault_Handler+0xa8>)
 800131c:	f008 fe44 	bl	8009fa8 <iprintf>
    print_binary_section(SCB->DFSR, 0, 31);
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HardFault_Handler+0x98>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	221f      	movs	r2, #31
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff6d 	bl	8001208 <print_binary_section>
    printf("\n\r");
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <HardFault_Handler+0x9c>)
 8001330:	f008 fe3a 	bl	8009fa8 <iprintf>

    printf("AFSR:");
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <HardFault_Handler+0xac>)
 8001336:	f008 fe37 	bl	8009fa8 <iprintf>
    print_binary_section(SCB->AFSR, 0, 31);
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HardFault_Handler+0x98>)
 800133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133e:	221f      	movs	r2, #31
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff60 	bl	8001208 <print_binary_section>
    printf("\n\r");
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <HardFault_Handler+0x9c>)
 800134a:	f008 fe2d 	bl	8009fa8 <iprintf>
  // printf("HFSR:);
  // binary_printf("DFSR = 0x%b\r\n", SCB->DFSR);
  // binary_printf("AFSR = 0x%b\r\n", SCB->AFSR);

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x92>
 8001350:	0800ad18 	.word	0x0800ad18
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	0800ad20 	.word	0x0800ad20
 800135c:	0800ad24 	.word	0x0800ad24
 8001360:	0800ad2c 	.word	0x0800ad2c
 8001364:	0800ad34 	.word	0x0800ad34
 8001368:	0800ad3c 	.word	0x0800ad3c

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001390:	2020      	movs	r0, #32
 8001392:	f000 fcdb 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_REF_INT_Pin);
 800139e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013a2:	f000 fcd3 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <TIM1_UP_IRQHandler+0x10>)
 80013b2:	f005 f9d3 	bl	800675c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000334 	.word	0x20000334

080013c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00a      	b.n	80013e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d2:	f3af 8000 	nop.w
 80013d6:	4601      	mov	r1, r0
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf0      	blt.n	80013d2 <_read+0x12>
  }

  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e009      	b.n	8001420 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f8ed 	bl	80005f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbf1      	blt.n	800140c <_write+0x12>
  }
  return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_close>:

int _close(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145a:	605a      	str	r2, [r3, #4]
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_isatty>:

int _isatty(int file)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f008 ff2a 	bl	800a324 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200c0000 	.word	0x200c0000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000380 	.word	0x20000380
 8001504:	20041208 	.word	0x20041208

08001508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <SystemInit+0x68>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <SystemInit+0x68>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <SystemInit+0x6c>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <SystemInit+0x6c>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <SystemInit+0x6c>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <SystemInit+0x6c>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <SystemInit+0x6c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <SystemInit+0x6c>)
 800153a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800153e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001542:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <SystemInit+0x6c>)
 8001546:	2200      	movs	r2, #0
 8001548:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <SystemInit+0x6c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <SystemInit+0x6c>)
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <SystemInit+0x6c>)
 8001558:	2200      	movs	r2, #0
 800155a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SystemInit+0x68>)
 800155e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001562:	609a      	str	r2, [r3, #8]
  #endif
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	46020c00 	.word	0x46020c00

08001578 <gps_rcv_line>:
#include <stdlib.h>

extern UART_HandleTypeDef GPS_UART;

static HAL_StatusTypeDef gps_rcv_line(char *buffer, uint16_t length, uint32_t timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	460b      	mov	r3, r1
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	817b      	strh	r3, [r7, #10]
    size_t i = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef ret;

    for (i = 0; i < length; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e015      	b.n	80015bc <gps_rcv_line+0x44>
    {
        ret = HAL_UART_Receive(&GPS_UART, (uint8_t *)&buffer[i], 1, timeout);
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	18d1      	adds	r1, r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	4810      	ldr	r0, [pc, #64]	; (80015dc <gps_rcv_line+0x64>)
 800159c:	f005 fc84 	bl	8006ea8 <HAL_UART_Receive>
 80015a0:	4603      	mov	r3, r0
 80015a2:	74fb      	strb	r3, [r7, #19]

        if (buffer[i] == '\n' || ret != HAL_OK)
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b0a      	cmp	r3, #10
 80015ae:	d009      	beq.n	80015c4 <gps_rcv_line+0x4c>
 80015b0:	7cfb      	ldrb	r3, [r7, #19]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <gps_rcv_line+0x4c>
    for (i = 0; i < length; i++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3e5      	bcc.n	8001590 <gps_rcv_line+0x18>
        {
            break;
        }
    }
    buffer[i + 1] = '\0';
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    return ret;
 80015d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <set_normal_mode>:

    return ret;
}

HAL_StatusTypeDef set_normal_mode(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    return HAL_UART_Transmit(&GPS_UART, "$PGKC105,0*37\r\n", 15, 1000);
 80015e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e8:	220f      	movs	r2, #15
 80015ea:	4903      	ldr	r1, [pc, #12]	; (80015f8 <set_normal_mode+0x18>)
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <set_normal_mode+0x1c>)
 80015ee:	f005 fbbd 	bl	8006d6c <HAL_UART_Transmit>
 80015f2:	4603      	mov	r3, r0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	0800ad4c 	.word	0x0800ad4c
 80015fc:	2000020c 	.word	0x2000020c

08001600 <get_software_version>:
HAL_StatusTypeDef get_software_version(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    return HAL_UART_Transmit(&GPS_UART, "$PGKC462*2F\r\n", 15, HAL_MAX_DELAY);
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	220f      	movs	r2, #15
 800160a:	4903      	ldr	r1, [pc, #12]	; (8001618 <get_software_version+0x18>)
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <get_software_version+0x1c>)
 800160e:	f005 fbad 	bl	8006d6c <HAL_UART_Transmit>
 8001612:	4603      	mov	r3, r0
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800ad5c 	.word	0x0800ad5c
 800161c:	2000020c 	.word	0x2000020c

08001620 <GPS_task>:
}



void GPS_task(void *pvParameters)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ba      	sub	sp, #232	; 0xe8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    char line[128] = {};
 8001628:	2300      	movs	r3, #0
 800162a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800162c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001630:	227c      	movs	r2, #124	; 0x7c
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f008 fe05 	bl	800a244 <memset>
    printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 800163a:	481d      	ldr	r0, [pc, #116]	; (80016b0 <GPS_task+0x90>)
 800163c:	f008 fd22 	bl	800a084 <puts>
    HAL_StatusTypeDef ret = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    set_normal_mode();
 8001646:	f7ff ffcb 	bl	80015e0 <set_normal_mode>
  // {
  //     printf("line2 failed\n");
  // }

    //   }
    uint8_t ctr = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
    while (1)
    {

        delay_ms(1);
 8001650:	2001      	movs	r0, #1
 8001652:	f7ff fb68 	bl	8000d26 <delay_ms>
        size_t i = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        HAL_StatusTypeDef ret;

        ret = gps_rcv_line(line, sizeof(line), 500);
 800165c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001660:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff86 	bl	8001578 <gps_rcv_line>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

        if (ret != HAL_OK)
 8001672:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <GPS_task+0x66>
        {
            get_software_version();
 800167a:	f7ff ffc1 	bl	8001600 <get_software_version>

            delay_ms(10);
 800167e:	200a      	movs	r0, #10
 8001680:	f7ff fb51 	bl	8000d26 <delay_ms>
            // ret = gps_send_line("$PGKC463",1000);
            //ret = get_nmea_intervall();
            continue;
 8001684:	e013      	b.n	80016ae <GPS_task+0x8e>
            //ret = gps_rcv_line(line, sizeof(line), 1);
            //printf("%s\n", line);
        }
        printf("%s\n", line);
 8001686:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800168a:	4618      	mov	r0, r3
 800168c:	f008 fcfa 	bl	800a084 <puts>

        if (strncmp((char *)line + 3, "TXT", 3) == 0)
 8001690:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001694:	3303      	adds	r3, #3
 8001696:	2203      	movs	r2, #3
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <GPS_task+0x94>)
 800169a:	4618      	mov	r0, r3
 800169c:	f008 fdda 	bl	800a254 <strncmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <GPS_task+0x8c>
        {
            printf("\n\n\n\r");
 80016a6:	4804      	ldr	r0, [pc, #16]	; (80016b8 <GPS_task+0x98>)
 80016a8:	f008 fc7e 	bl	8009fa8 <iprintf>
        }

        continue;
 80016ac:	bf00      	nop
    {
 80016ae:	e7cf      	b.n	8001650 <GPS_task+0x30>
 80016b0:	0800adc0 	.word	0x0800adc0
 80016b4:	0800add4 	.word	0x0800add4
 80016b8:	0800add8 	.word	0x0800add8

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c0:	f7ff ff22 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016c6:	e003      	b.n	80016d0 <LoopCopyDataInit>

080016c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ce:	3104      	adds	r1, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016d0:	480a      	ldr	r0, [pc, #40]	; (80016fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016d8:	d3f6      	bcc.n	80016c8 <CopyDataInit>
	ldr	r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016dc:	e002      	b.n	80016e4 <LoopFillZerobss>

080016de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016e0:	f842 3b04 	str.w	r3, [r2], #4

080016e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <LoopForever+0x16>)
	cmp	r2, r3
 80016e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016e8:	d3f9      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f008 fe21 	bl	800a330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7fe ff93 	bl	8000618 <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80016f4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80016f8:	0800af84 	.word	0x0800af84
	ldr	r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001700:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001704:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001708:	20041202 	.word	0x20041202

0800170c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_IRQHandler>
	...

08001710 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_Init+0x4c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_Init+0x4c>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f8f0 	bl	8001906 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001726:	f001 fef7 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_Init+0x50>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	490b      	ldr	r1, [pc, #44]	; (8001764 <HAL_Init+0x54>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_Init+0x58>)
 800173e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001740:	200f      	movs	r0, #15
 8001742:	f7ff fcf1 	bl	8001128 <HAL_InitTick>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e002      	b.n	8001756 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f7ff faf4 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40022000 	.word	0x40022000
 8001760:	46020c00 	.word	0x46020c00
 8001764:	0800ae40 	.word	0x0800ae40
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008
 8001790:	20000384 	.word	0x20000384

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000384 	.word	0x20000384

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff4c 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff63 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb3 	bl	80018a0 <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff82 	bl	800184c <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff56 	bl	8001810 <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800197e:	e1ba      	b.n	8001cf6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 81aa 	beq.w	8001cf0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a55      	ldr	r2, [pc, #340]	; (8001af4 <HAL_GPIO_Init+0x188>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d15d      	bne.n	8001a60 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80019aa:	2201      	movs	r2, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0201 	and.w	r2, r3, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x18c>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019dc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_GPIO_Init+0x18c>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3208      	adds	r2, #8
 80019f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220b      	movs	r2, #11
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69f9      	ldr	r1, [r7, #28]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e067      	b.n	8001b30 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x104>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d145      	bne.n	8001afc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f003 020f 	and.w	r2, r3, #15
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69f9      	ldr	r1, [r7, #28]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e01e      	b.n	8001b30 <HAL_GPIO_Init+0x1c4>
 8001af2:	bf00      	nop
 8001af4:	46020000 	.word	0x46020000
 8001af8:	0800ae98 	.word	0x0800ae98
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d00b      	beq.n	8001b50 <HAL_GPIO_Init+0x1e4>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b44:	2b11      	cmp	r3, #17
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	d130      	bne.n	8001bb2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001b86:	2201      	movs	r2, #1
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	f003 0201 	and.w	r2, r3, #1
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d07c      	beq.n	8001cf0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001bf6:	4a47      	ldr	r2, [pc, #284]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3318      	adds	r3, #24
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0a9a      	lsrs	r2, r3, #10
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_GPIO_Init+0x3ac>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	00d2      	lsls	r2, r2, #3
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c32:	4938      	ldr	r1, [pc, #224]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3318      	adds	r3, #24
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001c64:	4a2b      	ldr	r2, [pc, #172]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001c8e:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001cba:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_GPIO_Init+0x3a8>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f ae3d 	bne.w	8001980 <HAL_GPIO_Init+0x14>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3724      	adds	r7, #36	; 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	46022000 	.word	0x46022000
 8001d18:	002f7f7f 	.word	0x002f7f7f

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f814 	bl	8001d98 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f812 	bl	8001dae <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	46022000 	.word	0x46022000

08001d98 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e08d      	b.n	8001ef2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe ffc4 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e006      	b.n	8001e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d108      	bne.n	8001e66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	e007      	b.n	8001e76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69d9      	ldr	r1, [r3, #28]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d138      	bne.n	8001f82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e032      	b.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2224      	movs	r2, #36	; 0x24
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d139      	bne.n	800201a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e033      	b.n	800201c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fe2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e007      	b.n	8002056 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0204 	bic.w	r2, r3, #4
 800204e:	4905      	ldr	r1, [pc, #20]	; (8002064 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40030400 	.word	0x40030400

08002068 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_ICACHE_Enable+0x1c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_ICACHE_Enable+0x1c>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40030400 	.word	0x40030400

08002088 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e059      	b.n	800214e <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_PWR_ConfigPVD+0xd4>)
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	492d      	ldr	r1, [pc, #180]	; (800215c <HAL_PWR_ConfigPVD+0xd4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f6:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_PWR_ConfigPVD+0xd8>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	46020800 	.word	0x46020800
 8002160:	46022000 	.word	0x46022000

08002164 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_PWR_EnablePVD+0x1c>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_PWR_EnablePVD+0x1c>)
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	6113      	str	r3, [r2, #16]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	46020800 	.word	0x46020800

08002184 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800218c:	4b39      	ldr	r3, [pc, #228]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002194:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d10b      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d905      	bls.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4a32      	ldr	r2, [pc, #200]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e057      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d90a      	bls.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80021be:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d0:	60d3      	str	r3, [r2, #12]
 80021d2:	e007      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80021dc:	4925      	ldr	r1, [pc, #148]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a24      	ldr	r2, [pc, #144]	; (800227c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2232      	movs	r2, #50	; 0x32
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	3301      	adds	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002202:	e002      	b.n	800220a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3b01      	subs	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f3      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01b      	beq.n	800225a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	2232      	movs	r2, #50	; 0x32
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002240:	e002      	b.n	8002248 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f3      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e000      	b.n	8002266 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	46020800 	.word	0x46020800
 8002278:	20000000 	.word	0x20000000
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <HAL_PWREx_GetVoltageRange+0x18>)
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	46020800 	.word	0x46020800

0800229c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_PWREx_ConfigSupply+0x94>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_PWREx_ConfigSupply+0x98>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	2232      	movs	r2, #50	; 0x32
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_PWREx_ConfigSupply+0x98>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d113      	bne.n	80022f0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_PWREx_ConfigSupply+0x9c>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_PWREx_ConfigSupply+0x9c>)
 80022ce:	f023 0302 	bic.w	r3, r3, #2
 80022d2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80022d4:	e002      	b.n	80022dc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b01      	subs	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_PWREx_ConfigSupply+0x9c>)
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d116      	bne.n	8002316 <HAL_PWREx_ConfigSupply+0x7a>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f3      	bne.n	80022d6 <HAL_PWREx_ConfigSupply+0x3a>
 80022ee:	e012      	b.n	8002316 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_PWREx_ConfigSupply+0x9c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_PWREx_ConfigSupply+0x9c>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80022fc:	e002      	b.n	8002304 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3b01      	subs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_PWREx_ConfigSupply+0x9c>)
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_PWREx_ConfigSupply+0x7a>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f3      	bne.n	80022fe <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e000      	b.n	8002322 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000
 8002334:	10624dd3 	.word	0x10624dd3
 8002338:	46020800 	.word	0x46020800

0800233c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800234a:	6113      	str	r3, [r2, #16]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	46020800 	.word	0x46020800

0800235c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	46020800 	.word	0x46020800

0800237c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	; 0x38
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f000 bec8 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	4b99      	ldr	r3, [pc, #612]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	4b96      	ldr	r3, [pc, #600]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 816c 	beq.w	8002690 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_RCC_OscConfig+0x52>
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	f040 80de 	bne.w	8002582 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 80da 	bne.w	8002582 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f000 bea5 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e0:	4b86      	ldr	r3, [pc, #536]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_RCC_OscConfig+0x7a>
 80023ec:	4b83      	ldr	r3, [pc, #524]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80023f4:	e005      	b.n	8002402 <HAL_RCC_OscConfig+0x86>
 80023f6:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80023f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002402:	4293      	cmp	r3, r2
 8002404:	d255      	bcs.n	80024b2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	4618      	mov	r0, r3
 8002412:	f001 fa11 	bl	8003838 <RCC_SetFlashLatencyFromMSIRange>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	f000 be82 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800242c:	6093      	str	r3, [r2, #8]
 800242e:	4b73      	ldr	r3, [pc, #460]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	4970      	ldr	r1, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002448:	d309      	bcc.n	800245e <HAL_RCC_OscConfig+0xe2>
 800244a:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f023 021f 	bic.w	r2, r3, #31
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4969      	ldr	r1, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002458:	4313      	orrs	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e07e      	b.n	800255c <HAL_RCC_OscConfig+0x1e0>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	da0a      	bge.n	800247c <HAL_RCC_OscConfig+0x100>
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	015b      	lsls	r3, r3, #5
 8002474:	4961      	ldr	r1, [pc, #388]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002476:	4313      	orrs	r3, r2
 8002478:	60cb      	str	r3, [r1, #12]
 800247a:	e06f      	b.n	800255c <HAL_RCC_OscConfig+0x1e0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d30a      	bcc.n	800249c <HAL_RCC_OscConfig+0x120>
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	4959      	ldr	r1, [pc, #356]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002496:	4313      	orrs	r3, r2
 8002498:	60cb      	str	r3, [r1, #12]
 800249a:	e05f      	b.n	800255c <HAL_RCC_OscConfig+0x1e0>
 800249c:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	03db      	lsls	r3, r3, #15
 80024aa:	4954      	ldr	r1, [pc, #336]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
 80024b0:	e054      	b.n	800255c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80024b2:	4b52      	ldr	r3, [pc, #328]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024bc:	6093      	str	r3, [r2, #8]
 80024be:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	494c      	ldr	r1, [pc, #304]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80024d8:	d309      	bcc.n	80024ee <HAL_RCC_OscConfig+0x172>
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f023 021f 	bic.w	r2, r3, #31
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4945      	ldr	r1, [pc, #276]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
 80024ec:	e028      	b.n	8002540 <HAL_RCC_OscConfig+0x1c4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da0a      	bge.n	800250c <HAL_RCC_OscConfig+0x190>
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	493d      	ldr	r1, [pc, #244]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002506:	4313      	orrs	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]
 800250a:	e019      	b.n	8002540 <HAL_RCC_OscConfig+0x1c4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d30a      	bcc.n	800252c <HAL_RCC_OscConfig+0x1b0>
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	029b      	lsls	r3, r3, #10
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002526:	4313      	orrs	r3, r2
 8002528:	60cb      	str	r3, [r1, #12]
 800252a:	e009      	b.n	8002540 <HAL_RCC_OscConfig+0x1c4>
 800252c:	4b33      	ldr	r3, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	03db      	lsls	r3, r3, #15
 800253a:	4930      	ldr	r1, [pc, #192]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	4618      	mov	r0, r3
 800254c:	f001 f974 	bl	8003838 <RCC_SetFlashLatencyFromMSIRange>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	f000 bde5 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800255c:	f001 f8de 	bl	800371c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_OscConfig+0x284>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fddf 	bl	8001128 <HAL_InitTick>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 808a 	beq.w	800268e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800257a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257e:	f000 bdd2 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d066      	beq.n	8002658 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002596:	f7ff f8fd 	bl	8001794 <HAL_GetTick>
 800259a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259e:	f7ff f8f9 	bl	8001794 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f000 bdba 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ef      	beq.n	800259e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c8:	6093      	str	r3, [r2, #8]
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	4909      	ldr	r1, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80025e4:	d30e      	bcc.n	8002604 <HAL_RCC_OscConfig+0x288>
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f023 021f 	bic.w	r2, r3, #31
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4902      	ldr	r1, [pc, #8]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e04a      	b.n	8002690 <HAL_RCC_OscConfig+0x314>
 80025fa:	bf00      	nop
 80025fc:	46020c00 	.word	0x46020c00
 8002600:	20000004 	.word	0x20000004
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2b00      	cmp	r3, #0
 800260a:	da0a      	bge.n	8002622 <HAL_RCC_OscConfig+0x2a6>
 800260c:	4b98      	ldr	r3, [pc, #608]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	015b      	lsls	r3, r3, #5
 800261a:	4995      	ldr	r1, [pc, #596]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
 8002620:	e036      	b.n	8002690 <HAL_RCC_OscConfig+0x314>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d30a      	bcc.n	8002642 <HAL_RCC_OscConfig+0x2c6>
 800262c:	4b90      	ldr	r3, [pc, #576]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	498d      	ldr	r1, [pc, #564]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e026      	b.n	8002690 <HAL_RCC_OscConfig+0x314>
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	03db      	lsls	r3, r3, #15
 8002650:	4987      	ldr	r1, [pc, #540]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
 8002656:	e01b      	b.n	8002690 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002658:	4b85      	ldr	r3, [pc, #532]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a84      	ldr	r2, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002664:	f7ff f896 	bl	8001794 <HAL_GetTick>
 8002668:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800266a:	e009      	b.n	8002680 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800266c:	f7ff f892 	bl	8001794 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	f000 bd53 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002680:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ef      	bne.n	800266c <HAL_RCC_OscConfig+0x2f0>
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800268e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 808b 	beq.w	80027b4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_OscConfig+0x334>
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d109      	bne.n	80026be <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d17d      	bne.n	80027b4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f000 bd34 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x35a>
 80026c8:	4b69      	ldr	r3, [pc, #420]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a68      	ldr	r2, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e041      	b.n	800275a <HAL_RCC_OscConfig+0x3de>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026de:	d112      	bne.n	8002706 <HAL_RCC_OscConfig+0x38a>
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a62      	ldr	r2, [pc, #392]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b60      	ldr	r3, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5f      	ldr	r2, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a5c      	ldr	r2, [pc, #368]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e029      	b.n	800275a <HAL_RCC_OscConfig+0x3de>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800270e:	d112      	bne.n	8002736 <HAL_RCC_OscConfig+0x3ba>
 8002710:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a53      	ldr	r2, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b51      	ldr	r3, [pc, #324]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e011      	b.n	800275a <HAL_RCC_OscConfig+0x3de>
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b48      	ldr	r3, [pc, #288]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a47      	ldr	r2, [pc, #284]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d014      	beq.n	800278c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002762:	f7ff f817 	bl	8001794 <HAL_GetTick>
 8002766:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002768:	e009      	b.n	800277e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276a:	f7ff f813 	bl	8001794 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d902      	bls.n	800277e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	f000 bcd4 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277e:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ef      	beq.n	800276a <HAL_RCC_OscConfig+0x3ee>
 800278a:	e013      	b.n	80027b4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800278c:	f7ff f802 	bl	8001794 <HAL_GetTick>
 8002790:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e009      	b.n	80027a8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fffe 	bl	8001794 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d902      	bls.n	80027a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f000 bcbf 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a8:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ef      	bne.n	8002794 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05f      	beq.n	8002880 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x456>
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d114      	bne.n	80027f6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d111      	bne.n	80027f6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f000 bca3 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	4920      	ldr	r1, [pc, #128]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027f4:	e044      	b.n	8002880 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002808:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800280a:	f7fe ffc3 	bl	8001794 <HAL_GetTick>
 800280e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002810:	e009      	b.n	8002826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002812:	f7fe ffbf 	bl	8001794 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d902      	bls.n	8002826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	f000 bc80 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ef      	beq.n	8002812 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	490b      	ldr	r1, [pc, #44]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	610b      	str	r3, [r1, #16]
 8002846:	e01b      	b.n	8002880 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002854:	f7fe ff9e 	bl	8001794 <HAL_GetTick>
 8002858:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe ff9a 	bl	8001794 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d904      	bls.n	8002874 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	f000 bc5b 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
 8002870:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002874:	4baf      	ldr	r3, [pc, #700]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ed      	bne.n	800285c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80c8 	beq.w	8002a1e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002894:	4ba7      	ldr	r3, [pc, #668]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d111      	bne.n	80028c6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4ba4      	ldr	r3, [pc, #656]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a8:	4aa2      	ldr	r2, [pc, #648]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80028b2:	4ba0      	ldr	r3, [pc, #640]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80028b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028c6:	4b9c      	ldr	r3, [pc, #624]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80028d2:	4b99      	ldr	r3, [pc, #612]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	4a98      	ldr	r2, [pc, #608]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7fe ff59 	bl	8001794 <HAL_GetTick>
 80028e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028e4:	e009      	b.n	80028fa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe ff55 	bl	8001794 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d902      	bls.n	80028fa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f000 bc16 	b.w	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028fa:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ef      	beq.n	80028e6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d05f      	beq.n	80029ce <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002914:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	429a      	cmp	r2, r3
 8002922:	d037      	beq.n	8002994 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e3f4      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01b      	beq.n	800297e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002946:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800294c:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 800294e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002956:	f7fe ff1d 	bl	8001794 <HAL_GetTick>
 800295a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295e:	f7fe ff19 	bl	8001794 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e3da      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002970:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002984:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4969      	ldr	r1, [pc, #420]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002994:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800299a:	4a66      	ldr	r2, [pc, #408]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 800299c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80029a4:	f7fe fef6 	bl	8001794 <HAL_GetTick>
 80029a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe fef2 	bl	8001794 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e3b3      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80029c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ef      	beq.n	80029ac <HAL_RCC_OscConfig+0x630>
 80029cc:	e01b      	b.n	8002a06 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80029d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029d4:	4a57      	ldr	r2, [pc, #348]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80029d6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80029da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80029de:	f7fe fed9 	bl	8001794 <HAL_GetTick>
 80029e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe fed5 	bl	8001794 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e396      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80029f8:	4b4e      	ldr	r3, [pc, #312]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 80029fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	4a47      	ldr	r2, [pc, #284]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002a16:	f023 0304 	bic.w	r3, r3, #4
 8002a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8111 	beq.w	8002c4e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a46:	4a3b      	ldr	r2, [pc, #236]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a50:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d118      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	4a30      	ldr	r2, [pc, #192]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fe8a 	bl	8001794 <HAL_GetTick>
 8002a80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fe fe86 	bl	8001794 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e347      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x7bc>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01f      	beq.n	8002aee <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d010      	beq.n	8002adc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002aec:	e00f      	b.n	8002b0e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b04:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <HAL_RCC_OscConfig+0x7b8>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d057      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002b16:	f7fe fe3d 	bl	8001794 <HAL_GetTick>
 8002b1a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	e00e      	b.n	8002b3c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fe39 	bl	8001794 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d905      	bls.n	8002b3c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e2f8      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
 8002b34:	46020c00 	.word	0x46020c00
 8002b38:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3c:	4b9c      	ldr	r3, [pc, #624]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0e9      	beq.n	8002b1e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b56:	4b96      	ldr	r3, [pc, #600]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b5c:	4a94      	ldr	r2, [pc, #592]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fe14 	bl	8001794 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e2d3      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b7e:	4b8c      	ldr	r3, [pc, #560]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ed      	beq.n	8002b68 <HAL_RCC_OscConfig+0x7ec>
 8002b8c:	e053      	b.n	8002c36 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b94:	4a86      	ldr	r2, [pc, #536]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fdf8 	bl	8001794 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e2b7      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bb6:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ed      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x824>
 8002bc4:	e037      	b.n	8002c36 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fde5 	bl	8001794 <HAL_GetTick>
 8002bca:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fde1 	bl	8001794 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e2a0      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be4:	4b72      	ldr	r3, [pc, #456]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ed      	bne.n	8002bce <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002bf2:	4b6f      	ldr	r3, [pc, #444]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01a      	beq.n	8002c36 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c00:	4b6b      	ldr	r3, [pc, #428]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c06:	4a6a      	ldr	r2, [pc, #424]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe fdbf 	bl	8001794 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e27e      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1ed      	bne.n	8002c12 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c44:	4a5a      	ldr	r2, [pc, #360]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c46:	f023 0304 	bic.w	r3, r3, #4
 8002c4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d036      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d019      	beq.n	8002c96 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002c62:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c6e:	f7fe fd91 	bl	8001794 <HAL_GetTick>
 8002c72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c76:	f7fe fd8d 	bl	8001794 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e24e      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c88:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x8fa>
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002c96:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a45      	ldr	r2, [pc, #276]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ca0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ca2:	f7fe fd77 	bl	8001794 <HAL_GetTick>
 8002ca6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002caa:	f7fe fd73 	bl	8001794 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e234      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cbc:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d036      	beq.n	8002d42 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d019      	beq.n	8002d10 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ce8:	f7fe fd54 	bl	8001794 <HAL_GetTick>
 8002cec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fd50 	bl	8001794 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e211      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x974>
 8002d0e:	e018      	b.n	8002d42 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d1c:	f7fe fd3a 	bl	8001794 <HAL_GetTick>
 8002d20:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002d24:	f7fe fd36 	bl	8001794 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1f7      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d07f      	beq.n	8002e4e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d062      	beq.n	8002e1c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d60:	6093      	str	r3, [r2, #8]
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	4910      	ldr	r1, [pc, #64]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002d7c:	d309      	bcc.n	8002d92 <HAL_RCC_OscConfig+0xa16>
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f023 021f 	bic.w	r2, r3, #31
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4909      	ldr	r1, [pc, #36]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e02a      	b.n	8002de8 <HAL_RCC_OscConfig+0xa6c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da0c      	bge.n	8002db4 <HAL_RCC_OscConfig+0xa38>
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	015b      	lsls	r3, r3, #5
 8002da8:	4901      	ldr	r1, [pc, #4]	; (8002db0 <HAL_RCC_OscConfig+0xa34>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60cb      	str	r3, [r1, #12]
 8002dae:	e01b      	b.n	8002de8 <HAL_RCC_OscConfig+0xa6c>
 8002db0:	46020c00 	.word	0x46020c00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d30a      	bcc.n	8002dd4 <HAL_RCC_OscConfig+0xa58>
 8002dbe:	4ba1      	ldr	r3, [pc, #644]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	499d      	ldr	r1, [pc, #628]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60cb      	str	r3, [r1, #12]
 8002dd2:	e009      	b.n	8002de8 <HAL_RCC_OscConfig+0xa6c>
 8002dd4:	4b9b      	ldr	r3, [pc, #620]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	03db      	lsls	r3, r3, #15
 8002de2:	4998      	ldr	r1, [pc, #608]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002de8:	4b96      	ldr	r3, [pc, #600]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a95      	ldr	r2, [pc, #596]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002dee:	f043 0310 	orr.w	r3, r3, #16
 8002df2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002df4:	f7fe fcce 	bl	8001794 <HAL_GetTick>
 8002df8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002dfc:	f7fe fcca 	bl	8001794 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e18b      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002e0e:	4b8d      	ldr	r3, [pc, #564]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xa80>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002e1c:	4b89      	ldr	r3, [pc, #548]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a88      	ldr	r2, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e22:	f023 0310 	bic.w	r3, r3, #16
 8002e26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e28:	f7fe fcb4 	bl	8001794 <HAL_GetTick>
 8002e2c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002e30:	f7fe fcb0 	bl	8001794 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e171      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e42:	4b80      	ldr	r3, [pc, #512]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8166 	beq.w	8003124 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5e:	4b79      	ldr	r3, [pc, #484]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	f000 80f2 	beq.w	8003050 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f040 80c5 	bne.w	8003000 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b73      	ldr	r3, [pc, #460]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a72      	ldr	r2, [pc, #456]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e82:	f7fe fc87 	bl	8001794 <HAL_GetTick>
 8002e86:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fe fc83 	bl	8001794 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e144      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e9c:	4b69      	ldr	r3, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea8:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d111      	bne.n	8002eda <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b63      	ldr	r3, [pc, #396]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebc:	4a61      	ldr	r2, [pc, #388]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ec6:	4b5f      	ldr	r3, [pc, #380]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002eda:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <HAL_RCC_OscConfig+0xccc>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <HAL_RCC_OscConfig+0xccc>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a55      	ldr	r2, [pc, #340]	; (8003048 <HAL_RCC_OscConfig+0xccc>)
 8002ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002efa:	4b52      	ldr	r3, [pc, #328]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	0212      	lsls	r2, r2, #8
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	494a      	ldr	r1, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f20:	4b48      	ldr	r3, [pc, #288]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f24:	4b49      	ldr	r3, [pc, #292]	; (800304c <HAL_RCC_OscConfig+0xcd0>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0252      	lsls	r2, r2, #9
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f42:	3a01      	subs	r2, #1
 8002f44:	0412      	lsls	r2, r2, #16
 8002f46:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002f50:	3a01      	subs	r2, #1
 8002f52:	0612      	lsls	r2, r2, #24
 8002f54:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	493a      	ldr	r1, [pc, #232]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f60:	4b38      	ldr	r3, [pc, #224]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f66:	f023 0310 	bic.w	r3, r3, #16
 8002f6a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	4a34      	ldr	r2, [pc, #208]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f76:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	4a32      	ldr	r2, [pc, #200]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002f82:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f023 020c 	bic.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	492d      	ldr	r1, [pc, #180]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_RCC_OscConfig+0xccc>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_RCC_OscConfig+0xccc>)
 8002fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002fa8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	4a23      	ldr	r2, [pc, #140]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fca:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fd8:	f7fe fbdc 	bl	8001794 <HAL_GetTick>
 8002fdc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe fbd8 	bl	8001794 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e099      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xc64>
 8002ffe:	e091      	b.n	8003124 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800300c:	f7fe fbc2 	bl	8001794 <HAL_GetTick>
 8003010:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fbbe 	bl	8001794 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e07f      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	4a03      	ldr	r2, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0xcc8>)
 8003038:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800303c:	f023 0303 	bic.w	r3, r3, #3
 8003040:	6293      	str	r3, [r2, #40]	; 0x28
 8003042:	e06f      	b.n	8003124 <HAL_RCC_OscConfig+0xda8>
 8003044:	46020c00 	.word	0x46020c00
 8003048:	46020800 	.word	0x46020800
 800304c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003050:	4b37      	ldr	r3, [pc, #220]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	2b01      	cmp	r3, #1
 8003062:	d039      	beq.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d132      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d129      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d122      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11a      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	0a5b      	lsrs	r3, r3, #9
 80030a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d111      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d108      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	0e1b      	lsrs	r3, r3, #24
 80030ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e024      	b.n	8003126 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d01a      	beq.n	8003124 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 80030f4:	f023 0310 	bic.w	r3, r3, #16
 80030f8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fe fb4b 	bl	8001794 <HAL_GetTick>
 80030fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003100:	bf00      	nop
 8003102:	f7fe fb47 	bl	8001794 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	4293      	cmp	r3, r2
 800310c:	d0f9      	beq.n	8003102 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	4a07      	ldr	r2, [pc, #28]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_RCC_OscConfig+0xdb4>)
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3738      	adds	r7, #56	; 0x38
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	46020c00 	.word	0x46020c00

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e1d9      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b9b      	ldr	r3, [pc, #620]	; (80033b8 <HAL_RCC_ClockConfig+0x284>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b98      	ldr	r3, [pc, #608]	; (80033b8 <HAL_RCC_ClockConfig+0x284>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 020f 	bic.w	r2, r3, #15
 800315e:	4996      	ldr	r1, [pc, #600]	; (80033b8 <HAL_RCC_ClockConfig+0x284>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <HAL_RCC_ClockConfig+0x284>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e1c1      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	4b8c      	ldr	r3, [pc, #560]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003190:	429a      	cmp	r2, r3
 8003192:	d908      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003194:	4b89      	ldr	r3, [pc, #548]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4986      	ldr	r1, [pc, #536]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	4b81      	ldr	r3, [pc, #516]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d909      	bls.n	80031d8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80031c4:	4b7d      	ldr	r3, [pc, #500]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	497a      	ldr	r1, [pc, #488]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b74      	ldr	r3, [pc, #464]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d908      	bls.n	8003206 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b71      	ldr	r3, [pc, #452]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	496e      	ldr	r1, [pc, #440]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003202:	4313      	orrs	r3, r2
 8003204:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	4b69      	ldr	r3, [pc, #420]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	429a      	cmp	r2, r3
 8003220:	d908      	bls.n	8003234 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003222:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 020f 	bic.w	r2, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4963      	ldr	r1, [pc, #396]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003230:	4313      	orrs	r3, r2
 8003232:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80d2 	beq.w	80033e6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d143      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b5b      	ldr	r3, [pc, #364]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d110      	bne.n	800327e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003262:	4a56      	ldr	r2, [pc, #344]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 800326e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800327e:	f7fe fa89 	bl	8001794 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003284:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_RCC_ClockConfig+0x28c>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00f      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003292:	f7fe fa7f 	bl	8001794 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e12b      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80032a4:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_ClockConfig+0x28c>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032bc:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80032be:	f023 0304 	bic.w	r3, r3, #4
 80032c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80032c6:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d121      	bne.n	8003316 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e112      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d115      	bne.n	8003316 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e106      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0fa      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003306:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0f2      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4926      	ldr	r1, [pc, #152]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003324:	4313      	orrs	r3, r2
 8003326:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003328:	f7fe fa34 	bl	8001794 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d112      	bne.n	800335c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fe fa2c 	bl	8001794 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0d6      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d1ee      	bne.n	8003338 <HAL_RCC_ClockConfig+0x204>
 800335a:	e044      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d112      	bne.n	800338a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003364:	e00a      	b.n	800337c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003366:	f7fe fa15 	bl	8001794 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0bf      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d1ee      	bne.n	8003366 <HAL_RCC_ClockConfig+0x232>
 8003388:	e02d      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d123      	bne.n	80033da <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe f9fe 	bl	8001794 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0a8      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCC_ClockConfig+0x288>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ee      	bne.n	8003394 <HAL_RCC_ClockConfig+0x260>
 80033b6:	e016      	b.n	80033e6 <HAL_RCC_ClockConfig+0x2b2>
 80033b8:	40022000 	.word	0x40022000
 80033bc:	46020c00 	.word	0x46020c00
 80033c0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fe f9e6 	bl	8001794 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e090      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	4b4a      	ldr	r3, [pc, #296]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d1ee      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	429a      	cmp	r2, r3
 8003400:	d208      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003402:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 020f 	bic.w	r2, r3, #15
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	493d      	ldr	r1, [pc, #244]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_RCC_ClockConfig+0x3d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d210      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_RCC_ClockConfig+0x3d4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 020f 	bic.w	r2, r3, #15
 800342a:	4937      	ldr	r1, [pc, #220]	; (8003508 <HAL_RCC_ClockConfig+0x3d4>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_RCC_ClockConfig+0x3d4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e05b      	b.n	80034fc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345c:	429a      	cmp	r2, r3
 800345e:	d208      	bcs.n	8003472 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4925      	ldr	r1, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d012      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800348c:	429a      	cmp	r2, r3
 800348e:	d209      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4919      	ldr	r1, [pc, #100]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034bc:	429a      	cmp	r2, r3
 80034be:	d208      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	490d      	ldr	r1, [pc, #52]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80034d2:	f000 f821 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x3d0>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	490a      	ldr	r1, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x3d8>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x3dc>)
 80034ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x3e0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fe19 	bl	8001128 <HAL_InitTick>
 80034f6:	4603      	mov	r3, r0
 80034f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	46020c00 	.word	0x46020c00
 8003508:	40022000 	.word	0x40022000
 800350c:	0800ae40 	.word	0x0800ae40
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003526:	4b78      	ldr	r3, [pc, #480]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003530:	4b75      	ldr	r3, [pc, #468]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x34>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d121      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d11e      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800354c:	4b6e      	ldr	r3, [pc, #440]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003558:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800355a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800355e:	0b1b      	lsrs	r3, r3, #12
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	e005      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003568:	4b67      	ldr	r3, [pc, #412]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	0f1b      	lsrs	r3, r3, #28
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003574:	4a65      	ldr	r2, [pc, #404]	; (800370c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d110      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003588:	e00d      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d102      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003596:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003598:	623b      	str	r3, [r7, #32]
 800359a:	e004      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a2:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80035a4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	f040 80a5 	bne.w	80036f8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80035ae:	4b56      	ldr	r3, [pc, #344]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80035b8:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80035c6:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80035d2:	4b4d      	ldr	r3, [pc, #308]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	08db      	lsrs	r3, r3, #3
 80035d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d003      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0xe4>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d022      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x128>
 80035fa:	e043      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003714 <HAL_RCC_GetSysClockFreq+0x1fc>
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800361e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003622:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003718 <HAL_RCC_GetSysClockFreq+0x200>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800362e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800363e:	e046      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003714 <HAL_RCC_GetSysClockFreq+0x1fc>
 800364e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003662:	ed97 6a01 	vldr	s12, [r7, #4]
 8003666:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003718 <HAL_RCC_GetSysClockFreq+0x200>
 800366a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800366e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003676:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003682:	e024      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a4:	ee07 3a90 	vmov	s15, r3
 80036a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036ac:	ed97 6a01 	vldr	s12, [r7, #4]
 80036b0:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003718 <HAL_RCC_GetSysClockFreq+0x200>
 80036b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036cc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	0e1b      	lsrs	r3, r3, #24
 80036d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d8:	3301      	adds	r3, #1
 80036da:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f2:	ee17 3a90 	vmov	r3, s15
 80036f6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80036f8:	6a3b      	ldr	r3, [r7, #32]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	372c      	adds	r7, #44	; 0x2c
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	46020c00 	.word	0x46020c00
 800370c:	0800ae58 	.word	0x0800ae58
 8003710:	00f42400 	.word	0x00f42400
 8003714:	4b742400 	.word	0x4b742400
 8003718:	46000000 	.word	0x46000000

0800371c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003720:	f7ff fefa 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_RCC_GetHCLKFreq+0x28>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	4906      	ldr	r1, [pc, #24]	; (8003748 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003730:	5ccb      	ldrb	r3, [r1, r3]
 8003732:	fa22 f303 	lsr.w	r3, r2, r3
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <HAL_RCC_GetHCLKFreq+0x30>)
 8003738:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <HAL_RCC_GetHCLKFreq+0x30>)
 800373c:	681b      	ldr	r3, [r3, #0]
}
 800373e:	4618      	mov	r0, r3
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	46020c00 	.word	0x46020c00
 8003748:	0800ae40 	.word	0x0800ae40
 800374c:	20000000 	.word	0x20000000

08003750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003754:	f7ff ffe2 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003758:	4602      	mov	r2, r0
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	4903      	ldr	r1, [pc, #12]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	46020c00 	.word	0x46020c00
 8003774:	0800ae50 	.word	0x0800ae50

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800377c:	f7ff ffce 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	46020c00 	.word	0x46020c00
 800379c:	0800ae50 	.word	0x0800ae50

080037a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80037a4:	f7ff ffba 	bl	800371c <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	46020c00 	.word	0x46020c00
 80037c4:	0800ae50 	.word	0x0800ae50

080037c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	221f      	movs	r2, #31
 80037d6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCC_GetClockConfig+0x68>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 0203 	and.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_RCC_GetClockConfig+0x68>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCC_GetClockConfig+0x68>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCC_GetClockConfig+0x68>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_GetClockConfig+0x68>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <HAL_RCC_GetClockConfig+0x6c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 020f 	and.w	r2, r3, #15
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	601a      	str	r2, [r3, #0]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	46020c00 	.word	0x46020c00
 8003834:	40022000 	.word	0x40022000

08003838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003840:	4b3e      	ldr	r3, [pc, #248]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800384e:	f7fe fd17 	bl	8002280 <HAL_PWREx_GetVoltageRange>
 8003852:	6178      	str	r0, [r7, #20]
 8003854:	e019      	b.n	800388a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b39      	ldr	r3, [pc, #228]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385c:	4a37      	ldr	r2, [pc, #220]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003866:	4b35      	ldr	r3, [pc, #212]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003874:	f7fe fd04 	bl	8002280 <HAL_PWREx_GetVoltageRange>
 8003878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b30      	ldr	r3, [pc, #192]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003880:	4a2e      	ldr	r2, [pc, #184]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003882:	f023 0304 	bic.w	r3, r3, #4
 8003886:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003890:	d003      	beq.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003898:	d109      	bne.n	80038ae <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038a0:	d202      	bcs.n	80038a8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80038a2:	2301      	movs	r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80038a6:	e033      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80038ac:	e030      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b4:	d208      	bcs.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d102      	bne.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80038be:	2303      	movs	r3, #3
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e025      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e035      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ce:	d90f      	bls.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038dc:	d902      	bls.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e015      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80038e4:	2301      	movs	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e012      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	e00f      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f6:	d109      	bne.n	800390c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d102      	bne.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003900:	2301      	movs	r3, #1
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e004      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003906:	2302      	movs	r3, #2
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e001      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800390c:	2301      	movs	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 020f 	bic.w	r2, r3, #15
 8003918:	4909      	ldr	r1, [pc, #36]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	46020c00 	.word	0x46020c00
 8003940:	40022000 	.word	0x40022000

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b0b8      	sub	sp, #224	; 0xe0
 800394a:	af00      	add	r7, sp, #0
 800394c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003950:	2300      	movs	r3, #0
 8003952:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003956:	2300      	movs	r3, #0
 8003958:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f002 0401 	and.w	r4, r2, #1
 8003968:	2500      	movs	r5, #0
 800396a:	ea54 0305 	orrs.w	r3, r4, r5
 800396e:	d00b      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003970:	4bca      	ldr	r3, [pc, #808]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003976:	f023 0103 	bic.w	r1, r3, #3
 800397a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	4ac6      	ldr	r2, [pc, #792]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003982:	430b      	orrs	r3, r1
 8003984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003988:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f002 0802 	and.w	r8, r2, #2
 8003994:	f04f 0900 	mov.w	r9, #0
 8003998:	ea58 0309 	orrs.w	r3, r8, r9
 800399c:	d00b      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800399e:	4bbf      	ldr	r3, [pc, #764]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a4:	f023 010c 	bic.w	r1, r3, #12
 80039a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	4abb      	ldr	r2, [pc, #748]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f002 0a04 	and.w	sl, r2, #4
 80039c2:	f04f 0b00 	mov.w	fp, #0
 80039c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80039ca:	d00b      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80039cc:	4bb3      	ldr	r3, [pc, #716]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d2:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	4aaf      	ldr	r2, [pc, #700]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f002 0308 	and.w	r3, r2, #8
 80039f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003a04:	4ba5      	ldr	r3, [pc, #660]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	4aa1      	ldr	r2, [pc, #644]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f002 0310 	and.w	r3, r2, #16
 8003a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003a3c:	4b97      	ldr	r3, [pc, #604]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4c:	4a93      	ldr	r2, [pc, #588]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f002 0320 	and.w	r3, r2, #32
 8003a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003a74:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a7a:	f023 0107 	bic.w	r1, r3, #7
 8003a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a84:	4a85      	ldr	r2, [pc, #532]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aa2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003aac:	4b7b      	ldr	r3, [pc, #492]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	4a77      	ldr	r2, [pc, #476]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ada:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003ae4:	4b6d      	ldr	r3, [pc, #436]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af4:	4a69      	ldr	r2, [pc, #420]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b1c:	4b5f      	ldr	r3, [pc, #380]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a5b      	ldr	r2, [pc, #364]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003b54:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b5a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003b5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b64:	4a4d      	ldr	r2, [pc, #308]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003b78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b82:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b92:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b9c:	4a3f      	ldr	r2, [pc, #252]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003bc4:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bca:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003bce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bea:	2300      	movs	r3, #0
 8003bec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d00c      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0a:	4a24      	ldr	r2, [pc, #144]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c20:	2300      	movs	r3, #0
 8003c22:	677b      	str	r3, [r7, #116]	; 0x74
 8003c24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	d04f      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d02d      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d827      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c3e:	2b60      	cmp	r3, #96	; 0x60
 8003c40:	d02e      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c42:	2b60      	cmp	r3, #96	; 0x60
 8003c44:	d823      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d006      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d81f      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d011      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003c56:	e01a      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c62:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c64:	e01d      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f002 f9d1 	bl	8006014 <RCCEx_PLL2_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c78:	e013      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c7e:	332c      	adds	r3, #44	; 0x2c
 8003c80:	4618      	mov	r0, r3
 8003c82:	f002 fa5f 	bl	8006144 <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003c94:	e005      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8003c96:	bf00      	nop
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003c9a:	bf00      	nop
 8003c9c:	46020c00 	.word	0x46020c00
        break;
 8003ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003caa:	4bb6      	ldr	r3, [pc, #728]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003cac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cb0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	4ab1      	ldr	r2, [pc, #708]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003cca:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cdc:	2300      	movs	r3, #0
 8003cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	d053      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d033      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfc:	d82c      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d02:	d02f      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d08:	d826      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d820      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d011      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003d20:	e01a      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d22:	4b98      	ldr	r3, [pc, #608]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	4a97      	ldr	r2, [pc, #604]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d2e:	e01a      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d34:	3308      	adds	r3, #8
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 f96c 	bl	8006014 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d42:	e010      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d48:	332c      	adds	r3, #44	; 0x2c
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 f9fa 	bl	8006144 <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d56:	e006      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003d6e:	4b85      	ldr	r3, [pc, #532]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d74:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d80:	4a80      	ldr	r2, [pc, #512]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d8e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003da0:	2300      	movs	r3, #0
 8003da2:	667b      	str	r3, [r7, #100]	; 0x64
 8003da4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d046      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003db6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003dba:	d028      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003dbc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003dc0:	d821      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc6:	d022      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d81b      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd2:	d01c      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003dd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dd8:	d815      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dde:	d008      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d80f      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d011      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	d00e      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003df0:	e009      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003df2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003df6:	3308      	adds	r3, #8
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f002 f90b 	bl	8006014 <RCCEx_PLL2_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e1e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e2a:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003e38:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d03f      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d81e      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003eab 	.word	0x08003eab
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e8f 	.word	0x08003e8f
 8003e78:	08003eab 	.word	0x08003eab
 8003e7c:	08003eab 	.word	0x08003eab
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	4a3f      	ldr	r2, [pc, #252]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003e8c:	e00e      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e92:	332c      	adds	r3, #44	; 0x2c
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 f955 	bl	8006144 <RCCEx_PLL3_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8003eaa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003eac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003eb4:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003eba:	f023 0107 	bic.w	r1, r3, #7
 8003ebe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003ed4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8003eea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	d04d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f00:	d028      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f06:	d821      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f0c:	d024      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f12:	d81b      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f18:	d00e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f1e:	d815      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d110      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003f36:	e012      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f3c:	332c      	adds	r3, #44	; 0x2c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f002 f900 	bl	8006144 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003f4a:	e008      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003f54:	bf00      	nop
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003f5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f5e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d110      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f78:	4a02      	ldr	r2, [pc, #8]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f82:	bf00      	nop
 8003f84:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f8c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f000 80b5 	beq.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb4:	4b9d      	ldr	r3, [pc, #628]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d113      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	4b9a      	ldr	r3, [pc, #616]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc8:	4a98      	ldr	r2, [pc, #608]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003fd2:	4b96      	ldr	r3, [pc, #600]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fe0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003fea:	4b91      	ldr	r3, [pc, #580]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	4a90      	ldr	r2, [pc, #576]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff6:	f7fd fbcd 	bl	8001794 <HAL_GetTick>
 8003ffa:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ffe:	e00b      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fd fbc8 	bl	8001794 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d903      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004016:	e005      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004018:	4b85      	ldr	r3, [pc, #532]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ed      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004024:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004028:	2b00      	cmp	r3, #0
 800402a:	d165      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800402c:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800402e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	2b00      	cmp	r3, #0
 8004040:	d023      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004046:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800404a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404e:	4293      	cmp	r3, r2
 8004050:	d01b      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004060:	4b72      	ldr	r3, [pc, #456]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004066:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004070:	4b6e      	ldr	r3, [pc, #440]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004076:	4a6d      	ldr	r2, [pc, #436]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004080:	4a6a      	ldr	r2, [pc, #424]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004086:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800408a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d019      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fd fb7d 	bl	8001794 <HAL_GetTick>
 800409a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	e00d      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fd fb78 	bl	8001794 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d903      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 80040ba:	e006      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040bc:	4b5b      	ldr	r3, [pc, #364]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ea      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80040ca:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10d      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040e4:	4a51      	ldr	r2, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80040f2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80040f6:	e003      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80040fc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004100:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410e:	4a47      	ldr	r2, [pc, #284]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004110:	f023 0304 	bic.w	r3, r3, #4
 8004114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004124:	643b      	str	r3, [r7, #64]	; 0x40
 8004126:	2300      	movs	r3, #0
 8004128:	647b      	str	r3, [r7, #68]	; 0x44
 800412a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d042      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004140:	d022      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004142:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004146:	d81b      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414c:	d011      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800414e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004152:	d815      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800415c:	d110      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800415e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004162:	3308      	adds	r3, #8
 8004164:	4618      	mov	r0, r3
 8004166:	f001 ff55 	bl	8006014 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004170:	e00d      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	4a2d      	ldr	r2, [pc, #180]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 800418c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800418e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800419c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a8:	4a20      	ldr	r2, [pc, #128]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80041b6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c8:	2300      	movs	r3, #0
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80041d0:	460b      	mov	r3, r1
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d032      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80041d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e2:	d00b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80041e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e8:	d804      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	d007      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004204:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004206:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800420a:	2b00      	cmp	r3, #0
 800420c:	d112      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004210:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800421c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004220:	4a02      	ldr	r2, [pc, #8]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004222:	430b      	orrs	r3, r1
 8004224:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004228:	e008      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800422a:	bf00      	nop
 800422c:	46020c00 	.word	0x46020c00
 8004230:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004238:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800423c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	2300      	movs	r3, #0
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
 800424e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d019      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800425c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004264:	d105      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004266:	4b88      	ldr	r3, [pc, #544]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	4a87      	ldr	r2, [pc, #540]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004272:	4b85      	ldr	r3, [pc, #532]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004274:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004278:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800427c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004284:	4a80      	ldr	r2, [pc, #512]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004286:	430b      	orrs	r3, r1
 8004288:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800428c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
 800429a:	2300      	movs	r3, #0
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d00c      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80042a8:	4b77      	ldr	r3, [pc, #476]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042ba:	4973      	ldr	r1, [pc, #460]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80042c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d00c      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80042de:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f0:	4965      	ldr	r1, [pc, #404]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80042f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d00c      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004314:	4b5c      	ldr	r3, [pc, #368]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800431a:	f023 0218 	bic.w	r2, r3, #24
 800431e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004322:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004326:	4958      	ldr	r1, [pc, #352]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800432e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004344:	460b      	mov	r3, r1
 8004346:	4313      	orrs	r3, r2
 8004348:	d032      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800434a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800434e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	4a4a      	ldr	r2, [pc, #296]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800436c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004370:	d108      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004376:	3308      	adds	r3, #8
 8004378:	4618      	mov	r0, r3
 800437a:	f001 fe4b 	bl	8006014 <RCCEx_PLL2_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 8004384:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800438c:	4b3e      	ldr	r3, [pc, #248]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800438e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004392:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800439a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800439e:	493a      	ldr	r1, [pc, #232]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80043ac:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80043b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d03a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80043cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d8:	d00e      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80043da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043de:	d815      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80043e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e8:	d110      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	4a26      	ldr	r2, [pc, #152]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80043f6:	e00e      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043fc:	3308      	adds	r3, #8
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 fe08 	bl	8006014 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800440a:	e004      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004414:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004416:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004424:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	4915      	ldr	r1, [pc, #84]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004438:	e003      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800443e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d00c      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004464:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800446c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004470:	4905      	ldr	r1, [pc, #20]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004478:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 800447c:	4618      	mov	r0, r3
 800447e:	37e0      	adds	r7, #224	; 0xe0
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	46020c00 	.word	0x46020c00

0800448c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004494:	4ba6      	ldr	r3, [pc, #664]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800449e:	4ba4      	ldr	r3, [pc, #656]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80044a8:	4ba1      	ldr	r3, [pc, #644]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3301      	adds	r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044b6:	4b9e      	ldr	r3, [pc, #632]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80044c2:	4b9b      	ldr	r3, [pc, #620]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d062      	beq.n	80045aa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	f200 8081 	bhi.w	80045ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d024      	beq.n	800453c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d17a      	bne.n	80045ee <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b89      	ldr	r3, [pc, #548]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800451a:	ed97 6a02 	vldr	s12, [r7, #8]
 800451e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800452a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800453a:	e08f      	b.n	800465c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800453c:	4b7c      	ldr	r3, [pc, #496]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004548:	4b79      	ldr	r3, [pc, #484]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	0f1b      	lsrs	r3, r3, #28
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	e006      	b.n	8004562 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004554:	4b76      	ldr	r3, [pc, #472]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	0f1b      	lsrs	r3, r3, #28
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	4a76      	ldr	r2, [pc, #472]	; (800473c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004588:	ed97 6a02 	vldr	s12, [r7, #8]
 800458c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045a8:	e058      	b.n	800465c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004734 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80045b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045bc:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c4:	ee07 3a90 	vmov	s15, r3
 80045c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80045cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80045d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80045dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ec:	e036      	b.n	800465c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045ee:	4b50      	ldr	r3, [pc, #320]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80045fa:	4b4d      	ldr	r3, [pc, #308]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	0f1b      	lsrs	r3, r3, #28
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	e006      	b.n	8004614 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004606:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800460c:	041b      	lsls	r3, r3, #16
 800460e:	0f1b      	lsrs	r3, r3, #28
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	4a49      	ldr	r2, [pc, #292]	; (800473c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a02 	vldr	s12, [r7, #8]
 800463e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004738 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800465a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800465c:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d017      	beq.n	8004698 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004668:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	0a5b      	lsrs	r3, r3, #9
 800466e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800467a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800467e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004682:	edd7 6a07 	vldr	s13, [r7, #28]
 8004686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800468a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800468e:	ee17 2a90 	vmov	r2, s15
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e002      	b.n	800469e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80046bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d0:	ee17 2a90 	vmov	r2, s15
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d017      	beq.n	800471c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	0e1b      	lsrs	r3, r3, #24
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80046fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004702:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004706:	edd7 6a07 	vldr	s13, [r7, #28]
 800470a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004712:	ee17 2a90 	vmov	r2, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800471a:	e002      	b.n	8004722 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
}
 8004722:	bf00      	nop
 8004724:	3724      	adds	r7, #36	; 0x24
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	46020c00 	.word	0x46020c00
 8004734:	4b742400 	.word	0x4b742400
 8004738:	46000000 	.word	0x46000000
 800473c:	0800ae58 	.word	0x0800ae58

08004740 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004748:	4ba6      	ldr	r3, [pc, #664]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004750:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004752:	4ba4      	ldr	r3, [pc, #656]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800475c:	4ba1      	ldr	r3, [pc, #644]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	3301      	adds	r3, #1
 8004768:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800476a:	4b9e      	ldr	r3, [pc, #632]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004776:	4b9b      	ldr	r3, [pc, #620]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	08db      	lsrs	r3, r3, #3
 800477c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d062      	beq.n	800485e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b03      	cmp	r3, #3
 800479c:	f200 8081 	bhi.w	80048a2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d024      	beq.n	80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d17a      	bne.n	80048a2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b89      	ldr	r3, [pc, #548]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d2:	eddf 5a86 	vldr	s11, [pc, #536]	; 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80047de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ee:	e08f      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80047f0:	4b7c      	ldr	r3, [pc, #496]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80047fc:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	0f1b      	lsrs	r3, r3, #28
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	e006      	b.n	8004816 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004808:	4b76      	ldr	r3, [pc, #472]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800480a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	0f1b      	lsrs	r3, r3, #28
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	4a76      	ldr	r2, [pc, #472]	; (80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004840:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004850:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004858:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485c:	e058      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004868:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800486c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004870:	4b5c      	ldr	r3, [pc, #368]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004880:	ed97 6a02 	vldr	s12, [r7, #8]
 8004884:	eddf 5a59 	vldr	s11, [pc, #356]	; 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004888:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800488c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004894:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a0:	e036      	b.n	8004910 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80048a2:	4b50      	ldr	r3, [pc, #320]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80048ae:	4b4d      	ldr	r3, [pc, #308]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0f1b      	lsrs	r3, r3, #28
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80048ba:	4b4a      	ldr	r3, [pc, #296]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	0f1b      	lsrs	r3, r3, #28
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	4a49      	ldr	r2, [pc, #292]	; (80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80048ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80048f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004902:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800490e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d017      	beq.n	800494c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800491c:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	0a5b      	lsrs	r3, r3, #9
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800492e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004932:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004936:	edd7 6a07 	vldr	s13, [r7, #28]
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 2a90 	vmov	r2, s15
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e002      	b.n	8004952 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d017      	beq.n	800498e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	0c1b      	lsrs	r3, r3, #16
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004974:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004978:	edd7 6a07 	vldr	s13, [r7, #28]
 800497c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004984:	ee17 2a90 	vmov	r2, s15
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	e002      	b.n	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	0e1b      	lsrs	r3, r3, #24
 80049a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80049b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80049be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c6:	ee17 2a90 	vmov	r2, s15
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
}
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	46020c00 	.word	0x46020c00
 80049e8:	4b742400 	.word	0x4b742400
 80049ec:	46000000 	.word	0x46000000
 80049f0:	0800ae58 	.word	0x0800ae58

080049f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80049fc:	4ba6      	ldr	r3, [pc, #664]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a04:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004a06:	4ba4      	ldr	r3, [pc, #656]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004a10:	4ba1      	ldr	r3, [pc, #644]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004a1e:	4b9e      	ldr	r3, [pc, #632]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004a2a:	4b9b      	ldr	r3, [pc, #620]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d062      	beq.n	8004b12 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	f200 8081 	bhi.w	8004b56 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d024      	beq.n	8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d17a      	bne.n	8004b56 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b89      	ldr	r3, [pc, #548]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a86:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004aa2:	e08f      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004aa4:	4b7c      	ldr	r3, [pc, #496]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004ab0:	4b79      	ldr	r3, [pc, #484]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	0f1b      	lsrs	r3, r3, #28
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	e006      	b.n	8004aca <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004abc:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	0f1b      	lsrs	r3, r3, #28
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	4a76      	ldr	r2, [pc, #472]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004af4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b10:	e058      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b24:	4b5c      	ldr	r3, [pc, #368]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b38:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b54:	e036      	b.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b56:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004b62:	4b4d      	ldr	r3, [pc, #308]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	0f1b      	lsrs	r3, r3, #28
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	e006      	b.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004b6e:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	0f1b      	lsrs	r3, r3, #28
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	4a49      	ldr	r2, [pc, #292]	; (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ba6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bc2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004bc4:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d017      	beq.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004bd0:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	0a5b      	lsrs	r3, r3, #9
 8004bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf6:	ee17 2a90 	vmov	r2, s15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004c06:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d017      	beq.n	8004c42 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c28:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c38:	ee17 2a90 	vmov	r2, s15
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	605a      	str	r2, [r3, #4]
 8004c40:	e002      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d017      	beq.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c54:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 2a90 	vmov	r2, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c82:	e002      	b.n	8004c8a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
}
 8004c8a:	bf00      	nop
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	46020c00 	.word	0x46020c00
 8004c9c:	4b742400 	.word	0x4b742400
 8004ca0:	46000000 	.word	0x46000000
 8004ca4:	0800ae58 	.word	0x0800ae58

08004ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	d145      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004cbe:	4baa      	ldr	r3, [pc, #680]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004cca:	4ba7      	ldr	r3, [pc, #668]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d108      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d104      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce6:	f001 b987 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004cea:	4b9f      	ldr	r3, [pc, #636]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf8:	d114      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d00:	d110      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d02:	4b99      	ldr	r3, [pc, #612]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d10:	d103      	bne.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004d12:	23fa      	movs	r3, #250	; 0xfa
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d16:	f001 b96f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d1a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d20:	f001 b96a 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004d24:	4b90      	ldr	r3, [pc, #576]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d30:	d107      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d38:	d103      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004d3a:	4b8c      	ldr	r3, [pc, #560]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d3e:	f001 b95b 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
 8004d46:	f001 b957 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004d52:	430b      	orrs	r3, r1
 8004d54:	d151      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004d56:	4b84      	ldr	r3, [pc, #528]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d5c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004d60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d035      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	2b80      	cmp	r3, #128	; 0x80
 8004d6c:	d841      	bhi.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d02a      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	2b60      	cmp	r3, #96	; 0x60
 8004d78:	d83b      	bhi.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d009      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d835      	bhi.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d012      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004d92:	e02e      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fb77 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004da2:	f001 b929 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004da6:	f107 0318 	add.w	r3, r7, #24
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fcc8 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004db4:	f001 b920 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004db8:	f107 030c 	add.w	r3, r7, #12
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fe19 	bl	80049f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dc6:	f001 b917 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004dca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dd0:	f001 b912 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d103      	bne.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004de6:	f001 b907 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dee:	f001 b903 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004df6:	f001 b8ff 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfe:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004e02:	430b      	orrs	r3, r1
 8004e04:	d158      	bne.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004e06:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e18:	d03b      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e20:	d846      	bhi.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e28:	d02e      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e30:	d83e      	bhi.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d836      	bhi.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d012      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004e50:	e02e      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fb18 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e60:	f001 b8ca 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e64:	f107 0318 	add.w	r3, r7, #24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fc69 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e72:	f001 b8c1 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fdba 	bl	80049f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e84:	f001 b8b8 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e88:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e8e:	f001 b8b3 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e92:	4b35      	ldr	r3, [pc, #212]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d103      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004ea0:	4b33      	ldr	r3, [pc, #204]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ea4:	f001 b8a8 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eac:	f001 b8a4 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004eb4:	f001 b8a0 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ebc:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	d16e      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eca:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ed6:	d034      	beq.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ede:	d85c      	bhi.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee6:	d00b      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eee:	d854      	bhi.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d016      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004efc:	d009      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004efe:	e04c      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fac1 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f0e:	f001 b873 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fc12 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f20:	f001 b86a 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f30:	d103      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f36:	f001 b85f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f3e:	f001 b85b 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d121      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00e      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8004f5a:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	e00f      	b.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004f66:	bf00      	nop
 8004f68:	46020c00 	.word	0x46020c00
 8004f6c:	0007a120 	.word	0x0007a120
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	02dc6c00 	.word	0x02dc6c00
 8004f78:	4ba7      	ldr	r3, [pc, #668]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	0e1b      	lsrs	r3, r3, #24
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	4aa5      	ldr	r2, [pc, #660]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f8e:	f001 b833 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f96:	f001 b82f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f9e:	f001 b82b 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa6:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004faa:	430b      	orrs	r3, r1
 8004fac:	d17f      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004fae:	4b9a      	ldr	r3, [pc, #616]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d165      	bne.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004fc0:	4b95      	ldr	r3, [pc, #596]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fc6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004fca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fd2:	d034      	beq.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004fda:	d853      	bhi.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fea:	d84b      	bhi.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff8:	d009      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8004ffa:	e043      	b.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fa43 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800500a:	f000 bff5 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800500e:	f107 0318 	add.w	r3, r7, #24
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fb94 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800501c:	f000 bfec 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005020:	4b7d      	ldr	r3, [pc, #500]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502c:	d103      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800502e:	4b7c      	ldr	r3, [pc, #496]	; (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005032:	f000 bfe1 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800503a:	f000 bfdd 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800503e:	4b76      	ldr	r3, [pc, #472]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d118      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800504a:	4b73      	ldr	r3, [pc, #460]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005056:	4b70      	ldr	r3, [pc, #448]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	0e1b      	lsrs	r3, r3, #24
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	e006      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005062:	4b6d      	ldr	r3, [pc, #436]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	0e1b      	lsrs	r3, r3, #24
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	4a6a      	ldr	r2, [pc, #424]	; (800521c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005078:	f000 bfbe 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005080:	f000 bfba 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005088:	f000 bfb6 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005092:	d108      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff f9f7 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
 80050a2:	f000 bfa9 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	f000 bfa5 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80050ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b2:	1e51      	subs	r1, r2, #1
 80050b4:	430b      	orrs	r3, r1
 80050b6:	d136      	bne.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80050b8:	4b57      	ldr	r3, [pc, #348]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80050ca:	f7fe fb55 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 80050ce:	6378      	str	r0, [r7, #52]	; 0x34
 80050d0:	f000 bf92 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d104      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050da:	f7fe fa1d 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80050de:	6378      	str	r0, [r7, #52]	; 0x34
 80050e0:	f000 bf8a 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80050e4:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d106      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d103      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80050f8:	4b4a      	ldr	r3, [pc, #296]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
 80050fc:	f000 bf7c 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005100:	4b45      	ldr	r3, [pc, #276]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d107      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	2b03      	cmp	r3, #3
 8005112:	d104      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
 800511a:	f000 bf6d 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	637b      	str	r3, [r7, #52]	; 0x34
 8005122:	f000 bf69 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512a:	1e91      	subs	r1, r2, #2
 800512c:	430b      	orrs	r3, r1
 800512e:	d136      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005142:	f7fe fb05 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005146:	6378      	str	r0, [r7, #52]	; 0x34
 8005148:	f000 bf56 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	2b04      	cmp	r3, #4
 8005150:	d104      	bne.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005152:	f7fe f9e1 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005156:	6378      	str	r0, [r7, #52]	; 0x34
 8005158:	f000 bf4e 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800515c:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005168:	d106      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	2b08      	cmp	r3, #8
 800516e:	d103      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8005170:	4b2c      	ldr	r3, [pc, #176]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
 8005174:	f000 bf40 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800517a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d107      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d104      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800518c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
 8005192:	f000 bf31 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
 800519a:	f000 bf2d 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800519e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a2:	1f11      	subs	r1, r2, #4
 80051a4:	430b      	orrs	r3, r1
 80051a6:	d13f      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80051a8:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051ba:	f7fe fac9 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 80051be:	6378      	str	r0, [r7, #52]	; 0x34
 80051c0:	f000 bf1a 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d104      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051ca:	f7fe f9a5 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80051ce:	6378      	str	r0, [r7, #52]	; 0x34
 80051d0:	f000 bf12 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d106      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d103      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80051e8:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
 80051ec:	f000 bf04 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d107      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	d104      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8005204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	f000 bef5 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	f000 bef1 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005216:	bf00      	nop
 8005218:	46020c00 	.word	0x46020c00
 800521c:	0800ae58 	.word	0x0800ae58
 8005220:	02dc6c00 	.word	0x02dc6c00
 8005224:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522c:	f1a2 0108 	sub.w	r1, r2, #8
 8005230:	430b      	orrs	r3, r1
 8005232:	d136      	bne.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005234:	4ba4      	ldr	r3, [pc, #656]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800523a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800523e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fe fa83 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 800524a:	6378      	str	r0, [r7, #52]	; 0x34
 800524c:	f000 bed4 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d104      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005256:	f7fe f95f 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 800525a:	6378      	str	r0, [r7, #52]	; 0x34
 800525c:	f000 becc 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005260:	4b99      	ldr	r3, [pc, #612]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526c:	d106      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d103      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8005274:	4b95      	ldr	r3, [pc, #596]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
 8005278:	f000 bebe 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800527c:	4b92      	ldr	r3, [pc, #584]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800527e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b02      	cmp	r3, #2
 8005288:	d107      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2bc0      	cmp	r3, #192	; 0xc0
 800528e:	d104      	bne.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
 8005296:	f000 beaf 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
 800529e:	f000 beab 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80052a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a6:	f1a2 0110 	sub.w	r1, r2, #16
 80052aa:	430b      	orrs	r3, r1
 80052ac:	d139      	bne.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80052ae:	4b86      	ldr	r3, [pc, #536]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80052b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fa46 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 80052c4:	6378      	str	r0, [r7, #52]	; 0x34
 80052c6:	f000 be97 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d0:	d104      	bne.n	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe f921 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80052d6:	6378      	str	r0, [r7, #52]	; 0x34
 80052d8:	f000 be8e 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80052dc:	4b7a      	ldr	r3, [pc, #488]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d107      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f0:	d103      	bne.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80052f2:	4b76      	ldr	r3, [pc, #472]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	f000 be7f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80052fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d108      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530e:	d104      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	f000 be6f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
 800531e:	f000 be6b 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005326:	f1a2 0120 	sub.w	r1, r2, #32
 800532a:	430b      	orrs	r3, r1
 800532c:	d158      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800532e:	4b66      	ldr	r3, [pc, #408]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005340:	f7fe fa2e 	bl	80037a0 <HAL_RCC_GetPCLK3Freq>
 8005344:	6378      	str	r0, [r7, #52]	; 0x34
 8005346:	f000 be57 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2b01      	cmp	r3, #1
 800534e:	d104      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005350:	f7fe f8e2 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005354:	6378      	str	r0, [r7, #52]	; 0x34
 8005356:	f000 be4f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800535a:	4b5b      	ldr	r3, [pc, #364]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d106      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	2b02      	cmp	r3, #2
 800536c:	d103      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800536e:	4b57      	ldr	r3, [pc, #348]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	f000 be41 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005376:	4b54      	ldr	r3, [pc, #336]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d107      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2b03      	cmp	r3, #3
 8005388:	d104      	bne.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800538a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
 8005390:	f000 be32 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005394:	4b4c      	ldr	r3, [pc, #304]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b20      	cmp	r3, #32
 800539e:	d11b      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d118      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053a6:	4b48      	ldr	r3, [pc, #288]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80053b2:	4b45      	ldr	r3, [pc, #276]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	e006      	b.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80053be:	4b42      	ldr	r3, [pc, #264]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	0e1b      	lsrs	r3, r3, #24
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80053ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
 80053d4:	f000 be10 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
 80053dc:	f000 be0c 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80053e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80053e8:	430b      	orrs	r3, r1
 80053ea:	d173      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80053ec:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d104      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005400:	f7fe f88a 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005404:	6378      	str	r0, [r7, #52]	; 0x34
 8005406:	f000 bdf7 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d108      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005412:	f107 0318 	add.w	r3, r7, #24
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f992 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
 8005420:	f000 bdea 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800542a:	f7fe f977 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800542e:	6378      	str	r0, [r7, #52]	; 0x34
 8005430:	f000 bde2 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800543a:	d122      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800543c:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	2b20      	cmp	r3, #32
 8005446:	d118      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005448:	4b1f      	ldr	r3, [pc, #124]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	e006      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005474:	637b      	str	r3, [r7, #52]	; 0x34
 8005476:	f000 bdbf 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	637b      	str	r3, [r7, #52]	; 0x34
 800547e:	f000 bdbb 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005496:	d103      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8005498:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	f000 bdac 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ac:	d107      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b4:	d103      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	f000 bd9d 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
 80054c2:	f000 bd99 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80054c6:	bf00      	nop
 80054c8:	46020c00 	.word	0x46020c00
 80054cc:	00f42400 	.word	0x00f42400
 80054d0:	0800ae58 	.word	0x0800ae58
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80054d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80054dc:	430b      	orrs	r3, r1
 80054de:	d158      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80054e0:	4bad      	ldr	r3, [pc, #692]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80054e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d84b      	bhi.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005531 	.word	0x08005531
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	0800551f 	.word	0x0800551f
 8005504:	0800553b 	.word	0x0800553b
 8005508:	08005545 	.word	0x08005545
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800550c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe ffbb 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800551a:	f000 bd6d 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800551e:	f107 030c 	add.w	r3, r7, #12
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fa66 	bl	80049f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800552c:	f000 bd64 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005530:	f7fe f8f4 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8005534:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005536:	f000 bd5f 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800553a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005540:	f000 bd5a 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005544:	4b94      	ldr	r3, [pc, #592]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b20      	cmp	r3, #32
 800554e:	d118      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005550:	4b91      	ldr	r3, [pc, #580]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800555c:	4b8e      	ldr	r3, [pc, #568]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	e006      	b.n	8005576 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8005568:	4b8b      	ldr	r3, [pc, #556]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800556a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	4a89      	ldr	r2, [pc, #548]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800557e:	f000 bd3b 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005586:	f000 bd37 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800558e:	f000 bd33 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005596:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800559a:	430b      	orrs	r3, r1
 800559c:	d167      	bne.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800559e:	4b7e      	ldr	r3, [pc, #504]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80055a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b0:	d036      	beq.n	8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055b8:	d855      	bhi.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055c0:	d029      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055c8:	d84d      	bhi.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d0:	d013      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055d8:	d845      	bhi.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d015      	beq.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e6:	d13e      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe ff4d 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f6:	f000 bcff 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff f9f8 	bl	80049f4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005608:	f000 bcf6 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800560c:	f7fe f886 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8005610:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005612:	f000 bcf1 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005616:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800561a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800561c:	f000 bcec 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005620:	4b5d      	ldr	r3, [pc, #372]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b20      	cmp	r3, #32
 800562a:	d118      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800562c:	4b5a      	ldr	r3, [pc, #360]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8005638:	4b57      	ldr	r3, [pc, #348]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	0e1b      	lsrs	r3, r3, #24
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	e006      	b.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005644:	4b54      	ldr	r3, [pc, #336]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	0e1b      	lsrs	r3, r3, #24
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a52      	ldr	r2, [pc, #328]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800565a:	f000 bccd 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005662:	f000 bcc9 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800566a:	f000 bcc5 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800566e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005672:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005676:	430b      	orrs	r3, r1
 8005678:	d14c      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800567c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005680:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005684:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe f860 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005690:	6378      	str	r0, [r7, #52]	; 0x34
 8005692:	f000 bcb1 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d104      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800569e:	f7fd ff3b 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80056a2:	6378      	str	r0, [r7, #52]	; 0x34
 80056a4:	f000 bca8 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80056a8:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d107      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056bc:	d103      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80056be:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	f000 bc99 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80056c6:	4b34      	ldr	r3, [pc, #208]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d11c      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d8:	d118      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056da:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	0e1b      	lsrs	r3, r3, #24
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	0e1b      	lsrs	r3, r3, #24
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
 8005708:	f000 bc76 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
 8005710:	f000 bc72 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005718:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800571c:	430b      	orrs	r3, r1
 800571e:	d152      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800572a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005732:	f7fe f80d 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005736:	6378      	str	r0, [r7, #52]	; 0x34
 8005738:	f000 bc5e 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	d104      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005744:	f7fd fee8 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005748:	6378      	str	r0, [r7, #52]	; 0x34
 800574a:	f000 bc55 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	d107      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	d103      	bne.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
 8005768:	f000 bc46 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b20      	cmp	r3, #32
 8005776:	d122      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800577e:	d11e      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800578c:	4b02      	ldr	r3, [pc, #8]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0e1b      	lsrs	r3, r3, #24
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	e00c      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005798:	46020c00 	.word	0x46020c00
 800579c:	0800ae58 	.word	0x0800ae58
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	4ba1      	ldr	r3, [pc, #644]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80057a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	4a9f      	ldr	r2, [pc, #636]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80057b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ba:	f000 bc1d 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
 80057c2:	f000 bc19 	b.w	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80057c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ca:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80057ce:	430b      	orrs	r3, r1
 80057d0:	d151      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80057d2:	4b96      	ldr	r3, [pc, #600]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80057d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	2bc0      	cmp	r3, #192	; 0xc0
 80057e2:	d024      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	2bc0      	cmp	r3, #192	; 0xc0
 80057e8:	d842      	bhi.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2b80      	cmp	r3, #128	; 0x80
 80057ee:	d00d      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d83c      	bhi.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d011      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8005802:	e035      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005804:	f7fd ffcc 	bl	80037a0 <HAL_RCC_GetPCLK3Freq>
 8005808:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800580a:	e3f5      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800580c:	4b87      	ldr	r3, [pc, #540]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005818:	d102      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800581a:	4b86      	ldr	r3, [pc, #536]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800581e:	e3eb      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005824:	e3e8      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005826:	f7fd fe77 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 800582a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800582c:	e3e4      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800582e:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b20      	cmp	r3, #32
 8005838:	d117      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800583a:	4b7c      	ldr	r3, [pc, #496]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8005846:	4b79      	ldr	r3, [pc, #484]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	0e1b      	lsrs	r3, r3, #24
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	e006      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005852:	4b76      	ldr	r3, [pc, #472]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	0e1b      	lsrs	r3, r3, #24
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	4a73      	ldr	r2, [pc, #460]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005868:	e3c6      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800586e:	e3c3      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005874:	e3c0      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800587e:	430b      	orrs	r3, r1
 8005880:	d147      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005882:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800588c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	2b00      	cmp	r3, #0
 8005892:	d103      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fd ff5c 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005898:	6378      	str	r0, [r7, #52]	; 0x34
 800589a:	e3ad      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a2:	d103      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058a4:	f7fd fe38 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80058a8:	6378      	str	r0, [r7, #52]	; 0x34
 80058aa:	e3a5      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80058ac:	4b5f      	ldr	r3, [pc, #380]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b8:	d106      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c0:	d102      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80058c2:	4b5c      	ldr	r3, [pc, #368]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	e397      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80058c8:	4b58      	ldr	r3, [pc, #352]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d11b      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058da:	d117      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80058e8:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	0e1b      	lsrs	r3, r3, #24
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	e006      	b.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80058f4:	4b4d      	ldr	r3, [pc, #308]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	0e1b      	lsrs	r3, r3, #24
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	4a4b      	ldr	r2, [pc, #300]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
 800590a:	e375      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	e372      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005916:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800591a:	430b      	orrs	r3, r1
 800591c:	d164      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800591e:	4b43      	ldr	r3, [pc, #268]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005928:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d120      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005930:	4b3e      	ldr	r3, [pc, #248]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b20      	cmp	r3, #32
 800593a:	d117      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800593c:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005948:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	e006      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8005954:	4b35      	ldr	r3, [pc, #212]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	0e1b      	lsrs	r3, r3, #24
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	4a33      	ldr	r2, [pc, #204]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
 800596a:	e345      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
 8005970:	e342      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005972:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005980:	d112      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005988:	d10e      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800598a:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800598c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005998:	d102      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800599a:	23fa      	movs	r3, #250	; 0xfa
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800599e:	e32b      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80059a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059a6:	e327      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80059a8:	4b20      	ldr	r3, [pc, #128]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b4:	d106      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059bc:	d102      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
 80059c2:	e319      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80059c4:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d107      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d8:	d103      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80059da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
 80059e0:	e30a      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
 80059e6:	e307      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80059e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80059f0:	430b      	orrs	r3, r1
 80059f2:	d16b      	bne.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80059f4:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d127      	bne.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d11e      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8005a1e:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0e1b      	lsrs	r3, r3, #24
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	e00d      	b.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005a2a:	bf00      	nop
 8005a2c:	46020c00 	.word	0x46020c00
 8005a30:	0800ae58 	.word	0x0800ae58
 8005a34:	00f42400 	.word	0x00f42400
 8005a38:	4b94      	ldr	r3, [pc, #592]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a3e:	041b      	lsls	r3, r3, #16
 8005a40:	0e1b      	lsrs	r3, r3, #24
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	4a92      	ldr	r2, [pc, #584]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4e:	e2d3      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
 8005a54:	e2d0      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005a56:	4b8d      	ldr	r3, [pc, #564]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a64:	d112      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a6c:	d10e      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a6e:	4b87      	ldr	r3, [pc, #540]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a7c:	d102      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8005a7e:	23fa      	movs	r3, #250	; 0xfa
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a82:	e2b9      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a8a:	e2b5      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005a8c:	4b7f      	ldr	r3, [pc, #508]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa0:	d102      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8005aa2:	4b7c      	ldr	r3, [pc, #496]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa6:	e2a7      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005aa8:	4b78      	ldr	r3, [pc, #480]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d107      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005abc:	d103      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8005abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	e298      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	e295      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	d147      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005ad8:	4b6c      	ldr	r3, [pc, #432]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ade:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7fd fe31 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005aee:	6378      	str	r0, [r7, #52]	; 0x34
 8005af0:	e282      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005af2:	4b66      	ldr	r3, [pc, #408]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b00:	d112      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b08:	d10e      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b0a:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b18:	d102      	bne.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8005b1a:	23fa      	movs	r3, #250	; 0xfa
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b1e:	e26b      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005b20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b26:	e267      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005b28:	4b58      	ldr	r3, [pc, #352]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b34:	d106      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b3c:	d102      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8005b3e:	4b55      	ldr	r3, [pc, #340]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	e259      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005b44:	4b51      	ldr	r3, [pc, #324]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b58:	d103      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b60:	e24a      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	e247      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005b70:	430b      	orrs	r3, r1
 8005b72:	d12d      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005b74:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005b80:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8c:	d105      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8005b94:	4b3f      	ldr	r3, [pc, #252]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
 8005b98:	e22e      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fc70 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb0:	e222      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb8:	d107      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bba:	f107 0318 	add.w	r3, r7, #24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fdbe 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc8:	e216      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bce:	e213      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	d15d      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005be2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bee:	d028      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bf6:	d845      	bhi.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfe:	d013      	beq.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c06:	d83d      	bhi.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c14:	d004      	beq.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8005c16:	e035      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fd fdae 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c1e:	e1eb      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c20:	f7fd fc7a 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005c24:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c26:	e1e7      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c28:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c34:	d102      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8005c36:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c3a:	e1dd      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c40:	e1da      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d117      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c4e:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0e1b      	lsrs	r3, r3, #24
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8005c66:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	0e1b      	lsrs	r3, r3, #24
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	4a06      	ldr	r2, [pc, #24]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c7c:	e1bc      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c82:	e1b9      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c88:	e1b6      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005c8a:	bf00      	nop
 8005c8c:	46020c00 	.word	0x46020c00
 8005c90:	0800ae58 	.word	0x0800ae58
 8005c94:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c9c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	d156      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005ca4:	4ba5      	ldr	r3, [pc, #660]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cb6:	d028      	beq.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cbe:	d845      	bhi.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc6:	d013      	beq.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cce:	d83d      	bhi.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cdc:	d004      	beq.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005cde:	e035      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f7fd fd36 	bl	8003750 <HAL_RCC_GetPCLK1Freq>
 8005ce4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ce6:	e187      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ce8:	f7fd fc16 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005cec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005cee:	e183      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cf0:	4b92      	ldr	r3, [pc, #584]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfc:	d102      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8005cfe:	4b90      	ldr	r3, [pc, #576]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d02:	e179      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d08:	e176      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d0a:	4b8c      	ldr	r3, [pc, #560]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d117      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d16:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8005d22:	4b86      	ldr	r3, [pc, #536]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0e1b      	lsrs	r3, r3, #24
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	e006      	b.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8005d2e:	4b83      	ldr	r3, [pc, #524]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	0e1b      	lsrs	r3, r3, #24
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	4a81      	ldr	r2, [pc, #516]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d44:	e158      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d4a:	e155      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d50:	e152      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d56:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	d177      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005d5e:	4b77      	ldr	r3, [pc, #476]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d64:	f003 0318 	and.w	r3, r3, #24
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b18      	cmp	r3, #24
 8005d6e:	d86b      	bhi.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005ddd 	.word	0x08005ddd
 8005d7c:	08005e49 	.word	0x08005e49
 8005d80:	08005e49 	.word	0x08005e49
 8005d84:	08005e49 	.word	0x08005e49
 8005d88:	08005e49 	.word	0x08005e49
 8005d8c:	08005e49 	.word	0x08005e49
 8005d90:	08005e49 	.word	0x08005e49
 8005d94:	08005e49 	.word	0x08005e49
 8005d98:	08005de5 	.word	0x08005de5
 8005d9c:	08005e49 	.word	0x08005e49
 8005da0:	08005e49 	.word	0x08005e49
 8005da4:	08005e49 	.word	0x08005e49
 8005da8:	08005e49 	.word	0x08005e49
 8005dac:	08005e49 	.word	0x08005e49
 8005db0:	08005e49 	.word	0x08005e49
 8005db4:	08005e49 	.word	0x08005e49
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005e49 	.word	0x08005e49
 8005dc0:	08005e49 	.word	0x08005e49
 8005dc4:	08005e49 	.word	0x08005e49
 8005dc8:	08005e49 	.word	0x08005e49
 8005dcc:	08005e49 	.word	0x08005e49
 8005dd0:	08005e49 	.word	0x08005e49
 8005dd4:	08005e49 	.word	0x08005e49
 8005dd8:	08005e07 	.word	0x08005e07
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005ddc:	f7fd fce0 	bl	80037a0 <HAL_RCC_GetPCLK3Freq>
 8005de0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005de2:	e109      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005de4:	f7fd fb98 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005de8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005dea:	e105      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dec:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d102      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8005dfa:	4b51      	ldr	r3, [pc, #324]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dfe:	e0fb      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e04:	e0f8      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e06:	4b4d      	ldr	r3, [pc, #308]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d117      	bne.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e12:	4b4a      	ldr	r3, [pc, #296]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8005e1e:	4b47      	ldr	r3, [pc, #284]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	0e1b      	lsrs	r3, r3, #24
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	e006      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8005e2a:	4b44      	ldr	r3, [pc, #272]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	0e1b      	lsrs	r3, r3, #24
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	4a42      	ldr	r2, [pc, #264]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e40:	e0da      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e46:	e0d7      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e4c:	e0d4      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e52:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005e56:	430b      	orrs	r3, r1
 8005e58:	d155      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e5a:	4b38      	ldr	r3, [pc, #224]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e6c:	d013      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e74:	d844      	bhi.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7c:	d013      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e84:	d83c      	bhi.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d014      	beq.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e92:	d014      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8005e94:	e034      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e96:	f107 0318 	add.w	r3, r7, #24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fc50 	bl	8004740 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ea4:	e0a8      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe faee 	bl	800448c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb4:	e0a0      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005eb6:	f7fd fb2f 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8005eba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ebc:	e09c      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d117      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005eca:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005ed6:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	0e1b      	lsrs	r3, r3, #24
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8005ee2:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	0e1b      	lsrs	r3, r3, #24
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ef8:	e07e      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005efe:	e07b      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f04:	e078      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	d138      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d10d      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
 8005f38:	e05e      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005f3a:	bf00      	nop
 8005f3c:	46020c00 	.word	0x46020c00
 8005f40:	00f42400 	.word	0x00f42400
 8005f44:	0800ae58 	.word	0x0800ae58
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005f48:	4b2e      	ldr	r3, [pc, #184]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f56:	d112      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5e:	d10e      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f6e:	d102      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8005f70:	23fa      	movs	r3, #250	; 0xfa
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f74:	e040      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f7c:	e03c      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	e039      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f88:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	d131      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005f90:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005f9c:	4b19      	ldr	r3, [pc, #100]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa8:	d105      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8005fb0:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb4:	e020      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	d106      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd0:	e012      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d106      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe6:	d102      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8005fe8:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
 8005fec:	e004      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff2:	e001      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3738      	adds	r7, #56	; 0x38
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	46020c00 	.word	0x46020c00
 8006008:	02dc6c00 	.word	0x02dc6c00
 800600c:	016e3600 	.word	0x016e3600
 8006010:	00f42400 	.word	0x00f42400

08006014 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800601c:	4b47      	ldr	r3, [pc, #284]	; (800613c <RCCEx_PLL2_Config+0x128>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a46      	ldr	r2, [pc, #280]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006022:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006026:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006028:	f7fb fbb4 	bl	8001794 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800602e:	e008      	b.n	8006042 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006030:	f7fb fbb0 	bl	8001794 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e077      	b.n	8006132 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006042:	4b3e      	ldr	r3, [pc, #248]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f0      	bne.n	8006030 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800604e:	4b3b      	ldr	r3, [pc, #236]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6811      	ldr	r1, [r2, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6852      	ldr	r2, [r2, #4]
 8006062:	3a01      	subs	r2, #1
 8006064:	0212      	lsls	r2, r2, #8
 8006066:	430a      	orrs	r2, r1
 8006068:	4934      	ldr	r1, [pc, #208]	; (800613c <RCCEx_PLL2_Config+0x128>)
 800606a:	4313      	orrs	r3, r2
 800606c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800606e:	4b33      	ldr	r3, [pc, #204]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006072:	4b33      	ldr	r3, [pc, #204]	; (8006140 <RCCEx_PLL2_Config+0x12c>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6892      	ldr	r2, [r2, #8]
 800607a:	3a01      	subs	r2, #1
 800607c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	68d2      	ldr	r2, [r2, #12]
 8006084:	3a01      	subs	r2, #1
 8006086:	0252      	lsls	r2, r2, #9
 8006088:	b292      	uxth	r2, r2
 800608a:	4311      	orrs	r1, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6912      	ldr	r2, [r2, #16]
 8006090:	3a01      	subs	r2, #1
 8006092:	0412      	lsls	r2, r2, #16
 8006094:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006098:	4311      	orrs	r1, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6952      	ldr	r2, [r2, #20]
 800609e:	3a01      	subs	r2, #1
 80060a0:	0612      	lsls	r2, r2, #24
 80060a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80060a6:	430a      	orrs	r2, r1
 80060a8:	4924      	ldr	r1, [pc, #144]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80060ae:	4b23      	ldr	r3, [pc, #140]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	f023 020c 	bic.w	r2, r3, #12
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	4920      	ldr	r1, [pc, #128]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80060c0:	4b1e      	ldr	r3, [pc, #120]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	491c      	ldr	r1, [pc, #112]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80060ce:	4b1b      	ldr	r3, [pc, #108]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	4a1a      	ldr	r2, [pc, #104]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060d4:	f023 0310 	bic.w	r3, r3, #16
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060da:	4b18      	ldr	r3, [pc, #96]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	69d2      	ldr	r2, [r2, #28]
 80060ea:	00d2      	lsls	r2, r2, #3
 80060ec:	4913      	ldr	r1, [pc, #76]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80060f2:	4b12      	ldr	r3, [pc, #72]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	4a11      	ldr	r2, [pc, #68]	; (800613c <RCCEx_PLL2_Config+0x128>)
 80060f8:	f043 0310 	orr.w	r3, r3, #16
 80060fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a0e      	ldr	r2, [pc, #56]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006108:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800610a:	f7fb fb43 	bl	8001794 <HAL_GetTick>
 800610e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006110:	e008      	b.n	8006124 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006112:	f7fb fb3f 	bl	8001794 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e006      	b.n	8006132 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <RCCEx_PLL2_Config+0x128>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f0      	beq.n	8006112 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0

}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	46020c00 	.word	0x46020c00
 8006140:	80800000 	.word	0x80800000

08006144 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800614c:	4b47      	ldr	r3, [pc, #284]	; (800626c <RCCEx_PLL3_Config+0x128>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a46      	ldr	r2, [pc, #280]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006156:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006158:	f7fb fb1c 	bl	8001794 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800615e:	e008      	b.n	8006172 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006160:	f7fb fb18 	bl	8001794 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e077      	b.n	8006262 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006172:	4b3e      	ldr	r3, [pc, #248]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800617e:	4b3b      	ldr	r3, [pc, #236]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6811      	ldr	r1, [r2, #0]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6852      	ldr	r2, [r2, #4]
 8006192:	3a01      	subs	r2, #1
 8006194:	0212      	lsls	r2, r2, #8
 8006196:	430a      	orrs	r2, r1
 8006198:	4934      	ldr	r1, [pc, #208]	; (800626c <RCCEx_PLL3_Config+0x128>)
 800619a:	4313      	orrs	r3, r2
 800619c:	630b      	str	r3, [r1, #48]	; 0x30
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <RCCEx_PLL3_Config+0x128>)
 80061a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a2:	4b33      	ldr	r3, [pc, #204]	; (8006270 <RCCEx_PLL3_Config+0x12c>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6892      	ldr	r2, [r2, #8]
 80061aa:	3a01      	subs	r2, #1
 80061ac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	68d2      	ldr	r2, [r2, #12]
 80061b4:	3a01      	subs	r2, #1
 80061b6:	0252      	lsls	r2, r2, #9
 80061b8:	b292      	uxth	r2, r2
 80061ba:	4311      	orrs	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6912      	ldr	r2, [r2, #16]
 80061c0:	3a01      	subs	r2, #1
 80061c2:	0412      	lsls	r2, r2, #16
 80061c4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80061c8:	4311      	orrs	r1, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6952      	ldr	r2, [r2, #20]
 80061ce:	3a01      	subs	r2, #1
 80061d0:	0612      	lsls	r2, r2, #24
 80061d2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80061d6:	430a      	orrs	r2, r1
 80061d8:	4924      	ldr	r1, [pc, #144]	; (800626c <RCCEx_PLL3_Config+0x128>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <RCCEx_PLL3_Config+0x128>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f023 020c 	bic.w	r2, r3, #12
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	4920      	ldr	r1, [pc, #128]	; (800626c <RCCEx_PLL3_Config+0x128>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80061f0:	4b1e      	ldr	r3, [pc, #120]	; (800626c <RCCEx_PLL3_Config+0x128>)
 80061f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	491c      	ldr	r1, [pc, #112]	; (800626c <RCCEx_PLL3_Config+0x128>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80061fe:	4b1b      	ldr	r3, [pc, #108]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	4a1a      	ldr	r2, [pc, #104]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006204:	f023 0310 	bic.w	r3, r3, #16
 8006208:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800620a:	4b18      	ldr	r3, [pc, #96]	; (800626c <RCCEx_PLL3_Config+0x128>)
 800620c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006212:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	69d2      	ldr	r2, [r2, #28]
 800621a:	00d2      	lsls	r2, r2, #3
 800621c:	4913      	ldr	r1, [pc, #76]	; (800626c <RCCEx_PLL3_Config+0x128>)
 800621e:	4313      	orrs	r3, r2
 8006220:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4a11      	ldr	r2, [pc, #68]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006228:	f043 0310 	orr.w	r3, r3, #16
 800622c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a0e      	ldr	r2, [pc, #56]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006238:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800623a:	f7fb faab 	bl	8001794 <HAL_GetTick>
 800623e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006240:	e008      	b.n	8006254 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006242:	f7fb faa7 	bl	8001794 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e006      	b.n	8006262 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006254:	4b05      	ldr	r3, [pc, #20]	; (800626c <RCCEx_PLL3_Config+0x128>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	46020c00 	.word	0x46020c00
 8006270:	80800000 	.word	0x80800000

08006274 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e0fb      	b.n	800647e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7f      	ldr	r2, [pc, #508]	; (8006488 <HAL_SPI_Init+0x214>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_SPI_Init+0x26>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a7d      	ldr	r2, [pc, #500]	; (800648c <HAL_SPI_Init+0x218>)
 8006296:	4293      	cmp	r3, r2
 8006298:	e000      	b.n	800629c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800629a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a78      	ldr	r2, [pc, #480]	; (8006488 <HAL_SPI_Init+0x214>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_SPI_Init+0x42>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a76      	ldr	r2, [pc, #472]	; (800648c <HAL_SPI_Init+0x218>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d105      	bne.n	80062c2 <HAL_SPI_Init+0x4e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	2b0f      	cmp	r3, #15
 80062bc:	d901      	bls.n	80062c2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e0dd      	b.n	800647e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8ec 	bl	80064a0 <SPI_GetPacketSize>
 80062c8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6e      	ldr	r2, [pc, #440]	; (8006488 <HAL_SPI_Init+0x214>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_SPI_Init+0x6a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6c      	ldr	r2, [pc, #432]	; (800648c <HAL_SPI_Init+0x218>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d102      	bne.n	80062e4 <HAL_SPI_Init+0x70>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d816      	bhi.n	8006312 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80062e8:	4a69      	ldr	r2, [pc, #420]	; (8006490 <HAL_SPI_Init+0x21c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00e      	beq.n	800630c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a68      	ldr	r2, [pc, #416]	; (8006494 <HAL_SPI_Init+0x220>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_SPI_Init+0x98>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a66      	ldr	r2, [pc, #408]	; (8006498 <HAL_SPI_Init+0x224>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_SPI_Init+0x98>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a65      	ldr	r2, [pc, #404]	; (800649c <HAL_SPI_Init+0x228>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d104      	bne.n	8006316 <HAL_SPI_Init+0xa2>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b10      	cmp	r3, #16
 8006310:	d901      	bls.n	8006316 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e0b3      	b.n	800647e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fa fd8c 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006352:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800635c:	d119      	bne.n	8006392 <HAL_SPI_Init+0x11e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006366:	d103      	bne.n	8006370 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10c      	bne.n	8006392 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800637c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006380:	d107      	bne.n	8006392 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006390:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <HAL_SPI_Init+0x14a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d90b      	bls.n	80063be <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e007      	b.n	80063ce <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69da      	ldr	r2, [r3, #28]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d6:	431a      	orrs	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e0:	ea42 0103 	orr.w	r1, r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643a:	ea42 0103 	orr.w	r1, r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	46002000 	.word	0x46002000
 800648c:	56002000 	.word	0x56002000
 8006490:	40013000 	.word	0x40013000
 8006494:	50013000 	.word	0x50013000
 8006498:	40003800 	.word	0x40003800
 800649c:	50003800 	.word	0x50003800

080064a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	3307      	adds	r3, #7
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d12e      	bne.n	800654a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e028      	b.n	800654c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006526:	ea42 0103 	orr.w	r1, r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e049      	b.n	80065fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f841 	bl	8006606 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f000 fa58 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d001      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e072      	b.n	800671a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a35      	ldr	r2, [pc, #212]	; (8006728 <HAL_TIM_Base_Start_IT+0x10c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d040      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a34      	ldr	r2, [pc, #208]	; (800672c <HAL_TIM_Base_Start_IT+0x110>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d03b      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006668:	d036      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006672:	d031      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2d      	ldr	r2, [pc, #180]	; (8006730 <HAL_TIM_Base_Start_IT+0x114>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d02c      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2c      	ldr	r2, [pc, #176]	; (8006734 <HAL_TIM_Base_Start_IT+0x118>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d027      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2a      	ldr	r2, [pc, #168]	; (8006738 <HAL_TIM_Base_Start_IT+0x11c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d022      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a29      	ldr	r2, [pc, #164]	; (800673c <HAL_TIM_Base_Start_IT+0x120>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d01d      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a27      	ldr	r2, [pc, #156]	; (8006740 <HAL_TIM_Base_Start_IT+0x124>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d018      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a26      	ldr	r2, [pc, #152]	; (8006744 <HAL_TIM_Base_Start_IT+0x128>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d013      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a24      	ldr	r2, [pc, #144]	; (8006748 <HAL_TIM_Base_Start_IT+0x12c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00e      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a23      	ldr	r2, [pc, #140]	; (800674c <HAL_TIM_Base_Start_IT+0x130>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d009      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a21      	ldr	r2, [pc, #132]	; (8006750 <HAL_TIM_Base_Start_IT+0x134>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xbc>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a20      	ldr	r2, [pc, #128]	; (8006754 <HAL_TIM_Base_Start_IT+0x138>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d115      	bne.n	8006704 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	4b1e      	ldr	r3, [pc, #120]	; (8006758 <HAL_TIM_Base_Start_IT+0x13c>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d015      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0xfa>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	d011      	beq.n	8006716 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	e008      	b.n	8006716 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e000      	b.n	8006718 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00
 800672c:	50012c00 	.word	0x50012c00
 8006730:	40000400 	.word	0x40000400
 8006734:	50000400 	.word	0x50000400
 8006738:	40000800 	.word	0x40000800
 800673c:	50000800 	.word	0x50000800
 8006740:	40000c00 	.word	0x40000c00
 8006744:	50000c00 	.word	0x50000c00
 8006748:	40013400 	.word	0x40013400
 800674c:	50013400 	.word	0x50013400
 8006750:	40014000 	.word	0x40014000
 8006754:	50014000 	.word	0x50014000
 8006758:	00010007 	.word	0x00010007

0800675c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01b      	beq.n	80067c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0202 	mvn.w	r2, #2
 8006790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f931 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f923 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f934 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d020      	beq.n	800680c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01b      	beq.n	800680c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0204 	mvn.w	r2, #4
 80067dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f90b 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8fd 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f90e 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d020      	beq.n	8006858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0208 	mvn.w	r2, #8
 8006828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f8e5 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8d7 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f8e8 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	d020      	beq.n	80068a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01b      	beq.n	80068a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0210 	mvn.w	r2, #16
 8006874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2208      	movs	r2, #8
 800687a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8bf 	bl	8006a0e <HAL_TIM_IC_CaptureCallback>
 8006890:	e005      	b.n	800689e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f8b1 	bl	80069fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f8c2 	bl	8006a22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0201 	mvn.w	r2, #1
 80068c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fa fa18 	bl	8000cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00c      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80068ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9af 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00c      	beq.n	800691a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f9a7 	bl	8006c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00c      	beq.n	800693e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f87c 	bl	8006a36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f06f 0220 	mvn.w	r2, #32
 800695a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f96f 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00c      	beq.n	8006986 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800697e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f97b 	bl	8006c7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00c      	beq.n	80069aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80069a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f973 	bl	8006c90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80069c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f96b 	bl	8006ca4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80069ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f963 	bl	8006cb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a68      	ldr	r2, [pc, #416]	; (8006c00 <TIM_Base_SetConfig+0x1b4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d02b      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a67      	ldr	r2, [pc, #412]	; (8006c04 <TIM_Base_SetConfig+0x1b8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d027      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d023      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a7a:	d01f      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a62      	ldr	r2, [pc, #392]	; (8006c08 <TIM_Base_SetConfig+0x1bc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01b      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a61      	ldr	r2, [pc, #388]	; (8006c0c <TIM_Base_SetConfig+0x1c0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d017      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a60      	ldr	r2, [pc, #384]	; (8006c10 <TIM_Base_SetConfig+0x1c4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a5f      	ldr	r2, [pc, #380]	; (8006c14 <TIM_Base_SetConfig+0x1c8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a5e      	ldr	r2, [pc, #376]	; (8006c18 <TIM_Base_SetConfig+0x1cc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a5d      	ldr	r2, [pc, #372]	; (8006c1c <TIM_Base_SetConfig+0x1d0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a5c      	ldr	r2, [pc, #368]	; (8006c20 <TIM_Base_SetConfig+0x1d4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0x70>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a5b      	ldr	r2, [pc, #364]	; (8006c24 <TIM_Base_SetConfig+0x1d8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d108      	bne.n	8006ace <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a4b      	ldr	r2, [pc, #300]	; (8006c00 <TIM_Base_SetConfig+0x1b4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d043      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a4a      	ldr	r2, [pc, #296]	; (8006c04 <TIM_Base_SetConfig+0x1b8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d03f      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d03b      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aec:	d037      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a45      	ldr	r2, [pc, #276]	; (8006c08 <TIM_Base_SetConfig+0x1bc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d033      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a44      	ldr	r2, [pc, #272]	; (8006c0c <TIM_Base_SetConfig+0x1c0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d02f      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a43      	ldr	r2, [pc, #268]	; (8006c10 <TIM_Base_SetConfig+0x1c4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d02b      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a42      	ldr	r2, [pc, #264]	; (8006c14 <TIM_Base_SetConfig+0x1c8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d027      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a41      	ldr	r2, [pc, #260]	; (8006c18 <TIM_Base_SetConfig+0x1cc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d023      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a40      	ldr	r2, [pc, #256]	; (8006c1c <TIM_Base_SetConfig+0x1d0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01f      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a3f      	ldr	r2, [pc, #252]	; (8006c20 <TIM_Base_SetConfig+0x1d4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01b      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a3e      	ldr	r2, [pc, #248]	; (8006c24 <TIM_Base_SetConfig+0x1d8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d017      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a3d      	ldr	r2, [pc, #244]	; (8006c28 <TIM_Base_SetConfig+0x1dc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a3c      	ldr	r2, [pc, #240]	; (8006c2c <TIM_Base_SetConfig+0x1e0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a3b      	ldr	r2, [pc, #236]	; (8006c30 <TIM_Base_SetConfig+0x1e4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a3a      	ldr	r2, [pc, #232]	; (8006c34 <TIM_Base_SetConfig+0x1e8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a39      	ldr	r2, [pc, #228]	; (8006c38 <TIM_Base_SetConfig+0x1ec>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x112>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a38      	ldr	r2, [pc, #224]	; (8006c3c <TIM_Base_SetConfig+0x1f0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <TIM_Base_SetConfig+0x1b4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d023      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <TIM_Base_SetConfig+0x1b8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01f      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <TIM_Base_SetConfig+0x1d4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d01b      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <TIM_Base_SetConfig+0x1d8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d017      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <TIM_Base_SetConfig+0x1dc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <TIM_Base_SetConfig+0x1e0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00f      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <TIM_Base_SetConfig+0x1e4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <TIM_Base_SetConfig+0x1e8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d007      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <TIM_Base_SetConfig+0x1ec>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_Base_SetConfig+0x198>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <TIM_Base_SetConfig+0x1f0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d103      	bne.n	8006bec <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	615a      	str	r2, [r3, #20]
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	50012c00 	.word	0x50012c00
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	50000400 	.word	0x50000400
 8006c10:	40000800 	.word	0x40000800
 8006c14:	50000800 	.word	0x50000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	50000c00 	.word	0x50000c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	50013400 	.word	0x50013400
 8006c28:	40014000 	.word	0x40014000
 8006c2c:	50014000 	.word	0x50014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	50014400 	.word	0x50014400
 8006c38:	40014800 	.word	0x40014800
 8006c3c:	50014800 	.word	0x50014800

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e042      	b.n	8006d64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fa f913 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2224      	movs	r2, #36	; 0x24
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fb40 	bl	800739c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f99b 	bl	8007058 <UART_SetConfig>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e01b      	b.n	8006d64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fbbf 	bl	80074e0 <UART_CheckIdleState>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	f040 808b 	bne.w	8006e9e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_UART_Transmit+0x28>
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e083      	b.n	8006ea0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b80      	cmp	r3, #128	; 0x80
 8006da4:	d107      	bne.n	8006db6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006db4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2221      	movs	r2, #33	; 0x21
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dc6:	f7fa fce5 	bl	8001794 <HAL_GetTick>
 8006dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d108      	bne.n	8006df8 <HAL_UART_Transmit+0x8c>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e003      	b.n	8006e00 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e00:	e030      	b.n	8006e64 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	; 0x80
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fc11 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e03d      	b.n	8006ea0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10b      	bne.n	8006e42 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	61bb      	str	r3, [r7, #24]
 8006e40:	e007      	b.n	8006e52 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1c8      	bne.n	8006e02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2200      	movs	r2, #0
 8006e78:	2140      	movs	r1, #64	; 0x40
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fbda 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e006      	b.n	8006ea0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	f040 80c4 	bne.w	800704c <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <HAL_UART_Receive+0x28>
 8006eca:	88fb      	ldrh	r3, [r7, #6]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e0bc      	b.n	800704e <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d107      	bne.n	8006ef2 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2222      	movs	r2, #34	; 0x22
 8006efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f08:	f7fa fc44 	bl	8001794 <HAL_GetTick>
 8006f0c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	88fa      	ldrh	r2, [r7, #6]
 8006f12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f26:	d10e      	bne.n	8006f46 <HAL_UART_Receive+0x9e>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <HAL_UART_Receive+0x94>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006f36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f3a:	e02d      	b.n	8006f98 <HAL_UART_Receive+0xf0>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	22ff      	movs	r2, #255	; 0xff
 8006f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f44:	e028      	b.n	8006f98 <HAL_UART_Receive+0xf0>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10d      	bne.n	8006f6a <HAL_UART_Receive+0xc2>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d104      	bne.n	8006f60 <HAL_UART_Receive+0xb8>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	22ff      	movs	r2, #255	; 0xff
 8006f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f5e:	e01b      	b.n	8006f98 <HAL_UART_Receive+0xf0>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	227f      	movs	r2, #127	; 0x7f
 8006f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f68:	e016      	b.n	8006f98 <HAL_UART_Receive+0xf0>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f72:	d10d      	bne.n	8006f90 <HAL_UART_Receive+0xe8>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_UART_Receive+0xde>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	227f      	movs	r2, #127	; 0x7f
 8006f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f84:	e008      	b.n	8006f98 <HAL_UART_Receive+0xf0>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	223f      	movs	r2, #63	; 0x3f
 8006f8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f8e:	e003      	b.n	8006f98 <HAL_UART_Receive+0xf0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f9e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d108      	bne.n	8006fbc <HAL_UART_Receive+0x114>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	e003      	b.n	8006fc4 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006fc4:	e036      	b.n	8007034 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2120      	movs	r1, #32
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 fb2f 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e032      	b.n	800704e <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10c      	bne.n	8007008 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	8a7b      	ldrh	r3, [r7, #18]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	3302      	adds	r3, #2
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	e00c      	b.n	8007022 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	b2da      	uxtb	r2, r3
 8007010:	8a7b      	ldrh	r3, [r7, #18]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	4013      	ands	r3, r2
 8007016:	b2da      	uxtb	r2, r3
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3301      	adds	r3, #1
 8007020:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1c2      	bne.n	8006fc6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800705c:	b094      	sub	sp, #80	; 0x50
 800705e:	af00      	add	r7, sp, #0
 8007060:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	4b7e      	ldr	r3, [pc, #504]	; (8007268 <UART_SetConfig+0x210>)
 800706e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	431a      	orrs	r2, r3
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	431a      	orrs	r2, r3
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	4313      	orrs	r3, r2
 8007086:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4977      	ldr	r1, [pc, #476]	; (800726c <UART_SetConfig+0x214>)
 8007090:	4019      	ands	r1, r3
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007098:	430b      	orrs	r3, r1
 800709a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	68d9      	ldr	r1, [r3, #12]
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	ea40 0301 	orr.w	r3, r0, r1
 80070b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b6a      	ldr	r3, [pc, #424]	; (8007268 <UART_SetConfig+0x210>)
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d009      	beq.n	80070d8 <UART_SetConfig+0x80>
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b69      	ldr	r3, [pc, #420]	; (8007270 <UART_SetConfig+0x218>)
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d004      	beq.n	80070d8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d4:	4313      	orrs	r3, r2
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80070e2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ec:	430b      	orrs	r3, r1
 80070ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	f023 000f 	bic.w	r0, r3, #15
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	ea40 0301 	orr.w	r3, r0, r1
 8007106:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b59      	ldr	r3, [pc, #356]	; (8007274 <UART_SetConfig+0x21c>)
 800710e:	429a      	cmp	r2, r3
 8007110:	d102      	bne.n	8007118 <UART_SetConfig+0xc0>
 8007112:	2301      	movs	r3, #1
 8007114:	64bb      	str	r3, [r7, #72]	; 0x48
 8007116:	e029      	b.n	800716c <UART_SetConfig+0x114>
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	4b56      	ldr	r3, [pc, #344]	; (8007278 <UART_SetConfig+0x220>)
 800711e:	429a      	cmp	r2, r3
 8007120:	d102      	bne.n	8007128 <UART_SetConfig+0xd0>
 8007122:	2302      	movs	r3, #2
 8007124:	64bb      	str	r3, [r7, #72]	; 0x48
 8007126:	e021      	b.n	800716c <UART_SetConfig+0x114>
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	4b53      	ldr	r3, [pc, #332]	; (800727c <UART_SetConfig+0x224>)
 800712e:	429a      	cmp	r2, r3
 8007130:	d102      	bne.n	8007138 <UART_SetConfig+0xe0>
 8007132:	2304      	movs	r3, #4
 8007134:	64bb      	str	r3, [r7, #72]	; 0x48
 8007136:	e019      	b.n	800716c <UART_SetConfig+0x114>
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b50      	ldr	r3, [pc, #320]	; (8007280 <UART_SetConfig+0x228>)
 800713e:	429a      	cmp	r2, r3
 8007140:	d102      	bne.n	8007148 <UART_SetConfig+0xf0>
 8007142:	2308      	movs	r3, #8
 8007144:	64bb      	str	r3, [r7, #72]	; 0x48
 8007146:	e011      	b.n	800716c <UART_SetConfig+0x114>
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b4d      	ldr	r3, [pc, #308]	; (8007284 <UART_SetConfig+0x22c>)
 800714e:	429a      	cmp	r2, r3
 8007150:	d102      	bne.n	8007158 <UART_SetConfig+0x100>
 8007152:	2310      	movs	r3, #16
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
 8007156:	e009      	b.n	800716c <UART_SetConfig+0x114>
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <UART_SetConfig+0x210>)
 800715e:	429a      	cmp	r2, r3
 8007160:	d102      	bne.n	8007168 <UART_SetConfig+0x110>
 8007162:	2320      	movs	r3, #32
 8007164:	64bb      	str	r3, [r7, #72]	; 0x48
 8007166:	e001      	b.n	800716c <UART_SetConfig+0x114>
 8007168:	2300      	movs	r3, #0
 800716a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <UART_SetConfig+0x210>)
 8007172:	429a      	cmp	r2, r3
 8007174:	d005      	beq.n	8007182 <UART_SetConfig+0x12a>
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b3d      	ldr	r3, [pc, #244]	; (8007270 <UART_SetConfig+0x218>)
 800717c:	429a      	cmp	r2, r3
 800717e:	f040 8085 	bne.w	800728c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007184:	2200      	movs	r2, #0
 8007186:	623b      	str	r3, [r7, #32]
 8007188:	627a      	str	r2, [r7, #36]	; 0x24
 800718a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800718e:	f7fd fd8b 	bl	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007192:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80e8 	beq.w	800736c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	4a39      	ldr	r2, [pc, #228]	; (8007288 <UART_SetConfig+0x230>)
 80071a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071a6:	461a      	mov	r2, r3
 80071a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4613      	mov	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	4413      	add	r3, r2
 80071ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071bc:	429a      	cmp	r2, r3
 80071be:	d305      	bcc.n	80071cc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d903      	bls.n	80071d4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071d2:	e048      	b.n	8007266 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d6:	2200      	movs	r2, #0
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	61fa      	str	r2, [r7, #28]
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	4a29      	ldr	r2, [pc, #164]	; (8007288 <UART_SetConfig+0x230>)
 80071e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2200      	movs	r2, #0
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	617a      	str	r2, [r7, #20]
 80071ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80071f6:	f7f9 f843 	bl	8000280 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4610      	mov	r0, r2
 8007200:	4619      	mov	r1, r3
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	020b      	lsls	r3, r1, #8
 800720c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007210:	0202      	lsls	r2, r0, #8
 8007212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007214:	6849      	ldr	r1, [r1, #4]
 8007216:	0849      	lsrs	r1, r1, #1
 8007218:	2000      	movs	r0, #0
 800721a:	460c      	mov	r4, r1
 800721c:	4605      	mov	r5, r0
 800721e:	eb12 0804 	adds.w	r8, r2, r4
 8007222:	eb43 0905 	adc.w	r9, r3, r5
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	60bb      	str	r3, [r7, #8]
 800722e:	60fa      	str	r2, [r7, #12]
 8007230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 f822 	bl	8000280 <__aeabi_uldivmod>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4613      	mov	r3, r2
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800724a:	d308      	bcc.n	800725e <UART_SetConfig+0x206>
 800724c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007252:	d204      	bcs.n	800725e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e003      	b.n	8007266 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007264:	e082      	b.n	800736c <UART_SetConfig+0x314>
 8007266:	e081      	b.n	800736c <UART_SetConfig+0x314>
 8007268:	46002400 	.word	0x46002400
 800726c:	cfff69f3 	.word	0xcfff69f3
 8007270:	56002400 	.word	0x56002400
 8007274:	40013800 	.word	0x40013800
 8007278:	40004400 	.word	0x40004400
 800727c:	40004800 	.word	0x40004800
 8007280:	40004c00 	.word	0x40004c00
 8007284:	40005000 	.word	0x40005000
 8007288:	0800af18 	.word	0x0800af18
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007294:	d13c      	bne.n	8007310 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007298:	2200      	movs	r2, #0
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072a2:	f7fd fd01 	bl	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 80072a6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d05e      	beq.n	800736c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	4a39      	ldr	r2, [pc, #228]	; (8007398 <UART_SetConfig+0x340>)
 80072b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b8:	461a      	mov	r2, r3
 80072ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072c0:	005a      	lsls	r2, r3, #1
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	441a      	add	r2, r3
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d916      	bls.n	8007308 <UART_SetConfig+0x2b0>
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e0:	d212      	bcs.n	8007308 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f023 030f 	bic.w	r3, r3, #15
 80072ea:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80072fa:	4313      	orrs	r3, r2
 80072fc:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007304:	60da      	str	r2, [r3, #12]
 8007306:	e031      	b.n	800736c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800730e:	e02d      	b.n	800736c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007312:	2200      	movs	r2, #0
 8007314:	469a      	mov	sl, r3
 8007316:	4693      	mov	fp, r2
 8007318:	4650      	mov	r0, sl
 800731a:	4659      	mov	r1, fp
 800731c:	f7fd fcc4 	bl	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007320:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d021      	beq.n	800736c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	4a1a      	ldr	r2, [pc, #104]	; (8007398 <UART_SetConfig+0x340>)
 800732e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007332:	461a      	mov	r2, r3
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	fbb3 f2f2 	udiv	r2, r3, r2
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	441a      	add	r2, r3
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	fbb2 f3f3 	udiv	r3, r2, r3
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800734c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734e:	2b0f      	cmp	r3, #15
 8007350:	d909      	bls.n	8007366 <UART_SetConfig+0x30e>
 8007352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007358:	d205      	bcs.n	8007366 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800735a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735c:	b29a      	uxth	r2, r3
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60da      	str	r2, [r3, #12]
 8007364:	e002      	b.n	800736c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2201      	movs	r2, #1
 8007370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	2201      	movs	r2, #1
 8007378:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	2200      	movs	r2, #0
 8007380:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	2200      	movs	r2, #0
 8007386:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007388:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800738c:	4618      	mov	r0, r3
 800738e:	3750      	adds	r7, #80	; 0x50
 8007390:	46bd      	mov	sp, r7
 8007392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007396:	bf00      	nop
 8007398:	0800af18 	.word	0x0800af18

0800739c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01a      	beq.n	80074b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800749a:	d10a      	bne.n	80074b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b098      	sub	sp, #96	; 0x60
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074f0:	f7fa f950 	bl	8001794 <HAL_GetTick>
 80074f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b08      	cmp	r3, #8
 8007502:	d12f      	bne.n	8007564 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800750c:	2200      	movs	r2, #0
 800750e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f88e 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d022      	beq.n	8007564 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007532:	653b      	str	r3, [r7, #80]	; 0x50
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753c:	647b      	str	r3, [r7, #68]	; 0x44
 800753e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e063      	b.n	800762c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b04      	cmp	r3, #4
 8007570:	d149      	bne.n	8007606 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800757a:	2200      	movs	r2, #0
 800757c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f857 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d03c      	beq.n	8007606 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	623b      	str	r3, [r7, #32]
   return(result);
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
 80075ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e6      	bne.n	800758c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075de:	61fa      	str	r2, [r7, #28]
 80075e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	69b9      	ldr	r1, [r7, #24]
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	617b      	str	r3, [r7, #20]
   return(result);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e5      	bne.n	80075be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e012      	b.n	800762c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3758      	adds	r7, #88	; 0x58
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007644:	e049      	b.n	80076da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d045      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800764e:	f7fa f8a1 	bl	8001794 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	429a      	cmp	r2, r3
 800765c:	d302      	bcc.n	8007664 <UART_WaitOnFlagUntilTimeout+0x30>
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e048      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d031      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b08      	cmp	r3, #8
 8007682:	d110      	bne.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2208      	movs	r2, #8
 800768a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f838 	bl	8007702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2208      	movs	r2, #8
 8007696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e029      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b4:	d111      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f81e 	bl	8007702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e00f      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4013      	ands	r3, r2
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d0a6      	beq.n	8007646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b095      	sub	sp, #84	; 0x54
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800771e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007728:	643b      	str	r3, [r7, #64]	; 0x40
 800772a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800772e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	61fb      	str	r3, [r7, #28]
   return(result);
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3308      	adds	r3, #8
 800775e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e3      	bne.n	800773c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d118      	bne.n	80077ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	60bb      	str	r3, [r7, #8]
   return(result);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f023 0310 	bic.w	r3, r3, #16
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6979      	ldr	r1, [r7, #20]
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	613b      	str	r3, [r7, #16]
   return(result);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e6      	bne.n	800777c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80077c2:	bf00      	nop
 80077c4:	3754      	adds	r7, #84	; 0x54
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d101      	bne.n	80077e4 <HAL_UARTEx_EnableFifoMode+0x16>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e02b      	b.n	800783c <HAL_UARTEx_EnableFifoMode+0x6e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2224      	movs	r2, #36	; 0x24
 80077f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800781a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8c3 	bl	80079b0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UARTEx_DisableFifoMode+0x16>
 8007856:	2302      	movs	r3, #2
 8007858:	e027      	b.n	80078aa <HAL_UARTEx_DisableFifoMode+0x66>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2224      	movs	r2, #36	; 0x24
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007888:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e02d      	b.n	800792a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2224      	movs	r2, #36	; 0x24
 80078da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0201 	bic.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f850 	bl	80079b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007946:	2302      	movs	r3, #2
 8007948:	e02d      	b.n	80079a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2224      	movs	r2, #36	; 0x24
 8007956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f812 	bl	80079b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d108      	bne.n	80079d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079d0:	e031      	b.n	8007a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079d2:	2308      	movs	r3, #8
 80079d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079d6:	2308      	movs	r3, #8
 80079d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	0e5b      	lsrs	r3, r3, #25
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	0f5b      	lsrs	r3, r3, #29
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	7b3a      	ldrb	r2, [r7, #12]
 80079fe:	4911      	ldr	r1, [pc, #68]	; (8007a44 <UARTEx_SetNbDataToProcess+0x94>)
 8007a00:	5c8a      	ldrb	r2, [r1, r2]
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a06:	7b3a      	ldrb	r2, [r7, #12]
 8007a08:	490f      	ldr	r1, [pc, #60]	; (8007a48 <UARTEx_SetNbDataToProcess+0x98>)
 8007a0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	7b7a      	ldrb	r2, [r7, #13]
 8007a1c:	4909      	ldr	r1, [pc, #36]	; (8007a44 <UARTEx_SetNbDataToProcess+0x94>)
 8007a1e:	5c8a      	ldrb	r2, [r1, r2]
 8007a20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a24:	7b7a      	ldrb	r2, [r7, #13]
 8007a26:	4908      	ldr	r1, [pc, #32]	; (8007a48 <UARTEx_SetNbDataToProcess+0x98>)
 8007a28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	0800af30 	.word	0x0800af30
 8007a48:	0800af38 	.word	0x0800af38

08007a4c <__NVIC_SetPriority>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	db0a      	blt.n	8007a76 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	490c      	ldr	r1, [pc, #48]	; (8007a98 <__NVIC_SetPriority+0x4c>)
 8007a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a6a:	0112      	lsls	r2, r2, #4
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	440b      	add	r3, r1
 8007a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a74:	e00a      	b.n	8007a8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4908      	ldr	r1, [pc, #32]	; (8007a9c <__NVIC_SetPriority+0x50>)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	3b04      	subs	r3, #4
 8007a84:	0112      	lsls	r2, r2, #4
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	440b      	add	r3, r1
 8007a8a:	761a      	strb	r2, [r3, #24]
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	e000e100 	.word	0xe000e100
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <SysTick_Handler+0x1c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007aa8:	f001 fb98 	bl	80091dc <xTaskGetSchedulerState>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d001      	beq.n	8007ab6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ab2:	f001 ff3b 	bl	800992c <xPortSysTickHandler>
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	e000e010 	.word	0xe000e010

08007ac0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	f06f 0004 	mvn.w	r0, #4
 8007aca:	f7ff ffbf 	bl	8007a4c <__NVIC_SetPriority>
#endif
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007adc:	f3ef 8305 	mrs	r3, IPSR
 8007ae0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ae2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	e013      	b.n	8007b16 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8007aee:	f001 fb75 	bl	80091dc <xTaskGetSchedulerState>
 8007af2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d00d      	beq.n	8007b16 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007afa:	f3ef 8310 	mrs	r3, PRIMASK
 8007afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b00:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b06:	f3ef 8311 	mrs	r3, BASEPRI
 8007b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8007b16:	697b      	ldr	r3, [r7, #20]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8007b26:	f7ff ffd4 	bl	8007ad2 <IRQ_Context>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8007b30:	f06f 0305 	mvn.w	r3, #5
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	e012      	b.n	8007b5e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8007b38:	f001 fb50 	bl	80091dc <xTaskGetSchedulerState>
 8007b3c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d109      	bne.n	8007b58 <osKernelInitialize+0x38>
 8007b44:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <osKernelInitialize+0x48>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <osKernelInitialize+0x48>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	607b      	str	r3, [r7, #4]
 8007b56:	e002      	b.n	8007b5e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8007b58:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8007b5e:	687b      	ldr	r3, [r7, #4]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20000388 	.word	0x20000388

08007b6c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8007b72:	f7ff ffae 	bl	8007ad2 <IRQ_Context>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <osKernelStart+0x18>
    stat = osErrorISR;
 8007b7c:	f06f 0305 	mvn.w	r3, #5
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	e016      	b.n	8007bb2 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8007b84:	f001 fb2a 	bl	80091dc <xTaskGetSchedulerState>
 8007b88:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10d      	bne.n	8007bac <osKernelStart+0x40>
 8007b90:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <osKernelStart+0x50>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d109      	bne.n	8007bac <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b98:	f7ff ff92 	bl	8007ac0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <osKernelStart+0x50>)
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ba2:	f000 fdf1 	bl	8008788 <vTaskStartScheduler>
      stat = osOK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
 8007baa:	e002      	b.n	8007bb2 <osKernelStart+0x46>
    } else {
      stat = osError;
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8007bb2:	687b      	ldr	r3, [r7, #4]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000388 	.word	0x20000388

08007bc0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8007bd0:	f7ff ff7f 	bl	8007ad2 <IRQ_Context>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d17e      	bne.n	8007cd8 <osThreadNew+0x118>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d07b      	beq.n	8007cd8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8007be0:	2380      	movs	r3, #128	; 0x80
 8007be2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007be4:	2318      	movs	r3, #24
 8007be6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d045      	beq.n	8007c84 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <osThreadNew+0x46>
        name = attr->name;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d008      	beq.n	8007c2c <osThreadNew+0x6c>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	2b38      	cmp	r3, #56	; 0x38
 8007c1e:	d805      	bhi.n	8007c2c <osThreadNew+0x6c>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e054      	b.n	8007cda <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	089b      	lsrs	r3, r3, #2
 8007c3e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00e      	beq.n	8007c66 <osThreadNew+0xa6>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	2b5b      	cmp	r3, #91	; 0x5b
 8007c4e:	d90a      	bls.n	8007c66 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d006      	beq.n	8007c66 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8007c60:	2301      	movs	r3, #1
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	e010      	b.n	8007c88 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10c      	bne.n	8007c88 <osThreadNew+0xc8>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d108      	bne.n	8007c88 <osThreadNew+0xc8>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	e001      	b.n	8007c88 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d110      	bne.n	8007cb0 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c96:	9202      	str	r2, [sp, #8]
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a3a      	ldr	r2, [r7, #32]
 8007ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fb9b 	bl	80083e0 <xTaskCreateStatic>
 8007caa:	4603      	mov	r3, r0
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	e013      	b.n	8007cd8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d110      	bne.n	8007cd8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f107 0314 	add.w	r3, r7, #20
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fbce 	bl	800846a <xTaskCreate>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <osThreadNew+0x118>
            hTask = NULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8007cd8:	697b      	ldr	r3, [r7, #20]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3728      	adds	r7, #40	; 0x28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8007cea:	f7ff fef2 	bl	8007ad2 <IRQ_Context>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <osDelay+0x1a>
    stat = osErrorISR;
 8007cf4:	f06f 0305 	mvn.w	r3, #5
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e007      	b.n	8007d0c <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <osDelay+0x2a>
      vTaskDelay(ticks);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fd1a 	bl	8008740 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	4a06      	ldr	r2, [pc, #24]	; (8007d48 <vApplicationGetIdleTaskMemory+0x30>)
 8007d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	601a      	str	r2, [r3, #0]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	2000038c 	.word	0x2000038c
 8007d48:	200003e8 	.word	0x200003e8

08007d4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4a06      	ldr	r2, [pc, #24]	; (8007d7c <vApplicationGetTimerTaskMemory+0x30>)
 8007d62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d6a:	601a      	str	r2, [r3, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	200005e8 	.word	0x200005e8
 8007d7c:	20000644 	.word	0x20000644

08007d80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f103 0208 	add.w	r2, r3, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f04f 32ff 	mov.w	r2, #4294967295
 8007d98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f103 0208 	add.w	r2, r3, #8
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f103 0208 	add.w	r2, r3, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d103      	bne.n	8007dfa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e00c      	b.n	8007e14 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e002      	b.n	8007e08 <vListInsert+0x2e>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d2f6      	bcs.n	8007e02 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6892      	ldr	r2, [r2, #8]
 8007e62:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6852      	ldr	r2, [r2, #4]
 8007e6c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d103      	bne.n	8007e80 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	1e5a      	subs	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <xQueueGenericReset+0x1e>
 8007eb8:	f001 fe46 	bl	8009b48 <ulSetInterruptMask>
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d057      	beq.n	8007f74 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d053      	beq.n	8007f74 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d000      	beq.n	8007ee0 <xQueueGenericReset+0x40>
 8007ede:	2101      	movs	r1, #1
 8007ee0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d146      	bne.n	8007f74 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8007ee6:	f001 fcf5 	bl	80098d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	441a      	add	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	3b01      	subs	r3, #1
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f1c:	fb01 f303 	mul.w	r3, r1, r3
 8007f20:	441a      	add	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	22ff      	movs	r2, #255	; 0xff
 8007f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	22ff      	movs	r2, #255	; 0xff
 8007f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10e      	bne.n	8007f5a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d014      	beq.n	8007f6e <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3310      	adds	r3, #16
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 ff3f 	bl	8008dcc <xTaskRemoveFromEventList>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00c      	beq.n	8007f6e <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007f54:	f001 fcac 	bl	80098b0 <vPortYield>
 8007f58:	e009      	b.n	8007f6e <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	3310      	adds	r3, #16
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff ff0e 	bl	8007d80 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	3324      	adds	r3, #36	; 0x24
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff ff09 	bl	8007d80 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007f6e:	f001 fcc3 	bl	80098f8 <vPortExitCritical>
 8007f72:	e001      	b.n	8007f78 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <xQueueGenericReset+0xe4>
 8007f7e:	f001 fde3 	bl	8009b48 <ulSetInterruptMask>
 8007f82:	e7fe      	b.n	8007f82 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007f84:	68fb      	ldr	r3, [r7, #12]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b088      	sub	sp, #32
 8007f92:	af02      	add	r7, sp, #8
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <xQueueGenericCreateStatic+0x1e>
 8007fa6:	f001 fdcf 	bl	8009b48 <ulSetInterruptMask>
 8007faa:	e7fe      	b.n	8007faa <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d028      	beq.n	8008004 <xQueueGenericCreateStatic+0x76>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d025      	beq.n	8008004 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01f      	beq.n	8008004 <xQueueGenericCreateStatic+0x76>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d119      	bne.n	8008004 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                     * the real queue and semaphore structures. */
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8007fd0:	2350      	movs	r3, #80	; 0x50
 8007fd2:	613b      	str	r3, [r7, #16]

                    /* This assertion cannot be branch covered in unit tests */
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b50      	cmp	r3, #80	; 0x50
 8007fd8:	d002      	beq.n	8007fe0 <xQueueGenericCreateStatic+0x52>
 8007fda:	f001 fdb5 	bl	8009b48 <ulSetInterruptMask>
 8007fde:	e7fe      	b.n	8007fde <xQueueGenericCreateStatic+0x50>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8007fe0:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f80c 	bl	800801a <prvInitialiseNewQueue>
 8008002:	e005      	b.n	8008010 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xQueueGenericCreateStatic+0x82>
 800800a:	f001 fd9d 	bl	8009b48 <ulSetInterruptMask>
 800800e:	e7fe      	b.n	800800e <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008010:	697b      	ldr	r3, [r7, #20]
    }
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d103      	bne.n	8008036 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e002      	b.n	800803c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008048:	2101      	movs	r1, #1
 800804a:	69b8      	ldr	r0, [r7, #24]
 800804c:	f7ff ff28 	bl	8007ea0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <xQueueReceive+0x20>
 800807a:	f001 fd65 	bl	8009b48 <ulSetInterruptMask>
 800807e:	e7fe      	b.n	800807e <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <xQueueReceive+0x2e>
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <xQueueReceive+0x32>
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <xQueueReceive+0x34>
 8008092:	2300      	movs	r3, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <xQueueReceive+0x3e>
 8008098:	f001 fd56 	bl	8009b48 <ulSetInterruptMask>
 800809c:	e7fe      	b.n	800809c <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800809e:	f001 f89d 	bl	80091dc <xTaskGetSchedulerState>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <xQueueReceive+0x4e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <xQueueReceive+0x52>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <xQueueReceive+0x54>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d102      	bne.n	80080be <xQueueReceive+0x5e>
 80080b8:	f001 fd46 	bl	8009b48 <ulSetInterruptMask>
 80080bc:	e7fe      	b.n	80080bc <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80080be:	f001 fc09 	bl	80098d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d019      	beq.n	8008102 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	6a38      	ldr	r0, [r7, #32]
 80080d2:	f000 f87e 	bl	80081d2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	3310      	adds	r3, #16
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 fe6e 	bl	8008dcc <xTaskRemoveFromEventList>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80080f6:	f001 fbdb 	bl	80098b0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80080fa:	f001 fbfd 	bl	80098f8 <vPortExitCritical>
                return pdPASS;
 80080fe:	2301      	movs	r3, #1
 8008100:	e063      	b.n	80081ca <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008108:	f001 fbf6 	bl	80098f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800810c:	2300      	movs	r3, #0
 800810e:	e05c      	b.n	80081ca <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008116:	f107 0314 	add.w	r3, r7, #20
 800811a:	4618      	mov	r0, r3
 800811c:	f000 ff24 	bl	8008f68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008120:	2301      	movs	r3, #1
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008124:	f001 fbe8 	bl	80098f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008128:	f000 fb88 	bl	800883c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800812c:	f001 fbd2 	bl	80098d4 <vPortEnterCritical>
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008136:	b25b      	sxtb	r3, r3
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d103      	bne.n	8008146 <xQueueReceive+0xe6>
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800814c:	b25b      	sxtb	r3, r3
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	d103      	bne.n	800815c <xQueueReceive+0xfc>
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800815c:	f001 fbcc 	bl	80098f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008160:	1d3a      	adds	r2, r7, #4
 8008162:	f107 0314 	add.w	r3, r7, #20
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f000 ff13 	bl	8008f94 <xTaskCheckForTimeOut>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11d      	bne.n	80081b0 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008174:	6a38      	ldr	r0, [r7, #32]
 8008176:	f000 f8a4 	bl	80082c2 <prvIsQueueEmpty>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d011      	beq.n	80081a4 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	3324      	adds	r3, #36	; 0x24
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fdc5 	bl	8008d18 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800818e:	6a38      	ldr	r0, [r7, #32]
 8008190:	f000 f845 	bl	800821e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008194:	f000 fb60 	bl	8008858 <xTaskResumeAll>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d18f      	bne.n	80080be <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800819e:	f001 fb87 	bl	80098b0 <vPortYield>
 80081a2:	e78c      	b.n	80080be <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80081a4:	6a38      	ldr	r0, [r7, #32]
 80081a6:	f000 f83a 	bl	800821e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80081aa:	f000 fb55 	bl	8008858 <xTaskResumeAll>
 80081ae:	e786      	b.n	80080be <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80081b0:	6a38      	ldr	r0, [r7, #32]
 80081b2:	f000 f834 	bl	800821e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80081b6:	f000 fb4f 	bl	8008858 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ba:	6a38      	ldr	r0, [r7, #32]
 80081bc:	f000 f881 	bl	80082c2 <prvIsQueueEmpty>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f43f af7b 	beq.w	80080be <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80081c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3728      	adds	r7, #40	; 0x28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d018      	beq.n	8008216 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d303      	bcc.n	8008206 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68d9      	ldr	r1, [r3, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	461a      	mov	r2, r3
 8008210:	6838      	ldr	r0, [r7, #0]
 8008212:	f002 f8b4 	bl	800a37e <memcpy>
    }
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008226:	f001 fb55 	bl	80098d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008230:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008232:	e011      	b.n	8008258 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	d012      	beq.n	8008262 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3324      	adds	r3, #36	; 0x24
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fdc3 	bl	8008dcc <xTaskRemoveFromEventList>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800824c:	f000 fef8 	bl	8009040 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	3b01      	subs	r3, #1
 8008254:	b2db      	uxtb	r3, r3
 8008256:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dce9      	bgt.n	8008234 <prvUnlockQueue+0x16>
 8008260:	e000      	b.n	8008264 <prvUnlockQueue+0x46>
                        break;
 8008262:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	22ff      	movs	r2, #255	; 0xff
 8008268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800826c:	f001 fb44 	bl	80098f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008270:	f001 fb30 	bl	80098d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800827a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800827c:	e011      	b.n	80082a2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d012      	beq.n	80082ac <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3310      	adds	r3, #16
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fd9e 	bl	8008dcc <xTaskRemoveFromEventList>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008296:	f000 fed3 	bl	8009040 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	3b01      	subs	r3, #1
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80082a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	dce9      	bgt.n	800827e <prvUnlockQueue+0x60>
 80082aa:	e000      	b.n	80082ae <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80082ac:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	22ff      	movs	r2, #255	; 0xff
 80082b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80082b6:	f001 fb1f 	bl	80098f8 <vPortExitCritical>
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80082ca:	f001 fb03 	bl	80098d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80082d6:	2301      	movs	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e001      	b.n	80082e0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80082e0:	f001 fb0a 	bl	80098f8 <vPortExitCritical>

    return xReturn;
 80082e4:	68fb      	ldr	r3, [r7, #12]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <vQueueAddToRegistry+0x16>
 8008300:	f001 fc22 	bl	8009b48 <ulSetInterruptMask>
 8008304:	e7fe      	b.n	8008304 <vQueueAddToRegistry+0x14>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d024      	beq.n	800835a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e01e      	b.n	8008354 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008316:	4a17      	ldr	r2, [pc, #92]	; (8008374 <vQueueAddToRegistry+0x84>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	4413      	add	r3, r2
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	429a      	cmp	r2, r3
 8008324:	d105      	bne.n	8008332 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	4a12      	ldr	r2, [pc, #72]	; (8008374 <vQueueAddToRegistry+0x84>)
 800832c:	4413      	add	r3, r2
 800832e:	60bb      	str	r3, [r7, #8]
                    break;
 8008330:	e013      	b.n	800835a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <vQueueAddToRegistry+0x5e>
 8008338:	4a0e      	ldr	r2, [pc, #56]	; (8008374 <vQueueAddToRegistry+0x84>)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4a0a      	ldr	r2, [pc, #40]	; (8008374 <vQueueAddToRegistry+0x84>)
 800834a:	4413      	add	r3, r2
 800834c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b07      	cmp	r3, #7
 8008358:	d9dd      	bls.n	8008316 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000a44 	.word	0x20000a44

08008378 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008388:	f001 faa4 	bl	80098d4 <vPortEnterCritical>
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008392:	b25b      	sxtb	r3, r3
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d103      	bne.n	80083a2 <vQueueWaitForMessageRestricted+0x2a>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083a8:	b25b      	sxtb	r3, r3
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d103      	bne.n	80083b8 <vQueueWaitForMessageRestricted+0x40>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083b8:	f001 fa9e 	bl	80098f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d106      	bne.n	80083d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	3324      	adds	r3, #36	; 0x24
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fcbf 	bl	8008d50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80083d2:	6978      	ldr	r0, [r7, #20]
 80083d4:	f7ff ff23 	bl	800821e <prvUnlockQueue>
    }
 80083d8:	bf00      	nop
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08c      	sub	sp, #48	; 0x30
 80083e4:	af04      	add	r7, sp, #16
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d102      	bne.n	80083fa <xTaskCreateStatic+0x1a>
 80083f4:	f001 fba8 	bl	8009b48 <ulSetInterruptMask>
 80083f8:	e7fe      	b.n	80083f8 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <xTaskCreateStatic+0x26>
 8008400:	f001 fba2 	bl	8009b48 <ulSetInterruptMask>
 8008404:	e7fe      	b.n	8008404 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8008406:	235c      	movs	r3, #92	; 0x5c
 8008408:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b5c      	cmp	r3, #92	; 0x5c
 800840e:	d002      	beq.n	8008416 <xTaskCreateStatic+0x36>
 8008410:	f001 fb9a 	bl	8009b48 <ulSetInterruptMask>
 8008414:	e7fe      	b.n	8008414 <xTaskCreateStatic+0x34>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008416:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01e      	beq.n	800845c <xTaskCreateStatic+0x7c>
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01b      	beq.n	800845c <xTaskCreateStatic+0x7c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008426:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800842c:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008436:	2300      	movs	r3, #0
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	9302      	str	r3, [sp, #8]
 800843e:	f107 0318 	add.w	r3, r7, #24
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 f850 	bl	80084f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008454:	69f8      	ldr	r0, [r7, #28]
 8008456:	f000 f8e3 	bl	8008620 <prvAddNewTaskToReadyList>
 800845a:	e001      	b.n	8008460 <xTaskCreateStatic+0x80>
        }
        else
        {
            xReturn = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008460:	69bb      	ldr	r3, [r7, #24]
    }
 8008462:	4618      	mov	r0, r3
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800846a:	b580      	push	{r7, lr}
 800846c:	b08c      	sub	sp, #48	; 0x30
 800846e:	af04      	add	r7, sp, #16
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	603b      	str	r3, [r7, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4618      	mov	r0, r3
 8008480:	f001 fbc2 	bl	8009c08 <pvPortMalloc>
 8008484:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00e      	beq.n	80084aa <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800848c:	205c      	movs	r0, #92	; 0x5c
 800848e:	f001 fbbb 	bl	8009c08 <pvPortMalloc>
 8008492:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
 80084a0:	e005      	b.n	80084ae <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80084a2:	6978      	ldr	r0, [r7, #20]
 80084a4:	f001 fc04 	bl	8009cb0 <vPortFree>
 80084a8:	e001      	b.n	80084ae <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d017      	beq.n	80084e4 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084bc:	88fa      	ldrh	r2, [r7, #6]
 80084be:	2300      	movs	r3, #0
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f80e 	bl	80084f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80084d8:	69f8      	ldr	r0, [r7, #28]
 80084da:	f000 f8a1 	bl	8008620 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80084de:	2301      	movs	r3, #1
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	e002      	b.n	80084ea <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084e4:	f04f 33ff 	mov.w	r3, #4294967295
 80084e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80084ea:	69bb      	ldr	r3, [r7, #24]
    }
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	461a      	mov	r2, r3
 800850c:	21a5      	movs	r1, #165	; 0xa5
 800850e:	f001 fe99 	bl	800a244 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800851c:	3b01      	subs	r3, #1
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <prvInitialiseNewTask+0x48>
 8008536:	f001 fb07 	bl	8009b48 <ulSetInterruptMask>
 800853a:	e7fe      	b.n	800853a <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01f      	beq.n	8008582 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	e012      	b.n	800856e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	4413      	add	r3, r2
 800854e:	7819      	ldrb	r1, [r3, #0]
 8008550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	4413      	add	r3, r2
 8008556:	3334      	adds	r3, #52	; 0x34
 8008558:	460a      	mov	r2, r1
 800855a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	4413      	add	r3, r2
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d006      	beq.n	8008576 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3301      	adds	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b0f      	cmp	r3, #15
 8008572:	d9e9      	bls.n	8008548 <prvInitialiseNewTask+0x54>
 8008574:	e000      	b.n	8008578 <prvInitialiseNewTask+0x84>
            {
                break;
 8008576:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008580:	e003      	b.n	800858a <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	2b37      	cmp	r3, #55	; 0x37
 800858e:	d902      	bls.n	8008596 <prvInitialiseNewTask+0xa2>
 8008590:	f001 fada 	bl	8009b48 <ulSetInterruptMask>
 8008594:	e7fe      	b.n	8008594 <prvInitialiseNewTask+0xa0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	2b37      	cmp	r3, #55	; 0x37
 800859a:	d901      	bls.n	80085a0 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800859c:	2337      	movs	r3, #55	; 0x37
 800859e:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	6a3a      	ldr	r2, [r7, #32]
 80085a4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	6a3a      	ldr	r2, [r7, #32]
 80085aa:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2200      	movs	r2, #0
 80085b0:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	3304      	adds	r3, #4
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fc02 	bl	8007dc0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	3318      	adds	r3, #24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff fbfd 	bl	8007dc0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085da:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	3354      	adds	r3, #84	; 0x54
 80085e0:	2204      	movs	r2, #4
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fe2d 	bl	800a244 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	3358      	adds	r3, #88	; 0x58
 80085ee:	2201      	movs	r2, #1
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fe26 	bl	800a244 <memset>
             * function as well. */
            #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
                {
                    #if ( portSTACK_GROWTH < 0 )
                        {
                            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	6938      	ldr	r0, [r7, #16]
 8008602:	f001 f9c3 	bl	800998c <pxPortInitialiseStack>
 8008606:	4602      	mov	r2, r0
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008616:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008618:	bf00      	nop
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008628:	f001 f954 	bl	80098d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800862c:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <prvAddNewTaskToReadyList+0x108>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a3d      	ldr	r2, [pc, #244]	; (8008728 <prvAddNewTaskToReadyList+0x108>)
 8008634:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008636:	4b3d      	ldr	r3, [pc, #244]	; (800872c <prvAddNewTaskToReadyList+0x10c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800863e:	4a3b      	ldr	r2, [pc, #236]	; (800872c <prvAddNewTaskToReadyList+0x10c>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008644:	4b38      	ldr	r3, [pc, #224]	; (8008728 <prvAddNewTaskToReadyList+0x108>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d110      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800864c:	f000 fd14 	bl	8009078 <prvInitialiseTaskLists>
 8008650:	e00d      	b.n	800866e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008652:	4b37      	ldr	r3, [pc, #220]	; (8008730 <prvAddNewTaskToReadyList+0x110>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800865a:	4b34      	ldr	r3, [pc, #208]	; (800872c <prvAddNewTaskToReadyList+0x10c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d802      	bhi.n	800866e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008668:	4a30      	ldr	r2, [pc, #192]	; (800872c <prvAddNewTaskToReadyList+0x10c>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800866e:	4b31      	ldr	r3, [pc, #196]	; (8008734 <prvAddNewTaskToReadyList+0x114>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	4a2f      	ldr	r2, [pc, #188]	; (8008734 <prvAddNewTaskToReadyList+0x114>)
 8008676:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008678:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <prvAddNewTaskToReadyList+0x114>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <prvAddNewTaskToReadyList+0x118>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <prvAddNewTaskToReadyList+0x74>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4a29      	ldr	r2, [pc, #164]	; (8008738 <prvAddNewTaskToReadyList+0x118>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	4928      	ldr	r1, [pc, #160]	; (800873c <prvAddNewTaskToReadyList+0x11c>)
 800869a:	4613      	mov	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3304      	adds	r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	609a      	str	r2, [r3, #8]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	3204      	adds	r2, #4
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1d1a      	adds	r2, r3, #4
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	609a      	str	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4a19      	ldr	r2, [pc, #100]	; (800873c <prvAddNewTaskToReadyList+0x11c>)
 80086d8:	441a      	add	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	615a      	str	r2, [r3, #20]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	4916      	ldr	r1, [pc, #88]	; (800873c <prvAddNewTaskToReadyList+0x11c>)
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	1c59      	adds	r1, r3, #1
 80086f2:	4812      	ldr	r0, [pc, #72]	; (800873c <prvAddNewTaskToReadyList+0x11c>)
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4403      	add	r3, r0
 80086fe:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008700:	f001 f8fa 	bl	80098f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <prvAddNewTaskToReadyList+0x110>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d008      	beq.n	800871e <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800870c:	4b07      	ldr	r3, [pc, #28]	; (800872c <prvAddNewTaskToReadyList+0x10c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	429a      	cmp	r2, r3
 8008718:	d201      	bcs.n	800871e <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800871a:	f001 f8c9 	bl	80098b0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000f58 	.word	0x20000f58
 800872c:	20000a84 	.word	0x20000a84
 8008730:	20000f64 	.word	0x20000f64
 8008734:	20000f74 	.word	0x20000f74
 8008738:	20000f60 	.word	0x20000f60
 800873c:	20000a88 	.word	0x20000a88

08008740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00f      	beq.n	8008772 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <vTaskDelay+0x44>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <vTaskDelay+0x20>
 800875a:	f001 f9f5 	bl	8009b48 <ulSetInterruptMask>
 800875e:	e7fe      	b.n	800875e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8008760:	f000 f86c 	bl	800883c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008764:	2100      	movs	r1, #0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fd56 	bl	8009218 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800876c:	f000 f874 	bl	8008858 <xTaskResumeAll>
 8008770:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 8008778:	f001 f89a 	bl	80098b0 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000f80 	.word	0x20000f80

08008788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008796:	463a      	mov	r2, r7
 8008798:	1d39      	adds	r1, r7, #4
 800879a:	f107 0308 	add.w	r3, r7, #8
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff faba 	bl	8007d18 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	9202      	str	r2, [sp, #8]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	460a      	mov	r2, r1
 80087b6:	491a      	ldr	r1, [pc, #104]	; (8008820 <vTaskStartScheduler+0x98>)
 80087b8:	481a      	ldr	r0, [pc, #104]	; (8008824 <vTaskStartScheduler+0x9c>)
 80087ba:	f7ff fe11 	bl	80083e0 <xTaskCreateStatic>
 80087be:	4603      	mov	r3, r0
 80087c0:	4a19      	ldr	r2, [pc, #100]	; (8008828 <vTaskStartScheduler+0xa0>)
 80087c2:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80087c4:	4b18      	ldr	r3, [pc, #96]	; (8008828 <vTaskStartScheduler+0xa0>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e001      	b.n	80087d6 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d102      	bne.n	80087e2 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 80087dc:	f000 fd8a 	bl	80092f4 <xTimerCreateTimerTask>
 80087e0:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d10e      	bne.n	8008806 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80087e8:	f001 f9ae 	bl	8009b48 <ulSetInterruptMask>
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80087ec:	4b0f      	ldr	r3, [pc, #60]	; (800882c <vTaskStartScheduler+0xa4>)
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80087f4:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <vTaskStartScheduler+0xa8>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087fa:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <vTaskStartScheduler+0xac>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8008800:	f001 f94e 	bl	8009aa0 <xPortStartScheduler>
 8008804:	e006      	b.n	8008814 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880c:	d102      	bne.n	8008814 <vTaskStartScheduler+0x8c>
 800880e:	f001 f99b 	bl	8009b48 <ulSetInterruptMask>
 8008812:	e7fe      	b.n	8008812 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008814:	4b08      	ldr	r3, [pc, #32]	; (8008838 <vTaskStartScheduler+0xb0>)
 8008816:	681b      	ldr	r3, [r3, #0]
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	0800ade0 	.word	0x0800ade0
 8008824:	08009059 	.word	0x08009059
 8008828:	20000f7c 	.word	0x20000f7c
 800882c:	20000f78 	.word	0x20000f78
 8008830:	20000f64 	.word	0x20000f64
 8008834:	20000f5c 	.word	0x20000f5c
 8008838:	2000000c 	.word	0x2000000c

0800883c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <vTaskSuspendAll+0x18>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a03      	ldr	r2, [pc, #12]	; (8008854 <vTaskSuspendAll+0x18>)
 8008848:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800884a:	bf00      	nop
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	20000f80 	.word	0x20000f80

08008858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008862:	2300      	movs	r3, #0
 8008864:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8008866:	4b6a      	ldr	r3, [pc, #424]	; (8008a10 <xTaskResumeAll+0x1b8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <xTaskResumeAll+0x1c>
 800886e:	f001 f96b 	bl	8009b48 <ulSetInterruptMask>
 8008872:	e7fe      	b.n	8008872 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8008874:	f001 f82e 	bl	80098d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008878:	4b65      	ldr	r3, [pc, #404]	; (8008a10 <xTaskResumeAll+0x1b8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3b01      	subs	r3, #1
 800887e:	4a64      	ldr	r2, [pc, #400]	; (8008a10 <xTaskResumeAll+0x1b8>)
 8008880:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008882:	4b63      	ldr	r3, [pc, #396]	; (8008a10 <xTaskResumeAll+0x1b8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f040 80bb 	bne.w	8008a02 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800888c:	4b61      	ldr	r3, [pc, #388]	; (8008a14 <xTaskResumeAll+0x1bc>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80b6 	beq.w	8008a02 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008896:	e08b      	b.n	80089b0 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008898:	4b5f      	ldr	r3, [pc, #380]	; (8008a18 <xTaskResumeAll+0x1c0>)
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	60bb      	str	r3, [r7, #8]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	6a12      	ldr	r2, [r2, #32]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	69d2      	ldr	r2, [r2, #28]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	3318      	adds	r3, #24
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d103      	bne.n	80088ce <xTaskResumeAll+0x76>
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a1a      	ldr	r2, [r3, #32]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	605a      	str	r2, [r3, #4]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2200      	movs	r2, #0
 80088d2:	629a      	str	r2, [r3, #40]	; 0x28
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	1e5a      	subs	r2, r3, #1
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	68d2      	ldr	r2, [r2, #12]
 80088ec:	609a      	str	r2, [r3, #8]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	6892      	ldr	r2, [r2, #8]
 80088f6:	605a      	str	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3304      	adds	r3, #4
 8008900:	429a      	cmp	r2, r3
 8008902:	d103      	bne.n	800890c <xTaskResumeAll+0xb4>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2200      	movs	r2, #0
 8008910:	615a      	str	r2, [r3, #20]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	1e5a      	subs	r2, r3, #1
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	4b3e      	ldr	r3, [pc, #248]	; (8008a1c <xTaskResumeAll+0x1c4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d903      	bls.n	8008930 <xTaskResumeAll+0xd8>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	4a3b      	ldr	r2, [pc, #236]	; (8008a1c <xTaskResumeAll+0x1c4>)
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	493a      	ldr	r1, [pc, #232]	; (8008a20 <xTaskResumeAll+0x1c8>)
 8008936:	4613      	mov	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	3304      	adds	r3, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	60da      	str	r2, [r3, #12]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	3204      	adds	r2, #4
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	1d1a      	adds	r2, r3, #4
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	609a      	str	r2, [r3, #8]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4a2b      	ldr	r2, [pc, #172]	; (8008a20 <xTaskResumeAll+0x1c8>)
 8008974:	441a      	add	r2, r3
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	615a      	str	r2, [r3, #20]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	4928      	ldr	r1, [pc, #160]	; (8008a20 <xTaskResumeAll+0x1c8>)
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	1c59      	adds	r1, r3, #1
 800898e:	4824      	ldr	r0, [pc, #144]	; (8008a20 <xTaskResumeAll+0x1c8>)
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4403      	add	r3, r0
 800899a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4b20      	ldr	r3, [pc, #128]	; (8008a24 <xTaskResumeAll+0x1cc>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 80089aa:	4b1f      	ldr	r3, [pc, #124]	; (8008a28 <xTaskResumeAll+0x1d0>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b0:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <xTaskResumeAll+0x1c0>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f47f af6f 	bne.w	8008898 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80089c0:	f000 fbf0 	bl	80091a4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089c4:	4b19      	ldr	r3, [pc, #100]	; (8008a2c <xTaskResumeAll+0x1d4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d010      	beq.n	80089f2 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80089d0:	f000 f83e 	bl	8008a50 <xTaskIncrementTick>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 80089da:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <xTaskResumeAll+0x1d0>)
 80089dc:	2201      	movs	r2, #1
 80089de:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f1      	bne.n	80089d0 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 80089ec:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <xTaskResumeAll+0x1d4>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <xTaskResumeAll+0x1d0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80089fe:	f000 ff57 	bl	80098b0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008a02:	f000 ff79 	bl	80098f8 <vPortExitCritical>

    return xAlreadyYielded;
 8008a06:	693b      	ldr	r3, [r7, #16]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3718      	adds	r7, #24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20000f80 	.word	0x20000f80
 8008a14:	20000f58 	.word	0x20000f58
 8008a18:	20000f18 	.word	0x20000f18
 8008a1c:	20000f60 	.word	0x20000f60
 8008a20:	20000a88 	.word	0x20000a88
 8008a24:	20000a84 	.word	0x20000a84
 8008a28:	20000f6c 	.word	0x20000f6c
 8008a2c:	20000f68 	.word	0x20000f68

08008a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <xTaskGetTickCount+0x1c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008a3c:	687b      	ldr	r3, [r7, #4]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000f5c 	.word	0x20000f5c

08008a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a5a:	4b7a      	ldr	r3, [pc, #488]	; (8008c44 <xTaskIncrementTick+0x1f4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f040 80e5 	bne.w	8008c2e <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a64:	4b78      	ldr	r3, [pc, #480]	; (8008c48 <xTaskIncrementTick+0x1f8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008a6c:	4a76      	ldr	r2, [pc, #472]	; (8008c48 <xTaskIncrementTick+0x1f8>)
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d118      	bne.n	8008aaa <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8008a78:	4b74      	ldr	r3, [pc, #464]	; (8008c4c <xTaskIncrementTick+0x1fc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <xTaskIncrementTick+0x38>
 8008a82:	f001 f861 	bl	8009b48 <ulSetInterruptMask>
 8008a86:	e7fe      	b.n	8008a86 <xTaskIncrementTick+0x36>
 8008a88:	4b70      	ldr	r3, [pc, #448]	; (8008c4c <xTaskIncrementTick+0x1fc>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	4b70      	ldr	r3, [pc, #448]	; (8008c50 <xTaskIncrementTick+0x200>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a6e      	ldr	r2, [pc, #440]	; (8008c4c <xTaskIncrementTick+0x1fc>)
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	4a6e      	ldr	r2, [pc, #440]	; (8008c50 <xTaskIncrementTick+0x200>)
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	4b6d      	ldr	r3, [pc, #436]	; (8008c54 <xTaskIncrementTick+0x204>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	4a6c      	ldr	r2, [pc, #432]	; (8008c54 <xTaskIncrementTick+0x204>)
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	f000 fb7d 	bl	80091a4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008aaa:	4b6b      	ldr	r3, [pc, #428]	; (8008c58 <xTaskIncrementTick+0x208>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	f0c0 80a7 	bcc.w	8008c04 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab6:	4b65      	ldr	r3, [pc, #404]	; (8008c4c <xTaskIncrementTick+0x1fc>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	4b65      	ldr	r3, [pc, #404]	; (8008c58 <xTaskIncrementTick+0x208>)
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	601a      	str	r2, [r3, #0]
                    break;
 8008ac8:	e09c      	b.n	8008c04 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aca:	4b60      	ldr	r3, [pc, #384]	; (8008c4c <xTaskIncrementTick+0x1fc>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d203      	bcs.n	8008aea <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008ae2:	4a5d      	ldr	r2, [pc, #372]	; (8008c58 <xTaskIncrementTick+0x208>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008ae8:	e08c      	b.n	8008c04 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	60bb      	str	r3, [r7, #8]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	68d2      	ldr	r2, [r2, #12]
 8008af8:	609a      	str	r2, [r3, #8]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	6892      	ldr	r2, [r2, #8]
 8008b02:	605a      	str	r2, [r3, #4]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d103      	bne.n	8008b18 <xTaskIncrementTick+0xc8>
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	605a      	str	r2, [r3, #4]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	615a      	str	r2, [r3, #20]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	1e5a      	subs	r2, r3, #1
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01e      	beq.n	8008b6e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	6a12      	ldr	r2, [r2, #32]
 8008b3e:	609a      	str	r2, [r3, #8]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	69d2      	ldr	r2, [r2, #28]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3318      	adds	r3, #24
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d103      	bne.n	8008b5e <xTaskIncrementTick+0x10e>
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6a1a      	ldr	r2, [r3, #32]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	605a      	str	r2, [r3, #4]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2200      	movs	r2, #0
 8008b62:	629a      	str	r2, [r3, #40]	; 0x28
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	1e5a      	subs	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	4b3a      	ldr	r3, [pc, #232]	; (8008c5c <xTaskIncrementTick+0x20c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d903      	bls.n	8008b82 <xTaskIncrementTick+0x132>
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7e:	4a37      	ldr	r2, [pc, #220]	; (8008c5c <xTaskIncrementTick+0x20c>)
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b86:	4936      	ldr	r1, [pc, #216]	; (8008c60 <xTaskIncrementTick+0x210>)
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	3304      	adds	r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	609a      	str	r2, [r3, #8]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	3204      	adds	r2, #4
 8008bae:	605a      	str	r2, [r3, #4]
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1d1a      	adds	r2, r3, #4
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	609a      	str	r2, [r3, #8]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4a26      	ldr	r2, [pc, #152]	; (8008c60 <xTaskIncrementTick+0x210>)
 8008bc6:	441a      	add	r2, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	615a      	str	r2, [r3, #20]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4923      	ldr	r1, [pc, #140]	; (8008c60 <xTaskIncrementTick+0x210>)
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	1c59      	adds	r1, r3, #1
 8008be0:	481f      	ldr	r0, [pc, #124]	; (8008c60 <xTaskIncrementTick+0x210>)
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4403      	add	r3, r0
 8008bec:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf2:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <xTaskIncrementTick+0x214>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	f4ff af5c 	bcc.w	8008ab6 <xTaskIncrementTick+0x66>
                            {
                                xSwitchRequired = pdTRUE;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c02:	e758      	b.n	8008ab6 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c04:	4b17      	ldr	r3, [pc, #92]	; (8008c64 <xTaskIncrementTick+0x214>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0a:	4915      	ldr	r1, [pc, #84]	; (8008c60 <xTaskIncrementTick+0x210>)
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d901      	bls.n	8008c20 <xTaskIncrementTick+0x1d0>
                {
                    xSwitchRequired = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <xTaskIncrementTick+0x218>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e004      	b.n	8008c38 <xTaskIncrementTick+0x1e8>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <xTaskIncrementTick+0x21c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <xTaskIncrementTick+0x21c>)
 8008c36:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8008c38:	69fb      	ldr	r3, [r7, #28]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000f80 	.word	0x20000f80
 8008c48:	20000f5c 	.word	0x20000f5c
 8008c4c:	20000f10 	.word	0x20000f10
 8008c50:	20000f14 	.word	0x20000f14
 8008c54:	20000f70 	.word	0x20000f70
 8008c58:	20000f78 	.word	0x20000f78
 8008c5c:	20000f60 	.word	0x20000f60
 8008c60:	20000a88 	.word	0x20000a88
 8008c64:	20000a84 	.word	0x20000a84
 8008c68:	20000f6c 	.word	0x20000f6c
 8008c6c:	20000f68 	.word	0x20000f68

08008c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c76:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <vTaskSwitchContext+0x94>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008c7e:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <vTaskSwitchContext+0x98>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8008c84:	e039      	b.n	8008cfa <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8008c86:	4b20      	ldr	r3, [pc, #128]	; (8008d08 <vTaskSwitchContext+0x98>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8c:	4b1f      	ldr	r3, [pc, #124]	; (8008d0c <vTaskSwitchContext+0x9c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	607b      	str	r3, [r7, #4]
 8008c92:	e008      	b.n	8008ca6 <vTaskSwitchContext+0x36>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <vTaskSwitchContext+0x30>
 8008c9a:	f000 ff55 	bl	8009b48 <ulSetInterruptMask>
 8008c9e:	e7fe      	b.n	8008c9e <vTaskSwitchContext+0x2e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	491a      	ldr	r1, [pc, #104]	; (8008d10 <vTaskSwitchContext+0xa0>)
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0ec      	beq.n	8008c94 <vTaskSwitchContext+0x24>
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <vTaskSwitchContext+0xa0>)
 8008cc6:	4413      	add	r3, r2
 8008cc8:	603b      	str	r3, [r7, #0]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d104      	bne.n	8008cea <vTaskSwitchContext+0x7a>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4a08      	ldr	r2, [pc, #32]	; (8008d14 <vTaskSwitchContext+0xa4>)
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <vTaskSwitchContext+0x9c>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6013      	str	r3, [r2, #0]
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000f80 	.word	0x20000f80
 8008d08:	20000f6c 	.word	0x20000f6c
 8008d0c:	20000f60 	.word	0x20000f60
 8008d10:	20000a88 	.word	0x20000a88
 8008d14:	20000a84 	.word	0x20000a84

08008d18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <vTaskPlaceOnEventList+0x16>
 8008d28:	f000 ff0e 	bl	8009b48 <ulSetInterruptMask>
 8008d2c:	e7fe      	b.n	8008d2c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <vTaskPlaceOnEventList+0x34>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3318      	adds	r3, #24
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff f84f 	bl	8007dda <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	6838      	ldr	r0, [r7, #0]
 8008d40:	f000 fa6a 	bl	8009218 <prvAddCurrentTaskToDelayedList>
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000a84 	.word	0x20000a84

08008d50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <vTaskPlaceOnEventListRestricted+0x18>
 8008d62:	f000 fef1 	bl	8009b48 <ulSetInterruptMask>
 8008d66:	e7fe      	b.n	8008d66 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	617b      	str	r3, [r7, #20]
 8008d6e:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	61da      	str	r2, [r3, #28]
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	6892      	ldr	r2, [r2, #8]
 8008d7e:	621a      	str	r2, [r3, #32]
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	3218      	adds	r2, #24
 8008d8a:	605a      	str	r2, [r3, #4]
 8008d8c:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f103 0218 	add.w	r2, r3, #24
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	609a      	str	r2, [r3, #8]
 8008d98:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8008db0:	f04f 33ff 	mov.w	r3, #4294967295
 8008db4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	68b8      	ldr	r0, [r7, #8]
 8008dba:	f000 fa2d 	bl	8009218 <prvAddCurrentTaskToDelayedList>
    }
 8008dbe:	bf00      	nop
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000a84 	.word	0x20000a84

08008dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <xTaskRemoveFromEventList+0x1c>
 8008de2:	f000 feb1 	bl	8009b48 <ulSetInterruptMask>
 8008de6:	e7fe      	b.n	8008de6 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	617b      	str	r3, [r7, #20]
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	6a12      	ldr	r2, [r2, #32]
 8008df6:	609a      	str	r2, [r3, #8]
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	69d2      	ldr	r2, [r2, #28]
 8008e00:	605a      	str	r2, [r3, #4]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	3318      	adds	r3, #24
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d103      	bne.n	8008e16 <xTaskRemoveFromEventList+0x4a>
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	6a1a      	ldr	r2, [r3, #32]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	1e5a      	subs	r2, r3, #1
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e26:	4b4a      	ldr	r3, [pc, #296]	; (8008f50 <xTaskRemoveFromEventList+0x184>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d15f      	bne.n	8008eee <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	68d2      	ldr	r2, [r2, #12]
 8008e3c:	609a      	str	r2, [r3, #8]
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	6892      	ldr	r2, [r2, #8]
 8008e46:	605a      	str	r2, [r3, #4]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d103      	bne.n	8008e5c <xTaskRemoveFromEventList+0x90>
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	605a      	str	r2, [r3, #4]
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	615a      	str	r2, [r3, #20]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	1e5a      	subs	r2, r3, #1
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e70:	4b38      	ldr	r3, [pc, #224]	; (8008f54 <xTaskRemoveFromEventList+0x188>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d903      	bls.n	8008e80 <xTaskRemoveFromEventList+0xb4>
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	4a35      	ldr	r2, [pc, #212]	; (8008f54 <xTaskRemoveFromEventList+0x188>)
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e84:	4934      	ldr	r1, [pc, #208]	; (8008f58 <xTaskRemoveFromEventList+0x18c>)
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	3304      	adds	r3, #4
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	60da      	str	r2, [r3, #12]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	3204      	adds	r2, #4
 8008eac:	605a      	str	r2, [r3, #4]
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	1d1a      	adds	r2, r3, #4
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	609a      	str	r2, [r3, #8]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4a25      	ldr	r2, [pc, #148]	; (8008f58 <xTaskRemoveFromEventList+0x18c>)
 8008ec4:	441a      	add	r2, r3
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	615a      	str	r2, [r3, #20]
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ece:	4922      	ldr	r1, [pc, #136]	; (8008f58 <xTaskRemoveFromEventList+0x18c>)
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	1c59      	adds	r1, r3, #1
 8008ede:	481e      	ldr	r0, [pc, #120]	; (8008f58 <xTaskRemoveFromEventList+0x18c>)
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4403      	add	r3, r0
 8008eea:	6019      	str	r1, [r3, #0]
 8008eec:	e01b      	b.n	8008f26 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008eee:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <xTaskRemoveFromEventList+0x190>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	61da      	str	r2, [r3, #28]
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	621a      	str	r2, [r3, #32]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	3218      	adds	r2, #24
 8008f0a:	605a      	str	r2, [r3, #4]
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f103 0218 	add.w	r2, r3, #24
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	609a      	str	r2, [r3, #8]
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	4a10      	ldr	r2, [pc, #64]	; (8008f5c <xTaskRemoveFromEventList+0x190>)
 8008f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <xTaskRemoveFromEventList+0x190>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	4a0e      	ldr	r2, [pc, #56]	; (8008f5c <xTaskRemoveFromEventList+0x190>)
 8008f24:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	; (8008f60 <xTaskRemoveFromEventList+0x194>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d905      	bls.n	8008f40 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <xTaskRemoveFromEventList+0x198>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	e001      	b.n	8008f44 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8008f44:	69fb      	ldr	r3, [r7, #28]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000f80 	.word	0x20000f80
 8008f54:	20000f60 	.word	0x20000f60
 8008f58:	20000a88 	.word	0x20000a88
 8008f5c:	20000f18 	.word	0x20000f18
 8008f60:	20000a84 	.word	0x20000a84
 8008f64:	20000f6c 	.word	0x20000f6c

08008f68 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <vTaskInternalSetTimeOutState+0x24>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <vTaskInternalSetTimeOutState+0x28>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	605a      	str	r2, [r3, #4]
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	20000f70 	.word	0x20000f70
 8008f90:	20000f5c 	.word	0x20000f5c

08008f94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <xTaskCheckForTimeOut+0x16>
 8008fa4:	f000 fdd0 	bl	8009b48 <ulSetInterruptMask>
 8008fa8:	e7fe      	b.n	8008fa8 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <xTaskCheckForTimeOut+0x22>
 8008fb0:	f000 fdca 	bl	8009b48 <ulSetInterruptMask>
 8008fb4:	e7fe      	b.n	8008fb4 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 8008fb6:	f000 fc8d 	bl	80098d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008fba:	4b1f      	ldr	r3, [pc, #124]	; (8009038 <xTaskCheckForTimeOut+0xa4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd2:	d102      	bne.n	8008fda <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	e026      	b.n	8009028 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b17      	ldr	r3, [pc, #92]	; (800903c <xTaskCheckForTimeOut+0xa8>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d00a      	beq.n	8008ffc <xTaskCheckForTimeOut+0x68>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d305      	bcc.n	8008ffc <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	e015      	b.n	8009028 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d20b      	bcs.n	800901e <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	1ad2      	subs	r2, r2, r3
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff ffa8 	bl	8008f68 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	e004      	b.n	8009028 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009024:	2301      	movs	r3, #1
 8009026:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8009028:	f000 fc66 	bl	80098f8 <vPortExitCritical>

    return xReturn;
 800902c:	697b      	ldr	r3, [r7, #20]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000f5c 	.word	0x20000f5c
 800903c:	20000f70 	.word	0x20000f70

08009040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009044:	4b03      	ldr	r3, [pc, #12]	; (8009054 <vTaskMissedYield+0x14>)
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
}
 800904a:	bf00      	nop
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	20000f6c 	.word	0x20000f6c

08009058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009060:	f000 f84a 	bl	80090f8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <prvIdleTask+0x1c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d9f9      	bls.n	8009060 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800906c:	f000 fc20 	bl	80098b0 <vPortYield>
        prvCheckTasksWaitingTermination();
 8009070:	e7f6      	b.n	8009060 <prvIdleTask+0x8>
 8009072:	bf00      	nop
 8009074:	20000a88 	.word	0x20000a88

08009078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907e:	2300      	movs	r3, #0
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	e00c      	b.n	800909e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4a12      	ldr	r2, [pc, #72]	; (80090d8 <prvInitialiseTaskLists+0x60>)
 8009090:	4413      	add	r3, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fe74 	bl	8007d80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3301      	adds	r3, #1
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b37      	cmp	r3, #55	; 0x37
 80090a2:	d9ef      	bls.n	8009084 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80090a4:	480d      	ldr	r0, [pc, #52]	; (80090dc <prvInitialiseTaskLists+0x64>)
 80090a6:	f7fe fe6b 	bl	8007d80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80090aa:	480d      	ldr	r0, [pc, #52]	; (80090e0 <prvInitialiseTaskLists+0x68>)
 80090ac:	f7fe fe68 	bl	8007d80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80090b0:	480c      	ldr	r0, [pc, #48]	; (80090e4 <prvInitialiseTaskLists+0x6c>)
 80090b2:	f7fe fe65 	bl	8007d80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80090b6:	480c      	ldr	r0, [pc, #48]	; (80090e8 <prvInitialiseTaskLists+0x70>)
 80090b8:	f7fe fe62 	bl	8007d80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80090bc:	480b      	ldr	r0, [pc, #44]	; (80090ec <prvInitialiseTaskLists+0x74>)
 80090be:	f7fe fe5f 	bl	8007d80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80090c2:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <prvInitialiseTaskLists+0x78>)
 80090c4:	4a05      	ldr	r2, [pc, #20]	; (80090dc <prvInitialiseTaskLists+0x64>)
 80090c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <prvInitialiseTaskLists+0x7c>)
 80090ca:	4a05      	ldr	r2, [pc, #20]	; (80090e0 <prvInitialiseTaskLists+0x68>)
 80090cc:	601a      	str	r2, [r3, #0]
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000a88 	.word	0x20000a88
 80090dc:	20000ee8 	.word	0x20000ee8
 80090e0:	20000efc 	.word	0x20000efc
 80090e4:	20000f18 	.word	0x20000f18
 80090e8:	20000f2c 	.word	0x20000f2c
 80090ec:	20000f44 	.word	0x20000f44
 80090f0:	20000f10 	.word	0x20000f10
 80090f4:	20000f14 	.word	0x20000f14

080090f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090fe:	e019      	b.n	8009134 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009100:	f000 fbe8 	bl	80098d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <prvCheckTasksWaitingTermination+0x50>)
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3304      	adds	r3, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fe9b 	bl	8007e4c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8009116:	4b0d      	ldr	r3, [pc, #52]	; (800914c <prvCheckTasksWaitingTermination+0x54>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3b01      	subs	r3, #1
 800911c:	4a0b      	ldr	r2, [pc, #44]	; (800914c <prvCheckTasksWaitingTermination+0x54>)
 800911e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <prvCheckTasksWaitingTermination+0x58>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3b01      	subs	r3, #1
 8009126:	4a0a      	ldr	r2, [pc, #40]	; (8009150 <prvCheckTasksWaitingTermination+0x58>)
 8009128:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800912a:	f000 fbe5 	bl	80098f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f810 	bl	8009154 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <prvCheckTasksWaitingTermination+0x58>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e1      	bne.n	8009100 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000f2c 	.word	0x20000f2c
 800914c:	20000f58 	.word	0x20000f58
 8009150:	20000f40 	.word	0x20000f40

08009154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009162:	2b00      	cmp	r3, #0
 8009164:	d108      	bne.n	8009178 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fda0 	bl	8009cb0 <vPortFree>
                    vPortFree( pxTCB );
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fd9d 	bl	8009cb0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009176:	e010      	b.n	800919a <prvDeleteTCB+0x46>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800917e:	2b01      	cmp	r3, #1
 8009180:	d103      	bne.n	800918a <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fd94 	bl	8009cb0 <vPortFree>
    }
 8009188:	e007      	b.n	800919a <prvDeleteTCB+0x46>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009190:	2b02      	cmp	r3, #2
 8009192:	d002      	beq.n	800919a <prvDeleteTCB+0x46>
 8009194:	f000 fcd8 	bl	8009b48 <ulSetInterruptMask>
 8009198:	e7fe      	b.n	8009198 <prvDeleteTCB+0x44>
    }
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <prvResetNextTaskUnblockTime+0x30>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d104      	bne.n	80091bc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <prvResetNextTaskUnblockTime+0x34>)
 80091b4:	f04f 32ff 	mov.w	r2, #4294967295
 80091b8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80091ba:	e005      	b.n	80091c8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <prvResetNextTaskUnblockTime+0x30>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a04      	ldr	r2, [pc, #16]	; (80091d8 <prvResetNextTaskUnblockTime+0x34>)
 80091c6:	6013      	str	r3, [r2, #0]
}
 80091c8:	bf00      	nop
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20000f10 	.word	0x20000f10
 80091d8:	20000f78 	.word	0x20000f78

080091dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80091e2:	4b0b      	ldr	r3, [pc, #44]	; (8009210 <xTaskGetSchedulerState+0x34>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80091ea:	2301      	movs	r3, #1
 80091ec:	607b      	str	r3, [r7, #4]
 80091ee:	e008      	b.n	8009202 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091f0:	4b08      	ldr	r3, [pc, #32]	; (8009214 <xTaskGetSchedulerState+0x38>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80091f8:	2302      	movs	r3, #2
 80091fa:	607b      	str	r3, [r7, #4]
 80091fc:	e001      	b.n	8009202 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80091fe:	2300      	movs	r3, #0
 8009200:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009202:	687b      	ldr	r3, [r7, #4]
    }
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	20000f64 	.word	0x20000f64
 8009214:	20000f80 	.word	0x20000f80

08009218 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009222:	4b2e      	ldr	r3, [pc, #184]	; (80092dc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009228:	4b2d      	ldr	r3, [pc, #180]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3304      	adds	r3, #4
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fe0c 	bl	8007e4c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923a:	d124      	bne.n	8009286 <prvAddCurrentTaskToDelayedList+0x6e>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d021      	beq.n	8009286 <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009242:	4b28      	ldr	r3, [pc, #160]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	609a      	str	r2, [r3, #8]
 8009250:	4b23      	ldr	r3, [pc, #140]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	6892      	ldr	r2, [r2, #8]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	4b21      	ldr	r3, [pc, #132]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	3204      	adds	r2, #4
 8009264:	605a      	str	r2, [r3, #4]
 8009266:	4b1e      	ldr	r3, [pc, #120]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	609a      	str	r2, [r3, #8]
 8009270:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1b      	ldr	r2, [pc, #108]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009276:	615a      	str	r2, [r3, #20]
 8009278:	4b1a      	ldr	r3, [pc, #104]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3301      	adds	r3, #1
 800927e:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009284:	e026      	b.n	80092d4 <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4413      	add	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d209      	bcs.n	80092b2 <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800929e:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <prvAddCurrentTaskToDelayedList+0xd0>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f7fe fd95 	bl	8007dda <vListInsert>
}
 80092b0:	e010      	b.n	80092d4 <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <prvAddCurrentTaskToDelayedList+0xd4>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fd8b 	bl	8007dda <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d202      	bcs.n	80092d4 <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 80092ce:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6013      	str	r3, [r2, #0]
}
 80092d4:	bf00      	nop
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	20000f5c 	.word	0x20000f5c
 80092e0:	20000a84 	.word	0x20000a84
 80092e4:	20000f44 	.word	0x20000f44
 80092e8:	20000f14 	.word	0x20000f14
 80092ec:	20000f10 	.word	0x20000f10
 80092f0:	20000f78 	.word	0x20000f78

080092f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80092fe:	f000 fa59 	bl	80097b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009302:	4b18      	ldr	r3, [pc, #96]	; (8009364 <xTimerCreateTimerTask+0x70>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d020      	beq.n	800934c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009312:	463a      	mov	r2, r7
 8009314:	1d39      	adds	r1, r7, #4
 8009316:	f107 0308 	add.w	r3, r7, #8
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fd16 	bl	8007d4c <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	9202      	str	r2, [sp, #8]
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	2302      	movs	r3, #2
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	2300      	movs	r3, #0
 8009330:	460a      	mov	r2, r1
 8009332:	490d      	ldr	r1, [pc, #52]	; (8009368 <xTimerCreateTimerTask+0x74>)
 8009334:	480d      	ldr	r0, [pc, #52]	; (800936c <xTimerCreateTimerTask+0x78>)
 8009336:	f7ff f853 	bl	80083e0 <xTaskCreateStatic>
 800933a:	4603      	mov	r3, r0
 800933c:	4a0c      	ldr	r2, [pc, #48]	; (8009370 <xTimerCreateTimerTask+0x7c>)
 800933e:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <xTimerCreateTimerTask+0x7c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8009348:	2301      	movs	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <xTimerCreateTimerTask+0x64>
 8009352:	f000 fbf9 	bl	8009b48 <ulSetInterruptMask>
 8009356:	e7fe      	b.n	8009356 <xTimerCreateTimerTask+0x62>
        return xReturn;
 8009358:	68fb      	ldr	r3, [r7, #12]
    }
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000fb4 	.word	0x20000fb4
 8009368:	0800ade8 	.word	0x0800ade8
 800936c:	08009419 	.word	0x08009419
 8009370:	20000fb8 	.word	0x20000fb8

08009374 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009380:	e008      	b.n	8009394 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	4413      	add	r3, r2
 800938a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	18d1      	adds	r1, r2, r3
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f8d5 	bl	8009550 <prvInsertTimerInActiveList>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1ea      	bne.n	8009382 <prvReloadTimer+0xe>
        }
    }
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c2:	4b14      	ldr	r3, [pc, #80]	; (8009414 <prvProcessExpiredTimer+0x5c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe fd3b 	bl	8007e4c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff ffc3 	bl	8009374 <prvReloadTimer>
 80093ee:	e008      	b.n	8009402 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	4798      	blx	r3
    }
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000fac 	.word	0x20000fac

08009418 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009420:	f107 0308 	add.w	r3, r7, #8
 8009424:	4618      	mov	r0, r3
 8009426:	f000 f84f 	bl	80094c8 <prvGetNextExpireTime>
 800942a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4619      	mov	r1, r3
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f803 	bl	800943c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009436:	f000 f8cd 	bl	80095d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800943a:	e7f1      	b.n	8009420 <prvTimerTask+0x8>

0800943c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009446:	f7ff f9f9 	bl	800883c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800944a:	f107 0308 	add.w	r3, r7, #8
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f85e 	bl	8009510 <prvSampleTimeNow>
 8009454:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d12a      	bne.n	80094b2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <prvProcessTimerOrBlockTask+0x3c>
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	429a      	cmp	r2, r3
 8009468:	d806      	bhi.n	8009478 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800946a:	f7ff f9f5 	bl	8008858 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ffa1 	bl	80093b8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009476:	e01e      	b.n	80094b6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d008      	beq.n	8009490 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800947e:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <prvProcessTimerOrBlockTask+0x84>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <prvProcessTimerOrBlockTask+0x50>
 8009488:	2301      	movs	r3, #1
 800948a:	e000      	b.n	800948e <prvProcessTimerOrBlockTask+0x52>
 800948c:	2300      	movs	r3, #0
 800948e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009490:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <prvProcessTimerOrBlockTask+0x88>)
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	4619      	mov	r1, r3
 800949e:	f7fe ff6b 	bl	8008378 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80094a2:	f7ff f9d9 	bl	8008858 <xTaskResumeAll>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80094ac:	f000 fa00 	bl	80098b0 <vPortYield>
    }
 80094b0:	e001      	b.n	80094b6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80094b2:	f7ff f9d1 	bl	8008858 <xTaskResumeAll>
    }
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000fb0 	.word	0x20000fb0
 80094c4:	20000fb4 	.word	0x20000fb4

080094c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094d0:	4b0e      	ldr	r3, [pc, #56]	; (800950c <prvGetNextExpireTime+0x44>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <prvGetNextExpireTime+0x16>
 80094da:	2201      	movs	r2, #1
 80094dc:	e000      	b.n	80094e0 <prvGetNextExpireTime+0x18>
 80094de:	2200      	movs	r2, #0
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d105      	bne.n	80094f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ec:	4b07      	ldr	r3, [pc, #28]	; (800950c <prvGetNextExpireTime+0x44>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e001      	b.n	80094fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80094fc:	68fb      	ldr	r3, [r7, #12]
    }
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000fac 	.word	0x20000fac

08009510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009518:	f7ff fa8a 	bl	8008a30 <xTaskGetTickCount>
 800951c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800951e:	4b0b      	ldr	r3, [pc, #44]	; (800954c <prvSampleTimeNow+0x3c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	429a      	cmp	r2, r3
 8009526:	d205      	bcs.n	8009534 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009528:	f000 f91e 	bl	8009768 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e002      	b.n	800953a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800953a:	4a04      	ldr	r2, [pc, #16]	; (800954c <prvSampleTimeNow+0x3c>)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009540:	68fb      	ldr	r3, [r7, #12]
    }
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000fbc 	.word	0x20000fbc

08009550 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d812      	bhi.n	800959c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	1ad2      	subs	r2, r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	429a      	cmp	r2, r3
 8009582:	d302      	bcc.n	800958a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e01b      	b.n	80095c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800958a:	4b10      	ldr	r3, [pc, #64]	; (80095cc <prvInsertTimerInActiveList+0x7c>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3304      	adds	r3, #4
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7fe fc20 	bl	8007dda <vListInsert>
 800959a:	e012      	b.n	80095c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d206      	bcs.n	80095b2 <prvInsertTimerInActiveList+0x62>
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d302      	bcc.n	80095b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	e007      	b.n	80095c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <prvInsertTimerInActiveList+0x80>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7fe fc0c 	bl	8007dda <vListInsert>
            }
        }

        return xProcessTimerNow;
 80095c2:	697b      	ldr	r3, [r7, #20]
    }
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20000fb0 	.word	0x20000fb0
 80095d0:	20000fac 	.word	0x20000fac

080095d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b088      	sub	sp, #32
 80095d8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095da:	e0b2      	b.n	8009742 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da10      	bge.n	8009604 <prvProcessReceivedCommands+0x30>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095e2:	1d3b      	adds	r3, r7, #4
 80095e4:	3304      	adds	r3, #4
 80095e6:	61fb      	str	r3, [r7, #28]

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <prvProcessReceivedCommands+0x20>
 80095ee:	f000 faab 	bl	8009b48 <ulSetInterruptMask>
 80095f2:	e7fe      	b.n	80095f2 <prvProcessReceivedCommands+0x1e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	6850      	ldr	r0, [r2, #4]
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	6892      	ldr	r2, [r2, #8]
 8009600:	4611      	mov	r1, r2
 8009602:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	f2c0 809b 	blt.w	8009742 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	3304      	adds	r3, #4
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fc15 	bl	8007e4c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009622:	463b      	mov	r3, r7
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ff73 	bl	8009510 <prvSampleTimeNow>
 800962a:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3b01      	subs	r3, #1
 8009630:	2b08      	cmp	r3, #8
 8009632:	f200 8085 	bhi.w	8009740 <prvProcessReceivedCommands+0x16c>
 8009636:	a201      	add	r2, pc, #4	; (adr r2, 800963c <prvProcessReceivedCommands+0x68>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	08009661 	.word	0x08009661
 8009640:	08009661 	.word	0x08009661
 8009644:	080096c9 	.word	0x080096c9
 8009648:	080096dd 	.word	0x080096dd
 800964c:	08009717 	.word	0x08009717
 8009650:	08009661 	.word	0x08009661
 8009654:	08009661 	.word	0x08009661
 8009658:	080096c9 	.word	0x080096c9
 800965c:	080096dd 	.word	0x080096dd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	b2da      	uxtb	r2, r3
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	18d1      	adds	r1, r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	69b8      	ldr	r0, [r7, #24]
 8009680:	f7ff ff66 	bl	8009550 <prvInsertTimerInActiveList>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d05b      	beq.n	8009742 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	4413      	add	r3, r2
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	4619      	mov	r1, r3
 80096a4:	69b8      	ldr	r0, [r7, #24]
 80096a6:	f7ff fe65 	bl	8009374 <prvReloadTimer>
 80096aa:	e008      	b.n	80096be <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	69b8      	ldr	r0, [r7, #24]
 80096c4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80096c6:	e03c      	b.n	8009742 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ce:	f023 0301 	bic.w	r3, r3, #1
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80096da:	e032      	b.n	8009742 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <prvProcessReceivedCommands+0x12e>
 80096fc:	f000 fa24 	bl	8009b48 <ulSetInterruptMask>
 8009700:	e7fe      	b.n	8009700 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	699a      	ldr	r2, [r3, #24]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	18d1      	adds	r1, r2, r3
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	69b8      	ldr	r0, [r7, #24]
 8009710:	f7ff ff1e 	bl	8009550 <prvInsertTimerInActiveList>
                        break;
 8009714:	e015      	b.n	8009742 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <prvProcessReceivedCommands+0x158>
                                {
                                    vPortFree( pxTimer );
 8009724:	69b8      	ldr	r0, [r7, #24]
 8009726:	f000 fac3 	bl	8009cb0 <vPortFree>
 800972a:	e00a      	b.n	8009742 <prvProcessReceivedCommands+0x16e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009732:	f023 0301 	bic.w	r3, r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800973e:	e000      	b.n	8009742 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8009740:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <prvProcessReceivedCommands+0x190>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	1d39      	adds	r1, r7, #4
 8009748:	2200      	movs	r2, #0
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fc88 	bl	8008060 <xQueueReceive>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	f47f af42 	bne.w	80095dc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	3720      	adds	r7, #32
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000fb4 	.word	0x20000fb4

08009768 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800976e:	e009      	b.n	8009784 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <prvSwitchTimerLists+0x44>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800977a:	f04f 31ff 	mov.w	r1, #4294967295
 800977e:	6838      	ldr	r0, [r7, #0]
 8009780:	f7ff fe1a 	bl	80093b8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009784:	4b09      	ldr	r3, [pc, #36]	; (80097ac <prvSwitchTimerLists+0x44>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1f0      	bne.n	8009770 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800978e:	4b07      	ldr	r3, [pc, #28]	; (80097ac <prvSwitchTimerLists+0x44>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8009794:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <prvSwitchTimerLists+0x48>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a04      	ldr	r2, [pc, #16]	; (80097ac <prvSwitchTimerLists+0x44>)
 800979a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800979c:	4a04      	ldr	r2, [pc, #16]	; (80097b0 <prvSwitchTimerLists+0x48>)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6013      	str	r3, [r2, #0]
    }
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000fac 	.word	0x20000fac
 80097b0:	20000fb0 	.word	0x20000fb0

080097b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80097ba:	f000 f88b 	bl	80098d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80097be:	4b15      	ldr	r3, [pc, #84]	; (8009814 <prvCheckForValidListAndQueue+0x60>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d120      	bne.n	8009808 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80097c6:	4814      	ldr	r0, [pc, #80]	; (8009818 <prvCheckForValidListAndQueue+0x64>)
 80097c8:	f7fe fada 	bl	8007d80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80097cc:	4813      	ldr	r0, [pc, #76]	; (800981c <prvCheckForValidListAndQueue+0x68>)
 80097ce:	f7fe fad7 	bl	8007d80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80097d2:	4b13      	ldr	r3, [pc, #76]	; (8009820 <prvCheckForValidListAndQueue+0x6c>)
 80097d4:	4a10      	ldr	r2, [pc, #64]	; (8009818 <prvCheckForValidListAndQueue+0x64>)
 80097d6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80097d8:	4b12      	ldr	r3, [pc, #72]	; (8009824 <prvCheckForValidListAndQueue+0x70>)
 80097da:	4a10      	ldr	r2, [pc, #64]	; (800981c <prvCheckForValidListAndQueue+0x68>)
 80097dc:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097de:	2300      	movs	r3, #0
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	4b11      	ldr	r3, [pc, #68]	; (8009828 <prvCheckForValidListAndQueue+0x74>)
 80097e4:	4a11      	ldr	r2, [pc, #68]	; (800982c <prvCheckForValidListAndQueue+0x78>)
 80097e6:	2110      	movs	r1, #16
 80097e8:	200a      	movs	r0, #10
 80097ea:	f7fe fbd0 	bl	8007f8e <xQueueGenericCreateStatic>
 80097ee:	4603      	mov	r3, r0
 80097f0:	4a08      	ldr	r2, [pc, #32]	; (8009814 <prvCheckForValidListAndQueue+0x60>)
 80097f2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <prvCheckForValidListAndQueue+0x60>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <prvCheckForValidListAndQueue+0x60>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	490b      	ldr	r1, [pc, #44]	; (8009830 <prvCheckForValidListAndQueue+0x7c>)
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fd74 	bl	80082f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009808:	f000 f876 	bl	80098f8 <vPortExitCritical>
    }
 800980c:	bf00      	nop
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20000fb4 	.word	0x20000fb4
 8009818:	20000f84 	.word	0x20000f84
 800981c:	20000f98 	.word	0x20000f98
 8009820:	20000fac 	.word	0x20000fac
 8009824:	20000fb0 	.word	0x20000fb0
 8009828:	20001060 	.word	0x20001060
 800982c:	20000fc0 	.word	0x20000fc0
 8009830:	0800adf0 	.word	0x0800adf0

08009834 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009838:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <vPortSetupTimerInterrupt+0x34>)
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800983e:	4b0b      	ldr	r3, [pc, #44]	; (800986c <vPortSetupTimerInterrupt+0x38>)
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <vPortSetupTimerInterrupt+0x3c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a0a      	ldr	r2, [pc, #40]	; (8009874 <vPortSetupTimerInterrupt+0x40>)
 800984a:	fba2 2303 	umull	r2, r3, r2, r3
 800984e:	099b      	lsrs	r3, r3, #6
 8009850:	4a09      	ldr	r2, [pc, #36]	; (8009878 <vPortSetupTimerInterrupt+0x44>)
 8009852:	3b01      	subs	r3, #1
 8009854:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009856:	4b04      	ldr	r3, [pc, #16]	; (8009868 <vPortSetupTimerInterrupt+0x34>)
 8009858:	2207      	movs	r2, #7
 800985a:	601a      	str	r2, [r3, #0]
}
 800985c:	bf00      	nop
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	e000e010 	.word	0xe000e010
 800986c:	e000e018 	.word	0xe000e018
 8009870:	20000000 	.word	0x20000000
 8009874:	10624dd3 	.word	0x10624dd3
 8009878:	e000e014 	.word	0xe000e014

0800987c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8009882:	2300      	movs	r3, #0
 8009884:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8009886:	4b09      	ldr	r3, [pc, #36]	; (80098ac <prvTaskExitError+0x30>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988e:	d002      	beq.n	8009896 <prvTaskExitError+0x1a>
 8009890:	f000 f95a 	bl	8009b48 <ulSetInterruptMask>
 8009894:	e7fe      	b.n	8009894 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8009896:	f000 f957 	bl	8009b48 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800989a:	bf00      	nop
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0fc      	beq.n	800989c <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20000010 	.word	0x20000010

080098b0 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80098b0:	b480      	push	{r7}
 80098b2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098b4:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <vPortYield+0x20>)
 80098b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ba:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80098bc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80098c0:	f3bf 8f6f 	isb	sy
}
 80098c4:	bf00      	nop
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80098d8:	f000 f936 	bl	8009b48 <ulSetInterruptMask>
    ulCriticalNesting++;
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <vPortEnterCritical+0x20>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3301      	adds	r3, #1
 80098e2:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <vPortEnterCritical+0x20>)
 80098e4:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80098e6:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80098ea:	f3bf 8f6f 	isb	sy
}
 80098ee:	bf00      	nop
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20000010 	.word	0x20000010

080098f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <vPortExitCritical+0x30>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <vPortExitCritical+0x12>
 8009904:	f000 f920 	bl	8009b48 <ulSetInterruptMask>
 8009908:	e7fe      	b.n	8009908 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800990a:	4b07      	ldr	r3, [pc, #28]	; (8009928 <vPortExitCritical+0x30>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3b01      	subs	r3, #1
 8009910:	4a05      	ldr	r2, [pc, #20]	; (8009928 <vPortExitCritical+0x30>)
 8009912:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8009914:	4b04      	ldr	r3, [pc, #16]	; (8009928 <vPortExitCritical+0x30>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800991c:	2000      	movs	r0, #0
 800991e:	f000 f920 	bl	8009b62 <vClearInterruptMask>
    }
}
 8009922:	bf00      	nop
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000010 	.word	0x20000010

0800992c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009932:	f000 f909 	bl	8009b48 <ulSetInterruptMask>
 8009936:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009938:	f7ff f88a 	bl	8008a50 <xTaskIncrementTick>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <xPortSysTickHandler+0x2c>)
 8009944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009948:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f909 	bl	8009b62 <vClearInterruptMask>
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b02      	subs	r3, #2
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d102      	bne.n	800997e <vPortSVCHandler_C+0x22>
                }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8009978:	f000 f8b2 	bl	8009ae0 <vRestoreContextOfFirstTask>
            break;
 800997c:	e002      	b.n	8009984 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800997e:	f000 f8e3 	bl	8009b48 <ulSetInterruptMask>
 8009982:	e7fe      	b.n	8009982 <vPortSVCHandler_C+0x26>
    }
}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3b04      	subs	r3, #4
 800999e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099a6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3b04      	subs	r3, #4
 80099ac:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3b04      	subs	r3, #4
 80099b8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80099ba:	4a38      	ldr	r2, [pc, #224]	; (8009a9c <pxPortInitialiseStack+0x110>)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3b04      	subs	r3, #4
 80099c4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80099cc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3b04      	subs	r3, #4
 80099d2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80099da:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3b04      	subs	r3, #4
 80099e0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80099e8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3b04      	subs	r3, #4
 80099ee:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80099f6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3b04      	subs	r3, #4
 80099fc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3b04      	subs	r3, #4
 8009a08:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8009a10:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3b04      	subs	r3, #4
 8009a16:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8009a1e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3b04      	subs	r3, #4
 8009a24:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8009a2c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3b04      	subs	r3, #4
 8009a32:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8009a3a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8009a48:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8009a56:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3b04      	subs	r3, #4
 8009a5c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8009a64:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b04      	subs	r3, #4
 8009a6a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8009a72:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3b04      	subs	r3, #4
 8009a78:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8009a80:	601a      	str	r2, [r3, #0]
                        *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
                    }
                }
            #endif /* configENABLE_MPU */

            pxTopOfStack--;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3b04      	subs	r3, #4
 8009a86:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	601a      	str	r2, [r3, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	0800987d 	.word	0x0800987d

08009aa0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <xPortStartScheduler+0x38>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <xPortStartScheduler+0x38>)
 8009aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009ab0:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <xPortStartScheduler+0x38>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a08      	ldr	r2, [pc, #32]	; (8009ad8 <xPortStartScheduler+0x38>)
 8009ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aba:	6013      	str	r3, [r2, #0]
        }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009abc:	f7ff feba 	bl	8009834 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <xPortStartScheduler+0x3c>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 8009ac6:	f000 f82b 	bl	8009b20 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009aca:	f7ff f8d1 	bl	8008c70 <vTaskSwitchContext>
    prvTaskExitError();
 8009ace:	f7ff fed5 	bl	800987c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	e000ed20 	.word	0xe000ed20
 8009adc:	20000010 	.word	0x20000010

08009ae0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009ae0:	4a0b      	ldr	r2, [pc, #44]	; (8009b10 <pxCurrentTCBConst2>)
 8009ae2:	6811      	ldr	r1, [r2, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	c806      	ldmia	r0!, {r1, r2}
 8009ae8:	f381 880b 	msr	PSPLIM, r1
 8009aec:	2102      	movs	r1, #2
 8009aee:	f381 8814 	msr	CONTROL, r1
 8009af2:	3020      	adds	r0, #32
 8009af4:	f380 8809 	msr	PSP, r0
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f04f 0000 	mov.w	r0, #0
 8009b00:	f380 8811 	msr	BASEPRI, r0
 8009b04:	4710      	bx	r2
 8009b06:	bf00      	nop
 8009b08:	f3af 8000 	nop.w
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst2>:
 8009b10:	20000a84 	.word	0x20000a84
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop
	...

08009b20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009b20:	4807      	ldr	r0, [pc, #28]	; (8009b40 <xVTORConst>)
 8009b22:	6800      	ldr	r0, [r0, #0]
 8009b24:	6800      	ldr	r0, [r0, #0]
 8009b26:	f380 8808 	msr	MSP, r0
 8009b2a:	b662      	cpsie	i
 8009b2c:	b661      	cpsie	f
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	df02      	svc	2
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	f3af 8000 	nop.w

08009b40 <xVTORConst>:
 8009b40:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009b48:	f3ef 8011 	mrs	r0, BASEPRI
 8009b4c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8009b50:	f381 8811 	msr	BASEPRI, r1
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8009b5e:	bf00      	nop
 8009b60:	4618      	mov	r0, r3

08009b62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009b62:	f380 8811 	msr	BASEPRI, r0
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8009b70:	bf00      	nop
	...

08009b80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009b80:	f3ef 8009 	mrs	r0, PSP
 8009b84:	f3ef 820b 	mrs	r2, PSPLIM
 8009b88:	4673      	mov	r3, lr
 8009b8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009b8e:	4a10      	ldr	r2, [pc, #64]	; (8009bd0 <pxCurrentTCBConst>)
 8009b90:	6811      	ldr	r1, [r2, #0]
 8009b92:	6008      	str	r0, [r1, #0]
 8009b94:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b98:	f380 8811 	msr	BASEPRI, r0
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f7ff f864 	bl	8008c70 <vTaskSwitchContext>
 8009ba8:	f04f 0000 	mov.w	r0, #0
 8009bac:	f380 8811 	msr	BASEPRI, r0
 8009bb0:	4a07      	ldr	r2, [pc, #28]	; (8009bd0 <pxCurrentTCBConst>)
 8009bb2:	6811      	ldr	r1, [r2, #0]
 8009bb4:	6808      	ldr	r0, [r1, #0]
 8009bb6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009bba:	f382 880b 	msr	PSPLIM, r2
 8009bbe:	f380 8809 	msr	PSP, r0
 8009bc2:	4718      	bx	r3
 8009bc4:	f3af 8000 	nop.w
 8009bc8:	f3af 8000 	nop.w
 8009bcc:	f3af 8000 	nop.w

08009bd0 <pxCurrentTCBConst>:
 8009bd0:	20000a84 	.word	0x20000a84
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
	...

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009be0:	f01e 0f04 	tst.w	lr, #4
 8009be4:	bf0c      	ite	eq
 8009be6:	f3ef 8008 	mrseq	r0, MSP
 8009bea:	f3ef 8009 	mrsne	r0, PSP
 8009bee:	4904      	ldr	r1, [pc, #16]	; (8009c00 <svchandler_address_const>)
 8009bf0:	4708      	bx	r1
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	f3af 8000 	nop.w
 8009bfc:	f3af 8000 	nop.w

08009c00 <svchandler_address_const>:
 8009c00:	0800995d 	.word	0x0800995d
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00e      	beq.n	8009c3c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f023 0307 	bic.w	r3, r3, #7
 8009c24:	3308      	adds	r3, #8
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d205      	bcs.n	8009c38 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f023 0307 	bic.w	r3, r3, #7
 8009c32:	3308      	adds	r3, #8
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	e001      	b.n	8009c3c <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 8009c3c:	f7fe fdfe 	bl	800883c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8009c40:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <pvPortMalloc+0x98>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d105      	bne.n	8009c54 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009c48:	4b16      	ldr	r3, [pc, #88]	; (8009ca4 <pvPortMalloc+0x9c>)
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <pvPortMalloc+0x98>)
 8009c52:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d01a      	beq.n	8009c90 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009c5a:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <pvPortMalloc+0xa0>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 8009c62:	4a12      	ldr	r2, [pc, #72]	; (8009cac <pvPortMalloc+0xa4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d813      	bhi.n	8009c90 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8009c68:	4b0f      	ldr	r3, [pc, #60]	; (8009ca8 <pvPortMalloc+0xa0>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	441a      	add	r2, r3
 8009c70:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <pvPortMalloc+0xa0>)
 8009c72:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d90b      	bls.n	8009c90 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8009c78:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <pvPortMalloc+0x98>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <pvPortMalloc+0xa0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4413      	add	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8009c84:	4b08      	ldr	r3, [pc, #32]	; (8009ca8 <pvPortMalloc+0xa0>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	4a06      	ldr	r2, [pc, #24]	; (8009ca8 <pvPortMalloc+0xa0>)
 8009c8e:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009c90:	f7fe fde2 	bl	8008858 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8009c94:	68fb      	ldr	r3, [r7, #12]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200410b4 	.word	0x200410b4
 8009ca4:	200010b7 	.word	0x200010b7
 8009ca8:	200410b0 	.word	0x200410b0
 8009cac:	0003fff7 	.word	0x0003fff7

08009cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <vPortFree+0x14>
 8009cbe:	f7ff ff43 	bl	8009b48 <ulSetInterruptMask>
 8009cc2:	e7fe      	b.n	8009cc2 <vPortFree+0x12>
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <sbrk_aligned>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4e0e      	ldr	r6, [pc, #56]	; (8009d08 <sbrk_aligned+0x3c>)
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	6831      	ldr	r1, [r6, #0]
 8009cd6:	b911      	cbnz	r1, 8009cde <sbrk_aligned+0x12>
 8009cd8:	f000 fb02 	bl	800a2e0 <_sbrk_r>
 8009cdc:	6030      	str	r0, [r6, #0]
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f000 fafd 	bl	800a2e0 <_sbrk_r>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d00a      	beq.n	8009d00 <sbrk_aligned+0x34>
 8009cea:	1cc4      	adds	r4, r0, #3
 8009cec:	f024 0403 	bic.w	r4, r4, #3
 8009cf0:	42a0      	cmp	r0, r4
 8009cf2:	d007      	beq.n	8009d04 <sbrk_aligned+0x38>
 8009cf4:	1a21      	subs	r1, r4, r0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 faf2 	bl	800a2e0 <_sbrk_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	d101      	bne.n	8009d04 <sbrk_aligned+0x38>
 8009d00:	f04f 34ff 	mov.w	r4, #4294967295
 8009d04:	4620      	mov	r0, r4
 8009d06:	bd70      	pop	{r4, r5, r6, pc}
 8009d08:	200410bc 	.word	0x200410bc

08009d0c <_malloc_r>:
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	1ccd      	adds	r5, r1, #3
 8009d12:	4607      	mov	r7, r0
 8009d14:	f025 0503 	bic.w	r5, r5, #3
 8009d18:	3508      	adds	r5, #8
 8009d1a:	2d0c      	cmp	r5, #12
 8009d1c:	bf38      	it	cc
 8009d1e:	250c      	movcc	r5, #12
 8009d20:	2d00      	cmp	r5, #0
 8009d22:	db01      	blt.n	8009d28 <_malloc_r+0x1c>
 8009d24:	42a9      	cmp	r1, r5
 8009d26:	d905      	bls.n	8009d34 <_malloc_r+0x28>
 8009d28:	230c      	movs	r3, #12
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	603b      	str	r3, [r7, #0]
 8009d2e:	4630      	mov	r0, r6
 8009d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e08 <_malloc_r+0xfc>
 8009d38:	f000 f868 	bl	8009e0c <__malloc_lock>
 8009d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d40:	461c      	mov	r4, r3
 8009d42:	bb5c      	cbnz	r4, 8009d9c <_malloc_r+0x90>
 8009d44:	4629      	mov	r1, r5
 8009d46:	4638      	mov	r0, r7
 8009d48:	f7ff ffc0 	bl	8009ccc <sbrk_aligned>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	4604      	mov	r4, r0
 8009d50:	d155      	bne.n	8009dfe <_malloc_r+0xf2>
 8009d52:	f8d8 4000 	ldr.w	r4, [r8]
 8009d56:	4626      	mov	r6, r4
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	d145      	bne.n	8009de8 <_malloc_r+0xdc>
 8009d5c:	2c00      	cmp	r4, #0
 8009d5e:	d048      	beq.n	8009df2 <_malloc_r+0xe6>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	4631      	mov	r1, r6
 8009d64:	4638      	mov	r0, r7
 8009d66:	eb04 0903 	add.w	r9, r4, r3
 8009d6a:	f000 fab9 	bl	800a2e0 <_sbrk_r>
 8009d6e:	4581      	cmp	r9, r0
 8009d70:	d13f      	bne.n	8009df2 <_malloc_r+0xe6>
 8009d72:	6821      	ldr	r1, [r4, #0]
 8009d74:	4638      	mov	r0, r7
 8009d76:	1a6d      	subs	r5, r5, r1
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7ff ffa7 	bl	8009ccc <sbrk_aligned>
 8009d7e:	3001      	adds	r0, #1
 8009d80:	d037      	beq.n	8009df2 <_malloc_r+0xe6>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	442b      	add	r3, r5
 8009d86:	6023      	str	r3, [r4, #0]
 8009d88:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d038      	beq.n	8009e02 <_malloc_r+0xf6>
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	42a2      	cmp	r2, r4
 8009d94:	d12b      	bne.n	8009dee <_malloc_r+0xe2>
 8009d96:	2200      	movs	r2, #0
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	e00f      	b.n	8009dbc <_malloc_r+0xb0>
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	1b52      	subs	r2, r2, r5
 8009da0:	d41f      	bmi.n	8009de2 <_malloc_r+0xd6>
 8009da2:	2a0b      	cmp	r2, #11
 8009da4:	d917      	bls.n	8009dd6 <_malloc_r+0xca>
 8009da6:	1961      	adds	r1, r4, r5
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	6025      	str	r5, [r4, #0]
 8009dac:	bf18      	it	ne
 8009dae:	6059      	strne	r1, [r3, #4]
 8009db0:	6863      	ldr	r3, [r4, #4]
 8009db2:	bf08      	it	eq
 8009db4:	f8c8 1000 	streq.w	r1, [r8]
 8009db8:	5162      	str	r2, [r4, r5]
 8009dba:	604b      	str	r3, [r1, #4]
 8009dbc:	f104 060b 	add.w	r6, r4, #11
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f000 f829 	bl	8009e18 <__malloc_unlock>
 8009dc6:	1d23      	adds	r3, r4, #4
 8009dc8:	f026 0607 	bic.w	r6, r6, #7
 8009dcc:	1af2      	subs	r2, r6, r3
 8009dce:	d0ae      	beq.n	8009d2e <_malloc_r+0x22>
 8009dd0:	1b9b      	subs	r3, r3, r6
 8009dd2:	50a3      	str	r3, [r4, r2]
 8009dd4:	e7ab      	b.n	8009d2e <_malloc_r+0x22>
 8009dd6:	42a3      	cmp	r3, r4
 8009dd8:	6862      	ldr	r2, [r4, #4]
 8009dda:	d1dd      	bne.n	8009d98 <_malloc_r+0x8c>
 8009ddc:	f8c8 2000 	str.w	r2, [r8]
 8009de0:	e7ec      	b.n	8009dbc <_malloc_r+0xb0>
 8009de2:	4623      	mov	r3, r4
 8009de4:	6864      	ldr	r4, [r4, #4]
 8009de6:	e7ac      	b.n	8009d42 <_malloc_r+0x36>
 8009de8:	4634      	mov	r4, r6
 8009dea:	6876      	ldr	r6, [r6, #4]
 8009dec:	e7b4      	b.n	8009d58 <_malloc_r+0x4c>
 8009dee:	4613      	mov	r3, r2
 8009df0:	e7cc      	b.n	8009d8c <_malloc_r+0x80>
 8009df2:	230c      	movs	r3, #12
 8009df4:	4638      	mov	r0, r7
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	f000 f80e 	bl	8009e18 <__malloc_unlock>
 8009dfc:	e797      	b.n	8009d2e <_malloc_r+0x22>
 8009dfe:	6025      	str	r5, [r4, #0]
 8009e00:	e7dc      	b.n	8009dbc <_malloc_r+0xb0>
 8009e02:	605b      	str	r3, [r3, #4]
 8009e04:	deff      	udf	#255	; 0xff
 8009e06:	bf00      	nop
 8009e08:	200410b8 	.word	0x200410b8

08009e0c <__malloc_lock>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__malloc_lock+0x8>)
 8009e0e:	f000 bab4 	b.w	800a37a <__retarget_lock_acquire_recursive>
 8009e12:	bf00      	nop
 8009e14:	20041200 	.word	0x20041200

08009e18 <__malloc_unlock>:
 8009e18:	4801      	ldr	r0, [pc, #4]	; (8009e20 <__malloc_unlock+0x8>)
 8009e1a:	f000 baaf 	b.w	800a37c <__retarget_lock_release_recursive>
 8009e1e:	bf00      	nop
 8009e20:	20041200 	.word	0x20041200

08009e24 <std>:
 8009e24:	2300      	movs	r3, #0
 8009e26:	b510      	push	{r4, lr}
 8009e28:	4604      	mov	r4, r0
 8009e2a:	6083      	str	r3, [r0, #8]
 8009e2c:	8181      	strh	r1, [r0, #12]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6643      	str	r3, [r0, #100]	; 0x64
 8009e32:	81c2      	strh	r2, [r0, #14]
 8009e34:	2208      	movs	r2, #8
 8009e36:	6183      	str	r3, [r0, #24]
 8009e38:	e9c0 3300 	strd	r3, r3, [r0]
 8009e3c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e40:	305c      	adds	r0, #92	; 0x5c
 8009e42:	f000 f9ff 	bl	800a244 <memset>
 8009e46:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <std+0x58>)
 8009e48:	6224      	str	r4, [r4, #32]
 8009e4a:	6263      	str	r3, [r4, #36]	; 0x24
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	; (8009e80 <std+0x5c>)
 8009e4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e50:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <std+0x60>)
 8009e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <std+0x64>)
 8009e56:	6323      	str	r3, [r4, #48]	; 0x30
 8009e58:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <std+0x68>)
 8009e5a:	429c      	cmp	r4, r3
 8009e5c:	d006      	beq.n	8009e6c <std+0x48>
 8009e5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e62:	4294      	cmp	r4, r2
 8009e64:	d002      	beq.n	8009e6c <std+0x48>
 8009e66:	33d0      	adds	r3, #208	; 0xd0
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	d105      	bne.n	8009e78 <std+0x54>
 8009e6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e74:	f000 ba80 	b.w	800a378 <__retarget_lock_init_recursive>
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	bf00      	nop
 8009e7c:	0800a095 	.word	0x0800a095
 8009e80:	0800a0b7 	.word	0x0800a0b7
 8009e84:	0800a0ef 	.word	0x0800a0ef
 8009e88:	0800a113 	.word	0x0800a113
 8009e8c:	200410c0 	.word	0x200410c0

08009e90 <stdio_exit_handler>:
 8009e90:	4a02      	ldr	r2, [pc, #8]	; (8009e9c <stdio_exit_handler+0xc>)
 8009e92:	4903      	ldr	r1, [pc, #12]	; (8009ea0 <stdio_exit_handler+0x10>)
 8009e94:	4803      	ldr	r0, [pc, #12]	; (8009ea4 <stdio_exit_handler+0x14>)
 8009e96:	f000 b869 	b.w	8009f6c <_fwalk_sglue>
 8009e9a:	bf00      	nop
 8009e9c:	20000014 	.word	0x20000014
 8009ea0:	0800aae5 	.word	0x0800aae5
 8009ea4:	20000020 	.word	0x20000020

08009ea8 <cleanup_stdio>:
 8009ea8:	6841      	ldr	r1, [r0, #4]
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <cleanup_stdio+0x34>)
 8009eac:	4299      	cmp	r1, r3
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	d001      	beq.n	8009eb8 <cleanup_stdio+0x10>
 8009eb4:	f000 fe16 	bl	800aae4 <_fflush_r>
 8009eb8:	68a1      	ldr	r1, [r4, #8]
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <cleanup_stdio+0x38>)
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	d002      	beq.n	8009ec6 <cleanup_stdio+0x1e>
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fe0f 	bl	800aae4 <_fflush_r>
 8009ec6:	68e1      	ldr	r1, [r4, #12]
 8009ec8:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <cleanup_stdio+0x3c>)
 8009eca:	4299      	cmp	r1, r3
 8009ecc:	d004      	beq.n	8009ed8 <cleanup_stdio+0x30>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ed4:	f000 be06 	b.w	800aae4 <_fflush_r>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	bf00      	nop
 8009edc:	200410c0 	.word	0x200410c0
 8009ee0:	20041128 	.word	0x20041128
 8009ee4:	20041190 	.word	0x20041190

08009ee8 <global_stdio_init.part.0>:
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <global_stdio_init.part.0+0x30>)
 8009eec:	2104      	movs	r1, #4
 8009eee:	4c0b      	ldr	r4, [pc, #44]	; (8009f1c <global_stdio_init.part.0+0x34>)
 8009ef0:	4a0b      	ldr	r2, [pc, #44]	; (8009f20 <global_stdio_init.part.0+0x38>)
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f7ff ff94 	bl	8009e24 <std>
 8009efc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f00:	2201      	movs	r2, #1
 8009f02:	2109      	movs	r1, #9
 8009f04:	f7ff ff8e 	bl	8009e24 <std>
 8009f08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	2112      	movs	r1, #18
 8009f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f14:	f7ff bf86 	b.w	8009e24 <std>
 8009f18:	200411f8 	.word	0x200411f8
 8009f1c:	200410c0 	.word	0x200410c0
 8009f20:	08009e91 	.word	0x08009e91

08009f24 <__sfp_lock_acquire>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__sfp_lock_acquire+0x8>)
 8009f26:	f000 ba28 	b.w	800a37a <__retarget_lock_acquire_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20041201 	.word	0x20041201

08009f30 <__sfp_lock_release>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__sfp_lock_release+0x8>)
 8009f32:	f000 ba23 	b.w	800a37c <__retarget_lock_release_recursive>
 8009f36:	bf00      	nop
 8009f38:	20041201 	.word	0x20041201

08009f3c <__sinit>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	4604      	mov	r4, r0
 8009f40:	f7ff fff0 	bl	8009f24 <__sfp_lock_acquire>
 8009f44:	6a23      	ldr	r3, [r4, #32]
 8009f46:	b11b      	cbz	r3, 8009f50 <__sinit+0x14>
 8009f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f4c:	f7ff bff0 	b.w	8009f30 <__sfp_lock_release>
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <__sinit+0x28>)
 8009f52:	6223      	str	r3, [r4, #32]
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <__sinit+0x2c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1f5      	bne.n	8009f48 <__sinit+0xc>
 8009f5c:	f7ff ffc4 	bl	8009ee8 <global_stdio_init.part.0>
 8009f60:	e7f2      	b.n	8009f48 <__sinit+0xc>
 8009f62:	bf00      	nop
 8009f64:	08009ea9 	.word	0x08009ea9
 8009f68:	200411f8 	.word	0x200411f8

08009f6c <_fwalk_sglue>:
 8009f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	4607      	mov	r7, r0
 8009f72:	4688      	mov	r8, r1
 8009f74:	4614      	mov	r4, r2
 8009f76:	2600      	movs	r6, #0
 8009f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009f80:	d505      	bpl.n	8009f8e <_fwalk_sglue+0x22>
 8009f82:	6824      	ldr	r4, [r4, #0]
 8009f84:	2c00      	cmp	r4, #0
 8009f86:	d1f7      	bne.n	8009f78 <_fwalk_sglue+0xc>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d907      	bls.n	8009fa4 <_fwalk_sglue+0x38>
 8009f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	d003      	beq.n	8009fa4 <_fwalk_sglue+0x38>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	47c0      	blx	r8
 8009fa2:	4306      	orrs	r6, r0
 8009fa4:	3568      	adds	r5, #104	; 0x68
 8009fa6:	e7e9      	b.n	8009f7c <_fwalk_sglue+0x10>

08009fa8 <iprintf>:
 8009fa8:	b40f      	push	{r0, r1, r2, r3}
 8009faa:	b507      	push	{r0, r1, r2, lr}
 8009fac:	4906      	ldr	r1, [pc, #24]	; (8009fc8 <iprintf+0x20>)
 8009fae:	ab04      	add	r3, sp, #16
 8009fb0:	6808      	ldr	r0, [r1, #0]
 8009fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb6:	6881      	ldr	r1, [r0, #8]
 8009fb8:	9301      	str	r3, [sp, #4]
 8009fba:	f000 fa63 	bl	800a484 <_vfiprintf_r>
 8009fbe:	b003      	add	sp, #12
 8009fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc4:	b004      	add	sp, #16
 8009fc6:	4770      	bx	lr
 8009fc8:	2000006c 	.word	0x2000006c

08009fcc <putchar>:
 8009fcc:	4b02      	ldr	r3, [pc, #8]	; (8009fd8 <putchar+0xc>)
 8009fce:	4601      	mov	r1, r0
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	6882      	ldr	r2, [r0, #8]
 8009fd4:	f000 be0f 	b.w	800abf6 <_putc_r>
 8009fd8:	2000006c 	.word	0x2000006c

08009fdc <_puts_r>:
 8009fdc:	6a03      	ldr	r3, [r0, #32]
 8009fde:	b570      	push	{r4, r5, r6, lr}
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	460e      	mov	r6, r1
 8009fe4:	6884      	ldr	r4, [r0, #8]
 8009fe6:	b90b      	cbnz	r3, 8009fec <_puts_r+0x10>
 8009fe8:	f7ff ffa8 	bl	8009f3c <__sinit>
 8009fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fee:	07db      	lsls	r3, r3, #31
 8009ff0:	d405      	bmi.n	8009ffe <_puts_r+0x22>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	0598      	lsls	r0, r3, #22
 8009ff6:	d402      	bmi.n	8009ffe <_puts_r+0x22>
 8009ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffa:	f000 f9be 	bl	800a37a <__retarget_lock_acquire_recursive>
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	0719      	lsls	r1, r3, #28
 800a002:	d513      	bpl.n	800a02c <_puts_r+0x50>
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	b18b      	cbz	r3, 800a02c <_puts_r+0x50>
 800a008:	3e01      	subs	r6, #1
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a010:	3b01      	subs	r3, #1
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	b9e9      	cbnz	r1, 800a052 <_puts_r+0x76>
 800a016:	2b00      	cmp	r3, #0
 800a018:	da2e      	bge.n	800a078 <_puts_r+0x9c>
 800a01a:	4622      	mov	r2, r4
 800a01c:	210a      	movs	r1, #10
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f87b 	bl	800a11a <__swbuf_r>
 800a024:	3001      	adds	r0, #1
 800a026:	d007      	beq.n	800a038 <_puts_r+0x5c>
 800a028:	250a      	movs	r5, #10
 800a02a:	e007      	b.n	800a03c <_puts_r+0x60>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 f8b0 	bl	800a194 <__swsetup_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	d0e7      	beq.n	800a008 <_puts_r+0x2c>
 800a038:	f04f 35ff 	mov.w	r5, #4294967295
 800a03c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a03e:	07da      	lsls	r2, r3, #31
 800a040:	d405      	bmi.n	800a04e <_puts_r+0x72>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	059b      	lsls	r3, r3, #22
 800a046:	d402      	bmi.n	800a04e <_puts_r+0x72>
 800a048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a04a:	f000 f997 	bl	800a37c <__retarget_lock_release_recursive>
 800a04e:	4628      	mov	r0, r5
 800a050:	bd70      	pop	{r4, r5, r6, pc}
 800a052:	2b00      	cmp	r3, #0
 800a054:	da04      	bge.n	800a060 <_puts_r+0x84>
 800a056:	69a2      	ldr	r2, [r4, #24]
 800a058:	429a      	cmp	r2, r3
 800a05a:	dc06      	bgt.n	800a06a <_puts_r+0x8e>
 800a05c:	290a      	cmp	r1, #10
 800a05e:	d004      	beq.n	800a06a <_puts_r+0x8e>
 800a060:	6823      	ldr	r3, [r4, #0]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	6022      	str	r2, [r4, #0]
 800a066:	7019      	strb	r1, [r3, #0]
 800a068:	e7cf      	b.n	800a00a <_puts_r+0x2e>
 800a06a:	4622      	mov	r2, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f000 f854 	bl	800a11a <__swbuf_r>
 800a072:	3001      	adds	r0, #1
 800a074:	d1c9      	bne.n	800a00a <_puts_r+0x2e>
 800a076:	e7df      	b.n	800a038 <_puts_r+0x5c>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	250a      	movs	r5, #10
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	701d      	strb	r5, [r3, #0]
 800a082:	e7db      	b.n	800a03c <_puts_r+0x60>

0800a084 <puts>:
 800a084:	4b02      	ldr	r3, [pc, #8]	; (800a090 <puts+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f7ff bfa7 	b.w	8009fdc <_puts_r>
 800a08e:	bf00      	nop
 800a090:	2000006c 	.word	0x2000006c

0800a094 <__sread>:
 800a094:	b510      	push	{r4, lr}
 800a096:	460c      	mov	r4, r1
 800a098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09c:	f000 f90e 	bl	800a2bc <_read_r>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	bfab      	itete	ge
 800a0a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0a8:	181b      	addge	r3, r3, r0
 800a0aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0ae:	bfac      	ite	ge
 800a0b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0b2:	81a3      	strhlt	r3, [r4, #12]
 800a0b4:	bd10      	pop	{r4, pc}

0800a0b6 <__swrite>:
 800a0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ba:	461f      	mov	r7, r3
 800a0bc:	898b      	ldrh	r3, [r1, #12]
 800a0be:	4605      	mov	r5, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	05db      	lsls	r3, r3, #23
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	d505      	bpl.n	800a0d4 <__swrite+0x1e>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d0:	f000 f8e2 	bl	800a298 <_lseek_r>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	4632      	mov	r2, r6
 800a0d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	463b      	mov	r3, r7
 800a0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	f000 b909 	b.w	800a300 <_write_r>

0800a0ee <__sseek>:
 800a0ee:	b510      	push	{r4, lr}
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f6:	f000 f8cf 	bl	800a298 <_lseek_r>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	bf15      	itete	ne
 800a100:	6560      	strne	r0, [r4, #84]	; 0x54
 800a102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a10a:	81a3      	strheq	r3, [r4, #12]
 800a10c:	bf18      	it	ne
 800a10e:	81a3      	strhne	r3, [r4, #12]
 800a110:	bd10      	pop	{r4, pc}

0800a112 <__sclose>:
 800a112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a116:	f000 b8af 	b.w	800a278 <_close_r>

0800a11a <__swbuf_r>:
 800a11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11c:	460e      	mov	r6, r1
 800a11e:	4614      	mov	r4, r2
 800a120:	4605      	mov	r5, r0
 800a122:	b118      	cbz	r0, 800a12c <__swbuf_r+0x12>
 800a124:	6a03      	ldr	r3, [r0, #32]
 800a126:	b90b      	cbnz	r3, 800a12c <__swbuf_r+0x12>
 800a128:	f7ff ff08 	bl	8009f3c <__sinit>
 800a12c:	69a3      	ldr	r3, [r4, #24]
 800a12e:	60a3      	str	r3, [r4, #8]
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	071a      	lsls	r2, r3, #28
 800a134:	d525      	bpl.n	800a182 <__swbuf_r+0x68>
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	b31b      	cbz	r3, 800a182 <__swbuf_r+0x68>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	b2f6      	uxtb	r6, r6
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	4637      	mov	r7, r6
 800a142:	1a98      	subs	r0, r3, r2
 800a144:	6963      	ldr	r3, [r4, #20]
 800a146:	4283      	cmp	r3, r0
 800a148:	dc04      	bgt.n	800a154 <__swbuf_r+0x3a>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4628      	mov	r0, r5
 800a14e:	f000 fcc9 	bl	800aae4 <_fflush_r>
 800a152:	b9e0      	cbnz	r0, 800a18e <__swbuf_r+0x74>
 800a154:	68a3      	ldr	r3, [r4, #8]
 800a156:	3b01      	subs	r3, #1
 800a158:	60a3      	str	r3, [r4, #8]
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	6022      	str	r2, [r4, #0]
 800a160:	701e      	strb	r6, [r3, #0]
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	6962      	ldr	r2, [r4, #20]
 800a166:	429a      	cmp	r2, r3
 800a168:	d004      	beq.n	800a174 <__swbuf_r+0x5a>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	07db      	lsls	r3, r3, #31
 800a16e:	d506      	bpl.n	800a17e <__swbuf_r+0x64>
 800a170:	2e0a      	cmp	r6, #10
 800a172:	d104      	bne.n	800a17e <__swbuf_r+0x64>
 800a174:	4621      	mov	r1, r4
 800a176:	4628      	mov	r0, r5
 800a178:	f000 fcb4 	bl	800aae4 <_fflush_r>
 800a17c:	b938      	cbnz	r0, 800a18e <__swbuf_r+0x74>
 800a17e:	4638      	mov	r0, r7
 800a180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a182:	4621      	mov	r1, r4
 800a184:	4628      	mov	r0, r5
 800a186:	f000 f805 	bl	800a194 <__swsetup_r>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0d5      	beq.n	800a13a <__swbuf_r+0x20>
 800a18e:	f04f 37ff 	mov.w	r7, #4294967295
 800a192:	e7f4      	b.n	800a17e <__swbuf_r+0x64>

0800a194 <__swsetup_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4b2a      	ldr	r3, [pc, #168]	; (800a240 <__swsetup_r+0xac>)
 800a198:	4605      	mov	r5, r0
 800a19a:	460c      	mov	r4, r1
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	b118      	cbz	r0, 800a1a8 <__swsetup_r+0x14>
 800a1a0:	6a03      	ldr	r3, [r0, #32]
 800a1a2:	b90b      	cbnz	r3, 800a1a8 <__swsetup_r+0x14>
 800a1a4:	f7ff feca 	bl	8009f3c <__sinit>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ae:	0718      	lsls	r0, r3, #28
 800a1b0:	d422      	bmi.n	800a1f8 <__swsetup_r+0x64>
 800a1b2:	06d9      	lsls	r1, r3, #27
 800a1b4:	d407      	bmi.n	800a1c6 <__swsetup_r+0x32>
 800a1b6:	2309      	movs	r3, #9
 800a1b8:	602b      	str	r3, [r5, #0]
 800a1ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1be:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c2:	81a3      	strh	r3, [r4, #12]
 800a1c4:	e034      	b.n	800a230 <__swsetup_r+0x9c>
 800a1c6:	0758      	lsls	r0, r3, #29
 800a1c8:	d512      	bpl.n	800a1f0 <__swsetup_r+0x5c>
 800a1ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1cc:	b141      	cbz	r1, 800a1e0 <__swsetup_r+0x4c>
 800a1ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	d002      	beq.n	800a1dc <__swsetup_r+0x48>
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 f8de 	bl	800a398 <_free_r>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	6363      	str	r3, [r4, #52]	; 0x34
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1e6:	81a3      	strh	r3, [r4, #12]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	6063      	str	r3, [r4, #4]
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f043 0308 	orr.w	r3, r3, #8
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	b94b      	cbnz	r3, 800a210 <__swsetup_r+0x7c>
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a206:	d003      	beq.n	800a210 <__swsetup_r+0x7c>
 800a208:	4621      	mov	r1, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	f000 fcb7 	bl	800ab7e <__smakebuf_r>
 800a210:	89a0      	ldrh	r0, [r4, #12]
 800a212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a216:	f010 0301 	ands.w	r3, r0, #1
 800a21a:	d00a      	beq.n	800a232 <__swsetup_r+0x9e>
 800a21c:	2300      	movs	r3, #0
 800a21e:	60a3      	str	r3, [r4, #8]
 800a220:	6963      	ldr	r3, [r4, #20]
 800a222:	425b      	negs	r3, r3
 800a224:	61a3      	str	r3, [r4, #24]
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	b943      	cbnz	r3, 800a23c <__swsetup_r+0xa8>
 800a22a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a22e:	d1c4      	bne.n	800a1ba <__swsetup_r+0x26>
 800a230:	bd38      	pop	{r3, r4, r5, pc}
 800a232:	0781      	lsls	r1, r0, #30
 800a234:	bf58      	it	pl
 800a236:	6963      	ldrpl	r3, [r4, #20]
 800a238:	60a3      	str	r3, [r4, #8]
 800a23a:	e7f4      	b.n	800a226 <__swsetup_r+0x92>
 800a23c:	2000      	movs	r0, #0
 800a23e:	e7f7      	b.n	800a230 <__swsetup_r+0x9c>
 800a240:	2000006c 	.word	0x2000006c

0800a244 <memset>:
 800a244:	4402      	add	r2, r0
 800a246:	4603      	mov	r3, r0
 800a248:	4293      	cmp	r3, r2
 800a24a:	d100      	bne.n	800a24e <memset+0xa>
 800a24c:	4770      	bx	lr
 800a24e:	f803 1b01 	strb.w	r1, [r3], #1
 800a252:	e7f9      	b.n	800a248 <memset+0x4>

0800a254 <strncmp>:
 800a254:	b510      	push	{r4, lr}
 800a256:	b16a      	cbz	r2, 800a274 <strncmp+0x20>
 800a258:	3901      	subs	r1, #1
 800a25a:	1884      	adds	r4, r0, r2
 800a25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a260:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a264:	429a      	cmp	r2, r3
 800a266:	d103      	bne.n	800a270 <strncmp+0x1c>
 800a268:	42a0      	cmp	r0, r4
 800a26a:	d001      	beq.n	800a270 <strncmp+0x1c>
 800a26c:	2a00      	cmp	r2, #0
 800a26e:	d1f5      	bne.n	800a25c <strncmp+0x8>
 800a270:	1ad0      	subs	r0, r2, r3
 800a272:	bd10      	pop	{r4, pc}
 800a274:	4610      	mov	r0, r2
 800a276:	e7fc      	b.n	800a272 <strncmp+0x1e>

0800a278 <_close_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	2300      	movs	r3, #0
 800a27c:	4d05      	ldr	r5, [pc, #20]	; (800a294 <_close_r+0x1c>)
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	f7f7 f8d5 	bl	8001432 <_close>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_close_r+0x1a>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_close_r+0x1a>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	200411fc 	.word	0x200411fc

0800a298 <_lseek_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4604      	mov	r4, r0
 800a29c:	4d06      	ldr	r5, [pc, #24]	; (800a2b8 <_lseek_r+0x20>)
 800a29e:	4608      	mov	r0, r1
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	602a      	str	r2, [r5, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f7f7 f8ea 	bl	8001480 <_lseek>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_lseek_r+0x1e>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_lseek_r+0x1e>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	200411fc 	.word	0x200411fc

0800a2bc <_read_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4d06      	ldr	r5, [pc, #24]	; (800a2dc <_read_r+0x20>)
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	602a      	str	r2, [r5, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f7f7 f878 	bl	80013c0 <_read>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_read_r+0x1e>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_read_r+0x1e>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	200411fc 	.word	0x200411fc

0800a2e0 <_sbrk_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4d05      	ldr	r5, [pc, #20]	; (800a2fc <_sbrk_r+0x1c>)
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	f7f7 f8d6 	bl	800149c <_sbrk>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_sbrk_r+0x1a>
 800a2f4:	682b      	ldr	r3, [r5, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_sbrk_r+0x1a>
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	200411fc 	.word	0x200411fc

0800a300 <_write_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	4604      	mov	r4, r0
 800a304:	4d06      	ldr	r5, [pc, #24]	; (800a320 <_write_r+0x20>)
 800a306:	4608      	mov	r0, r1
 800a308:	4611      	mov	r1, r2
 800a30a:	2200      	movs	r2, #0
 800a30c:	602a      	str	r2, [r5, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	f7f7 f873 	bl	80013fa <_write>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_write_r+0x1e>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_write_r+0x1e>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	200411fc 	.word	0x200411fc

0800a324 <__errno>:
 800a324:	4b01      	ldr	r3, [pc, #4]	; (800a32c <__errno+0x8>)
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	2000006c 	.word	0x2000006c

0800a330 <__libc_init_array>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	4d0d      	ldr	r5, [pc, #52]	; (800a368 <__libc_init_array+0x38>)
 800a334:	2600      	movs	r6, #0
 800a336:	4c0d      	ldr	r4, [pc, #52]	; (800a36c <__libc_init_array+0x3c>)
 800a338:	1b64      	subs	r4, r4, r5
 800a33a:	10a4      	asrs	r4, r4, #2
 800a33c:	42a6      	cmp	r6, r4
 800a33e:	d109      	bne.n	800a354 <__libc_init_array+0x24>
 800a340:	4d0b      	ldr	r5, [pc, #44]	; (800a370 <__libc_init_array+0x40>)
 800a342:	2600      	movs	r6, #0
 800a344:	4c0b      	ldr	r4, [pc, #44]	; (800a374 <__libc_init_array+0x44>)
 800a346:	f000 fcbb 	bl	800acc0 <_init>
 800a34a:	1b64      	subs	r4, r4, r5
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	42a6      	cmp	r6, r4
 800a350:	d105      	bne.n	800a35e <__libc_init_array+0x2e>
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	f855 3b04 	ldr.w	r3, [r5], #4
 800a358:	3601      	adds	r6, #1
 800a35a:	4798      	blx	r3
 800a35c:	e7ee      	b.n	800a33c <__libc_init_array+0xc>
 800a35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a362:	3601      	adds	r6, #1
 800a364:	4798      	blx	r3
 800a366:	e7f2      	b.n	800a34e <__libc_init_array+0x1e>
 800a368:	0800af7c 	.word	0x0800af7c
 800a36c:	0800af7c 	.word	0x0800af7c
 800a370:	0800af7c 	.word	0x0800af7c
 800a374:	0800af80 	.word	0x0800af80

0800a378 <__retarget_lock_init_recursive>:
 800a378:	4770      	bx	lr

0800a37a <__retarget_lock_acquire_recursive>:
 800a37a:	4770      	bx	lr

0800a37c <__retarget_lock_release_recursive>:
 800a37c:	4770      	bx	lr

0800a37e <memcpy>:
 800a37e:	440a      	add	r2, r1
 800a380:	1e43      	subs	r3, r0, #1
 800a382:	4291      	cmp	r1, r2
 800a384:	d100      	bne.n	800a388 <memcpy+0xa>
 800a386:	4770      	bx	lr
 800a388:	b510      	push	{r4, lr}
 800a38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38e:	4291      	cmp	r1, r2
 800a390:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a394:	d1f9      	bne.n	800a38a <memcpy+0xc>
 800a396:	bd10      	pop	{r4, pc}

0800a398 <_free_r>:
 800a398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a39a:	2900      	cmp	r1, #0
 800a39c:	d043      	beq.n	800a426 <_free_r+0x8e>
 800a39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a2:	1f0c      	subs	r4, r1, #4
 800a3a4:	9001      	str	r0, [sp, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfb8      	it	lt
 800a3aa:	18e4      	addlt	r4, r4, r3
 800a3ac:	f7ff fd2e 	bl	8009e0c <__malloc_lock>
 800a3b0:	4a1e      	ldr	r2, [pc, #120]	; (800a42c <_free_r+0x94>)
 800a3b2:	9801      	ldr	r0, [sp, #4]
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	b933      	cbnz	r3, 800a3c6 <_free_r+0x2e>
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	6014      	str	r4, [r2, #0]
 800a3bc:	b003      	add	sp, #12
 800a3be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3c2:	f7ff bd29 	b.w	8009e18 <__malloc_unlock>
 800a3c6:	42a3      	cmp	r3, r4
 800a3c8:	d908      	bls.n	800a3dc <_free_r+0x44>
 800a3ca:	6825      	ldr	r5, [r4, #0]
 800a3cc:	1961      	adds	r1, r4, r5
 800a3ce:	428b      	cmp	r3, r1
 800a3d0:	bf01      	itttt	eq
 800a3d2:	6819      	ldreq	r1, [r3, #0]
 800a3d4:	685b      	ldreq	r3, [r3, #4]
 800a3d6:	1949      	addeq	r1, r1, r5
 800a3d8:	6021      	streq	r1, [r4, #0]
 800a3da:	e7ed      	b.n	800a3b8 <_free_r+0x20>
 800a3dc:	461a      	mov	r2, r3
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	b10b      	cbz	r3, 800a3e6 <_free_r+0x4e>
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	d9fa      	bls.n	800a3dc <_free_r+0x44>
 800a3e6:	6811      	ldr	r1, [r2, #0]
 800a3e8:	1855      	adds	r5, r2, r1
 800a3ea:	42a5      	cmp	r5, r4
 800a3ec:	d10b      	bne.n	800a406 <_free_r+0x6e>
 800a3ee:	6824      	ldr	r4, [r4, #0]
 800a3f0:	4421      	add	r1, r4
 800a3f2:	1854      	adds	r4, r2, r1
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	d1e0      	bne.n	800a3bc <_free_r+0x24>
 800a3fa:	681c      	ldr	r4, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	440c      	add	r4, r1
 800a400:	6053      	str	r3, [r2, #4]
 800a402:	6014      	str	r4, [r2, #0]
 800a404:	e7da      	b.n	800a3bc <_free_r+0x24>
 800a406:	d902      	bls.n	800a40e <_free_r+0x76>
 800a408:	230c      	movs	r3, #12
 800a40a:	6003      	str	r3, [r0, #0]
 800a40c:	e7d6      	b.n	800a3bc <_free_r+0x24>
 800a40e:	6825      	ldr	r5, [r4, #0]
 800a410:	1961      	adds	r1, r4, r5
 800a412:	428b      	cmp	r3, r1
 800a414:	bf02      	ittt	eq
 800a416:	6819      	ldreq	r1, [r3, #0]
 800a418:	685b      	ldreq	r3, [r3, #4]
 800a41a:	1949      	addeq	r1, r1, r5
 800a41c:	6063      	str	r3, [r4, #4]
 800a41e:	bf08      	it	eq
 800a420:	6021      	streq	r1, [r4, #0]
 800a422:	6054      	str	r4, [r2, #4]
 800a424:	e7ca      	b.n	800a3bc <_free_r+0x24>
 800a426:	b003      	add	sp, #12
 800a428:	bd30      	pop	{r4, r5, pc}
 800a42a:	bf00      	nop
 800a42c:	200410b8 	.word	0x200410b8

0800a430 <__sfputc_r>:
 800a430:	6893      	ldr	r3, [r2, #8]
 800a432:	3b01      	subs	r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	6093      	str	r3, [r2, #8]
 800a438:	b410      	push	{r4}
 800a43a:	da08      	bge.n	800a44e <__sfputc_r+0x1e>
 800a43c:	6994      	ldr	r4, [r2, #24]
 800a43e:	42a3      	cmp	r3, r4
 800a440:	db01      	blt.n	800a446 <__sfputc_r+0x16>
 800a442:	290a      	cmp	r1, #10
 800a444:	d103      	bne.n	800a44e <__sfputc_r+0x1e>
 800a446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a44a:	f7ff be66 	b.w	800a11a <__swbuf_r>
 800a44e:	6813      	ldr	r3, [r2, #0]
 800a450:	1c58      	adds	r0, r3, #1
 800a452:	6010      	str	r0, [r2, #0]
 800a454:	4608      	mov	r0, r1
 800a456:	7019      	strb	r1, [r3, #0]
 800a458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <__sfputs_r>:
 800a45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	4614      	mov	r4, r2
 800a466:	18d5      	adds	r5, r2, r3
 800a468:	42ac      	cmp	r4, r5
 800a46a:	d101      	bne.n	800a470 <__sfputs_r+0x12>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e007      	b.n	800a480 <__sfputs_r+0x22>
 800a470:	463a      	mov	r2, r7
 800a472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ffda 	bl	800a430 <__sfputc_r>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d1f3      	bne.n	800a468 <__sfputs_r+0xa>
 800a480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a484 <_vfiprintf_r>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	460d      	mov	r5, r1
 800a48a:	b09d      	sub	sp, #116	; 0x74
 800a48c:	4614      	mov	r4, r2
 800a48e:	4698      	mov	r8, r3
 800a490:	4606      	mov	r6, r0
 800a492:	b118      	cbz	r0, 800a49c <_vfiprintf_r+0x18>
 800a494:	6a03      	ldr	r3, [r0, #32]
 800a496:	b90b      	cbnz	r3, 800a49c <_vfiprintf_r+0x18>
 800a498:	f7ff fd50 	bl	8009f3c <__sinit>
 800a49c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a49e:	07d9      	lsls	r1, r3, #31
 800a4a0:	d405      	bmi.n	800a4ae <_vfiprintf_r+0x2a>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	059a      	lsls	r2, r3, #22
 800a4a6:	d402      	bmi.n	800a4ae <_vfiprintf_r+0x2a>
 800a4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4aa:	f7ff ff66 	bl	800a37a <__retarget_lock_acquire_recursive>
 800a4ae:	89ab      	ldrh	r3, [r5, #12]
 800a4b0:	071b      	lsls	r3, r3, #28
 800a4b2:	d501      	bpl.n	800a4b8 <_vfiprintf_r+0x34>
 800a4b4:	692b      	ldr	r3, [r5, #16]
 800a4b6:	b99b      	cbnz	r3, 800a4e0 <_vfiprintf_r+0x5c>
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7ff fe6a 	bl	800a194 <__swsetup_r>
 800a4c0:	b170      	cbz	r0, 800a4e0 <_vfiprintf_r+0x5c>
 800a4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4c4:	07dc      	lsls	r4, r3, #31
 800a4c6:	d504      	bpl.n	800a4d2 <_vfiprintf_r+0x4e>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	b01d      	add	sp, #116	; 0x74
 800a4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d2:	89ab      	ldrh	r3, [r5, #12]
 800a4d4:	0598      	lsls	r0, r3, #22
 800a4d6:	d4f7      	bmi.n	800a4c8 <_vfiprintf_r+0x44>
 800a4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4da:	f7ff ff4f 	bl	800a37c <__retarget_lock_release_recursive>
 800a4de:	e7f3      	b.n	800a4c8 <_vfiprintf_r+0x44>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e6:	f04f 0901 	mov.w	r9, #1
 800a4ea:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a6a4 <_vfiprintf_r+0x220>
 800a4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f6:	2330      	movs	r3, #48	; 0x30
 800a4f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4fc:	4623      	mov	r3, r4
 800a4fe:	469a      	mov	sl, r3
 800a500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a504:	b10a      	cbz	r2, 800a50a <_vfiprintf_r+0x86>
 800a506:	2a25      	cmp	r2, #37	; 0x25
 800a508:	d1f9      	bne.n	800a4fe <_vfiprintf_r+0x7a>
 800a50a:	ebba 0b04 	subs.w	fp, sl, r4
 800a50e:	d00b      	beq.n	800a528 <_vfiprintf_r+0xa4>
 800a510:	465b      	mov	r3, fp
 800a512:	4622      	mov	r2, r4
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ffa1 	bl	800a45e <__sfputs_r>
 800a51c:	3001      	adds	r0, #1
 800a51e:	f000 80a9 	beq.w	800a674 <_vfiprintf_r+0x1f0>
 800a522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a524:	445a      	add	r2, fp
 800a526:	9209      	str	r2, [sp, #36]	; 0x24
 800a528:	f89a 3000 	ldrb.w	r3, [sl]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80a1 	beq.w	800a674 <_vfiprintf_r+0x1f0>
 800a532:	2300      	movs	r3, #0
 800a534:	f04f 32ff 	mov.w	r2, #4294967295
 800a538:	f10a 0a01 	add.w	sl, sl, #1
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a544:	931a      	str	r3, [sp, #104]	; 0x68
 800a546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a54a:	4654      	mov	r4, sl
 800a54c:	2205      	movs	r2, #5
 800a54e:	4855      	ldr	r0, [pc, #340]	; (800a6a4 <_vfiprintf_r+0x220>)
 800a550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a554:	f000 fba6 	bl	800aca4 <memchr>
 800a558:	9a04      	ldr	r2, [sp, #16]
 800a55a:	b9d8      	cbnz	r0, 800a594 <_vfiprintf_r+0x110>
 800a55c:	06d1      	lsls	r1, r2, #27
 800a55e:	bf44      	itt	mi
 800a560:	2320      	movmi	r3, #32
 800a562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a566:	0713      	lsls	r3, r2, #28
 800a568:	bf44      	itt	mi
 800a56a:	232b      	movmi	r3, #43	; 0x2b
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a570:	f89a 3000 	ldrb.w	r3, [sl]
 800a574:	2b2a      	cmp	r3, #42	; 0x2a
 800a576:	d015      	beq.n	800a5a4 <_vfiprintf_r+0x120>
 800a578:	9a07      	ldr	r2, [sp, #28]
 800a57a:	4654      	mov	r4, sl
 800a57c:	2000      	movs	r0, #0
 800a57e:	f04f 0c0a 	mov.w	ip, #10
 800a582:	4621      	mov	r1, r4
 800a584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a588:	3b30      	subs	r3, #48	; 0x30
 800a58a:	2b09      	cmp	r3, #9
 800a58c:	d94d      	bls.n	800a62a <_vfiprintf_r+0x1a6>
 800a58e:	b1b0      	cbz	r0, 800a5be <_vfiprintf_r+0x13a>
 800a590:	9207      	str	r2, [sp, #28]
 800a592:	e014      	b.n	800a5be <_vfiprintf_r+0x13a>
 800a594:	eba0 0308 	sub.w	r3, r0, r8
 800a598:	46a2      	mov	sl, r4
 800a59a:	fa09 f303 	lsl.w	r3, r9, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	e7d2      	b.n	800a54a <_vfiprintf_r+0xc6>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	1d19      	adds	r1, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	9103      	str	r1, [sp, #12]
 800a5ae:	bfbb      	ittet	lt
 800a5b0:	425b      	neglt	r3, r3
 800a5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b6:	9307      	strge	r3, [sp, #28]
 800a5b8:	9307      	strlt	r3, [sp, #28]
 800a5ba:	bfb8      	it	lt
 800a5bc:	9204      	strlt	r2, [sp, #16]
 800a5be:	7823      	ldrb	r3, [r4, #0]
 800a5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a5c2:	d10c      	bne.n	800a5de <_vfiprintf_r+0x15a>
 800a5c4:	7863      	ldrb	r3, [r4, #1]
 800a5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c8:	d134      	bne.n	800a634 <_vfiprintf_r+0x1b0>
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	3402      	adds	r4, #2
 800a5ce:	1d1a      	adds	r2, r3, #4
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	9203      	str	r2, [sp, #12]
 800a5d6:	bfb8      	it	lt
 800a5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5dc:	9305      	str	r3, [sp, #20]
 800a5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a6b4 <_vfiprintf_r+0x230>
 800a5e2:	2203      	movs	r2, #3
 800a5e4:	7821      	ldrb	r1, [r4, #0]
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	f000 fb5c 	bl	800aca4 <memchr>
 800a5ec:	b138      	cbz	r0, 800a5fe <_vfiprintf_r+0x17a>
 800a5ee:	eba0 000a 	sub.w	r0, r0, sl
 800a5f2:	2240      	movs	r2, #64	; 0x40
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	3401      	adds	r4, #1
 800a5f8:	4082      	lsls	r2, r0
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a602:	2206      	movs	r2, #6
 800a604:	4828      	ldr	r0, [pc, #160]	; (800a6a8 <_vfiprintf_r+0x224>)
 800a606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a60a:	f000 fb4b 	bl	800aca4 <memchr>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d03f      	beq.n	800a692 <_vfiprintf_r+0x20e>
 800a612:	4b26      	ldr	r3, [pc, #152]	; (800a6ac <_vfiprintf_r+0x228>)
 800a614:	bb1b      	cbnz	r3, 800a65e <_vfiprintf_r+0x1da>
 800a616:	9b03      	ldr	r3, [sp, #12]
 800a618:	3307      	adds	r3, #7
 800a61a:	f023 0307 	bic.w	r3, r3, #7
 800a61e:	3308      	adds	r3, #8
 800a620:	9303      	str	r3, [sp, #12]
 800a622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a624:	443b      	add	r3, r7
 800a626:	9309      	str	r3, [sp, #36]	; 0x24
 800a628:	e768      	b.n	800a4fc <_vfiprintf_r+0x78>
 800a62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a62e:	460c      	mov	r4, r1
 800a630:	2001      	movs	r0, #1
 800a632:	e7a6      	b.n	800a582 <_vfiprintf_r+0xfe>
 800a634:	2300      	movs	r3, #0
 800a636:	3401      	adds	r4, #1
 800a638:	f04f 0c0a 	mov.w	ip, #10
 800a63c:	4619      	mov	r1, r3
 800a63e:	9305      	str	r3, [sp, #20]
 800a640:	4620      	mov	r0, r4
 800a642:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a646:	3a30      	subs	r2, #48	; 0x30
 800a648:	2a09      	cmp	r2, #9
 800a64a:	d903      	bls.n	800a654 <_vfiprintf_r+0x1d0>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0c6      	beq.n	800a5de <_vfiprintf_r+0x15a>
 800a650:	9105      	str	r1, [sp, #20]
 800a652:	e7c4      	b.n	800a5de <_vfiprintf_r+0x15a>
 800a654:	fb0c 2101 	mla	r1, ip, r1, r2
 800a658:	4604      	mov	r4, r0
 800a65a:	2301      	movs	r3, #1
 800a65c:	e7f0      	b.n	800a640 <_vfiprintf_r+0x1bc>
 800a65e:	ab03      	add	r3, sp, #12
 800a660:	462a      	mov	r2, r5
 800a662:	a904      	add	r1, sp, #16
 800a664:	4630      	mov	r0, r6
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	4b11      	ldr	r3, [pc, #68]	; (800a6b0 <_vfiprintf_r+0x22c>)
 800a66a:	f3af 8000 	nop.w
 800a66e:	4607      	mov	r7, r0
 800a670:	1c78      	adds	r0, r7, #1
 800a672:	d1d6      	bne.n	800a622 <_vfiprintf_r+0x19e>
 800a674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	d405      	bmi.n	800a686 <_vfiprintf_r+0x202>
 800a67a:	89ab      	ldrh	r3, [r5, #12]
 800a67c:	059a      	lsls	r2, r3, #22
 800a67e:	d402      	bmi.n	800a686 <_vfiprintf_r+0x202>
 800a680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a682:	f7ff fe7b 	bl	800a37c <__retarget_lock_release_recursive>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	065b      	lsls	r3, r3, #25
 800a68a:	f53f af1d 	bmi.w	800a4c8 <_vfiprintf_r+0x44>
 800a68e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a690:	e71c      	b.n	800a4cc <_vfiprintf_r+0x48>
 800a692:	ab03      	add	r3, sp, #12
 800a694:	462a      	mov	r2, r5
 800a696:	a904      	add	r1, sp, #16
 800a698:	4630      	mov	r0, r6
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <_vfiprintf_r+0x22c>)
 800a69e:	f000 f87d 	bl	800a79c <_printf_i>
 800a6a2:	e7e4      	b.n	800a66e <_vfiprintf_r+0x1ea>
 800a6a4:	0800af40 	.word	0x0800af40
 800a6a8:	0800af4a 	.word	0x0800af4a
 800a6ac:	00000000 	.word	0x00000000
 800a6b0:	0800a45f 	.word	0x0800a45f
 800a6b4:	0800af46 	.word	0x0800af46

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4699      	mov	r9, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	690b      	ldr	r3, [r1, #16]
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	bfb8      	it	lt
 800a6d0:	4613      	movlt	r3, r2
 800a6d2:	6033      	str	r3, [r6, #0]
 800a6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc2b      	bgt.n	800a758 <_printf_common+0xa0>
 800a700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a704:	1e13      	subs	r3, r2, #0
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d430      	bmi.n	800a772 <_printf_common+0xba>
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d023      	beq.n	800a766 <_printf_common+0xae>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	341a      	adds	r4, #26
 800a722:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a726:	f003 0306 	and.w	r3, r3, #6
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	bf0a      	itet	eq
 800a72e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a732:	2500      	movne	r5, #0
 800a734:	6833      	ldreq	r3, [r6, #0]
 800a736:	f04f 0600 	mov.w	r6, #0
 800a73a:	bf08      	it	eq
 800a73c:	1aed      	subeq	r5, r5, r3
 800a73e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a742:	bf08      	it	eq
 800a744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a748:	4293      	cmp	r3, r2
 800a74a:	bfc4      	itt	gt
 800a74c:	1a9b      	subgt	r3, r3, r2
 800a74e:	18ed      	addgt	r5, r5, r3
 800a750:	42b5      	cmp	r5, r6
 800a752:	d11a      	bne.n	800a78a <_printf_common+0xd2>
 800a754:	2000      	movs	r0, #0
 800a756:	e008      	b.n	800a76a <_printf_common+0xb2>
 800a758:	2301      	movs	r3, #1
 800a75a:	4652      	mov	r2, sl
 800a75c:	4649      	mov	r1, r9
 800a75e:	4638      	mov	r0, r7
 800a760:	47c0      	blx	r8
 800a762:	3001      	adds	r0, #1
 800a764:	d103      	bne.n	800a76e <_printf_common+0xb6>
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76e:	3501      	adds	r5, #1
 800a770:	e7c1      	b.n	800a6f6 <_printf_common+0x3e>
 800a772:	18e1      	adds	r1, r4, r3
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	2030      	movs	r0, #48	; 0x30
 800a778:	3302      	adds	r3, #2
 800a77a:	4422      	add	r2, r4
 800a77c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a788:	e7c2      	b.n	800a710 <_printf_common+0x58>
 800a78a:	2301      	movs	r3, #1
 800a78c:	4622      	mov	r2, r4
 800a78e:	4649      	mov	r1, r9
 800a790:	4638      	mov	r0, r7
 800a792:	47c0      	blx	r8
 800a794:	3001      	adds	r0, #1
 800a796:	d0e6      	beq.n	800a766 <_printf_common+0xae>
 800a798:	3601      	adds	r6, #1
 800a79a:	e7d9      	b.n	800a750 <_printf_common+0x98>

0800a79c <_printf_i>:
 800a79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	7e0f      	ldrb	r7, [r1, #24]
 800a7a2:	4691      	mov	r9, r2
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	2f78      	cmp	r7, #120	; 0x78
 800a7aa:	469a      	mov	sl, r3
 800a7ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7b2:	d807      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7b4:	2f62      	cmp	r7, #98	; 0x62
 800a7b6:	d80a      	bhi.n	800a7ce <_printf_i+0x32>
 800a7b8:	2f00      	cmp	r7, #0
 800a7ba:	f000 80d3 	beq.w	800a964 <_printf_i+0x1c8>
 800a7be:	2f58      	cmp	r7, #88	; 0x58
 800a7c0:	f000 80bf 	beq.w	800a942 <_printf_i+0x1a6>
 800a7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7cc:	e03a      	b.n	800a844 <_printf_i+0xa8>
 800a7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7d2:	2b15      	cmp	r3, #21
 800a7d4:	d8f6      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7d6:	a101      	add	r1, pc, #4	; (adr r1, 800a7dc <_printf_i+0x40>)
 800a7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a7c5 	.word	0x0800a7c5
 800a7e8:	0800a7c5 	.word	0x0800a7c5
 800a7ec:	0800a7c5 	.word	0x0800a7c5
 800a7f0:	0800a7c5 	.word	0x0800a7c5
 800a7f4:	0800a849 	.word	0x0800a849
 800a7f8:	0800a7c5 	.word	0x0800a7c5
 800a7fc:	0800a7c5 	.word	0x0800a7c5
 800a800:	0800a7c5 	.word	0x0800a7c5
 800a804:	0800a7c5 	.word	0x0800a7c5
 800a808:	0800a94b 	.word	0x0800a94b
 800a80c:	0800a875 	.word	0x0800a875
 800a810:	0800a907 	.word	0x0800a907
 800a814:	0800a7c5 	.word	0x0800a7c5
 800a818:	0800a7c5 	.word	0x0800a7c5
 800a81c:	0800a96d 	.word	0x0800a96d
 800a820:	0800a7c5 	.word	0x0800a7c5
 800a824:	0800a875 	.word	0x0800a875
 800a828:	0800a7c5 	.word	0x0800a7c5
 800a82c:	0800a7c5 	.word	0x0800a7c5
 800a830:	0800a90f 	.word	0x0800a90f
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	1d1a      	adds	r2, r3, #4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	602a      	str	r2, [r5, #0]
 800a83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a844:	2301      	movs	r3, #1
 800a846:	e09e      	b.n	800a986 <_printf_i+0x1ea>
 800a848:	6820      	ldr	r0, [r4, #0]
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	0607      	lsls	r7, r0, #24
 800a84e:	f103 0104 	add.w	r1, r3, #4
 800a852:	6029      	str	r1, [r5, #0]
 800a854:	d501      	bpl.n	800a85a <_printf_i+0xbe>
 800a856:	681e      	ldr	r6, [r3, #0]
 800a858:	e003      	b.n	800a862 <_printf_i+0xc6>
 800a85a:	0646      	lsls	r6, r0, #25
 800a85c:	d5fb      	bpl.n	800a856 <_printf_i+0xba>
 800a85e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a862:	2e00      	cmp	r6, #0
 800a864:	da03      	bge.n	800a86e <_printf_i+0xd2>
 800a866:	232d      	movs	r3, #45	; 0x2d
 800a868:	4276      	negs	r6, r6
 800a86a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a86e:	4859      	ldr	r0, [pc, #356]	; (800a9d4 <_printf_i+0x238>)
 800a870:	230a      	movs	r3, #10
 800a872:	e012      	b.n	800a89a <_printf_i+0xfe>
 800a874:	682b      	ldr	r3, [r5, #0]
 800a876:	6820      	ldr	r0, [r4, #0]
 800a878:	1d19      	adds	r1, r3, #4
 800a87a:	6029      	str	r1, [r5, #0]
 800a87c:	0605      	lsls	r5, r0, #24
 800a87e:	d501      	bpl.n	800a884 <_printf_i+0xe8>
 800a880:	681e      	ldr	r6, [r3, #0]
 800a882:	e002      	b.n	800a88a <_printf_i+0xee>
 800a884:	0641      	lsls	r1, r0, #25
 800a886:	d5fb      	bpl.n	800a880 <_printf_i+0xe4>
 800a888:	881e      	ldrh	r6, [r3, #0]
 800a88a:	2f6f      	cmp	r7, #111	; 0x6f
 800a88c:	4851      	ldr	r0, [pc, #324]	; (800a9d4 <_printf_i+0x238>)
 800a88e:	bf0c      	ite	eq
 800a890:	2308      	moveq	r3, #8
 800a892:	230a      	movne	r3, #10
 800a894:	2100      	movs	r1, #0
 800a896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a89a:	6865      	ldr	r5, [r4, #4]
 800a89c:	2d00      	cmp	r5, #0
 800a89e:	60a5      	str	r5, [r4, #8]
 800a8a0:	bfa2      	ittt	ge
 800a8a2:	6821      	ldrge	r1, [r4, #0]
 800a8a4:	f021 0104 	bicge.w	r1, r1, #4
 800a8a8:	6021      	strge	r1, [r4, #0]
 800a8aa:	b90e      	cbnz	r6, 800a8b0 <_printf_i+0x114>
 800a8ac:	2d00      	cmp	r5, #0
 800a8ae:	d04a      	beq.n	800a946 <_printf_i+0x1aa>
 800a8b0:	4615      	mov	r5, r2
 800a8b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8b6:	fb03 6711 	mls	r7, r3, r1, r6
 800a8ba:	5dc7      	ldrb	r7, [r0, r7]
 800a8bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8c0:	4637      	mov	r7, r6
 800a8c2:	460e      	mov	r6, r1
 800a8c4:	42bb      	cmp	r3, r7
 800a8c6:	d9f4      	bls.n	800a8b2 <_printf_i+0x116>
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	d10b      	bne.n	800a8e4 <_printf_i+0x148>
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	07de      	lsls	r6, r3, #31
 800a8d0:	d508      	bpl.n	800a8e4 <_printf_i+0x148>
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	6861      	ldr	r1, [r4, #4]
 800a8d6:	4299      	cmp	r1, r3
 800a8d8:	bfde      	ittt	le
 800a8da:	2330      	movle	r3, #48	; 0x30
 800a8dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8e4:	1b52      	subs	r2, r2, r5
 800a8e6:	6122      	str	r2, [r4, #16]
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	aa03      	add	r2, sp, #12
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f8cd a000 	str.w	sl, [sp]
 800a8f4:	f7ff fee0 	bl	800a6b8 <_printf_common>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d149      	bne.n	800a990 <_printf_i+0x1f4>
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	b004      	add	sp, #16
 800a902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	f043 0320 	orr.w	r3, r3, #32
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	2778      	movs	r7, #120	; 0x78
 800a910:	4831      	ldr	r0, [pc, #196]	; (800a9d8 <_printf_i+0x23c>)
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a918:	061f      	lsls	r7, r3, #24
 800a91a:	6829      	ldr	r1, [r5, #0]
 800a91c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a920:	d402      	bmi.n	800a928 <_printf_i+0x18c>
 800a922:	065f      	lsls	r7, r3, #25
 800a924:	bf48      	it	mi
 800a926:	b2b6      	uxthmi	r6, r6
 800a928:	07df      	lsls	r7, r3, #31
 800a92a:	6029      	str	r1, [r5, #0]
 800a92c:	bf44      	itt	mi
 800a92e:	f043 0320 	orrmi.w	r3, r3, #32
 800a932:	6023      	strmi	r3, [r4, #0]
 800a934:	b91e      	cbnz	r6, 800a93e <_printf_i+0x1a2>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	f023 0320 	bic.w	r3, r3, #32
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	2310      	movs	r3, #16
 800a940:	e7a8      	b.n	800a894 <_printf_i+0xf8>
 800a942:	4824      	ldr	r0, [pc, #144]	; (800a9d4 <_printf_i+0x238>)
 800a944:	e7e5      	b.n	800a912 <_printf_i+0x176>
 800a946:	4615      	mov	r5, r2
 800a948:	e7be      	b.n	800a8c8 <_printf_i+0x12c>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	6826      	ldr	r6, [r4, #0]
 800a94e:	1d18      	adds	r0, r3, #4
 800a950:	6961      	ldr	r1, [r4, #20]
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	0635      	lsls	r5, r6, #24
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	d501      	bpl.n	800a95e <_printf_i+0x1c2>
 800a95a:	6019      	str	r1, [r3, #0]
 800a95c:	e002      	b.n	800a964 <_printf_i+0x1c8>
 800a95e:	0670      	lsls	r0, r6, #25
 800a960:	d5fb      	bpl.n	800a95a <_printf_i+0x1be>
 800a962:	8019      	strh	r1, [r3, #0]
 800a964:	2300      	movs	r3, #0
 800a966:	4615      	mov	r5, r2
 800a968:	6123      	str	r3, [r4, #16]
 800a96a:	e7bd      	b.n	800a8e8 <_printf_i+0x14c>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	2100      	movs	r1, #0
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	602a      	str	r2, [r5, #0]
 800a974:	681d      	ldr	r5, [r3, #0]
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	4628      	mov	r0, r5
 800a97a:	f000 f993 	bl	800aca4 <memchr>
 800a97e:	b108      	cbz	r0, 800a984 <_printf_i+0x1e8>
 800a980:	1b40      	subs	r0, r0, r5
 800a982:	6060      	str	r0, [r4, #4]
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	2300      	movs	r3, #0
 800a98a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98e:	e7ab      	b.n	800a8e8 <_printf_i+0x14c>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	462a      	mov	r2, r5
 800a994:	4649      	mov	r1, r9
 800a996:	4640      	mov	r0, r8
 800a998:	47d0      	blx	sl
 800a99a:	3001      	adds	r0, #1
 800a99c:	d0ae      	beq.n	800a8fc <_printf_i+0x160>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	079b      	lsls	r3, r3, #30
 800a9a2:	d413      	bmi.n	800a9cc <_printf_i+0x230>
 800a9a4:	68e0      	ldr	r0, [r4, #12]
 800a9a6:	9b03      	ldr	r3, [sp, #12]
 800a9a8:	4298      	cmp	r0, r3
 800a9aa:	bfb8      	it	lt
 800a9ac:	4618      	movlt	r0, r3
 800a9ae:	e7a7      	b.n	800a900 <_printf_i+0x164>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	47d0      	blx	sl
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d09e      	beq.n	800a8fc <_printf_i+0x160>
 800a9be:	3501      	adds	r5, #1
 800a9c0:	68e3      	ldr	r3, [r4, #12]
 800a9c2:	9903      	ldr	r1, [sp, #12]
 800a9c4:	1a5b      	subs	r3, r3, r1
 800a9c6:	42ab      	cmp	r3, r5
 800a9c8:	dcf2      	bgt.n	800a9b0 <_printf_i+0x214>
 800a9ca:	e7eb      	b.n	800a9a4 <_printf_i+0x208>
 800a9cc:	2500      	movs	r5, #0
 800a9ce:	f104 0619 	add.w	r6, r4, #25
 800a9d2:	e7f5      	b.n	800a9c0 <_printf_i+0x224>
 800a9d4:	0800af51 	.word	0x0800af51
 800a9d8:	0800af62 	.word	0x0800af62

0800a9dc <__sflush_r>:
 800a9dc:	898a      	ldrh	r2, [r1, #12]
 800a9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	0710      	lsls	r0, r2, #28
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	d458      	bmi.n	800aa9c <__sflush_r+0xc0>
 800a9ea:	684b      	ldr	r3, [r1, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	dc05      	bgt.n	800a9fc <__sflush_r+0x20>
 800a9f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dc02      	bgt.n	800a9fc <__sflush_r+0x20>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	d0f9      	beq.n	800a9f6 <__sflush_r+0x1a>
 800aa02:	2300      	movs	r3, #0
 800aa04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa08:	682f      	ldr	r7, [r5, #0]
 800aa0a:	6a21      	ldr	r1, [r4, #32]
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	d032      	beq.n	800aa76 <__sflush_r+0x9a>
 800aa10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	075a      	lsls	r2, r3, #29
 800aa16:	d505      	bpl.n	800aa24 <__sflush_r+0x48>
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	1ac0      	subs	r0, r0, r3
 800aa1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa1e:	b10b      	cbz	r3, 800aa24 <__sflush_r+0x48>
 800aa20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa22:	1ac0      	subs	r0, r0, r3
 800aa24:	2300      	movs	r3, #0
 800aa26:	4602      	mov	r2, r0
 800aa28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	6a21      	ldr	r1, [r4, #32]
 800aa2e:	47b0      	blx	r6
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	d106      	bne.n	800aa44 <__sflush_r+0x68>
 800aa36:	6829      	ldr	r1, [r5, #0]
 800aa38:	291d      	cmp	r1, #29
 800aa3a:	d82b      	bhi.n	800aa94 <__sflush_r+0xb8>
 800aa3c:	4a28      	ldr	r2, [pc, #160]	; (800aae0 <__sflush_r+0x104>)
 800aa3e:	410a      	asrs	r2, r1
 800aa40:	07d6      	lsls	r6, r2, #31
 800aa42:	d427      	bmi.n	800aa94 <__sflush_r+0xb8>
 800aa44:	2200      	movs	r2, #0
 800aa46:	04d9      	lsls	r1, r3, #19
 800aa48:	6062      	str	r2, [r4, #4]
 800aa4a:	6922      	ldr	r2, [r4, #16]
 800aa4c:	6022      	str	r2, [r4, #0]
 800aa4e:	d504      	bpl.n	800aa5a <__sflush_r+0x7e>
 800aa50:	1c42      	adds	r2, r0, #1
 800aa52:	d101      	bne.n	800aa58 <__sflush_r+0x7c>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b903      	cbnz	r3, 800aa5a <__sflush_r+0x7e>
 800aa58:	6560      	str	r0, [r4, #84]	; 0x54
 800aa5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa5c:	602f      	str	r7, [r5, #0]
 800aa5e:	2900      	cmp	r1, #0
 800aa60:	d0c9      	beq.n	800a9f6 <__sflush_r+0x1a>
 800aa62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa66:	4299      	cmp	r1, r3
 800aa68:	d002      	beq.n	800aa70 <__sflush_r+0x94>
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f7ff fc94 	bl	800a398 <_free_r>
 800aa70:	2000      	movs	r0, #0
 800aa72:	6360      	str	r0, [r4, #52]	; 0x34
 800aa74:	e7c0      	b.n	800a9f8 <__sflush_r+0x1c>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b0      	blx	r6
 800aa7c:	1c41      	adds	r1, r0, #1
 800aa7e:	d1c8      	bne.n	800aa12 <__sflush_r+0x36>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0c5      	beq.n	800aa12 <__sflush_r+0x36>
 800aa86:	2b1d      	cmp	r3, #29
 800aa88:	d001      	beq.n	800aa8e <__sflush_r+0xb2>
 800aa8a:	2b16      	cmp	r3, #22
 800aa8c:	d101      	bne.n	800aa92 <__sflush_r+0xb6>
 800aa8e:	602f      	str	r7, [r5, #0]
 800aa90:	e7b1      	b.n	800a9f6 <__sflush_r+0x1a>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	e7ad      	b.n	800a9f8 <__sflush_r+0x1c>
 800aa9c:	690f      	ldr	r7, [r1, #16]
 800aa9e:	2f00      	cmp	r7, #0
 800aaa0:	d0a9      	beq.n	800a9f6 <__sflush_r+0x1a>
 800aaa2:	0793      	lsls	r3, r2, #30
 800aaa4:	680e      	ldr	r6, [r1, #0]
 800aaa6:	600f      	str	r7, [r1, #0]
 800aaa8:	bf0c      	ite	eq
 800aaaa:	694b      	ldreq	r3, [r1, #20]
 800aaac:	2300      	movne	r3, #0
 800aaae:	eba6 0807 	sub.w	r8, r6, r7
 800aab2:	608b      	str	r3, [r1, #8]
 800aab4:	f1b8 0f00 	cmp.w	r8, #0
 800aab8:	dd9d      	ble.n	800a9f6 <__sflush_r+0x1a>
 800aaba:	4643      	mov	r3, r8
 800aabc:	463a      	mov	r2, r7
 800aabe:	6a21      	ldr	r1, [r4, #32]
 800aac0:	4628      	mov	r0, r5
 800aac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aac4:	47b0      	blx	r6
 800aac6:	2800      	cmp	r0, #0
 800aac8:	dc06      	bgt.n	800aad8 <__sflush_r+0xfc>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	e78f      	b.n	800a9f8 <__sflush_r+0x1c>
 800aad8:	4407      	add	r7, r0
 800aada:	eba8 0800 	sub.w	r8, r8, r0
 800aade:	e7e9      	b.n	800aab4 <__sflush_r+0xd8>
 800aae0:	dfbffffe 	.word	0xdfbffffe

0800aae4 <_fflush_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	690b      	ldr	r3, [r1, #16]
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	b913      	cbnz	r3, 800aaf4 <_fflush_r+0x10>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	b118      	cbz	r0, 800aafe <_fflush_r+0x1a>
 800aaf6:	6a03      	ldr	r3, [r0, #32]
 800aaf8:	b90b      	cbnz	r3, 800aafe <_fflush_r+0x1a>
 800aafa:	f7ff fa1f 	bl	8009f3c <__sinit>
 800aafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0f3      	beq.n	800aaee <_fflush_r+0xa>
 800ab06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab08:	07d0      	lsls	r0, r2, #31
 800ab0a:	d404      	bmi.n	800ab16 <_fflush_r+0x32>
 800ab0c:	0599      	lsls	r1, r3, #22
 800ab0e:	d402      	bmi.n	800ab16 <_fflush_r+0x32>
 800ab10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab12:	f7ff fc32 	bl	800a37a <__retarget_lock_acquire_recursive>
 800ab16:	4628      	mov	r0, r5
 800ab18:	4621      	mov	r1, r4
 800ab1a:	f7ff ff5f 	bl	800a9dc <__sflush_r>
 800ab1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab20:	4605      	mov	r5, r0
 800ab22:	07da      	lsls	r2, r3, #31
 800ab24:	d4e4      	bmi.n	800aaf0 <_fflush_r+0xc>
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	059b      	lsls	r3, r3, #22
 800ab2a:	d4e1      	bmi.n	800aaf0 <_fflush_r+0xc>
 800ab2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab2e:	f7ff fc25 	bl	800a37c <__retarget_lock_release_recursive>
 800ab32:	e7dd      	b.n	800aaf0 <_fflush_r+0xc>

0800ab34 <__swhatbuf_r>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	460c      	mov	r4, r1
 800ab38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3c:	b096      	sub	sp, #88	; 0x58
 800ab3e:	4615      	mov	r5, r2
 800ab40:	2900      	cmp	r1, #0
 800ab42:	461e      	mov	r6, r3
 800ab44:	da0c      	bge.n	800ab60 <__swhatbuf_r+0x2c>
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	2100      	movs	r1, #0
 800ab4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab4e:	bf0c      	ite	eq
 800ab50:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ab54:	2340      	movne	r3, #64	; 0x40
 800ab56:	2000      	movs	r0, #0
 800ab58:	6031      	str	r1, [r6, #0]
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	b016      	add	sp, #88	; 0x58
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	466a      	mov	r2, sp
 800ab62:	f000 f87d 	bl	800ac60 <_fstat_r>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	dbed      	blt.n	800ab46 <__swhatbuf_r+0x12>
 800ab6a:	9901      	ldr	r1, [sp, #4]
 800ab6c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ab70:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ab74:	4259      	negs	r1, r3
 800ab76:	4159      	adcs	r1, r3
 800ab78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab7c:	e7eb      	b.n	800ab56 <__swhatbuf_r+0x22>

0800ab7e <__smakebuf_r>:
 800ab7e:	898b      	ldrh	r3, [r1, #12]
 800ab80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab82:	079d      	lsls	r5, r3, #30
 800ab84:	4606      	mov	r6, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	d507      	bpl.n	800ab9a <__smakebuf_r+0x1c>
 800ab8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	2301      	movs	r3, #1
 800ab94:	6163      	str	r3, [r4, #20]
 800ab96:	b002      	add	sp, #8
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	ab01      	add	r3, sp, #4
 800ab9c:	466a      	mov	r2, sp
 800ab9e:	f7ff ffc9 	bl	800ab34 <__swhatbuf_r>
 800aba2:	9900      	ldr	r1, [sp, #0]
 800aba4:	4605      	mov	r5, r0
 800aba6:	4630      	mov	r0, r6
 800aba8:	f7ff f8b0 	bl	8009d0c <_malloc_r>
 800abac:	b948      	cbnz	r0, 800abc2 <__smakebuf_r+0x44>
 800abae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb2:	059a      	lsls	r2, r3, #22
 800abb4:	d4ef      	bmi.n	800ab96 <__smakebuf_r+0x18>
 800abb6:	f023 0303 	bic.w	r3, r3, #3
 800abba:	f043 0302 	orr.w	r3, r3, #2
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	e7e3      	b.n	800ab8a <__smakebuf_r+0xc>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	6020      	str	r0, [r4, #0]
 800abc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abca:	6120      	str	r0, [r4, #16]
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	9b00      	ldr	r3, [sp, #0]
 800abd0:	6163      	str	r3, [r4, #20]
 800abd2:	9b01      	ldr	r3, [sp, #4]
 800abd4:	b15b      	cbz	r3, 800abee <__smakebuf_r+0x70>
 800abd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abda:	4630      	mov	r0, r6
 800abdc:	f000 f852 	bl	800ac84 <_isatty_r>
 800abe0:	b128      	cbz	r0, 800abee <__smakebuf_r+0x70>
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	f023 0303 	bic.w	r3, r3, #3
 800abe8:	f043 0301 	orr.w	r3, r3, #1
 800abec:	81a3      	strh	r3, [r4, #12]
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	431d      	orrs	r5, r3
 800abf2:	81a5      	strh	r5, [r4, #12]
 800abf4:	e7cf      	b.n	800ab96 <__smakebuf_r+0x18>

0800abf6 <_putc_r>:
 800abf6:	b570      	push	{r4, r5, r6, lr}
 800abf8:	460d      	mov	r5, r1
 800abfa:	4614      	mov	r4, r2
 800abfc:	4606      	mov	r6, r0
 800abfe:	b118      	cbz	r0, 800ac08 <_putc_r+0x12>
 800ac00:	6a03      	ldr	r3, [r0, #32]
 800ac02:	b90b      	cbnz	r3, 800ac08 <_putc_r+0x12>
 800ac04:	f7ff f99a 	bl	8009f3c <__sinit>
 800ac08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac0a:	07d8      	lsls	r0, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_putc_r+0x24>
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	0599      	lsls	r1, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_putc_r+0x24>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f7ff fbb0 	bl	800a37a <__retarget_lock_acquire_recursive>
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	60a3      	str	r3, [r4, #8]
 800ac22:	da05      	bge.n	800ac30 <_putc_r+0x3a>
 800ac24:	69a2      	ldr	r2, [r4, #24]
 800ac26:	4293      	cmp	r3, r2
 800ac28:	db12      	blt.n	800ac50 <_putc_r+0x5a>
 800ac2a:	b2eb      	uxtb	r3, r5
 800ac2c:	2b0a      	cmp	r3, #10
 800ac2e:	d00f      	beq.n	800ac50 <_putc_r+0x5a>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	6022      	str	r2, [r4, #0]
 800ac36:	701d      	strb	r5, [r3, #0]
 800ac38:	b2ed      	uxtb	r5, r5
 800ac3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac3c:	07da      	lsls	r2, r3, #31
 800ac3e:	d405      	bmi.n	800ac4c <_putc_r+0x56>
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	059b      	lsls	r3, r3, #22
 800ac44:	d402      	bmi.n	800ac4c <_putc_r+0x56>
 800ac46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac48:	f7ff fb98 	bl	800a37c <__retarget_lock_release_recursive>
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	4629      	mov	r1, r5
 800ac52:	4622      	mov	r2, r4
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7ff fa60 	bl	800a11a <__swbuf_r>
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	e7ed      	b.n	800ac3a <_putc_r+0x44>
	...

0800ac60 <_fstat_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	2300      	movs	r3, #0
 800ac64:	4d06      	ldr	r5, [pc, #24]	; (800ac80 <_fstat_r+0x20>)
 800ac66:	4604      	mov	r4, r0
 800ac68:	4608      	mov	r0, r1
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	602b      	str	r3, [r5, #0]
 800ac6e:	f7f6 fbec 	bl	800144a <_fstat>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d102      	bne.n	800ac7c <_fstat_r+0x1c>
 800ac76:	682b      	ldr	r3, [r5, #0]
 800ac78:	b103      	cbz	r3, 800ac7c <_fstat_r+0x1c>
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	bf00      	nop
 800ac80:	200411fc 	.word	0x200411fc

0800ac84 <_isatty_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	2300      	movs	r3, #0
 800ac88:	4d05      	ldr	r5, [pc, #20]	; (800aca0 <_isatty_r+0x1c>)
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f7f6 fbeb 	bl	800146a <_isatty>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_isatty_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_isatty_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	200411fc 	.word	0x200411fc

0800aca4 <memchr>:
 800aca4:	b2c9      	uxtb	r1, r1
 800aca6:	4402      	add	r2, r0
 800aca8:	b510      	push	{r4, lr}
 800acaa:	4290      	cmp	r0, r2
 800acac:	4603      	mov	r3, r0
 800acae:	d101      	bne.n	800acb4 <memchr+0x10>
 800acb0:	2300      	movs	r3, #0
 800acb2:	e003      	b.n	800acbc <memchr+0x18>
 800acb4:	781c      	ldrb	r4, [r3, #0]
 800acb6:	3001      	adds	r0, #1
 800acb8:	428c      	cmp	r4, r1
 800acba:	d1f6      	bne.n	800acaa <memchr+0x6>
 800acbc:	4618      	mov	r0, r3
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
