
PROJ_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011930  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08011b70  08011b70  00021b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012180  08012180  00022180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08012188  08012188  00022188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012190  08012190  00022190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006cc  20000000  08012194  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00081370  200006cc  08012860  000306cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20081a3c  08012860  00031a3c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000306cc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030702  2**0
                  CONTENTS, READONLY
 11 .debug_info   000297da  00000000  00000000  00030745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005394  00000000  00000000  00059f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002460  00000000  00000000  0005f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c38  00000000  00000000  00061718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000088d8  00000000  00000000  00063350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b83e  00000000  00000000  0006bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015f368  00000000  00000000  00097466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ad60  00000000  00000000  001f67d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  00201530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	200006cc 	.word	0x200006cc
 800025c:	00000000 	.word	0x00000000
 8000260:	08011b58 	.word	0x08011b58

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	200006d0 	.word	0x200006d0
 800027c:	08011b58 	.word	0x08011b58

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b982 	b.w	8000ed4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d146      	bne.n	8000c86 <__udivmoddi4+0x9e>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d95e      	bls.n	8000cbc <__udivmoddi4+0xd4>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	409c      	lsls	r4, r3
 8000c10:	fa20 f202 	lsr.w	r2, r0, r2
 8000c14:	4317      	orrs	r7, r2
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	0c22      	lsrs	r2, r4, #16
 8000c20:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	fb01 f005 	mul.w	r0, r1, r5
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x5e>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	d202      	bcs.n	8000c44 <__udivmoddi4+0x5c>
 8000c3e:	4290      	cmp	r0, r2
 8000c40:	f200 8134 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000c44:	4639      	mov	r1, r7
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	fb00 f505 	mul.w	r5, r0, r5
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x88>
 8000c5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x86>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f200 8119 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000c6e:	4610      	mov	r0, r2
 8000c70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11e      	cbz	r6, 8000c82 <__udivmoddi4+0x9a>
 8000c7a:	40dc      	lsrs	r4, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0xb4>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80fc 	beq.w	8000e88 <__udivmoddi4+0x2a0>
 8000c90:	2100      	movs	r1, #0
 8000c92:	e9c6 0500 	strd	r0, r5, [r6]
 8000c96:	4608      	mov	r0, r1
 8000c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9c:	fab3 f183 	clz	r1, r3
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	d14c      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	f0c0 80f2 	bcc.w	8000e8e <__udivmoddi4+0x2a6>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f240 80ef 	bls.w	8000e8e <__udivmoddi4+0x2a6>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e5      	beq.n	8000c82 <__udivmoddi4+0x9a>
 8000cb6:	e9c6 4700 	strd	r4, r7, [r6]
 8000cba:	e7e2      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xd8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f382 	clz	r3, r2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 809f 	bne.w	8000e08 <__udivmoddi4+0x220>
 8000cca:	1a8a      	subs	r2, r1, r2
 8000ccc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cda:	fb0e 2015 	mls	r0, lr, r5, r2
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce4:	fb07 f005 	mul.w	r0, r7, r5
 8000ce8:	4290      	cmp	r0, r2
 8000cea:	d90f      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	bf2c      	ite	cs
 8000cf6:	f04f 0901 	movcs.w	r9, #1
 8000cfa:	f04f 0900 	movcc.w	r9, #0
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	d903      	bls.n	8000d0a <__udivmoddi4+0x122>
 8000d02:	f1b9 0f00 	cmp.w	r9, #0
 8000d06:	f000 80ce 	beq.w	8000ea6 <__udivmoddi4+0x2be>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d14:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d18:	fb00 f707 	mul.w	r7, r0, r7
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	42a7      	cmp	r7, r4
 8000d30:	f200 80b3 	bhi.w	8000e9a <__udivmoddi4+0x2b2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	1be4      	subs	r4, r4, r7
 8000d38:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3c:	e79c      	b.n	8000c78 <__udivmoddi4+0x90>
 8000d3e:	f1c1 0420 	rsb	r4, r1, #32
 8000d42:	408b      	lsls	r3, r1
 8000d44:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d48:	fa22 f704 	lsr.w	r7, r2, r4
 8000d4c:	40e5      	lsrs	r5, r4
 8000d4e:	408a      	lsls	r2, r1
 8000d50:	431f      	orrs	r7, r3
 8000d52:	fa20 f304 	lsr.w	r3, r0, r4
 8000d56:	4088      	lsls	r0, r1
 8000d58:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d68:	fbb5 fef8 	udiv	lr, r5, r8
 8000d6c:	fb08 551e 	mls	r5, r8, lr, r5
 8000d70:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d74:	fb0e f90c 	mul.w	r9, lr, ip
 8000d78:	45a9      	cmp	r9, r5
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1b2>
 8000d7c:	197d      	adds	r5, r7, r5
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a9      	cmp	r9, r5
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 808d 	beq.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d98:	46d6      	mov	lr, sl
 8000d9a:	eba5 0509 	sub.w	r5, r5, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb5 f3f8 	udiv	r3, r5, r8
 8000da6:	fb08 5513 	mls	r5, r8, r3, r5
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000db2:	45ac      	cmp	ip, r5
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1dc>
 8000db6:	197d      	adds	r5, r7, r5
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1da>
 8000dbe:	45ac      	cmp	ip, r5
 8000dc0:	d87e      	bhi.n	8000ec0 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dc8:	eba5 050c 	sub.w	r5, r5, ip
 8000dcc:	fba3 9802 	umull	r9, r8, r3, r2
 8000dd0:	4545      	cmp	r5, r8
 8000dd2:	46ce      	mov	lr, r9
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1f6>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x200>
 8000dda:	4548      	cmp	r0, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x200>
 8000dde:	3b01      	subs	r3, #1
 8000de0:	ebb9 0e02 	subs.w	lr, r9, r2
 8000de4:	eb68 0c07 	sbc.w	ip, r8, r7
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d06f      	beq.n	8000ecc <__udivmoddi4+0x2e4>
 8000dec:	ebb0 020e 	subs.w	r2, r0, lr
 8000df0:	eb65 050c 	sbc.w	r5, r5, ip
 8000df4:	40ca      	lsrs	r2, r1
 8000df6:	fa05 f404 	lsl.w	r4, r5, r4
 8000dfa:	40cd      	lsrs	r5, r1
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	2100      	movs	r1, #0
 8000e02:	e9c6 4500 	strd	r4, r5, [r6]
 8000e06:	e73c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000e08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e0c:	f1c3 0220 	rsb	r2, r3, #32
 8000e10:	4099      	lsls	r1, r3
 8000e12:	409c      	lsls	r4, r3
 8000e14:	40d5      	lsrs	r5, r2
 8000e16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	fa1f f78c 	uxth.w	r7, ip
 8000e22:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e26:	430a      	orrs	r2, r1
 8000e28:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f507 	mul.w	r5, r0, r7
 8000e36:	428d      	cmp	r5, r1
 8000e38:	d90e      	bls.n	8000e58 <__udivmoddi4+0x270>
 8000e3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e42:	bf2c      	ite	cs
 8000e44:	f04f 0901 	movcs.w	r9, #1
 8000e48:	f04f 0900 	movcc.w	r9, #0
 8000e4c:	428d      	cmp	r5, r1
 8000e4e:	d902      	bls.n	8000e56 <__udivmoddi4+0x26e>
 8000e50:	f1b9 0f00 	cmp.w	r9, #0
 8000e54:	d031      	beq.n	8000eba <__udivmoddi4+0x2d2>
 8000e56:	4640      	mov	r0, r8
 8000e58:	1b49      	subs	r1, r1, r5
 8000e5a:	b292      	uxth	r2, r2
 8000e5c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e60:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	fb05 f107 	mul.w	r1, r5, r7
 8000e6c:	4291      	cmp	r1, r2
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x298>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e7a:	4291      	cmp	r1, r2
 8000e7c:	d823      	bhi.n	8000ec6 <__udivmoddi4+0x2de>
 8000e7e:	4645      	mov	r5, r8
 8000e80:	1a52      	subs	r2, r2, r1
 8000e82:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e86:	e726      	b.n	8000cd6 <__udivmoddi4+0xee>
 8000e88:	4631      	mov	r1, r6
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e6f9      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000e8e:	1a84      	subs	r4, r0, r2
 8000e90:	eb65 0203 	sbc.w	r2, r5, r3
 8000e94:	2001      	movs	r0, #1
 8000e96:	4617      	mov	r7, r2
 8000e98:	e70b      	b.n	8000cb2 <__udivmoddi4+0xca>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x14e>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e4      	b.n	8000c70 <__udivmoddi4+0x88>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	3902      	subs	r1, #2
 8000eae:	4462      	add	r2, ip
 8000eb0:	e6c9      	b.n	8000c46 <__udivmoddi4+0x5e>
 8000eb2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eb6:	443d      	add	r5, r7
 8000eb8:	e76f      	b.n	8000d9a <__udivmoddi4+0x1b2>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	4461      	add	r1, ip
 8000ebe:	e7cb      	b.n	8000e58 <__udivmoddi4+0x270>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	443d      	add	r5, r7
 8000ec4:	e77e      	b.n	8000dc4 <__udivmoddi4+0x1dc>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	e7d9      	b.n	8000e80 <__udivmoddi4+0x298>
 8000ecc:	4618      	mov	r0, r3
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e6d7      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <MX_FREERTOS_Init+0x28>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <MX_FREERTOS_Init+0x2c>)
 8000ee2:	f009 ff4f 	bl	800ad84 <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <MX_FREERTOS_Init+0x30>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // PTH_TaskHandle = osThreadNew(PTH_task, NULL, &PTH_TaskAttributes);
  // IMU_TaskHandle = osThreadNew(IMU_task, NULL, &IMU_TaskAttributes);
  //GPS_TaskHandle = osThreadNew(GPS_task, NULL, &GPS_TaskAttributes);
  GPS_TaskHandle = osThreadNew(SD_task, NULL, &SD_TaskAttributes);
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <MX_FREERTOS_Init+0x34>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4807      	ldr	r0, [pc, #28]	; (8000f10 <MX_FREERTOS_Init+0x38>)
 8000ef2:	f009 ff47 	bl	800ad84 <osThreadNew>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <MX_FREERTOS_Init+0x3c>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	08011cd0 	.word	0x08011cd0
 8000f04:	08000f19 	.word	0x08000f19
 8000f08:	200006ec 	.word	0x200006ec
 8000f0c:	08011cac 	.word	0x08011cac
 8000f10:	080025c9 	.word	0x080025c9
 8000f14:	200006e8 	.word	0x200006e8

08000f18 <StartDefaultTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for (;;)
  {

    osDelay(1000);
 8000f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f24:	f009 ffbf 	bl	800aea6 <osDelay>
 8000f28:	e7fa      	b.n	8000f20 <StartDefaultTask+0x8>
	...

08000f2c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f34:	1d39      	adds	r1, r7, #4
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <__io_putchar+0x20>)
 8000f3e:	f007 fd2d 	bl	800899c <HAL_UART_Transmit>
  return ch;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200007d4 	.word	0x200007d4

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f001 fcca 	bl	80028ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f817 	bl	8000f8a <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000f5c:	f000 f876 	bl	800104c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 fa3e 	bl	80013e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 f958 	bl	8001218 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000f68:	f000 f892 	bl	8001090 <MX_I2C2_Init>
  MX_SPI3_Init();
 8000f6c:	f000 f8e4 	bl	8001138 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000f70:	f000 f99e 	bl	80012b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f74:	f000 f9e8 	bl	8001348 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000f78:	f000 f8ca 	bl	8001110 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f7c:	f009 feb2 	bl	800ace4 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000f80:	f7ff ffaa 	bl	8000ed8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f84:	f009 fed4 	bl	800ad30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x38>

08000f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b09e      	sub	sp, #120	; 0x78
 8000f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2260      	movs	r2, #96	; 0x60
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00c fba8 	bl	800d6ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fae:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000fb2:	f002 f9d5 	bl	8003360 <HAL_PWREx_ControlVoltageScaling>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000fbc:	f000 fb50 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000fec:	2350      	movs	r3, #80	; 0x50
 8000fee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	4618      	mov	r0, r3
 800100a:	f002 faa5 	bl	8003558 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001014:	f000 fb24 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	231f      	movs	r3, #31
 800101a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2303      	movs	r3, #3
 800101e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2104      	movs	r1, #4
 8001034:	4618      	mov	r0, r3
 8001036:	f003 f96b 	bl	8004310 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001040:	f000 fb0e 	bl	8001660 <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3778      	adds	r7, #120	; 0x78
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001052:	f002 fa61 	bl	8003518 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f002 f8fb 	bl	8003264 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 800106e:	f002 f967 	bl	8003340 <HAL_PWR_EnablePVD>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001072:	f002 fa61 	bl	8003538 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001076:	2002      	movs	r0, #2
 8001078:	f002 f9fe 	bl	8003478 <HAL_PWREx_ConfigSupply>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8001082:	f000 faed 	bl	8001660 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_I2C2_Init+0x74>)
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_I2C2_Init+0x78>)
 8001098:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_I2C2_Init+0x74>)
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <MX_I2C2_Init+0x7c>)
 800109e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_I2C2_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_I2C2_Init+0x74>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_I2C2_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_I2C2_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_I2C2_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_I2C2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_I2C2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010ca:	480e      	ldr	r0, [pc, #56]	; (8001104 <MX_I2C2_Init+0x74>)
 80010cc:	f001 ff68 	bl	8002fa0 <HAL_I2C_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010d6:	f000 fac3 	bl	8001660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <MX_I2C2_Init+0x74>)
 80010de:	f001 fffa 	bl	80030d6 <HAL_I2CEx_ConfigAnalogFilter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010e8:	f000 faba 	bl	8001660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_I2C2_Init+0x74>)
 80010f0:	f002 f83c 	bl	800316c <HAL_I2CEx_ConfigDigitalFilter>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fab1 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200006f0 	.word	0x200006f0
 8001108:	40005800 	.word	0x40005800
 800110c:	30909dec 	.word	0x30909dec

08001110 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001114:	2000      	movs	r0, #0
 8001116:	f002 f875 	bl	8003204 <HAL_ICACHE_ConfigAssociativityMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001120:	f000 fa9e 	bl	8001660 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001124:	f002 f88e 	bl	8003244 <HAL_ICACHE_Enable>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800112e:	f000 fa97 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <MX_SPI3_Init+0xd8>)
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <MX_SPI3_Init+0xdc>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001150:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001154:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <MX_SPI3_Init+0xd8>)
 800115e:	2207      	movs	r2, #7
 8001160:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <MX_SPI3_Init+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001170:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001174:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800117c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_SPI3_Init+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001192:	2207      	movs	r2, #7
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_SPI3_Init+0xd8>)
 8001198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011d6:	f006 f93b 	bl	8007450 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 80011e0:	f000 fa3e 	bl	8001660 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80011e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011ec:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_SPI3_Init+0xd8>)
 80011f8:	f006 ff85 	bl	8008106 <HAL_SPIEx_SetConfigAutonomousMode>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 8001202:	f000 fa2d 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000744 	.word	0x20000744
 8001214:	46002000 	.word	0x46002000

08001218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_USART1_UART_Init+0x94>)
 8001220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001262:	f007 fb4b 	bl	80088fc <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800126c:	f000 f9f8 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001274:	f008 f85f 	bl	8009336 <HAL_UARTEx_SetTxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127e:	f000 f9ef 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001286:	f008 f894 	bl	80093b2 <HAL_UARTEx_SetRxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001290:	f000 f9e6 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_USART1_UART_Init+0x90>)
 8001296:	f008 f815 	bl	80092c4 <HAL_UARTEx_DisableFifoMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f000 f9de 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200007d4 	.word	0x200007d4
 80012ac:	40013800 	.word	0x40013800

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <MX_USART2_UART_Init+0x94>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9200;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012bc:	f242 32f0 	movw	r2, #9200	; 0x23f0
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x90>)
 80012fa:	f007 faff 	bl	80088fc <HAL_UART_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001304:	f000 f9ac 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001308:	2100      	movs	r1, #0
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_USART2_UART_Init+0x90>)
 800130c:	f008 f813 	bl	8009336 <HAL_UARTEx_SetTxFifoThreshold>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001316:	f000 f9a3 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x90>)
 800131e:	f008 f848 	bl	80093b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001328:	f000 f99a 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_USART2_UART_Init+0x90>)
 800132e:	f007 ff8e 	bl	800924e <HAL_UARTEx_EnableFifoMode>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001338:	f000 f992 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000868 	.word	0x20000868
 8001344:	40004400 	.word	0x40004400

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 800134e:	4a23      	ldr	r2, [pc, #140]	; (80013dc <MX_USART3_UART_Init+0x94>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 8001392:	f007 fab3 	bl	80088fc <HAL_UART_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800139c:	f000 f960 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 80013a4:	f007 ffc7 	bl	8009336 <HAL_UARTEx_SetTxFifoThreshold>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ae:	f000 f957 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 80013b6:	f007 fffc 	bl	80093b2 <HAL_UARTEx_SetRxFifoThreshold>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f000 f94e 	bl	8001660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_USART3_UART_Init+0x90>)
 80013c6:	f007 ff7d 	bl	80092c4 <HAL_UARTEx_DisableFifoMode>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f000 f946 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200008fc 	.word	0x200008fc
 80013dc:	40004800 	.word	0x40004800

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b88      	ldr	r3, [pc, #544]	; (8001618 <MX_GPIO_Init+0x238>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013fc:	4a86      	ldr	r2, [pc, #536]	; (8001618 <MX_GPIO_Init+0x238>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001406:	4b84      	ldr	r3, [pc, #528]	; (8001618 <MX_GPIO_Init+0x238>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001414:	4b80      	ldr	r3, [pc, #512]	; (8001618 <MX_GPIO_Init+0x238>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800141a:	4a7f      	ldr	r2, [pc, #508]	; (8001618 <MX_GPIO_Init+0x238>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001424:	4b7c      	ldr	r3, [pc, #496]	; (8001618 <MX_GPIO_Init+0x238>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b79      	ldr	r3, [pc, #484]	; (8001618 <MX_GPIO_Init+0x238>)
 8001434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001438:	4a77      	ldr	r2, [pc, #476]	; (8001618 <MX_GPIO_Init+0x238>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001442:	4b75      	ldr	r3, [pc, #468]	; (8001618 <MX_GPIO_Init+0x238>)
 8001444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001450:	4b71      	ldr	r3, [pc, #452]	; (8001618 <MX_GPIO_Init+0x238>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <MX_GPIO_Init+0x238>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001460:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <MX_GPIO_Init+0x238>)
 8001462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <MX_GPIO_Init+0x238>)
 8001470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001474:	4a68      	ldr	r2, [pc, #416]	; (8001618 <MX_GPIO_Init+0x238>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <MX_GPIO_Init+0x238>)
 8001480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148c:	4b62      	ldr	r3, [pc, #392]	; (8001618 <MX_GPIO_Init+0x238>)
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001492:	4a61      	ldr	r2, [pc, #388]	; (8001618 <MX_GPIO_Init+0x238>)
 8001494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001498:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800149c:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <MX_GPIO_Init+0x238>)
 800149e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014aa:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <MX_GPIO_Init+0x238>)
 80014ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014b0:	4a59      	ldr	r2, [pc, #356]	; (8001618 <MX_GPIO_Init+0x238>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014ba:	4b57      	ldr	r3, [pc, #348]	; (8001618 <MX_GPIO_Init+0x238>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_FSYNC_GPIO_Port, IMU_FSYNC_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2108      	movs	r1, #8
 80014cc:	4853      	ldr	r0, [pc, #332]	; (800161c <MX_GPIO_Init+0x23c>)
 80014ce:	f001 fd13 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_nCS_Pin|RPI_nCS_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014d8:	4850      	ldr	r0, [pc, #320]	; (800161c <MX_GPIO_Init+0x23c>)
 80014da:	f001 fd0d 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTH_nCS_GPIO_Port, PTH_nCS_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e4:	484e      	ldr	r0, [pc, #312]	; (8001620 <MX_GPIO_Init+0x240>)
 80014e6:	f001 fd07 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2104      	movs	r1, #4
 80014ee:	484d      	ldr	r0, [pc, #308]	; (8001624 <MX_GPIO_Init+0x244>)
 80014f0:	f001 fd02 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	484b      	ldr	r0, [pc, #300]	; (8001628 <MX_GPIO_Init+0x248>)
 80014fa:	f001 fcfd 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2104      	movs	r1, #4
 8001502:	484a      	ldr	r0, [pc, #296]	; (800162c <MX_GPIO_Init+0x24c>)
 8001504:	f001 fcf8 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	4848      	ldr	r0, [pc, #288]	; (8001630 <MX_GPIO_Init+0x250>)
 800150e:	f001 fcf3 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT_REF_INT_Pin */
  GPIO_InitStruct.Pin = BUT_REF_INT_Pin;
 8001512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <MX_GPIO_Init+0x254>)
 800151a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUT_REF_INT_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4840      	ldr	r0, [pc, #256]	; (8001628 <MX_GPIO_Init+0x248>)
 8001528:	f001 fb0e 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_FSYNC_Pin SD_nCS_Pin RPI_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_FSYNC_Pin|SD_nCS_Pin|RPI_nCS_Pin;
 800152c:	f246 0308 	movw	r3, #24584	; 0x6008
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4835      	ldr	r0, [pc, #212]	; (800161c <MX_GPIO_Init+0x23c>)
 8001546:	f001 faff 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800154a:	2320      	movs	r3, #32
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_GPIO_Init+0x258>)
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	482f      	ldr	r0, [pc, #188]	; (800161c <MX_GPIO_Init+0x23c>)
 800155e:	f001 faf3 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTH_nCS_Pin */
  GPIO_InitStruct.Pin = PTH_nCS_Pin;
 8001562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PTH_nCS_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4829      	ldr	r0, [pc, #164]	; (8001620 <MX_GPIO_Init+0x240>)
 800157c:	f001 fae4 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001580:	2304      	movs	r3, #4
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001588:	2301      	movs	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4823      	ldr	r0, [pc, #140]	; (8001624 <MX_GPIO_Init+0x244>)
 8001598:	f001 fad6 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	481d      	ldr	r0, [pc, #116]	; (8001628 <MX_GPIO_Init+0x248>)
 80015b4:	f001 fac8 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin;
 80015b8:	2304      	movs	r3, #4
 80015ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_nCS_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4817      	ldr	r0, [pc, #92]	; (800162c <MX_GPIO_Init+0x24c>)
 80015d0:	f001 faba 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_READY_Pin */
  GPIO_InitStruct.Pin = LED_READY_Pin;
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_READY_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <MX_GPIO_Init+0x250>)
 80015ec:	f001 faac 	bl	8002b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 5, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2105      	movs	r1, #5
 80015f4:	2010      	movs	r0, #16
 80015f6:	f001 fa7f 	bl	8002af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80015fa:	2010      	movs	r0, #16
 80015fc:	f001 fa96 	bl	8002b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2105      	movs	r1, #5
 8001604:	2018      	movs	r0, #24
 8001606:	f001 fa77 	bl	8002af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800160a:	2018      	movs	r0, #24
 800160c:	f001 fa8e 	bl	8002b2c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	46020c00 	.word	0x46020c00
 800161c:	42021400 	.word	0x42021400
 8001620:	42021000 	.word	0x42021000
 8001624:	42021800 	.word	0x42021800
 8001628:	42020800 	.word	0x42020800
 800162c:	42020c00 	.word	0x42020c00
 8001630:	42020400 	.word	0x42020400
 8001634:	10210000 	.word	0x10210000
 8001638:	10110000 	.word	0x10110000

0800163c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800164e:	f001 f97b 	bl	8002948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40012c00 	.word	0x40012c00

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001674:	f001 f97c 	bl	8002970 <HAL_GetTick>
 8001678:	4603      	mov	r3, r0
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <SPI_Timer_On+0x20>)
 800167c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <SPI_Timer_On+0x24>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000994 	.word	0x20000994
 8001690:	20000998 	.word	0x20000998

08001694 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001698:	f001 f96a 	bl	8002970 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SPI_Timer_Status+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1ad2      	subs	r2, r2, r3
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SPI_Timer_Status+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	bf34      	ite	cc
 80016ac:	2301      	movcc	r3, #1
 80016ae:	2300      	movcs	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000994 	.word	0x20000994
 80016bc:	20000998 	.word	0x20000998

080016c0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SPI, &dat, &rxDat, 1, 50);
 80016ca:	f107 020f 	add.w	r2, r7, #15
 80016ce:	1df9      	adds	r1, r7, #7
 80016d0:	2332      	movs	r3, #50	; 0x32
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <xchg_spi+0x28>)
 80016d8:	f006 f9ee 	bl	8007ab8 <HAL_SPI_TransmitReceive>
    return rxDat;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000744 	.word	0x20000744

080016ec <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e00a      	b.n	8001712 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	18d4      	adds	r4, r2, r3
 8001702:	20ff      	movs	r0, #255	; 0xff
 8001704:	f7ff ffdc 	bl	80016c0 <xchg_spi>
 8001708:	4603      	mov	r3, r0
 800170a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3f0      	bcc.n	80016fc <rcvr_spi_multi+0x10>
	}
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}

08001724 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SPI, buff, btx, HAL_MAX_DELAY);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b29a      	uxth	r2, r3
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <xmit_spi_multi+0x24>)
 800173a:	f005 ff9f 	bl	800767c <HAL_SPI_Transmit>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000744 	.word	0x20000744

0800174c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001754:	f001 f90c 	bl	8002970 <HAL_GetTick>
 8001758:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800175e:	20ff      	movs	r0, #255	; 0xff
 8001760:	f7ff ffae 	bl	80016c0 <xchg_spi>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d007      	beq.n	800177e <wait_ready+0x32>
 800176e:	f001 f8ff 	bl	8002970 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	429a      	cmp	r2, r3
 800177c:	d8ef      	bhi.n	800175e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <despiselect+0x1c>)
 80017a0:	f001 fbaa 	bl	8002ef8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80017a4:	20ff      	movs	r0, #255	; 0xff
 80017a6:	f7ff ff8b 	bl	80016c0 <xchg_spi>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	42021400 	.word	0x42021400

080017b4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <spiselect+0x34>)
 80017c0:	f001 fb9a 	bl	8002ef8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80017c4:	20ff      	movs	r0, #255	; 0xff
 80017c6:	f7ff ff7b 	bl	80016c0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80017ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ce:	f7ff ffbd 	bl	800174c <wait_ready>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <spiselect+0x28>
 80017d8:	2301      	movs	r3, #1
 80017da:	e002      	b.n	80017e2 <spiselect+0x2e>

	despiselect();
 80017dc:	f7ff ffda 	bl	8001794 <despiselect>
	return 0;	/* Timeout */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	42021400 	.word	0x42021400

080017ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80017f6:	20c8      	movs	r0, #200	; 0xc8
 80017f8:	f7ff ff38 	bl	800166c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80017fc:	20ff      	movs	r0, #255	; 0xff
 80017fe:	f7ff ff5f 	bl	80016c0 <xchg_spi>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2bff      	cmp	r3, #255	; 0xff
 800180a:	d104      	bne.n	8001816 <rcvr_datablock+0x2a>
 800180c:	f7ff ff42 	bl	8001694 <SPI_Timer_Status>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f2      	bne.n	80017fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	2bfe      	cmp	r3, #254	; 0xfe
 800181a:	d001      	beq.n	8001820 <rcvr_datablock+0x34>
 800181c:	2300      	movs	r3, #0
 800181e:	e00a      	b.n	8001836 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff62 	bl	80016ec <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8001828:	20ff      	movs	r0, #255	; 0xff
 800182a:	f7ff ff49 	bl	80016c0 <xchg_spi>
 800182e:	20ff      	movs	r0, #255	; 0xff
 8001830:	f7ff ff46 	bl	80016c0 <xchg_spi>

	return 1;						/* Function succeeded */
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800184a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184e:	f7ff ff7d 	bl	800174c <wait_ready>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <xmit_datablock+0x1e>
 8001858:	2300      	movs	r3, #0
 800185a:	e01e      	b.n	800189a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff2e 	bl	80016c0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2bfd      	cmp	r3, #253	; 0xfd
 8001868:	d016      	beq.n	8001898 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800186a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff58 	bl	8001724 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8001874:	20ff      	movs	r0, #255	; 0xff
 8001876:	f7ff ff23 	bl	80016c0 <xchg_spi>
 800187a:	20ff      	movs	r0, #255	; 0xff
 800187c:	f7ff ff20 	bl	80016c0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8001880:	20ff      	movs	r0, #255	; 0xff
 8001882:	f7ff ff1d 	bl	80016c0 <xchg_spi>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2b05      	cmp	r3, #5
 8001892:	d001      	beq.n	8001898 <xmit_datablock+0x5a>
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <xmit_datablock+0x5c>
	}
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	6039      	str	r1, [r7, #0]
 80018ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da0e      	bge.n	80018d4 <send_cmd+0x32>
		cmd &= 0x7F;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018bc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	2037      	movs	r0, #55	; 0x37
 80018c2:	f7ff ffee 	bl	80018a2 <send_cmd>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d901      	bls.n	80018d4 <send_cmd+0x32>
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	e051      	b.n	8001978 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d008      	beq.n	80018ec <send_cmd+0x4a>
		despiselect();
 80018da:	f7ff ff5b 	bl	8001794 <despiselect>
		if (!spiselect()) return 0xFF;
 80018de:	f7ff ff69 	bl	80017b4 <spiselect>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <send_cmd+0x4a>
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	e045      	b.n	8001978 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fee3 	bl	80016c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	0e1b      	lsrs	r3, r3, #24
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fedd 	bl	80016c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fed7 	bl	80016c0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fed1 	bl	80016c0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fecc 	bl	80016c0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <send_cmd+0x94>
 8001932:	2395      	movs	r3, #149	; 0x95
 8001934:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d101      	bne.n	8001940 <send_cmd+0x9e>
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff febc 	bl	80016c0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d102      	bne.n	8001954 <send_cmd+0xb2>
 800194e:	20ff      	movs	r0, #255	; 0xff
 8001950:	f7ff feb6 	bl	80016c0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8001954:	230a      	movs	r3, #10
 8001956:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8001958:	20ff      	movs	r0, #255	; 0xff
 800195a:	f7ff feb1 	bl	80016c0 <xchg_spi>
 800195e:	4603      	mov	r3, r0
 8001960:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8001962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001966:	2b00      	cmp	r3, #0
 8001968:	da05      	bge.n	8001976 <send_cmd+0xd4>
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3b01      	subs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <send_cmd+0xb6>

	return res;							/* Return received response */
 8001976:	7bbb      	ldrb	r3, [r7, #14]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <disk_initialize+0x14>
 8001990:	2301      	movs	r3, #1
 8001992:	e0d6      	b.n	8001b42 <disk_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8001994:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <disk_initialize+0x1cc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <disk_initialize+0x2a>
 80019a2:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <disk_initialize+0x1cc>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	e0cb      	b.n	8001b42 <disk_initialize+0x1c2>

	FCLK_SLOW();
 80019aa:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <disk_initialize+0x1d0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <disk_initialize+0x1d0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 80019bc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80019be:	230a      	movs	r3, #10
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e005      	b.n	80019d0 <disk_initialize+0x50>
 80019c4:	20ff      	movs	r0, #255	; 0xff
 80019c6:	f7ff fe7b 	bl	80016c0 <xchg_spi>
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f6      	bne.n	80019c4 <disk_initialize+0x44>

	ty = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80019da:	2100      	movs	r1, #0
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff60 	bl	80018a2 <send_cmd>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	f040 808b 	bne.w	8001b00 <disk_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80019ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ee:	f7ff fe3d 	bl	800166c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80019f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80019f6:	2008      	movs	r0, #8
 80019f8:	f7ff ff53 	bl	80018a2 <send_cmd>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d151      	bne.n	8001aa6 <disk_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	e00d      	b.n	8001a24 <disk_initialize+0xa4>
 8001a08:	7bfc      	ldrb	r4, [r7, #15]
 8001a0a:	20ff      	movs	r0, #255	; 0xff
 8001a0c:	f7ff fe58 	bl	80016c0 <xchg_spi>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	f104 0310 	add.w	r3, r4, #16
 8001a18:	443b      	add	r3, r7
 8001a1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	3301      	adds	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9ee      	bls.n	8001a08 <disk_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8001a2a:	7abb      	ldrb	r3, [r7, #10]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d167      	bne.n	8001b00 <disk_initialize+0x180>
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	2baa      	cmp	r3, #170	; 0xaa
 8001a34:	d164      	bne.n	8001b00 <disk_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8001a36:	bf00      	nop
 8001a38:	f7ff fe2c 	bl	8001694 <SPI_Timer_Status>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <disk_initialize+0xd2>
 8001a42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a46:	20a9      	movs	r0, #169	; 0xa9
 8001a48:	f7ff ff2b 	bl	80018a2 <send_cmd>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f2      	bne.n	8001a38 <disk_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001a52:	f7ff fe1f 	bl	8001694 <SPI_Timer_Status>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d051      	beq.n	8001b00 <disk_initialize+0x180>
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	203a      	movs	r0, #58	; 0x3a
 8001a60:	f7ff ff1f 	bl	80018a2 <send_cmd>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d14a      	bne.n	8001b00 <disk_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e00d      	b.n	8001a8c <disk_initialize+0x10c>
 8001a70:	7bfc      	ldrb	r4, [r7, #15]
 8001a72:	20ff      	movs	r0, #255	; 0xff
 8001a74:	f7ff fe24 	bl	80016c0 <xchg_spi>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f104 0310 	add.w	r3, r4, #16
 8001a80:	443b      	add	r3, r7
 8001a82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d9ee      	bls.n	8001a70 <disk_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8001a92:	7a3b      	ldrb	r3, [r7, #8]
 8001a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <disk_initialize+0x120>
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	e000      	b.n	8001aa2 <disk_initialize+0x122>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	737b      	strb	r3, [r7, #13]
 8001aa4:	e02c      	b.n	8001b00 <disk_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	20a9      	movs	r0, #169	; 0xa9
 8001aaa:	f7ff fefa 	bl	80018a2 <send_cmd>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d804      	bhi.n	8001abe <disk_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	737b      	strb	r3, [r7, #13]
 8001ab8:	23a9      	movs	r3, #169	; 0xa9
 8001aba:	73bb      	strb	r3, [r7, #14]
 8001abc:	e003      	b.n	8001ac6 <disk_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	737b      	strb	r3, [r7, #13]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8001ac6:	bf00      	nop
 8001ac8:	f7ff fde4 	bl	8001694 <SPI_Timer_Status>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <disk_initialize+0x162>
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fee3 	bl	80018a2 <send_cmd>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f2      	bne.n	8001ac8 <disk_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8001ae2:	f7ff fdd7 	bl	8001694 <SPI_Timer_Status>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <disk_initialize+0x17c>
 8001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af0:	2010      	movs	r0, #16
 8001af2:	f7ff fed6 	bl	80018a2 <send_cmd>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <disk_initialize+0x180>
				ty = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <disk_initialize+0x1d4>)
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	7013      	strb	r3, [r2, #0]
	despiselect();
 8001b06:	f7ff fe45 	bl	8001794 <despiselect>

	if (ty) {			/* OK */
 8001b0a:	7b7b      	ldrb	r3, [r7, #13]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d012      	beq.n	8001b36 <disk_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <disk_initialize+0x1d0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <disk_initialize+0x1d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b22:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <disk_initialize+0x1cc>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <disk_initialize+0x1cc>)
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e002      	b.n	8001b3c <disk_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <disk_initialize+0x1cc>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <disk_initialize+0x1cc>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000744 	.word	0x20000744
 8001b54:	20000990 	.word	0x20000990

08001b58 <disk_status>:
/*-----------------------------------------------------------------------*/

 DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <disk_status+0x14>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e002      	b.n	8001b72 <disk_status+0x1a>

	return Stat;	/* Return disk status */
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <disk_status+0x28>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000

08001b84 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	4603      	mov	r3, r0
 8001b92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <disk_read+0x1c>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <disk_read+0x20>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e04d      	b.n	8001c40 <disk_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <disk_read+0xc4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <disk_read+0x32>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e044      	b.n	8001c40 <disk_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <disk_read+0xc8>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <disk_read+0x44>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d111      	bne.n	8001bf2 <disk_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	2011      	movs	r0, #17
 8001bd2:	f7ff fe66 	bl	80018a2 <send_cmd>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d129      	bne.n	8001c30 <disk_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8001bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f7ff fe03 	bl	80017ec <rcvr_datablock>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d021      	beq.n	8001c30 <disk_read+0xac>
			count = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	e01e      	b.n	8001c30 <disk_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	2012      	movs	r0, #18
 8001bf6:	f7ff fe54 	bl	80018a2 <send_cmd>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d117      	bne.n	8001c30 <disk_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8001c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fdf1 	bl	80017ec <rcvr_datablock>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <disk_read+0xa2>
				buff += 512;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c16:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ed      	bne.n	8001c00 <disk_read+0x7c>
 8001c24:	e000      	b.n	8001c28 <disk_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8001c26:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001c28:	2100      	movs	r1, #0
 8001c2a:	200c      	movs	r0, #12
 8001c2c:	f7ff fe39 	bl	80018a2 <send_cmd>
		}
	}
	despiselect();
 8001c30:	f7ff fdb0 	bl	8001794 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000990 	.word	0x20000990

08001c50 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <disk_write+0x1c>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <disk_write+0x20>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e063      	b.n	8001d38 <disk_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <disk_write+0xf0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <disk_write+0x32>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e05a      	b.n	8001d38 <disk_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <disk_write+0xf0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <disk_write+0x44>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e051      	b.n	8001d38 <disk_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <disk_write+0xf4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <disk_write+0x56>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d110      	bne.n	8001cce <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	2018      	movs	r0, #24
 8001cb0:	f7ff fdf7 	bl	80018a2 <send_cmd>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d136      	bne.n	8001d28 <disk_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8001cba:	21fe      	movs	r1, #254	; 0xfe
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f7ff fdbe 	bl	800183e <xmit_datablock>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d02f      	beq.n	8001d28 <disk_write+0xd8>
			count = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	e02c      	b.n	8001d28 <disk_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <disk_write+0xf4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	f003 0306 	and.w	r3, r3, #6
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <disk_write+0x92>
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	2097      	movs	r0, #151	; 0x97
 8001cde:	f7ff fde0 	bl	80018a2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	2019      	movs	r0, #25
 8001ce6:	f7ff fddc 	bl	80018a2 <send_cmd>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11b      	bne.n	8001d28 <disk_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8001cf0:	21fc      	movs	r1, #252	; 0xfc
 8001cf2:	68b8      	ldr	r0, [r7, #8]
 8001cf4:	f7ff fda3 	bl	800183e <xmit_datablock>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <disk_write+0xc4>
				buff += 512;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <disk_write+0xa0>
 8001d12:	e000      	b.n	8001d16 <disk_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8001d14:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8001d16:	21fd      	movs	r1, #253	; 0xfd
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff fd90 	bl	800183e <xmit_datablock>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <disk_write+0xd8>
 8001d24:	2301      	movs	r3, #1
 8001d26:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8001d28:	f7ff fd34 	bl	8001794 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000990 	.word	0x20000990

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_MspInit+0x38>)
 8001d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_MspInit+0x38>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_MspInit+0x38>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f06f 0001 	mvn.w	r0, #1
 8001d74:	f000 fec0 	bl	8002af8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	46020c00 	.word	0x46020c00

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0ba      	sub	sp, #232	; 0xe8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	22c0      	movs	r2, #192	; 0xc0
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00b fca2 	bl	800d6ee <memset>
  if(hi2c->Instance==I2C2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d144      	bne.n	8001e3e <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db4:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fea9 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001dd4:	f7ff fc44 	bl	8001660 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001de0:	f043 0320 	orr.w	r3, r3, #32
 8001de4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <HAL_I2C_MspInit+0xcc>)
 8001e1c:	f000 fe94 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	37e8      	adds	r7, #232	; 0xe8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40005800 	.word	0x40005800
 8001e4c:	46020c00 	.word	0x46020c00
 8001e50:	42021400 	.word	0x42021400

08001e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0ba      	sub	sp, #232	; 0xe8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	22c0      	movs	r2, #192	; 0xc0
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f00b fc3a 	bl	800d6ee <memset>
  if(hspi->Instance==SPI3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_SPI_MspInit+0xc8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d146      	bne.n	8001f12 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8001e90:	2310      	movs	r3, #16
 8001e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fe40 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001ea6:	f7ff fbdb 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_SPI_MspInit+0xcc>)
 8001eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	; (8001f20 <HAL_SPI_MspInit+0xcc>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_SPI_MspInit+0xcc>)
 8001ebc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_SPI_MspInit+0xcc>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_SPI_MspInit+0xcc>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_SPI_MspInit+0xcc>)
 8001eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ee6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f00:	2306      	movs	r3, #6
 8001f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <HAL_SPI_MspInit+0xd0>)
 8001f0e:	f000 fe1b 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	37e8      	adds	r7, #232	; 0xe8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	46002000 	.word	0x46002000
 8001f20:	46020c00 	.word	0x46020c00
 8001f24:	42020800 	.word	0x42020800

08001f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0be      	sub	sp, #248	; 0xf8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	f107 0320 	add.w	r3, r7, #32
 8001f44:	22c0      	movs	r2, #192	; 0xc0
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00b fbd0 	bl	800d6ee <memset>
  if(huart->Instance==USART1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a72      	ldr	r2, [pc, #456]	; (800211c <HAL_UART_MspInit+0x1f4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d146      	bne.n	8001fe6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f58:	f04f 0201 	mov.w	r2, #1
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f64:	2300      	movs	r3, #0
 8001f66:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0320 	add.w	r3, r7, #32
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 fdd7 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001f78:	f7ff fb72 	bl	8001660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7c:	4b68      	ldr	r3, [pc, #416]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8001f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001f82:	4a67      	ldr	r2, [pc, #412]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001f8c:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8001f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8001f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001fb8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4851      	ldr	r0, [pc, #324]	; (8002124 <HAL_UART_MspInit+0x1fc>)
 8001fe0:	f000 fdb2 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fe4:	e095      	b.n	8002112 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_UART_MspInit+0x200>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d145      	bne.n	800207c <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ff0:	f04f 0202 	mov.w	r2, #2
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fd8b 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8002010:	f7ff fb26 	bl	8001660 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8002016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800201a:	4a41      	ldr	r2, [pc, #260]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8002026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002038:	4a39      	ldr	r2, [pc, #228]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 8002044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002050:	230c      	movs	r3, #12
 8002052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002068:	2307      	movs	r3, #7
 800206a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002072:	4619      	mov	r1, r3
 8002074:	482b      	ldr	r0, [pc, #172]	; (8002124 <HAL_UART_MspInit+0x1fc>)
 8002076:	f000 fd67 	bl	8002b48 <HAL_GPIO_Init>
}
 800207a:	e04a      	b.n	8002112 <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <HAL_UART_MspInit+0x204>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d145      	bne.n	8002112 <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002086:	f04f 0204 	mov.w	r2, #4
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002092:	2300      	movs	r3, #0
 8002094:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002096:	f107 0320 	add.w	r3, r7, #32
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fd40 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_UART_MspInit+0x182>
      Error_Handler();
 80020a6:	f7ff fadb 	bl	8001660 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 80020ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 80020b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 80020bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 80020ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x1f8>)
 80020da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002100:	2307      	movs	r3, #7
 8002102:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800210a:	4619      	mov	r1, r3
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <HAL_UART_MspInit+0x208>)
 800210e:	f000 fd1b 	bl	8002b48 <HAL_GPIO_Init>
}
 8002112:	bf00      	nop
 8002114:	37f8      	adds	r7, #248	; 0xf8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40013800 	.word	0x40013800
 8002120:	46020c00 	.word	0x46020c00
 8002124:	42020000 	.word	0x42020000
 8002128:	40004400 	.word	0x40004400
 800212c:	40004800 	.word	0x40004800
 8002130:	42020400 	.word	0x42020400

08002134 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_InitTick+0xcc>)
 8002146:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800214a:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <HAL_InitTick+0xcc>)
 800214c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002150:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_InitTick+0xcc>)
 8002156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800215a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002162:	f107 0210 	add.w	r2, r7, #16
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f002 fc19 	bl	80049a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002172:	f002 fbef 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 8002176:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_InitTick+0xd0>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	3b01      	subs	r3, #1
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_InitTick+0xd4>)
 8002188:	4a20      	ldr	r2, [pc, #128]	; (800220c <HAL_InitTick+0xd8>)
 800218a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_InitTick+0xd4>)
 800218e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002192:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_InitTick+0xd4>)
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_InitTick+0xd4>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_InitTick+0xd4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80021a6:	4818      	ldr	r0, [pc, #96]	; (8002208 <HAL_InitTick+0xd4>)
 80021a8:	f005 ffee 	bl	8008188 <HAL_TIM_Base_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80021b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d118      	bne.n	80021ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80021ba:	4813      	ldr	r0, [pc, #76]	; (8002208 <HAL_InitTick+0xd4>)
 80021bc:	f006 f846 	bl	800824c <HAL_TIM_Base_Start_IT>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80021c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10e      	bne.n	80021ec <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d808      	bhi.n	80021e6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	202a      	movs	r0, #42	; 0x2a
 80021da:	f000 fc8d 	bl	8002af8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <HAL_InitTick+0xdc>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e002      	b.n	80021ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80021ec:	202a      	movs	r0, #42	; 0x2a
 80021ee:	f000 fc9d 	bl	8002b2c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80021f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3738      	adds	r7, #56	; 0x38
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	46020c00 	.word	0x46020c00
 8002204:	431bde83 	.word	0x431bde83
 8002208:	2000099c 	.word	0x2000099c
 800220c:	40012c00 	.word	0x40012c00
 8002210:	20000008 	.word	0x20000008

08002214 <print_binary_section>:
/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim1;

/* USER CODE BEGIN EV */
void print_binary_section(unsigned int number, int start_bit, int end_bit)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  if (start_bit < 0 || end_bit < 0 || start_bit > 31 || end_bit > 31 || start_bit > end_bit)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0c      	blt.n	8002240 <print_binary_section+0x2c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db09      	blt.n	8002240 <print_binary_section+0x2c>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b1f      	cmp	r3, #31
 8002230:	dc06      	bgt.n	8002240 <print_binary_section+0x2c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b1f      	cmp	r3, #31
 8002236:	dc03      	bgt.n	8002240 <print_binary_section+0x2c>
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dd03      	ble.n	8002248 <print_binary_section+0x34>
  {
    printf("Invalid bit positions\n");
 8002240:	481d      	ldr	r0, [pc, #116]	; (80022b8 <print_binary_section+0xa4>)
 8002242:	f00b f9f9 	bl	800d638 <puts>
    return;
 8002246:	e033      	b.n	80022b0 <print_binary_section+0x9c>
  }

  unsigned int mask = (1u << (end_bit - start_bit + 1)) - 1;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	3301      	adds	r3, #1
 8002250:	2201      	movs	r2, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
  mask <<= start_bit;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	61bb      	str	r3, [r7, #24]

  unsigned int section = (number & mask) >> start_bit;
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	401a      	ands	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]

  for (int i = end_bit; i >= start_bit; --i)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	e014      	b.n	80022a2 <print_binary_section+0x8e>
  {

    printf("%d", (section >> i) & 1);
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <print_binary_section+0xa8>)
 8002288:	f00b f976 	bl	800d578 <printf>
    if (i % 8 == 0)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <print_binary_section+0x88>
    {
      printf("'");
 8002296:	2027      	movs	r0, #39	; 0x27
 8002298:	f00b f980 	bl	800d59c <putchar>
  for (int i = end_bit; i >= start_bit; --i)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3b01      	subs	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dae6      	bge.n	8002278 <print_binary_section+0x64>
    }
  }
  printf("\n");
 80022aa:	200a      	movs	r0, #10
 80022ac:	f00b f976 	bl	800d59c <putchar>
}
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	08011b9c 	.word	0x08011b9c
 80022bc:	08011bb4 	.word	0x08011bb4

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>
	...

080022c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HFSR:");
 80022cc:	4823      	ldr	r0, [pc, #140]	; (800235c <HardFault_Handler+0x94>)
 80022ce:	f00b f953 	bl	800d578 <printf>
  print_binary_section(SCB->HFSR, 0, 31);
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HardFault_Handler+0x98>)
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	221f      	movs	r2, #31
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff9a 	bl	8002214 <print_binary_section>
  printf("\n\r");
 80022e0:	4820      	ldr	r0, [pc, #128]	; (8002364 <HardFault_Handler+0x9c>)
 80022e2:	f00b f949 	bl	800d578 <printf>

  if (SCB->HFSR & (1 << 30))
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HardFault_Handler+0x98>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d033      	beq.n	800235a <HardFault_Handler+0x92>
  {
    printf("BFAR:");
 80022f2:	481d      	ldr	r0, [pc, #116]	; (8002368 <HardFault_Handler+0xa0>)
 80022f4:	f00b f940 	bl	800d578 <printf>
    print_binary_section(SCB->BFAR, 0, 31);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HardFault_Handler+0x98>)
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	221f      	movs	r2, #31
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff87 	bl	8002214 <print_binary_section>
    printf("\n\r");
 8002306:	4817      	ldr	r0, [pc, #92]	; (8002364 <HardFault_Handler+0x9c>)
 8002308:	f00b f936 	bl	800d578 <printf>

    printf("CFSR:");
 800230c:	4817      	ldr	r0, [pc, #92]	; (800236c <HardFault_Handler+0xa4>)
 800230e:	f00b f933 	bl	800d578 <printf>
    print_binary_section(SCB->CFSR, 0, 31);
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HardFault_Handler+0x98>)
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	221f      	movs	r2, #31
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff7a 	bl	8002214 <print_binary_section>
    printf("\n\r");
 8002320:	4810      	ldr	r0, [pc, #64]	; (8002364 <HardFault_Handler+0x9c>)
 8002322:	f00b f929 	bl	800d578 <printf>

    printf("DFSR:");
 8002326:	4812      	ldr	r0, [pc, #72]	; (8002370 <HardFault_Handler+0xa8>)
 8002328:	f00b f926 	bl	800d578 <printf>
    print_binary_section(SCB->DFSR, 0, 31);
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HardFault_Handler+0x98>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	221f      	movs	r2, #31
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff6d 	bl	8002214 <print_binary_section>
    printf("\n\r");
 800233a:	480a      	ldr	r0, [pc, #40]	; (8002364 <HardFault_Handler+0x9c>)
 800233c:	f00b f91c 	bl	800d578 <printf>

    printf("AFSR:");
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <HardFault_Handler+0xac>)
 8002342:	f00b f919 	bl	800d578 <printf>
    print_binary_section(SCB->AFSR, 0, 31);
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HardFault_Handler+0x98>)
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	221f      	movs	r2, #31
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff60 	bl	8002214 <print_binary_section>
    printf("\n\r");
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <HardFault_Handler+0x9c>)
 8002356:	f00b f90f 	bl	800d578 <printf>
  // printf("HFSR:);
  // binary_printf("DFSR = 0x%b\r\n", SCB->DFSR);
  // binary_printf("AFSR = 0x%b\r\n", SCB->AFSR);

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <HardFault_Handler+0x92>
 800235c:	08011bb8 	.word	0x08011bb8
 8002360:	e000ed00 	.word	0xe000ed00
 8002364:	08011bc0 	.word	0x08011bc0
 8002368:	08011bc4 	.word	0x08011bc4
 800236c:	08011bcc 	.word	0x08011bcc
 8002370:	08011bd4 	.word	0x08011bd4
 8002374:	08011bdc 	.word	0x08011bdc

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 800239c:	2020      	movs	r0, #32
 800239e:	f000 fdc3 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_REF_INT_Pin);
 80023aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023ae:	f000 fdbb 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM1_UP_IRQHandler+0x10>)
 80023be:	f005 ffe5 	bl	800838c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000099c 	.word	0x2000099c

080023cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_kill>:

int _kill(int pid, int sig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e6:	f00b f9ed 	bl	800d7c4 <__errno>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2216      	movs	r2, #22
 80023ee:	601a      	str	r2, [r3, #0]
  return -1;
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_exit>:

void _exit (int status)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffe7 	bl	80023dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800240e:	e7fe      	b.n	800240e <_exit+0x12>

08002410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e00a      	b.n	8002438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002422:	f3af 8000 	nop.w
 8002426:	4601      	mov	r1, r0
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	60ba      	str	r2, [r7, #8]
 800242e:	b2ca      	uxtb	r2, r1
 8002430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3301      	adds	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	dbf0      	blt.n	8002422 <_read+0x12>
  }

  return len;
 8002440:	687b      	ldr	r3, [r7, #4]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e009      	b.n	8002470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	60ba      	str	r2, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fd61 	bl	8000f2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	dbf1      	blt.n	800245c <_write+0x12>
  }
  return len;
 8002478:	687b      	ldr	r3, [r7, #4]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <_close>:

int _close(int file)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024aa:	605a      	str	r2, [r3, #4]
  return 0;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_isatty>:

int _isatty(int file)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <_sbrk+0x60>)
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <_sbrk+0x64>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <_sbrk+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d207      	bcs.n	800252c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800251c:	f00b f952 	bl	800d7c4 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a05      	ldr	r2, [pc, #20]	; (8002550 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200c0000 	.word	0x200c0000
 800254c:	00000400 	.word	0x00000400
 8002550:	200009e8 	.word	0x200009e8
 8002554:	20081a40 	.word	0x20081a40

08002558 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800255c:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <SystemInit+0x68>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <SystemInit+0x68>)
 8002564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <SystemInit+0x6c>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <SystemInit+0x6c>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <SystemInit+0x6c>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <SystemInit+0x6c>)
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <SystemInit+0x6c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <SystemInit+0x6c>)
 800258a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800258e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002592:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <SystemInit+0x6c>)
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <SystemInit+0x6c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <SystemInit+0x6c>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <SystemInit+0x6c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SystemInit+0x68>)
 80025ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b2:	609a      	str	r2, [r3, #8]
  #endif
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	46020c00 	.word	0x46020c00

080025c8 <SD_task>:
#include "main.h"
#include "FATFS/ff.h"
#include "cmsis_os2.h"
#include "FATFS/diskio.h"
void SD_task(void *pvParameters)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025d8:	6018      	str	r0, [r3, #0]
    FATFS fs;
    FRESULT res;
	FATFS* fs_ptr = &fs;
 80025da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025de:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80025e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025e6:	601a      	str	r2, [r3, #0]
	printf("entered SD task\n");
 80025e8:	483c      	ldr	r0, [pc, #240]	; (80026dc <SD_task+0x114>)
 80025ea:	f00b f825 	bl	800d638 <puts>
    res = f_mount(fs_ptr, "", 1); // Mounts the default drive
 80025ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025f2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4939      	ldr	r1, [pc, #228]	; (80026e0 <SD_task+0x118>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f008 f9cb 	bl	800a998 <f_mount>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
    while (res != FR_OK)
 8002608:	e012      	b.n	8002630 <SD_task+0x68>
    {

        printf("SD failed to mount. Error: %d\n", res);
 800260a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800260e:	4619      	mov	r1, r3
 8002610:	4834      	ldr	r0, [pc, #208]	; (80026e4 <SD_task+0x11c>)
 8002612:	f00a ffb1 	bl	800d578 <printf>
        osDelay(100);
 8002616:	2064      	movs	r0, #100	; 0x64
 8002618:	f008 fc45 	bl	800aea6 <osDelay>
        res = f_mount(&fs, "", 1); // Mounts the default drive
 800261c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002620:	2201      	movs	r2, #1
 8002622:	492f      	ldr	r1, [pc, #188]	; (80026e0 <SD_task+0x118>)
 8002624:	4618      	mov	r0, r3
 8002626:	f008 f9b7 	bl	800a998 <f_mount>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
    while (res != FR_OK)
 8002630:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e8      	bne.n	800260a <SD_task+0x42>



    uint32_t freeClust;

	res = f_getfree("", &freeClust, &fs_ptr); // Warning! This fills fs.n_fatent and fs.csize!
 8002638:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002640:	4619      	mov	r1, r3
 8002642:	4827      	ldr	r0, [pc, #156]	; (80026e0 <SD_task+0x118>)
 8002644:	f008 fa2b 	bl	800aa9e <f_getfree>
 8002648:	4603      	mov	r3, r0
 800264a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	while(res != FR_OK) {
 800264e:	e013      	b.n	8002678 <SD_task+0xb0>
        osDelay(100);
 8002650:	2064      	movs	r0, #100	; 0x64
 8002652:	f008 fc28 	bl	800aea6 <osDelay>
		printf("f_getfree() failed, res = %d\r\n", res);
 8002656:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800265a:	4619      	mov	r1, r3
 800265c:	4822      	ldr	r0, [pc, #136]	; (80026e8 <SD_task+0x120>)
 800265e:	f00a ff8b 	bl	800d578 <printf>
		res = f_getfree("", &freeClust, &fs_ptr); // Warning! This fills fs.n_fatent and fs.csize!
 8002662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	481c      	ldr	r0, [pc, #112]	; (80026e0 <SD_task+0x118>)
 800266e:	f008 fa16 	bl	800aa9e <f_getfree>
 8002672:	4603      	mov	r3, r0
 8002674:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	while(res != FR_OK) {
 8002678:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e7      	bne.n	8002650 <SD_task+0x88>


    FILINFO fileInfo;
    FRESULT statResult;

    statResult = f_stat("/", &fileInfo);
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	4619      	mov	r1, r3
 8002686:	4819      	ldr	r0, [pc, #100]	; (80026ec <SD_task+0x124>)
 8002688:	f008 f9d0 	bl	800aa2c <f_stat>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
    while (statResult != FR_OK)
 8002692:	e011      	b.n	80026b8 <SD_task+0xf0>
    {
        printf("SD failed to stat. Error: %d\n", statResult);
 8002694:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 8002698:	4619      	mov	r1, r3
 800269a:	4815      	ldr	r0, [pc, #84]	; (80026f0 <SD_task+0x128>)
 800269c:	f00a ff6c 	bl	800d578 <printf>
        // Handle error
        osDelay(100);
 80026a0:	2064      	movs	r0, #100	; 0x64
 80026a2:	f008 fc00 	bl	800aea6 <osDelay>

        statResult = f_stat("/", &fileInfo);
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4619      	mov	r1, r3
 80026ac:	480f      	ldr	r0, [pc, #60]	; (80026ec <SD_task+0x124>)
 80026ae:	f008 f9bd 	bl	800aa2c <f_stat>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f887 325e 	strb.w	r3, [r7, #606]	; 0x25e
    while (statResult != FR_OK)
 80026b8:	f897 325e 	ldrb.w	r3, [r7, #606]	; 0x25e
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e9      	bne.n	8002694 <SD_task+0xcc>

    }

     printf("SD stat result: %s\n", fileInfo.fname);
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	3309      	adds	r3, #9
 80026c6:	4619      	mov	r1, r3
 80026c8:	480a      	ldr	r0, [pc, #40]	; (80026f4 <SD_task+0x12c>)
 80026ca:	f00a ff55 	bl	800d578 <printf>
        // Drive is running, proceed to access its contents


    while (1)
    {
        printf("sd_task\n");
 80026ce:	480a      	ldr	r0, [pc, #40]	; (80026f8 <SD_task+0x130>)
 80026d0:	f00a ffb2 	bl	800d638 <puts>
        osDelay(100);
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	f008 fbe6 	bl	800aea6 <osDelay>
        printf("sd_task\n");
 80026da:	e7f8      	b.n	80026ce <SD_task+0x106>
 80026dc:	08011be4 	.word	0x08011be4
 80026e0:	08011bf4 	.word	0x08011bf4
 80026e4:	08011bf8 	.word	0x08011bf8
 80026e8:	08011c18 	.word	0x08011c18
 80026ec:	08011c38 	.word	0x08011c38
 80026f0:	08011c3c 	.word	0x08011c3c
 80026f4:	08011c5c 	.word	0x08011c5c
 80026f8:	08011c70 	.word	0x08011c70

080026fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80026fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002734 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002700:	f7ff ff2a 	bl	8002558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002704:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002706:	e003      	b.n	8002710 <LoopCopyDataInit>

08002708 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800270a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800270c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800270e:	3104      	adds	r1, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002710:	480a      	ldr	r0, [pc, #40]	; (800273c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002714:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002716:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002718:	d3f6      	bcc.n	8002708 <CopyDataInit>
	ldr	r2, =_sbss
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <LoopForever+0x12>)
	b	LoopFillZerobss
 800271c:	e002      	b.n	8002724 <LoopFillZerobss>

0800271e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800271e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002720:	f842 3b04 	str.w	r3, [r2], #4

08002724 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <LoopForever+0x16>)
	cmp	r2, r3
 8002726:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002728:	d3f9      	bcc.n	800271e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272a:	f00b f851 	bl	800d7d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800272e:	f7fe fc0f 	bl	8000f50 <main>

08002732 <LoopForever>:

LoopForever:
    b LoopForever
 8002732:	e7fe      	b.n	8002732 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002734:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002738:	08012194 	.word	0x08012194
	ldr	r0, =_sdata
 800273c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002740:	200006cc 	.word	0x200006cc
	ldr	r2, =_sbss
 8002744:	200006cc 	.word	0x200006cc
	ldr	r3, = _ebss
 8002748:	20081a3c 	.word	0x20081a3c

0800274c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800274c:	e7fe      	b.n	800274c <ADC1_IRQHandler>

0800274e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800275c:	b672      	cpsid	i
}
 800275e:	bf00      	nop
 8002760:	f7fe ff7e 	bl	8001660 <Error_Handler>
 8002764:	e7fe      	b.n	8002764 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	705a      	strb	r2, [r3, #1]
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002782:	f3ef 8310 	mrs	r3, PRIMASK
 8002786:	60bb      	str	r3, [r7, #8]
  return(result);
 8002788:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002792:	b672      	cpsid	i
}
 8002794:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002796:	f3bf 8f4f 	dsb	sy
}
 800279a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800279c:	f3bf 8f6f 	isb	sy
}
 80027a0:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
 80027ac:	f7fe ff58 	bl	8001660 <Error_Handler>
 80027b0:	e7fe      	b.n	80027b0 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	e008      	b.n	80027d4 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d104      	bne.n	80027d4 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80027ca:	b672      	cpsid	i
}
 80027cc:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80027ce:	f7fe ff47 	bl	8001660 <Error_Handler>
 80027d2:	e7fe      	b.n	80027d2 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	705a      	strb	r2, [r3, #1]
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80027f6:	b672      	cpsid	i
}
 80027f8:	bf00      	nop
 80027fa:	f7fe ff31 	bl	8001660 <Error_Handler>
 80027fe:	e7fe      	b.n	80027fe <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800280c:	f7fe ff28 	bl	8001660 <Error_Handler>
 8002810:	e7fe      	b.n	8002810 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	3b01      	subs	r3, #1
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <stm32_lock_release+0x4a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800282e:	b662      	cpsie	i
}
 8002830:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002848:	f00a ffbc 	bl	800d7c4 <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	2216      	movs	r2, #22
 8002850:	601a      	str	r2, [r3, #0]
    return;
 8002852:	e015      	b.n	8002880 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002854:	2002      	movs	r0, #2
 8002856:	f00a fb77 	bl	800cf48 <malloc>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff6d 	bl	800274e <stm32_lock_init>
    return;
 8002874:	e004      	b.n	8002880 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002876:	b672      	cpsid	i
}
 8002878:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800287a:	f7fe fef1 	bl	8001660 <Error_Handler>
 800287e:	e7fe      	b.n	800287e <__retarget_lock_init_recursive+0x44>
}
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <__retarget_lock_close_recursive>:
/**
  * @brief Close recursive lock
  * @param lock The lock
  */
void __retarget_lock_close_recursive(_LOCK_T lock)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  free(lock);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f00a fb62 	bl	800cf58 <free>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80028aa:	b672      	cpsid	i
}
 80028ac:	bf00      	nop
 80028ae:	f7fe fed7 	bl	8001660 <Error_Handler>
 80028b2:	e7fe      	b.n	80028b2 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff5f 	bl	800277a <stm32_lock_acquire>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d104      	bne.n	80028dc <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80028d2:	b672      	cpsid	i
}
 80028d4:	bf00      	nop
 80028d6:	f7fe fec3 	bl	8001660 <Error_Handler>
 80028da:	e7fe      	b.n	80028da <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff82 	bl	80027e8 <stm32_lock_release>
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_Init+0x4c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_Init+0x4c>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f000 f8f0 	bl	8002ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002902:	f001 fef7 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8002906:	4602      	mov	r2, r0
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_Init+0x50>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	490b      	ldr	r1, [pc, #44]	; (8002940 <HAL_Init+0x54>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_Init+0x58>)
 800291a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800291c:	200f      	movs	r0, #15
 800291e:	f7ff fc09 	bl	8002134 <HAL_InitTick>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e002      	b.n	8002932 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800292c:	f7ff fa0c 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	46020c00 	.word	0x46020c00
 8002940:	08011cf4 	.word	0x08011cf4
 8002944:	20000004 	.word	0x20000004

08002948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_IncTick+0x20>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_IncTick+0x24>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_IncTick+0x24>)
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	2000000c 	.word	0x2000000c
 800296c:	200009f8 	.word	0x200009f8

08002970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_GetTick+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	200009f8 	.word	0x200009f8

08002988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	; (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
         );
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ff4c 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b06:	f7ff ff63 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b0a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	6978      	ldr	r0, [r7, #20]
 8002b12:	f7ff ffb3 	bl	8002a7c <NVIC_EncodePriority>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff82 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b24:	bf00      	nop
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff56 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b5a:	e1ba      	b.n	8002ed2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 81aa 	beq.w	8002ecc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a55      	ldr	r2, [pc, #340]	; (8002cd0 <HAL_GPIO_Init+0x188>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d15d      	bne.n	8002c3c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002b86:	2201      	movs	r2, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002bb0:	4a48      	ldr	r2, [pc, #288]	; (8002cd4 <HAL_GPIO_Init+0x18c>)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bb8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002bba:	4a46      	ldr	r2, [pc, #280]	; (8002cd4 <HAL_GPIO_Init+0x18c>)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220b      	movs	r2, #11
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	3208      	adds	r2, #8
 8002c06:	69f9      	ldr	r1, [r7, #28]
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2202      	movs	r2, #2
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e067      	b.n	8002d0c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x104>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b12      	cmp	r3, #18
 8002c4a:	d145      	bne.n	8002cd8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69f9      	ldr	r1, [r7, #28]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e01e      	b.n	8002d0c <HAL_GPIO_Init+0x1c4>
 8002cce:	bf00      	nop
 8002cd0:	46020000 	.word	0x46020000
 8002cd4:	08011d4c 	.word	0x08011d4c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d00b      	beq.n	8002d2c <HAL_GPIO_Init+0x1e4>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d007      	beq.n	8002d2c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d20:	2b11      	cmp	r3, #17
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b12      	cmp	r3, #18
 8002d2a:	d130      	bne.n	8002d8e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002d62:	2201      	movs	r2, #1
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 0201 	and.w	r2, r3, #1
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d017      	beq.n	8002dc6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	2203      	movs	r2, #3
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d07c      	beq.n	8002ecc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002dd2:	4a47      	ldr	r2, [pc, #284]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3318      	adds	r3, #24
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0a9a      	lsrs	r2, r3, #10
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	; (8002ef4 <HAL_GPIO_Init+0x3ac>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	f002 0203 	and.w	r2, r2, #3
 8002e04:	00d2      	lsls	r2, r2, #3
 8002e06:	4093      	lsls	r3, r2
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e0e:	4938      	ldr	r1, [pc, #224]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3318      	adds	r3, #24
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002e6a:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <HAL_GPIO_Init+0x3a8>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f ae3d 	bne.w	8002b5c <HAL_GPIO_Init+0x14>
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	3724      	adds	r7, #36	; 0x24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	46022000 	.word	0x46022000
 8002ef4:	002f7f7f 	.word	0x002f7f7f

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f3e:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f814 	bl	8002f74 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002f58:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f812 	bl	8002f8a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	46022000 	.word	0x46022000

08002f74 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e08d      	b.n	80030ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fe fedc 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003000:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e006      	b.n	8003028 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003026:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d108      	bne.n	8003042 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	e007      	b.n	8003052 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003050:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003064:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003074:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69d9      	ldr	r1, [r3, #28]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d138      	bne.n	800315e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e032      	b.n	8003160 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2224      	movs	r2, #36	; 0x24
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003128:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	d139      	bne.n	80031f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800318c:	2302      	movs	r3, #2
 800318e:	e033      	b.n	80031f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e007      	b.n	8003232 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0204 	bic.w	r2, r3, #4
 800322a:	4905      	ldr	r1, [pc, #20]	; (8003240 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003232:	7bfb      	ldrb	r3, [r7, #15]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40030400 	.word	0x40030400

08003244 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_ICACHE_Enable+0x1c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_ICACHE_Enable+0x1c>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40030400 	.word	0x40030400

08003264 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e059      	b.n	800332a <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_PWR_ConfigPVD+0xd4>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	492d      	ldr	r1, [pc, #180]	; (8003338 <HAL_PWR_ConfigPVD+0xd4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 800328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328e:	4a2b      	ldr	r2, [pc, #172]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 8003290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003294:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329e:	4a27      	ldr	r2, [pc, #156]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	4a1a      	ldr	r2, [pc, #104]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0c      	ldr	r2, [pc, #48]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 800330a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_PWR_ConfigPVD+0xd8>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	46020800 	.word	0x46020800
 800333c:	46022000 	.word	0x46022000

08003340 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_PWR_EnablePVD+0x1c>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <HAL_PWR_EnablePVD+0x1c>)
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	6113      	str	r3, [r2, #16]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	46020800 	.word	0x46020800

08003360 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003368:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003370:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d10b      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d905      	bls.n	800338e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003382:	4b33      	ldr	r3, [pc, #204]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a32      	ldr	r2, [pc, #200]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e057      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d90a      	bls.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ac:	60d3      	str	r3, [r2, #12]
 80033ae:	e007      	b.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80033b0:	4b27      	ldr	r3, [pc, #156]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80033b8:	4925      	ldr	r1, [pc, #148]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033c0:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	099b      	lsrs	r3, r3, #6
 80033cc:	2232      	movs	r2, #50	; 0x32
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	4a21      	ldr	r2, [pc, #132]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033de:	e002      	b.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f3      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01b      	beq.n	8003436 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	2232      	movs	r2, #50	; 0x32
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	3301      	adds	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800341c:	e002      	b.n	8003424 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3b01      	subs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f3      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e000      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	46020800 	.word	0x46020800
 8003454:	20000004 	.word	0x20000004
 8003458:	10624dd3 	.word	0x10624dd3

0800345c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_PWREx_GetVoltageRange+0x18>)
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	46020800 	.word	0x46020800

08003478 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_PWREx_ConfigSupply+0x94>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <HAL_PWREx_ConfigSupply+0x98>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	099b      	lsrs	r3, r3, #6
 800348c:	2232      	movs	r2, #50	; 0x32
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_PWREx_ConfigSupply+0x98>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d113      	bne.n	80034cc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_PWREx_ConfigSupply+0x9c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <HAL_PWREx_ConfigSupply+0x9c>)
 80034aa:	f023 0302 	bic.w	r3, r3, #2
 80034ae:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034b0:	e002      	b.n	80034b8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_PWREx_ConfigSupply+0x9c>)
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d116      	bne.n	80034f2 <HAL_PWREx_ConfigSupply+0x7a>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f3      	bne.n	80034b2 <HAL_PWREx_ConfigSupply+0x3a>
 80034ca:	e012      	b.n	80034f2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_PWREx_ConfigSupply+0x9c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a10      	ldr	r2, [pc, #64]	; (8003514 <HAL_PWREx_ConfigSupply+0x9c>)
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034d8:	e002      	b.n	80034e0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3b01      	subs	r3, #1
 80034de:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_PWREx_ConfigSupply+0x9c>)
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <HAL_PWREx_ConfigSupply+0x7a>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f3      	bne.n	80034da <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e000      	b.n	80034fe <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000004 	.word	0x20000004
 8003510:	10624dd3 	.word	0x10624dd3
 8003514:	46020800 	.word	0x46020800

08003518 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_PWREx_EnableVddIO2+0x1c>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003526:	6113      	str	r3, [r2, #16]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	46020800 	.word	0x46020800

08003538 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	46020800 	.word	0x46020800

08003558 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	; 0x38
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f000 bec8 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	4b99      	ldr	r3, [pc, #612]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800357c:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 816c 	beq.w	800386c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_RCC_OscConfig+0x52>
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2b0c      	cmp	r3, #12
 800359e:	f040 80de 	bne.w	800375e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	f040 80da 	bne.w	800375e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f000 bea5 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035bc:	4b86      	ldr	r3, [pc, #536]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_RCC_OscConfig+0x7a>
 80035c8:	4b83      	ldr	r3, [pc, #524]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035d0:	e005      	b.n	80035de <HAL_RCC_OscConfig+0x86>
 80035d2:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035de:	4293      	cmp	r3, r2
 80035e0:	d255      	bcs.n	800368e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fa11 	bl	8004a14 <RCC_SetFlashLatencyFromMSIRange>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f000 be82 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4a75      	ldr	r2, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003608:	6093      	str	r3, [r2, #8]
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	4970      	ldr	r1, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003624:	d309      	bcc.n	800363a <HAL_RCC_OscConfig+0xe2>
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f023 021f 	bic.w	r2, r3, #31
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4969      	ldr	r1, [pc, #420]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003634:	4313      	orrs	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
 8003638:	e07e      	b.n	8003738 <HAL_RCC_OscConfig+0x1e0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	da0a      	bge.n	8003658 <HAL_RCC_OscConfig+0x100>
 8003642:	4b65      	ldr	r3, [pc, #404]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	015b      	lsls	r3, r3, #5
 8003650:	4961      	ldr	r1, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003652:	4313      	orrs	r3, r2
 8003654:	60cb      	str	r3, [r1, #12]
 8003656:	e06f      	b.n	8003738 <HAL_RCC_OscConfig+0x1e0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003660:	d30a      	bcc.n	8003678 <HAL_RCC_OscConfig+0x120>
 8003662:	4b5d      	ldr	r3, [pc, #372]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	029b      	lsls	r3, r3, #10
 8003670:	4959      	ldr	r1, [pc, #356]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003672:	4313      	orrs	r3, r2
 8003674:	60cb      	str	r3, [r1, #12]
 8003676:	e05f      	b.n	8003738 <HAL_RCC_OscConfig+0x1e0>
 8003678:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	03db      	lsls	r3, r3, #15
 8003686:	4954      	ldr	r1, [pc, #336]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
 800368c:	e054      	b.n	8003738 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800368e:	4b52      	ldr	r3, [pc, #328]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4a51      	ldr	r2, [pc, #324]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003694:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003698:	6093      	str	r3, [r2, #8]
 800369a:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	494c      	ldr	r1, [pc, #304]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80036b4:	d309      	bcc.n	80036ca <HAL_RCC_OscConfig+0x172>
 80036b6:	4b48      	ldr	r3, [pc, #288]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 021f 	bic.w	r2, r3, #31
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4945      	ldr	r1, [pc, #276]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	e028      	b.n	800371c <HAL_RCC_OscConfig+0x1c4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da0a      	bge.n	80036e8 <HAL_RCC_OscConfig+0x190>
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	493d      	ldr	r1, [pc, #244]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60cb      	str	r3, [r1, #12]
 80036e6:	e019      	b.n	800371c <HAL_RCC_OscConfig+0x1c4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d30a      	bcc.n	8003708 <HAL_RCC_OscConfig+0x1b0>
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	029b      	lsls	r3, r3, #10
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
 8003706:	e009      	b.n	800371c <HAL_RCC_OscConfig+0x1c4>
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	03db      	lsls	r3, r3, #15
 8003716:	4930      	ldr	r1, [pc, #192]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003718:	4313      	orrs	r3, r2
 800371a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	4618      	mov	r0, r3
 8003728:	f001 f974 	bl	8004a14 <RCC_SetFlashLatencyFromMSIRange>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f000 bde5 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003738:	f001 f8de 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x284>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fcf7 	bl	8002134 <HAL_InitTick>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800374c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 808a 	beq.w	800386a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375a:	f000 bdd2 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d066      	beq.n	8003834 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003772:	f7ff f8fd 	bl	8002970 <HAL_GetTick>
 8003776:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003778:	e009      	b.n	800378e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800377a:	f7ff f8f9 	bl	8002970 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d902      	bls.n	800378e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	f000 bdba 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ef      	beq.n	800377a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	4909      	ldr	r1, [pc, #36]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80037c0:	d30e      	bcc.n	80037e0 <HAL_RCC_OscConfig+0x288>
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 021f 	bic.w	r2, r3, #31
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4902      	ldr	r1, [pc, #8]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
 80037d4:	e04a      	b.n	800386c <HAL_RCC_OscConfig+0x314>
 80037d6:	bf00      	nop
 80037d8:	46020c00 	.word	0x46020c00
 80037dc:	20000008 	.word	0x20000008
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da0a      	bge.n	80037fe <HAL_RCC_OscConfig+0x2a6>
 80037e8:	4b98      	ldr	r3, [pc, #608]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	015b      	lsls	r3, r3, #5
 80037f6:	4995      	ldr	r1, [pc, #596]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60cb      	str	r3, [r1, #12]
 80037fc:	e036      	b.n	800386c <HAL_RCC_OscConfig+0x314>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d30a      	bcc.n	800381e <HAL_RCC_OscConfig+0x2c6>
 8003808:	4b90      	ldr	r3, [pc, #576]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	029b      	lsls	r3, r3, #10
 8003816:	498d      	ldr	r1, [pc, #564]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
 800381c:	e026      	b.n	800386c <HAL_RCC_OscConfig+0x314>
 800381e:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	03db      	lsls	r3, r3, #15
 800382c:	4987      	ldr	r1, [pc, #540]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
 8003832:	e01b      	b.n	800386c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003834:	4b85      	ldr	r3, [pc, #532]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a84      	ldr	r2, [pc, #528]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003840:	f7ff f896 	bl	8002970 <HAL_GetTick>
 8003844:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003846:	e009      	b.n	800385c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003848:	f7ff f892 	bl	8002970 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d902      	bls.n	800385c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	f000 bd53 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800385c:	4b7b      	ldr	r3, [pc, #492]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ef      	bne.n	8003848 <HAL_RCC_OscConfig+0x2f0>
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800386a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 808b 	beq.w	8003990 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	2b08      	cmp	r3, #8
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x334>
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d109      	bne.n	800389a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	2b03      	cmp	r3, #3
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d17d      	bne.n	8003990 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f000 bd34 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x35a>
 80038a4:	4b69      	ldr	r3, [pc, #420]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a68      	ldr	r2, [pc, #416]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e041      	b.n	8003936 <HAL_RCC_OscConfig+0x3de>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ba:	d112      	bne.n	80038e2 <HAL_RCC_OscConfig+0x38a>
 80038bc:	4b63      	ldr	r3, [pc, #396]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a62      	ldr	r2, [pc, #392]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5f      	ldr	r2, [pc, #380]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	e029      	b.n	8003936 <HAL_RCC_OscConfig+0x3de>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80038ea:	d112      	bne.n	8003912 <HAL_RCC_OscConfig+0x3ba>
 80038ec:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a56      	ldr	r2, [pc, #344]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a53      	ldr	r2, [pc, #332]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80038fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a50      	ldr	r2, [pc, #320]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800390a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e011      	b.n	8003936 <HAL_RCC_OscConfig+0x3de>
 8003912:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a4d      	ldr	r2, [pc, #308]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a4a      	ldr	r2, [pc, #296]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b48      	ldr	r3, [pc, #288]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003930:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003934:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d014      	beq.n	8003968 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800393e:	f7ff f817 	bl	8002970 <HAL_GetTick>
 8003942:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003944:	e009      	b.n	800395a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003946:	f7ff f813 	bl	8002970 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b64      	cmp	r3, #100	; 0x64
 8003952:	d902      	bls.n	800395a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	f000 bcd4 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b3c      	ldr	r3, [pc, #240]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ef      	beq.n	8003946 <HAL_RCC_OscConfig+0x3ee>
 8003966:	e013      	b.n	8003990 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003968:	f7ff f802 	bl	8002970 <HAL_GetTick>
 800396c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396e:	e009      	b.n	8003984 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fffe 	bl	8002970 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d902      	bls.n	8003984 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	f000 bcbf 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003984:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ef      	bne.n	8003970 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05f      	beq.n	8003a5c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x456>
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d114      	bne.n	80039d2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d111      	bne.n	80039d2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f000 bca3 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	4920      	ldr	r1, [pc, #128]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039d0:	e044      	b.n	8003a5c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d024      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039e6:	f7fe ffc3 	bl	8002970 <HAL_GetTick>
 80039ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ec:	e009      	b.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ee:	f7fe ffbf 	bl	8002970 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d902      	bls.n	8003a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	f000 bc80 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ef      	beq.n	80039ee <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	490b      	ldr	r1, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]
 8003a22:	e01b      	b.n	8003a5c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a30:	f7fe ff9e 	bl	8002970 <HAL_GetTick>
 8003a34:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a38:	f7fe ff9a 	bl	8002970 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d904      	bls.n	8003a50 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	f000 bc5b 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
 8003a4c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a50:	4baf      	ldr	r3, [pc, #700]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ed      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80c8 	beq.w	8003bfa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a70:	4ba7      	ldr	r3, [pc, #668]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d111      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4ba4      	ldr	r3, [pc, #656]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a84:	4aa2      	ldr	r2, [pc, #648]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003a8e:	4ba0      	ldr	r3, [pc, #640]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003aa2:	4b9c      	ldr	r3, [pc, #624]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003aae:	4b99      	ldr	r3, [pc, #612]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	4a98      	ldr	r2, [pc, #608]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe ff59 	bl	8002970 <HAL_GetTick>
 8003abe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ac0:	e009      	b.n	8003ad6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe ff55 	bl	8002970 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d902      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	f000 bc16 	b.w	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ad6:	4b8f      	ldr	r3, [pc, #572]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ef      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d05f      	beq.n	8003baa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003aea:	4b89      	ldr	r3, [pc, #548]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003af0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d037      	beq.n	8003b70 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e3f4      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01b      	beq.n	8003b5a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b22:	4b7b      	ldr	r3, [pc, #492]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b28:	4a79      	ldr	r2, [pc, #484]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b2a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003b32:	f7fe ff1d 	bl	8002970 <HAL_GetTick>
 8003b36:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fe ff19 	bl	8002970 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e3da      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b4c:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ef      	bne.n	8003b3a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4969      	ldr	r1, [pc, #420]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003b70:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b76:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003b80:	f7fe fef6 	bl	8002970 <HAL_GetTick>
 8003b84:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fef2 	bl	8002970 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e3b3      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <HAL_RCC_OscConfig+0x630>
 8003ba8:	e01b      	b.n	8003be2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003baa:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bb0:	4a57      	ldr	r2, [pc, #348]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003bb2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003bb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003bba:	f7fe fed9 	bl	8002970 <HAL_GetTick>
 8003bbe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fed5 	bl	8002970 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e396      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bd4:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ef      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003be2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf0:	4a47      	ldr	r2, [pc, #284]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8111 	beq.w	8003e2a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0e:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1c:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c22:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c2c:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d118      	bne.n	8003c7e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c4c:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c58:	f7fe fe8a 	bl	8002970 <HAL_GetTick>
 8003c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c60:	f7fe fe86 	bl	8002970 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e347      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c72:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_RCC_OscConfig+0x7bc>)
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01f      	beq.n	8003cca <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d010      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cb6:	e018      	b.n	8003cea <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cbe:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cc8:	e00f      	b.n	8003cea <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x7b8>)
 8003ce2:	f023 0304 	bic.w	r3, r3, #4
 8003ce6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d057      	beq.n	8003da2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003cf2:	f7fe fe3d 	bl	8002970 <HAL_GetTick>
 8003cf6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf8:	e00e      	b.n	8003d18 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe fe39 	bl	8002970 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d905      	bls.n	8003d18 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e2f8      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
 8003d10:	46020c00 	.word	0x46020c00
 8003d14:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d18:	4b9c      	ldr	r3, [pc, #624]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0e9      	beq.n	8003cfa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d32:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d38:	4a94      	ldr	r2, [pc, #592]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe fe14 	bl	8002970 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e2d3      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d5a:	4b8c      	ldr	r3, [pc, #560]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ed      	beq.n	8003d44 <HAL_RCC_OscConfig+0x7ec>
 8003d68:	e053      	b.n	8003e12 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d6a:	4b88      	ldr	r3, [pc, #544]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d70:	4a86      	ldr	r2, [pc, #536]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fe fdf8 	bl	8002970 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e2b7      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d92:	4b7e      	ldr	r3, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1ed      	bne.n	8003d7c <HAL_RCC_OscConfig+0x824>
 8003da0:	e037      	b.n	8003e12 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003da2:	f7fe fde5 	bl	8002970 <HAL_GetTick>
 8003da6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fe fde1 	bl	8002970 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e2a0      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc0:	4b72      	ldr	r3, [pc, #456]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ed      	bne.n	8003daa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003dce:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01a      	beq.n	8003e12 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ddc:	4b6b      	ldr	r3, [pc, #428]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003de2:	4a6a      	ldr	r2, [pc, #424]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe fdbf 	bl	8002970 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e27e      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e04:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1ed      	bne.n	8003dee <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e12:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e20:	4a5a      	ldr	r2, [pc, #360]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e22:	f023 0304 	bic.w	r3, r3, #4
 8003e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d036      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003e3e:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a52      	ldr	r2, [pc, #328]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e4a:	f7fe fd91 	bl	8002970 <HAL_GetTick>
 8003e4e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e52:	f7fe fd8d 	bl	8002970 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e24e      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e64:	4b49      	ldr	r3, [pc, #292]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x8fa>
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003e72:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a45      	ldr	r2, [pc, #276]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e7e:	f7fe fd77 	bl	8002970 <HAL_GetTick>
 8003e82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e86:	f7fe fd73 	bl	8002970 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e234      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e98:	4b3c      	ldr	r3, [pc, #240]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d036      	beq.n	8003f1e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003eb8:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ec4:	f7fe fd54 	bl	8002970 <HAL_GetTick>
 8003ec8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fd50 	bl	8002970 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e211      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003ede:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x974>
 8003eea:	e018      	b.n	8003f1e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ef8:	f7fe fd3a 	bl	8002970 <HAL_GetTick>
 8003efc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003f00:	f7fe fd36 	bl	8002970 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1f7      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d07f      	beq.n	800402a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d062      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f3c:	6093      	str	r3, [r2, #8]
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	4910      	ldr	r1, [pc, #64]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003f58:	d309      	bcc.n	8003f6e <HAL_RCC_OscConfig+0xa16>
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 021f 	bic.w	r2, r3, #31
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	4909      	ldr	r1, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60cb      	str	r3, [r1, #12]
 8003f6c:	e02a      	b.n	8003fc4 <HAL_RCC_OscConfig+0xa6c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da0c      	bge.n	8003f90 <HAL_RCC_OscConfig+0xa38>
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	4901      	ldr	r1, [pc, #4]	; (8003f8c <HAL_RCC_OscConfig+0xa34>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60cb      	str	r3, [r1, #12]
 8003f8a:	e01b      	b.n	8003fc4 <HAL_RCC_OscConfig+0xa6c>
 8003f8c:	46020c00 	.word	0x46020c00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f98:	d30a      	bcc.n	8003fb0 <HAL_RCC_OscConfig+0xa58>
 8003f9a:	4ba1      	ldr	r3, [pc, #644]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	029b      	lsls	r3, r3, #10
 8003fa8:	499d      	ldr	r1, [pc, #628]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60cb      	str	r3, [r1, #12]
 8003fae:	e009      	b.n	8003fc4 <HAL_RCC_OscConfig+0xa6c>
 8003fb0:	4b9b      	ldr	r3, [pc, #620]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	03db      	lsls	r3, r3, #15
 8003fbe:	4998      	ldr	r1, [pc, #608]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003fc4:	4b96      	ldr	r3, [pc, #600]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a95      	ldr	r2, [pc, #596]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003fca:	f043 0310 	orr.w	r3, r3, #16
 8003fce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fd0:	f7fe fcce 	bl	8002970 <HAL_GetTick>
 8003fd4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003fd8:	f7fe fcca 	bl	8002970 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e18b      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fea:	4b8d      	ldr	r3, [pc, #564]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0xa80>
 8003ff6:	e018      	b.n	800402a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003ff8:	4b89      	ldr	r3, [pc, #548]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a88      	ldr	r2, [pc, #544]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8003ffe:	f023 0310 	bic.w	r3, r3, #16
 8004002:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004004:	f7fe fcb4 	bl	8002970 <HAL_GetTick>
 8004008:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800400c:	f7fe fcb0 	bl	8002970 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e171      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800401e:	4b80      	ldr	r3, [pc, #512]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8166 	beq.w	8004300 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800403a:	4b79      	ldr	r3, [pc, #484]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b0c      	cmp	r3, #12
 8004044:	f000 80f2 	beq.w	800422c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	2b02      	cmp	r3, #2
 800404e:	f040 80c5 	bne.w	80041dc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b73      	ldr	r3, [pc, #460]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a72      	ldr	r2, [pc, #456]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800405e:	f7fe fc87 	bl	8002970 <HAL_GetTick>
 8004062:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004066:	f7fe fc83 	bl	8002970 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e144      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004078:	4b69      	ldr	r3, [pc, #420]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004084:	4b66      	ldr	r3, [pc, #408]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d111      	bne.n	80040b6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004098:	4a61      	ldr	r2, [pc, #388]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80040a2:	4b5f      	ldr	r3, [pc, #380]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80040b6:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <HAL_RCC_OscConfig+0xccc>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80040ca:	4b56      	ldr	r3, [pc, #344]	; (8004224 <HAL_RCC_OscConfig+0xccc>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	4a55      	ldr	r2, [pc, #340]	; (8004224 <HAL_RCC_OscConfig+0xccc>)
 80040d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80040d6:	4b52      	ldr	r3, [pc, #328]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ea:	3a01      	subs	r2, #1
 80040ec:	0212      	lsls	r2, r2, #8
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040f4:	430a      	orrs	r2, r1
 80040f6:	494a      	ldr	r1, [pc, #296]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	628b      	str	r3, [r1, #40]	; 0x28
 80040fc:	4b48      	ldr	r3, [pc, #288]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80040fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004100:	4b49      	ldr	r3, [pc, #292]	; (8004228 <HAL_RCC_OscConfig+0xcd0>)
 8004102:	4013      	ands	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004108:	3a01      	subs	r2, #1
 800410a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004112:	3a01      	subs	r2, #1
 8004114:	0252      	lsls	r2, r2, #9
 8004116:	b292      	uxth	r2, r2
 8004118:	4311      	orrs	r1, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800411e:	3a01      	subs	r2, #1
 8004120:	0412      	lsls	r2, r2, #16
 8004122:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800412c:	3a01      	subs	r2, #1
 800412e:	0612      	lsls	r2, r2, #24
 8004130:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004134:	430a      	orrs	r2, r1
 8004136:	493a      	ldr	r1, [pc, #232]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800413c:	4b38      	ldr	r3, [pc, #224]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	4a37      	ldr	r2, [pc, #220]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004142:	f023 0310 	bic.w	r3, r3, #16
 8004146:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	4a34      	ldr	r2, [pc, #208]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	4a32      	ldr	r2, [pc, #200]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004158:	f043 0310 	orr.w	r3, r3, #16
 800415c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800415e:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f023 020c 	bic.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	492d      	ldr	r1, [pc, #180]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800416c:	4313      	orrs	r3, r2
 800416e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004170:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004174:	2b01      	cmp	r3, #1
 8004176:	d105      	bne.n	8004184 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_RCC_OscConfig+0xccc>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_RCC_OscConfig+0xccc>)
 800417e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004182:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004184:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	4a23      	ldr	r2, [pc, #140]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80041a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041b4:	f7fe fbdc 	bl	8002970 <HAL_GetTick>
 80041b8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe fbd8 	bl	8002970 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e099      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041ce:	4b14      	ldr	r3, [pc, #80]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0xc64>
 80041da:	e091      	b.n	8004300 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 80041e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041e8:	f7fe fbc2 	bl	8002970 <HAL_GetTick>
 80041ec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fe fbbe 	bl	8002970 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e07f      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800420e:	4b04      	ldr	r3, [pc, #16]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	4a03      	ldr	r2, [pc, #12]	; (8004220 <HAL_RCC_OscConfig+0xcc8>)
 8004214:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	6293      	str	r3, [r2, #40]	; 0x28
 800421e:	e06f      	b.n	8004300 <HAL_RCC_OscConfig+0xda8>
 8004220:	46020c00 	.word	0x46020c00
 8004224:	46020800 	.word	0x46020800
 8004228:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800422c:	4b37      	ldr	r3, [pc, #220]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	2b01      	cmp	r3, #1
 800423e:	d039      	beq.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0203 	and.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424a:	429a      	cmp	r2, r3
 800424c:	d132      	bne.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d129      	bne.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d122      	bne.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11a      	bne.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	0a5b      	lsrs	r3, r3, #9
 8004282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d111      	bne.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d108      	bne.n	80042b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e024      	b.n	8004302 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d01a      	beq.n	8004300 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	4a0f      	ldr	r2, [pc, #60]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 80042d0:	f023 0310 	bic.w	r3, r3, #16
 80042d4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fe fb4b 	bl	8002970 <HAL_GetTick>
 80042da:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80042dc:	bf00      	nop
 80042de:	f7fe fb47 	bl	8002970 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d0f9      	beq.n	80042de <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_RCC_OscConfig+0xdb4>)
 80042fa:	f043 0310 	orr.w	r3, r3, #16
 80042fe:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3738      	adds	r7, #56	; 0x38
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	46020c00 	.word	0x46020c00

08004310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e1d9      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b9b      	ldr	r3, [pc, #620]	; (8004594 <HAL_RCC_ClockConfig+0x284>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b98      	ldr	r3, [pc, #608]	; (8004594 <HAL_RCC_ClockConfig+0x284>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	4996      	ldr	r1, [pc, #600]	; (8004594 <HAL_RCC_ClockConfig+0x284>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b94      	ldr	r3, [pc, #592]	; (8004594 <HAL_RCC_ClockConfig+0x284>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e1c1      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d010      	beq.n	8004382 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	4b8c      	ldr	r3, [pc, #560]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800436c:	429a      	cmp	r2, r3
 800436e:	d908      	bls.n	8004382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004370:	4b89      	ldr	r3, [pc, #548]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	4986      	ldr	r1, [pc, #536]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800437e:	4313      	orrs	r3, r2
 8004380:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	4b81      	ldr	r3, [pc, #516]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800439c:	429a      	cmp	r2, r3
 800439e:	d909      	bls.n	80043b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80043a0:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	497a      	ldr	r1, [pc, #488]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	4b74      	ldr	r3, [pc, #464]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d908      	bls.n	80043e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043d0:	4b71      	ldr	r3, [pc, #452]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	496e      	ldr	r1, [pc, #440]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d010      	beq.n	8004410 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d908      	bls.n	8004410 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80043fe:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 020f 	bic.w	r2, r3, #15
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4963      	ldr	r1, [pc, #396]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800440c:	4313      	orrs	r3, r2
 800440e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80d2 	beq.w	80045c2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b03      	cmp	r3, #3
 8004428:	d143      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800442c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d110      	bne.n	800445a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443e:	4a56      	ldr	r2, [pc, #344]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004440:	f043 0304 	orr.w	r3, r3, #4
 8004444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800445a:	f7fe fa89 	bl	8002970 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004460:	4b4e      	ldr	r3, [pc, #312]	; (800459c <HAL_RCC_ClockConfig+0x28c>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00f      	beq.n	800448c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800446e:	f7fe fa7f 	bl	8002970 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e12b      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004480:	4b46      	ldr	r3, [pc, #280]	; (800459c <HAL_RCC_ClockConfig+0x28c>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004498:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800449a:	f023 0304 	bic.w	r3, r3, #4
 800449e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044a2:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d121      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e112      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d115      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e106      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0fa      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e2:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0f2      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4926      	ldr	r1, [pc, #152]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004500:	4313      	orrs	r3, r2
 8004502:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004504:	f7fe fa34 	bl	8002970 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d112      	bne.n	8004538 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fe fa2c 	bl	8002970 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0d6      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d1ee      	bne.n	8004514 <HAL_RCC_ClockConfig+0x204>
 8004536:	e044      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d112      	bne.n	8004566 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004542:	f7fe fa15 	bl	8002970 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0bf      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b08      	cmp	r3, #8
 8004562:	d1ee      	bne.n	8004542 <HAL_RCC_ClockConfig+0x232>
 8004564:	e02d      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d123      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004570:	f7fe f9fe 	bl	8002970 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0a8      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <HAL_RCC_ClockConfig+0x288>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ee      	bne.n	8004570 <HAL_RCC_ClockConfig+0x260>
 8004592:	e016      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2b2>
 8004594:	40022000 	.word	0x40022000
 8004598:	46020c00 	.word	0x46020c00
 800459c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fe f9e6 	bl	8002970 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e090      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d1ee      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	429a      	cmp	r2, r3
 80045dc:	d208      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045de:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 020f 	bic.w	r2, r3, #15
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	493d      	ldr	r1, [pc, #244]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b3c      	ldr	r3, [pc, #240]	; (80046e4 <HAL_RCC_ClockConfig+0x3d4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d210      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <HAL_RCC_ClockConfig+0x3d4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 020f 	bic.w	r2, r3, #15
 8004606:	4937      	ldr	r1, [pc, #220]	; (80046e4 <HAL_RCC_ClockConfig+0x3d4>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_RCC_ClockConfig+0x3d4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e05b      	b.n	80046d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004638:	429a      	cmp	r2, r3
 800463a:	d208      	bcs.n	800464e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4925      	ldr	r1, [pc, #148]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d012      	beq.n	8004680 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004668:	429a      	cmp	r2, r3
 800466a:	d209      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4919      	ldr	r1, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004698:	429a      	cmp	r2, r3
 800469a:	d208      	bcs.n	80046ae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	490d      	ldr	r1, [pc, #52]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046ae:	f000 f821 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_ClockConfig+0x3d0>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	490a      	ldr	r1, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x3d8>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x3dc>)
 80046c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x3e0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd fd31 	bl	8002134 <HAL_InitTick>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	46020c00 	.word	0x46020c00
 80046e4:	40022000 	.word	0x40022000
 80046e8:	08011cf4 	.word	0x08011cf4
 80046ec:	20000004 	.word	0x20000004
 80046f0:	20000008 	.word	0x20000008

080046f4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b08b      	sub	sp, #44	; 0x2c
 80046f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004702:	4b78      	ldr	r3, [pc, #480]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800470c:	4b75      	ldr	r3, [pc, #468]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x34>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d121      	bne.n	8004766 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d11e      	bne.n	8004766 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004728:	4b6e      	ldr	r3, [pc, #440]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004734:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800473a:	0b1b      	lsrs	r3, r3, #12
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	e005      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004744:	4b67      	ldr	r3, [pc, #412]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	0f1b      	lsrs	r3, r3, #28
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004750:	4a65      	ldr	r2, [pc, #404]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004758:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004764:	e00d      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004766:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b04      	cmp	r3, #4
 8004770:	d102      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004772:	4b5e      	ldr	r3, [pc, #376]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	e004      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b08      	cmp	r3, #8
 800477c:	d101      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800477e:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004780:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	f040 80a5 	bne.w	80048d4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80047a2:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80047ae:	4b4d      	ldr	r3, [pc, #308]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d003      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0xe4>
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d022      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x128>
 80047d6:	e043      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80048f0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80047fe:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80048f4 <HAL_RCC_GetSysClockFreq+0x200>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e046      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a32 	vldr	s13, [pc, #200]	; 80048f0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800483e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004842:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80048f4 <HAL_RCC_GetSysClockFreq+0x200>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	e024      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004888:	ed97 6a01 	vldr	s12, [r7, #4]
 800488c:	eddf 5a19 	vldr	s11, [pc, #100]	; 80048f4 <HAL_RCC_GetSysClockFreq+0x200>
 8004890:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004894:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	0e1b      	lsrs	r3, r3, #24
 80048b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b4:	3301      	adds	r3, #1
 80048b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ce:	ee17 3a90 	vmov	r3, s15
 80048d2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80048d4:	6a3b      	ldr	r3, [r7, #32]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	372c      	adds	r7, #44	; 0x2c
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	46020c00 	.word	0x46020c00
 80048e8:	08011d0c 	.word	0x08011d0c
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	4b742400 	.word	0x4b742400
 80048f4:	46000000 	.word	0x46000000

080048f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048fc:	f7ff fefa 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b07      	ldr	r3, [pc, #28]	; (8004920 <HAL_RCC_GetHCLKFreq+0x28>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	4906      	ldr	r1, [pc, #24]	; (8004924 <HAL_RCC_GetHCLKFreq+0x2c>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_RCC_GetHCLKFreq+0x30>)
 8004914:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004916:	4b04      	ldr	r3, [pc, #16]	; (8004928 <HAL_RCC_GetHCLKFreq+0x30>)
 8004918:	681b      	ldr	r3, [r3, #0]
}
 800491a:	4618      	mov	r0, r3
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	46020c00 	.word	0x46020c00
 8004924:	08011cf4 	.word	0x08011cf4
 8004928:	20000004 	.word	0x20000004

0800492c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004930:	f7ff ffe2 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	4903      	ldr	r1, [pc, #12]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004948:	4618      	mov	r0, r3
 800494a:	bd80      	pop	{r7, pc}
 800494c:	46020c00 	.word	0x46020c00
 8004950:	08011d04 	.word	0x08011d04

08004954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004958:	f7ff ffce 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4903      	ldr	r1, [pc, #12]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	46020c00 	.word	0x46020c00
 8004978:	08011d04 	.word	0x08011d04

0800497c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004980:	f7ff ffba 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	46020c00 	.word	0x46020c00
 80049a0:	08011d04 	.word	0x08011d04

080049a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	221f      	movs	r2, #31
 80049b2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCC_GetClockConfig+0x68>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f003 0203 	and.w	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCC_GetClockConfig+0x68>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCC_GetClockConfig+0x68>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_RCC_GetClockConfig+0x68>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCC_GetClockConfig+0x68>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_RCC_GetClockConfig+0x6c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	46020c00 	.word	0x46020c00
 8004a10:	40022000 	.word	0x40022000

08004a14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a1c:	4b3e      	ldr	r3, [pc, #248]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a2a:	f7fe fd17 	bl	800345c <HAL_PWREx_GetVoltageRange>
 8004a2e:	6178      	str	r0, [r7, #20]
 8004a30:	e019      	b.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a32:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a38:	4a37      	ldr	r2, [pc, #220]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a3a:	f043 0304 	orr.w	r3, r3, #4
 8004a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004a42:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a50:	f7fe fd04 	bl	800345c <HAL_PWREx_GetVoltageRange>
 8004a54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a5e:	f023 0304 	bic.w	r3, r3, #4
 8004a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6c:	d003      	beq.n	8004a76 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a74:	d109      	bne.n	8004a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7c:	d202      	bcs.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004a7e:	2301      	movs	r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004a82:	e033      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004a88:	e030      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a90:	d208      	bcs.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d102      	bne.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	e025      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e035      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aaa:	d90f      	bls.n	8004acc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ab8:	d902      	bls.n	8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e015      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	e012      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e00f      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad2:	d109      	bne.n	8004ae8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d102      	bne.n	8004ae2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004adc:	2301      	movs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e004      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e001      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004ae8:	2301      	movs	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 020f 	bic.w	r2, r3, #15
 8004af4:	4909      	ldr	r1, [pc, #36]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	46020c00 	.word	0x46020c00
 8004b1c:	40022000 	.word	0x40022000

08004b20 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b0b8      	sub	sp, #224	; 0xe0
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f002 0401 	and.w	r4, r2, #1
 8004b44:	2500      	movs	r5, #0
 8004b46:	ea54 0305 	orrs.w	r3, r4, r5
 8004b4a:	d00b      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004b4c:	4bca      	ldr	r3, [pc, #808]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b52:	f023 0103 	bic.w	r1, r3, #3
 8004b56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	4ac6      	ldr	r2, [pc, #792]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f002 0802 	and.w	r8, r2, #2
 8004b70:	f04f 0900 	mov.w	r9, #0
 8004b74:	ea58 0309 	orrs.w	r3, r8, r9
 8004b78:	d00b      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004b7a:	4bbf      	ldr	r3, [pc, #764]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b80:	f023 010c 	bic.w	r1, r3, #12
 8004b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	4abb      	ldr	r2, [pc, #748]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f002 0a04 	and.w	sl, r2, #4
 8004b9e:	f04f 0b00 	mov.w	fp, #0
 8004ba2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ba8:	4bb3      	ldr	r3, [pc, #716]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bae:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004bb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb8:	4aaf      	ldr	r2, [pc, #700]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f002 0308 	and.w	r3, r2, #8
 8004bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004be0:	4ba5      	ldr	r3, [pc, #660]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	4aa1      	ldr	r2, [pc, #644]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f002 0310 	and.w	r3, r2, #16
 8004c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d00b      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004c18:	4b97      	ldr	r3, [pc, #604]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	4a93      	ldr	r2, [pc, #588]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f002 0320 	and.w	r3, r2, #32
 8004c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004c50:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c56:	f023 0107 	bic.w	r1, r3, #7
 8004c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c60:	4a85      	ldr	r2, [pc, #532]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c62:	430b      	orrs	r3, r1
 8004c64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c7e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004c88:	4b7b      	ldr	r3, [pc, #492]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c8e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c98:	4a77      	ldr	r2, [pc, #476]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004cac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cb6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004cc0:	4b6d      	ldr	r3, [pc, #436]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd0:	4a69      	ldr	r2, [pc, #420]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004cf8:	4b5f      	ldr	r3, [pc, #380]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a5b      	ldr	r2, [pc, #364]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004d30:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d36:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	4a4d      	ldr	r2, [pc, #308]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d6e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d78:	4a3f      	ldr	r2, [pc, #252]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004da0:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004da6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db0:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004db2:	430b      	orrs	r3, r1
 8004db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d00c      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de6:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004de8:	430b      	orrs	r3, r1
 8004dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	677b      	str	r3, [r7, #116]	; 0x74
 8004e00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d04f      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d02d      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	d827      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e1a:	2b60      	cmp	r3, #96	; 0x60
 8004e1c:	d02e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e1e:	2b60      	cmp	r3, #96	; 0x60
 8004e20:	d823      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d006      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d81f      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d011      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004e32:	e01a      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	4a0f      	ldr	r2, [pc, #60]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e40:	e01d      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e46:	3308      	adds	r3, #8
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f002 f9d1 	bl	80071f0 <RCCEx_PLL2_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e54:	e013      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e5a:	332c      	adds	r3, #44	; 0x2c
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f002 fa5f 	bl	8007320 <RCCEx_PLL3_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e68:	e009      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004e70:	e005      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004e72:	bf00      	nop
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004e76:	bf00      	nop
 8004e78:	46020c00 	.word	0x46020c00
        break;
 8004e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004e86:	4bb6      	ldr	r3, [pc, #728]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e8c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	4ab1      	ldr	r2, [pc, #708]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ea6:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb8:	2300      	movs	r3, #0
 8004eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ebc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	d053      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d033      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d82c      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ede:	d02f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee4:	d826      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eea:	d008      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d820      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d011      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004efc:	e01a      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004efe:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	4a97      	ldr	r2, [pc, #604]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f0a:	e01a      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f10:	3308      	adds	r3, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f002 f96c 	bl	80071f0 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f1e:	e010      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f24:	332c      	adds	r3, #44	; 0x2c
 8004f26:	4618      	mov	r0, r3
 8004f28:	f002 f9fa 	bl	8007320 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004f32:	e006      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f42:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10d      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004f4a:	4b85      	ldr	r3, [pc, #532]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f50:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004f54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f5c:	4a80      	ldr	r2, [pc, #512]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004f64:	e003      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f66:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004f6a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f84:	460b      	mov	r3, r1
 8004f86:	4313      	orrs	r3, r2
 8004f88:	d046      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004f8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f96:	d028      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f98:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f9c:	d821      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa2:	d022      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa8:	d81b      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fae:	d01c      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004fb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fb4:	d815      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fba:	d008      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d80f      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d011      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fca:	d00e      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004fcc:	e009      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f002 f90b 	bl	80071f0 <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004fe0:	e004      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10d      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ff4:	4b5a      	ldr	r3, [pc, #360]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ffa:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005006:	4a56      	ldr	r2, [pc, #344]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005008:	430b      	orrs	r3, r1
 800500a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800500e:	e003      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005010:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005014:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005024:	65bb      	str	r3, [r7, #88]	; 0x58
 8005026:	2300      	movs	r3, #0
 8005028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800502a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800502e:	460b      	mov	r3, r1
 8005030:	4313      	orrs	r3, r2
 8005032:	d03f      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	2b04      	cmp	r3, #4
 800503e:	d81e      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	08005087 	.word	0x08005087
 800504c:	0800505d 	.word	0x0800505d
 8005050:	0800506b 	.word	0x0800506b
 8005054:	08005087 	.word	0x08005087
 8005058:	08005087 	.word	0x08005087
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800505c:	4b40      	ldr	r3, [pc, #256]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005066:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005068:	e00e      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800506a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800506e:	332c      	adds	r3, #44	; 0x2c
 8005070:	4618      	mov	r0, r3
 8005072:	f002 f955 	bl	8007320 <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005086:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005088:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005090:	4b33      	ldr	r3, [pc, #204]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005096:	f023 0107 	bic.w	r1, r3, #7
 800509a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a2:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80050a4:	430b      	orrs	r3, r1
 80050a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80050b0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80050b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80050c0:	653b      	str	r3, [r7, #80]	; 0x50
 80050c2:	2300      	movs	r3, #0
 80050c4:	657b      	str	r3, [r7, #84]	; 0x54
 80050c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80050ca:	460b      	mov	r3, r1
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d04d      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80050d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050dc:	d028      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80050de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050e2:	d821      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80050e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050e8:	d024      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80050ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050ee:	d81b      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80050f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f4:	d00e      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80050f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050fa:	d815      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01b      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005104:	d110      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005110:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005112:	e012      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005118:	332c      	adds	r3, #44	; 0x2c
 800511a:	4618      	mov	r0, r3
 800511c:	f002 f900 	bl	8007320 <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005126:	e008      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800512e:	e004      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005138:	bf00      	nop
    }
    if (ret == HAL_OK)
 800513a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800513e:	2b00      	cmp	r3, #0
 8005140:	d110      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005148:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800514c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005154:	4a02      	ldr	r2, [pc, #8]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005156:	430b      	orrs	r3, r1
 8005158:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800515c:	e006      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800515e:	bf00      	nop
 8005160:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005168:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800516c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
 800517a:	2300      	movs	r3, #0
 800517c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	f000 80b5 	beq.w	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518a:	2300      	movs	r3, #0
 800518c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005190:	4b9d      	ldr	r3, [pc, #628]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d113      	bne.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	4b9a      	ldr	r3, [pc, #616]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a4:	4a98      	ldr	r2, [pc, #608]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80051ae:	4b96      	ldr	r3, [pc, #600]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80051b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051c6:	4b91      	ldr	r3, [pc, #580]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	4a90      	ldr	r2, [pc, #576]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051d2:	f7fd fbcd 	bl	8002970 <HAL_GetTick>
 80051d6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051da:	e00b      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051dc:	f7fd fbc8 	bl	8002970 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d903      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80051f2:	e005      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051f4:	4b85      	ldr	r3, [pc, #532]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ed      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005200:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005204:	2b00      	cmp	r3, #0
 8005206:	d165      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005208:	4b7f      	ldr	r3, [pc, #508]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800520a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521a:	2b00      	cmp	r3, #0
 800521c:	d023      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800521e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005222:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800522e:	4b76      	ldr	r3, [pc, #472]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800523c:	4b72      	ldr	r3, [pc, #456]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800523e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005242:	4a71      	ldr	r2, [pc, #452]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800524c:	4b6e      	ldr	r3, [pc, #440]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800524e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005252:	4a6d      	ldr	r2, [pc, #436]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005258:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800525c:	4a6a      	ldr	r2, [pc, #424]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800525e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005262:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d019      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fd fb7d 	bl	8002970 <HAL_GetTick>
 8005276:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527a:	e00d      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7fd fb78 	bl	8002970 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	f241 3388 	movw	r3, #5000	; 0x1388
 800528c:	429a      	cmp	r2, r3
 800528e:	d903      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8005296:	e006      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005298:	4b5b      	ldr	r3, [pc, #364]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800529a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ea      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80052a6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80052ae:	4b56      	ldr	r3, [pc, #344]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052c0:	4a51      	ldr	r2, [pc, #324]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052c2:	430b      	orrs	r3, r1
 80052c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052c8:	e008      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ca:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052ce:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80052d2:	e003      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80052d8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052dc:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e4:	4b48      	ldr	r3, [pc, #288]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	4a47      	ldr	r2, [pc, #284]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80052ec:	f023 0304 	bic.w	r3, r3, #4
 80052f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80052f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005300:	643b      	str	r3, [r7, #64]	; 0x40
 8005302:	2300      	movs	r3, #0
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
 8005306:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800530a:	460b      	mov	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	d042      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005318:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800531c:	d022      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800531e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005322:	d81b      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005328:	d011      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800532e:	d815      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d019      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005338:	d110      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800533a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800533e:	3308      	adds	r3, #8
 8005340:	4618      	mov	r0, r3
 8005342:	f001 ff55 	bl	80071f0 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800534c:	e00d      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534e:	4b2e      	ldr	r3, [pc, #184]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	4a2d      	ldr	r2, [pc, #180]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005358:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800535a:	e006      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8005362:	e002      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005364:	bf00      	nop
 8005366:	e000      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005368:	bf00      	nop
    }
    if (ret == HAL_OK)
 800536a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005372:	4b25      	ldr	r3, [pc, #148]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005378:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800537c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005384:	4a20      	ldr	r2, [pc, #128]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005386:	430b      	orrs	r3, r1
 8005388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800538c:	e003      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005392:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80053a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80053ac:	460b      	mov	r3, r1
 80053ae:	4313      	orrs	r3, r2
 80053b0:	d032      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80053b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053be:	d00b      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80053c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c4:	d804      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ce:	d007      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80053d6:	e004      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80053d8:	bf00      	nop
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80053e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053e2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d112      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fc:	4a02      	ldr	r2, [pc, #8]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005404:	e008      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005406:	bf00      	nop
 8005408:	46020c00 	.word	0x46020c00
 800540c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005414:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005424:	633b      	str	r3, [r7, #48]	; 0x30
 8005426:	2300      	movs	r3, #0
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800542e:	460b      	mov	r3, r1
 8005430:	4313      	orrs	r3, r2
 8005432:	d019      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800543c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005440:	d105      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005442:	4b88      	ldr	r3, [pc, #544]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	4a87      	ldr	r2, [pc, #540]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800544e:	4b85      	ldr	r3, [pc, #532]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005454:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800545c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005460:	4a80      	ldr	r2, [pc, #512]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005462:	430b      	orrs	r3, r1
 8005464:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
 8005476:	2300      	movs	r3, #0
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d00c      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005484:	4b77      	ldr	r3, [pc, #476]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005496:	4973      	ldr	r1, [pc, #460]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800549e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	2300      	movs	r3, #0
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
 80054b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d00c      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80054ba:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054cc:	4965      	ldr	r1, [pc, #404]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80054d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d00c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80054f0:	4b5c      	ldr	r3, [pc, #368]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80054f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054f6:	f023 0218 	bic.w	r2, r3, #24
 80054fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005502:	4958      	ldr	r1, [pc, #352]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800550a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d032      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800552a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800552e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005534:	4b4b      	ldr	r3, [pc, #300]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800553a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553e:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005544:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005548:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800554c:	d108      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800554e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005552:	3308      	adds	r3, #8
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fe4b 	bl	80071f0 <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 8005560:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10d      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005568:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800556a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800556e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800557a:	493a      	ldr	r1, [pc, #232]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005582:	e003      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005588:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800558c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055a2:	460b      	mov	r3, r1
 80055a4:	4313      	orrs	r3, r2
 80055a6:	d03a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80055a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055b4:	d00e      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80055b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ba:	d815      	bhi.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80055c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c4:	d110      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c6:	4b27      	ldr	r3, [pc, #156]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	4a26      	ldr	r2, [pc, #152]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80055d2:	e00e      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d8:	3308      	adds	r3, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fe08 	bl	80071f0 <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80055e6:	e004      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80055f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055f2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80055fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005600:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005604:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560c:	4915      	ldr	r1, [pc, #84]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005614:	e003      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005616:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800561a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800561e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	2300      	movs	r3, #0
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d00c      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800563a:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800563c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005640:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005648:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800564c:	4905      	ldr	r1, [pc, #20]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005654:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8005658:	4618      	mov	r0, r3
 800565a:	37e0      	adds	r7, #224	; 0xe0
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005662:	bf00      	nop
 8005664:	46020c00 	.word	0x46020c00

08005668 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005670:	4ba6      	ldr	r3, [pc, #664]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005678:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800567a:	4ba4      	ldr	r3, [pc, #656]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005684:	4ba1      	ldr	r3, [pc, #644]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3301      	adds	r3, #1
 8005690:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005692:	4b9e      	ldr	r3, [pc, #632]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	091b      	lsrs	r3, r3, #4
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800569e:	4b9b      	ldr	r3, [pc, #620]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	08db      	lsrs	r3, r3, #3
 80056a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d062      	beq.n	8005786 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	f200 8081 	bhi.w	80057ca <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d024      	beq.n	8005718 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d17a      	bne.n	80057ca <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b89      	ldr	r3, [pc, #548]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056fa:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005716:	e08f      	b.n	8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005718:	4b7c      	ldr	r3, [pc, #496]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005724:	4b79      	ldr	r3, [pc, #484]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	0f1b      	lsrs	r3, r3, #28
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	e006      	b.n	800573e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005730:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	0f1b      	lsrs	r3, r3, #28
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	4a76      	ldr	r2, [pc, #472]	; (8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005744:	ee07 3a90 	vmov	s15, r3
 8005748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005764:	ed97 6a02 	vldr	s12, [r7, #8]
 8005768:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800576c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005778:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800577c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005780:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005784:	e058      	b.n	8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005790:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005910 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005798:	4b5c      	ldr	r3, [pc, #368]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ac:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057c8:	e036      	b.n	8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057ca:	4b50      	ldr	r3, [pc, #320]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80057d6:	4b4d      	ldr	r3, [pc, #308]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80057e2:	4b4a      	ldr	r3, [pc, #296]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	0f1b      	lsrs	r3, r3, #28
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	4a49      	ldr	r2, [pc, #292]	; (8005918 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a02 	vldr	s12, [r7, #8]
 800581a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005914 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005836:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005838:	4b34      	ldr	r3, [pc, #208]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d017      	beq.n	8005874 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005844:	4b31      	ldr	r3, [pc, #196]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	0a5b      	lsrs	r3, r3, #9
 800584a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800585a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800585e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586a:	ee17 2a90 	vmov	r2, s15
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e002      	b.n	800587a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d017      	beq.n	80058b6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005890:	ee07 3a90 	vmov	s15, r3
 8005894:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800589c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ac:	ee17 2a90 	vmov	r2, s15
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	605a      	str	r2, [r3, #4]
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80058bc:	4b13      	ldr	r3, [pc, #76]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058c8:	4b10      	ldr	r3, [pc, #64]	; (800590c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	0e1b      	lsrs	r3, r3, #24
 80058ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d2:	ee07 3a90 	vmov	s15, r3
 80058d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80058da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ee:	ee17 2a90 	vmov	r2, s15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058f6:	e002      	b.n	80058fe <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
}
 80058fe:	bf00      	nop
 8005900:	3724      	adds	r7, #36	; 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	46020c00 	.word	0x46020c00
 8005910:	4b742400 	.word	0x4b742400
 8005914:	46000000 	.word	0x46000000
 8005918:	08011d0c 	.word	0x08011d0c

0800591c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005924:	4ba6      	ldr	r3, [pc, #664]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800592e:	4ba4      	ldr	r3, [pc, #656]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005938:	4ba1      	ldr	r3, [pc, #644]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	0a1b      	lsrs	r3, r3, #8
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	3301      	adds	r3, #1
 8005944:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005946:	4b9e      	ldr	r3, [pc, #632]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005952:	4b9b      	ldr	r3, [pc, #620]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	08db      	lsrs	r3, r3, #3
 8005958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d062      	beq.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b03      	cmp	r3, #3
 8005978:	f200 8081 	bhi.w	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d024      	beq.n	80059cc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d17a      	bne.n	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b89      	ldr	r3, [pc, #548]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ca:	e08f      	b.n	8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80059cc:	4b7c      	ldr	r3, [pc, #496]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80059d8:	4b79      	ldr	r3, [pc, #484]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	0f1b      	lsrs	r3, r3, #28
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	e006      	b.n	80059f2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80059e4:	4b76      	ldr	r3, [pc, #472]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	0f1b      	lsrs	r3, r3, #28
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	4a76      	ldr	r2, [pc, #472]	; (8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80059f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a38:	e058      	b.n	8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a44:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4c:	4b5c      	ldr	r3, [pc, #368]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a60:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a7c:	e036      	b.n	8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005a7e:	4b50      	ldr	r3, [pc, #320]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005a8a:	4b4d      	ldr	r3, [pc, #308]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	0f1b      	lsrs	r3, r3, #28
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005a96:	4b4a      	ldr	r3, [pc, #296]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	0f1b      	lsrs	r3, r3, #28
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	4a49      	ldr	r2, [pc, #292]	; (8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ace:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005aec:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d017      	beq.n	8005b28 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005af8:	4b31      	ldr	r3, [pc, #196]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	0a5b      	lsrs	r3, r3, #9
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1e:	ee17 2a90 	vmov	r2, s15
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e002      	b.n	8005b2e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d017      	beq.n	8005b6a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b3a:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b50:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b60:	ee17 2a90 	vmov	r2, s15
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	e002      	b.n	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d017      	beq.n	8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b92:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba2:	ee17 2a90 	vmov	r2, s15
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005baa:	e002      	b.n	8005bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
}
 8005bb2:	bf00      	nop
 8005bb4:	3724      	adds	r7, #36	; 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	46020c00 	.word	0x46020c00
 8005bc4:	4b742400 	.word	0x4b742400
 8005bc8:	46000000 	.word	0x46000000
 8005bcc:	08011d0c 	.word	0x08011d0c

08005bd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005bd8:	4ba6      	ldr	r3, [pc, #664]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005be2:	4ba4      	ldr	r3, [pc, #656]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005bec:	4ba1      	ldr	r3, [pc, #644]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005bfa:	4b9e      	ldr	r3, [pc, #632]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005c06:	4b9b      	ldr	r3, [pc, #620]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d062      	beq.n	8005cee <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	f200 8081 	bhi.w	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d024      	beq.n	8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d17a      	bne.n	8005d32 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b89      	ldr	r3, [pc, #548]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c62:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005c7e:	e08f      	b.n	8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c80:	4b7c      	ldr	r3, [pc, #496]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005c8c:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	0f1b      	lsrs	r3, r3, #28
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	e006      	b.n	8005ca6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005c98:	4b76      	ldr	r3, [pc, #472]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	0f1b      	lsrs	r3, r3, #28
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	4a76      	ldr	r2, [pc, #472]	; (8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	ee07 3a90 	vmov	s15, r3
 8005cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ccc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cec:	e058      	b.n	8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d00:	4b5c      	ldr	r3, [pc, #368]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d10:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d14:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d30:	e036      	b.n	8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d32:	4b50      	ldr	r3, [pc, #320]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005d3e:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	0f1b      	lsrs	r3, r3, #28
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	e006      	b.n	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005d4a:	4b4a      	ldr	r3, [pc, #296]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	0f1b      	lsrs	r3, r3, #28
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	4a49      	ldr	r2, [pc, #292]	; (8005e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d82:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d9e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005da0:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d017      	beq.n	8005ddc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dac:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	0a5b      	lsrs	r3, r3, #9
 8005db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd2:	ee17 2a90 	vmov	r2, s15
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d017      	beq.n	8005e1e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dee:	4b21      	ldr	r3, [pc, #132]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e04:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
 8005e1c:	e002      	b.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d017      	beq.n	8005e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e30:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	0e1b      	lsrs	r3, r3, #24
 8005e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e56:	ee17 2a90 	vmov	r2, s15
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e5e:	e002      	b.n	8005e66 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
}
 8005e66:	bf00      	nop
 8005e68:	3724      	adds	r7, #36	; 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	46020c00 	.word	0x46020c00
 8005e78:	4b742400 	.word	0x4b742400
 8005e7c:	46000000 	.word	0x46000000
 8005e80:	08011d0c 	.word	0x08011d0c

08005e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	; 0x38
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e92:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005e96:	430b      	orrs	r3, r1
 8005e98:	d145      	bne.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e9a:	4baa      	ldr	r3, [pc, #680]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005ea6:	4ba7      	ldr	r3, [pc, #668]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d108      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eba:	d104      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec2:	f001 b987 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ec6:	4b9f      	ldr	r3, [pc, #636]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed4:	d114      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005edc:	d110      	bne.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ede:	4b99      	ldr	r3, [pc, #612]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eec:	d103      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005eee:	23fa      	movs	r3, #250	; 0xfa
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ef2:	f001 b96f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005ef6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005efc:	f001 b96a 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005f00:	4b90      	ldr	r3, [pc, #576]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f14:	d103      	bne.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005f16:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1a:	f001 b95b 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
 8005f22:	f001 b957 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f2a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	d151      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f32:	4b84      	ldr	r3, [pc, #528]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d035      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2b80      	cmp	r3, #128	; 0x80
 8005f48:	d841      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	2b60      	cmp	r3, #96	; 0x60
 8005f4e:	d02a      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2b60      	cmp	r3, #96	; 0x60
 8005f54:	d83b      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d009      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2b40      	cmp	r3, #64	; 0x40
 8005f60:	d835      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d012      	beq.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f6e:	e02e      	b.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fb77 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f7e:	f001 b929 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f82:	f107 0318 	add.w	r3, r7, #24
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fcc8 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f90:	f001 b920 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fe19 	bl	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fa2:	f001 b917 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fa6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fac:	f001 b912 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fb0:	4b64      	ldr	r3, [pc, #400]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbc:	d103      	bne.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005fbe:	4b63      	ldr	r3, [pc, #396]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fc2:	f001 b907 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fca:	f001 b903 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd2:	f001 b8ff 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fda:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	d158      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005fe2:	4b58      	ldr	r3, [pc, #352]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d03b      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffc:	d846      	bhi.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006004:	d02e      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600c:	d83e      	bhi.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d00b      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800601c:	d836      	bhi.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00d      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800602c:	e02e      	b.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800602e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fb18 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800603c:	f001 b8ca 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006040:	f107 0318 	add.w	r3, r7, #24
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fc69 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800604e:	f001 b8c1 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006052:	f107 030c 	add.w	r3, r7, #12
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fdba 	bl	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006060:	f001 b8b8 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006064:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800606a:	f001 b8b3 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800606e:	4b35      	ldr	r3, [pc, #212]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607a:	d103      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800607c:	4b33      	ldr	r3, [pc, #204]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006080:	f001 b8a8 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006088:	f001 b8a4 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006090:	f001 b8a0 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006098:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800609c:	430b      	orrs	r3, r1
 800609e:	d16e      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060a6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060b2:	d034      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060ba:	d85c      	bhi.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c2:	d00b      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ca:	d854      	bhi.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d016      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060d8:	d009      	beq.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80060da:	e04c      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fac1 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ea:	f001 b873 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ee:	f107 0318 	add.w	r3, r7, #24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fc12 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060fc:	f001 b86a 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610c:	d103      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006112:	f001 b85f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800611a:	f001 b85b 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b20      	cmp	r3, #32
 8006128:	d121      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006136:	4b03      	ldr	r3, [pc, #12]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	0e1b      	lsrs	r3, r3, #24
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	e00f      	b.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006142:	bf00      	nop
 8006144:	46020c00 	.word	0x46020c00
 8006148:	0007a120 	.word	0x0007a120
 800614c:	00f42400 	.word	0x00f42400
 8006150:	02dc6c00 	.word	0x02dc6c00
 8006154:	4ba7      	ldr	r3, [pc, #668]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	0e1b      	lsrs	r3, r3, #24
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	4aa5      	ldr	r2, [pc, #660]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800616a:	f001 b833 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006172:	f001 b82f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800617a:	f001 b82b 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800617e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006182:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006186:	430b      	orrs	r3, r1
 8006188:	d17f      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800618a:	4b9a      	ldr	r3, [pc, #616]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800618c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006194:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d165      	bne.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800619c:	4b95      	ldr	r3, [pc, #596]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800619e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061a2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061ae:	d034      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061b6:	d853      	bhi.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061be:	d00b      	beq.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c6:	d84b      	bhi.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061d4:	d009      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80061d6:	e043      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fa43 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80061e6:	f000 bff5 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ea:	f107 0318 	add.w	r3, r7, #24
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fb94 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80061f8:	f000 bfec 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80061fc:	4b7d      	ldr	r3, [pc, #500]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d103      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800620a:	4b7c      	ldr	r3, [pc, #496]	; (80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800620e:	f000 bfe1 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006216:	f000 bfdd 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800621a:	4b76      	ldr	r3, [pc, #472]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b20      	cmp	r3, #32
 8006224:	d118      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006226:	4b73      	ldr	r3, [pc, #460]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006232:	4b70      	ldr	r3, [pc, #448]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	0e1b      	lsrs	r3, r3, #24
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	e006      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800623e:	4b6d      	ldr	r3, [pc, #436]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	0e1b      	lsrs	r3, r3, #24
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	4a6a      	ldr	r2, [pc, #424]	; (80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800624e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006254:	f000 bfbe 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800625c:	f000 bfba 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006264:	f000 bfb6 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800626e:	d108      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff f9f7 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
 800627e:	f000 bfa9 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
 8006286:	f000 bfa5 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	1e51      	subs	r1, r2, #1
 8006290:	430b      	orrs	r3, r1
 8006292:	d136      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006294:	4b57      	ldr	r3, [pc, #348]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80062a6:	f7fe fb55 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 80062aa:	6378      	str	r0, [r7, #52]	; 0x34
 80062ac:	f000 bf92 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d104      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fe fa1d 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80062ba:	6378      	str	r0, [r7, #52]	; 0x34
 80062bc:	f000 bf8a 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80062c0:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d106      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d103      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80062d4:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
 80062d8:	f000 bf7c 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062dc:	4b45      	ldr	r3, [pc, #276]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80062de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d107      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d104      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80062f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
 80062f6:	f000 bf6d 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
 80062fe:	f000 bf69 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006306:	1e91      	subs	r1, r2, #2
 8006308:	430b      	orrs	r3, r1
 800630a:	d136      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800630c:	4b39      	ldr	r3, [pc, #228]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800630e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800631e:	f7fe fb05 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8006322:	6378      	str	r0, [r7, #52]	; 0x34
 8006324:	f000 bf56 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2b04      	cmp	r3, #4
 800632c:	d104      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe f9e1 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006332:	6378      	str	r0, [r7, #52]	; 0x34
 8006334:	f000 bf4e 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006338:	4b2e      	ldr	r3, [pc, #184]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006344:	d106      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2b08      	cmp	r3, #8
 800634a:	d103      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
 8006350:	f000 bf40 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006354:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d107      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	2b0c      	cmp	r3, #12
 8006366:	d104      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
 800636e:	f000 bf31 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
 8006376:	f000 bf2d 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800637a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637e:	1f11      	subs	r1, r2, #4
 8006380:	430b      	orrs	r3, r1
 8006382:	d13f      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800638a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800638e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006396:	f7fe fac9 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 800639a:	6378      	str	r0, [r7, #52]	; 0x34
 800639c:	f000 bf1a 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d104      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063a6:	f7fe f9a5 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80063aa:	6378      	str	r0, [r7, #52]	; 0x34
 80063ac:	f000 bf12 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063bc:	d106      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d103      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
 80063c8:	f000 bf04 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80063ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d107      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d104      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80063e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
 80063e6:	f000 bef5 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34
 80063ee:	f000 bef1 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80063f2:	bf00      	nop
 80063f4:	46020c00 	.word	0x46020c00
 80063f8:	08011d0c 	.word	0x08011d0c
 80063fc:	02dc6c00 	.word	0x02dc6c00
 8006400:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006408:	f1a2 0108 	sub.w	r1, r2, #8
 800640c:	430b      	orrs	r3, r1
 800640e:	d136      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006410:	4ba4      	ldr	r3, [pc, #656]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800641a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	2b00      	cmp	r3, #0
 8006420:	d104      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006422:	f7fe fa83 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8006426:	6378      	str	r0, [r7, #52]	; 0x34
 8006428:	f000 bed4 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d104      	bne.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006432:	f7fe f95f 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006436:	6378      	str	r0, [r7, #52]	; 0x34
 8006438:	f000 becc 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800643c:	4b99      	ldr	r3, [pc, #612]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d106      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d103      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006450:	4b95      	ldr	r3, [pc, #596]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
 8006454:	f000 bebe 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006458:	4b92      	ldr	r3, [pc, #584]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800645a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d107      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2bc0      	cmp	r3, #192	; 0xc0
 800646a:	d104      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 800646c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
 8006472:	f000 beaf 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
 800647a:	f000 beab 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800647e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006482:	f1a2 0110 	sub.w	r1, r2, #16
 8006486:	430b      	orrs	r3, r1
 8006488:	d139      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800648a:	4b86      	ldr	r3, [pc, #536]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800648c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006494:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800649c:	f7fe fa46 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 80064a0:	6378      	str	r0, [r7, #52]	; 0x34
 80064a2:	f000 be97 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ac:	d104      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064ae:	f7fe f921 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80064b2:	6378      	str	r0, [r7, #52]	; 0x34
 80064b4:	f000 be8e 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80064b8:	4b7a      	ldr	r3, [pc, #488]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c4:	d107      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064cc:	d103      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80064ce:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
 80064d2:	f000 be7f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80064d6:	4b73      	ldr	r3, [pc, #460]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80064d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d108      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ea:	d104      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80064ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
 80064f2:	f000 be6f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
 80064fa:	f000 be6b 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80064fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006502:	f1a2 0120 	sub.w	r1, r2, #32
 8006506:	430b      	orrs	r3, r1
 8006508:	d158      	bne.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800650a:	4b66      	ldr	r3, [pc, #408]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800650c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800651c:	f7fe fa2e 	bl	800497c <HAL_RCC_GetPCLK3Freq>
 8006520:	6378      	str	r0, [r7, #52]	; 0x34
 8006522:	f000 be57 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2b01      	cmp	r3, #1
 800652a:	d104      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800652c:	f7fe f8e2 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006530:	6378      	str	r0, [r7, #52]	; 0x34
 8006532:	f000 be4f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006536:	4b5b      	ldr	r3, [pc, #364]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006542:	d106      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2b02      	cmp	r3, #2
 8006548:	d103      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800654a:	4b57      	ldr	r3, [pc, #348]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
 800654e:	f000 be41 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006552:	4b54      	ldr	r3, [pc, #336]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d107      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	2b03      	cmp	r3, #3
 8006564:	d104      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
 800656c:	f000 be32 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006570:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b20      	cmp	r3, #32
 800657a:	d11b      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	2b04      	cmp	r3, #4
 8006580:	d118      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006582:	4b48      	ldr	r3, [pc, #288]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800658e:	4b45      	ldr	r3, [pc, #276]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	0e1b      	lsrs	r3, r3, #24
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800659a:	4b42      	ldr	r3, [pc, #264]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800659c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	0e1b      	lsrs	r3, r3, #24
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	4a40      	ldr	r2, [pc, #256]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80065aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
 80065b0:	f000 be10 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
 80065b8:	f000 be0c 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80065bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80065c4:	430b      	orrs	r3, r1
 80065c6:	d173      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80065c8:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80065ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	d104      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065dc:	f7fe f88a 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80065e0:	6378      	str	r0, [r7, #52]	; 0x34
 80065e2:	f000 bdf7 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ec:	d108      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ee:	f107 0318 	add.w	r3, r7, #24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff f992 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
 80065fc:	f000 bdea 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006606:	f7fe f977 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 800660a:	6378      	str	r0, [r7, #52]	; 0x34
 800660c:	f000 bde2 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006616:	d122      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006618:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b20      	cmp	r3, #32
 8006622:	d118      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	0e1b      	lsrs	r3, r3, #24
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	e006      	b.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800663e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800664c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	f000 bdbf 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
 800665a:	f000 bdbb 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800666a:	d107      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006672:	d103      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
 8006678:	f000 bdac 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006688:	d107      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006690:	d103      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	f000 bd9d 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
 800669e:	f000 bd99 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80066a2:	bf00      	nop
 80066a4:	46020c00 	.word	0x46020c00
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	08011d0c 	.word	0x08011d0c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80066b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80066b8:	430b      	orrs	r3, r1
 80066ba:	d158      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80066bc:	4bad      	ldr	r3, [pc, #692]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d84b      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	0800670d 	.word	0x0800670d
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066fb 	.word	0x080066fb
 80066e0:	08006717 	.word	0x08006717
 80066e4:	08006721 	.word	0x08006721
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe ffbb 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f6:	f000 bd6d 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066fa:	f107 030c 	add.w	r3, r7, #12
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fa66 	bl	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006708:	f000 bd64 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800670c:	f7fe f8f4 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8006710:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006712:	f000 bd5f 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006716:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800671c:	f000 bd5a 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006720:	4b94      	ldr	r3, [pc, #592]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b20      	cmp	r3, #32
 800672a:	d118      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800672c:	4b91      	ldr	r3, [pc, #580]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006738:	4b8e      	ldr	r3, [pc, #568]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	0e1b      	lsrs	r3, r3, #24
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	e006      	b.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006744:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	0e1b      	lsrs	r3, r3, #24
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	4a89      	ldr	r2, [pc, #548]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800675a:	f000 bd3b 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006762:	f000 bd37 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800676a:	f000 bd33 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800676e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006772:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006776:	430b      	orrs	r3, r1
 8006778:	d167      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800677a:	4b7e      	ldr	r3, [pc, #504]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800677c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006780:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006784:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800678c:	d036      	beq.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006794:	d855      	bhi.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800679c:	d029      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067a4:	d84d      	bhi.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ac:	d013      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b4:	d845      	bhi.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d015      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c2:	d13e      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe ff4d 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067d2:	f000 bcff 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d6:	f107 030c 	add.w	r3, r7, #12
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff f9f8 	bl	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e4:	f000 bcf6 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80067e8:	f7fe f886 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 80067ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067ee:	f000 bcf1 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f8:	f000 bcec 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067fc:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b20      	cmp	r3, #32
 8006806:	d118      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006808:	4b5a      	ldr	r3, [pc, #360]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006814:	4b57      	ldr	r3, [pc, #348]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	e006      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006820:	4b54      	ldr	r3, [pc, #336]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	0e1b      	lsrs	r3, r3, #24
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	4a52      	ldr	r2, [pc, #328]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006834:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006836:	f000 bccd 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800683e:	f000 bcc9 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006846:	f000 bcc5 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800684a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006852:	430b      	orrs	r3, r1
 8006854:	d14c      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006856:	4b47      	ldr	r3, [pc, #284]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800685c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006860:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fe f860 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 800686c:	6378      	str	r0, [r7, #52]	; 0x34
 800686e:	f000 bcb1 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006878:	d104      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800687a:	f7fd ff3b 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 800687e:	6378      	str	r0, [r7, #52]	; 0x34
 8006880:	f000 bca8 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d107      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006898:	d103      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800689a:	4b38      	ldr	r3, [pc, #224]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
 800689e:	f000 bc99 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d11c      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068b4:	d118      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068b6:	4b2f      	ldr	r3, [pc, #188]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80068c2:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	0e1b      	lsrs	r3, r3, #24
 80068c8:	f003 030f 	and.w	r3, r3, #15
 80068cc:	e006      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80068ce:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	0e1b      	lsrs	r3, r3, #24
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	4a26      	ldr	r2, [pc, #152]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80068de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
 80068e4:	f000 bc76 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	f000 bc72 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80068f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80068f8:	430b      	orrs	r3, r1
 80068fa:	d152      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80068fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006902:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006906:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800690e:	f7fe f80d 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8006912:	6378      	str	r0, [r7, #52]	; 0x34
 8006914:	f000 bc5e 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691e:	d104      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006920:	f7fd fee8 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006924:	6378      	str	r0, [r7, #52]	; 0x34
 8006926:	f000 bc55 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693e:	d103      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006940:	4b0e      	ldr	r3, [pc, #56]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	f000 bc46 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b20      	cmp	r3, #32
 8006952:	d122      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800695a:	d11e      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	0e1b      	lsrs	r3, r3, #24
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	e00c      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006974:	46020c00 	.word	0x46020c00
 8006978:	08011d0c 	.word	0x08011d0c
 800697c:	00f42400 	.word	0x00f42400
 8006980:	4ba1      	ldr	r3, [pc, #644]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	0e1b      	lsrs	r3, r3, #24
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	4a9f      	ldr	r2, [pc, #636]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006994:	637b      	str	r3, [r7, #52]	; 0x34
 8006996:	f000 bc1d 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	f000 bc19 	b.w	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80069a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80069aa:	430b      	orrs	r3, r1
 80069ac:	d151      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80069ae:	4b96      	ldr	r3, [pc, #600]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2bc0      	cmp	r3, #192	; 0xc0
 80069be:	d024      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	2bc0      	cmp	r3, #192	; 0xc0
 80069c4:	d842      	bhi.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	2b80      	cmp	r3, #128	; 0x80
 80069ca:	d00d      	beq.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d83c      	bhi.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d011      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80069de:	e035      	b.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80069e0:	f7fd ffcc 	bl	800497c <HAL_RCC_GetPCLK3Freq>
 80069e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069e6:	e3f5      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069e8:	4b87      	ldr	r3, [pc, #540]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f4:	d102      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80069f6:	4b86      	ldr	r3, [pc, #536]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069fa:	e3eb      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a00:	e3e8      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006a02:	f7fd fe77 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006a06:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006a08:	e3e4      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a0a:	4b7f      	ldr	r3, [pc, #508]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d117      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a16:	4b7c      	ldr	r3, [pc, #496]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8006a22:	4b79      	ldr	r3, [pc, #484]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	0e1b      	lsrs	r3, r3, #24
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	e006      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006a2e:	4b76      	ldr	r3, [pc, #472]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	0e1b      	lsrs	r3, r3, #24
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	4a73      	ldr	r2, [pc, #460]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a44:	e3c6      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a4a:	e3c3      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a50:	e3c0      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a56:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	d147      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a5e:	4b6a      	ldr	r3, [pc, #424]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a70:	f7fd ff5c 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8006a74:	6378      	str	r0, [r7, #52]	; 0x34
 8006a76:	e3ad      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7e:	d103      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a80:	f7fd fe38 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006a84:	6378      	str	r0, [r7, #52]	; 0x34
 8006a86:	e3a5      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a88:	4b5f      	ldr	r3, [pc, #380]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a94:	d106      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	d102      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8006a9e:	4b5c      	ldr	r3, [pc, #368]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	e397      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006aa4:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d11b      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ab6:	d117      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ab8:	4b53      	ldr	r3, [pc, #332]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006ac4:	4b50      	ldr	r3, [pc, #320]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0e1b      	lsrs	r3, r3, #24
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	e006      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006ad0:	4b4d      	ldr	r3, [pc, #308]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	0e1b      	lsrs	r3, r3, #24
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	4a4b      	ldr	r2, [pc, #300]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae6:	e375      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	e372      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006af6:	430b      	orrs	r3, r1
 8006af8:	d164      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d120      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b0c:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d117      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b18:	4b3b      	ldr	r3, [pc, #236]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006b24:	4b38      	ldr	r3, [pc, #224]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	0e1b      	lsrs	r3, r3, #24
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	e006      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006b30:	4b35      	ldr	r3, [pc, #212]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	4a33      	ldr	r2, [pc, #204]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
 8006b46:	e345      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4c:	e342      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006b4e:	4b2e      	ldr	r3, [pc, #184]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b5c:	d112      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d10e      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b66:	4b28      	ldr	r3, [pc, #160]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b74:	d102      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006b76:	23fa      	movs	r3, #250	; 0xfa
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b7a:	e32b      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b82:	e327      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006b84:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b98:	d102      	bne.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9e:	e319      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006ba0:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d107      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb4:	d103      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbc:	e30a      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc2:	e307      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d16b      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d127      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d11e      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006bfa:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	0e1b      	lsrs	r3, r3, #24
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	e00d      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006c06:	bf00      	nop
 8006c08:	46020c00 	.word	0x46020c00
 8006c0c:	08011d0c 	.word	0x08011d0c
 8006c10:	00f42400 	.word	0x00f42400
 8006c14:	4b94      	ldr	r3, [pc, #592]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	4a92      	ldr	r2, [pc, #584]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2a:	e2d3      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c30:	e2d0      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006c32:	4b8d      	ldr	r3, [pc, #564]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c40:	d112      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c48:	d10e      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c4a:	4b87      	ldr	r3, [pc, #540]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c58:	d102      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006c5a:	23fa      	movs	r3, #250	; 0xfa
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c5e:	e2b9      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c60:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c66:	e2b5      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006c68:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c74:	d106      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7c:	d102      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006c7e:	4b7c      	ldr	r3, [pc, #496]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
 8006c82:	e2a7      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006c84:	4b78      	ldr	r3, [pc, #480]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c98:	d103      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca0:	e298      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca6:	e295      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	d147      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006cb4:	4b6c      	ldr	r3, [pc, #432]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006cbe:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cc6:	f7fd fe31 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8006cca:	6378      	str	r0, [r7, #52]	; 0x34
 8006ccc:	e282      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006cce:	4b66      	ldr	r3, [pc, #408]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cdc:	d112      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ce4:	d10e      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ce6:	4b60      	ldr	r3, [pc, #384]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf4:	d102      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006cf6:	23fa      	movs	r3, #250	; 0xfa
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cfa:	e26b      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006cfc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d02:	e267      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006d04:	4b58      	ldr	r3, [pc, #352]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d10:	d106      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d18:	d102      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006d1a:	4b55      	ldr	r3, [pc, #340]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1e:	e259      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006d20:	4b51      	ldr	r3, [pc, #324]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006d34:	d103      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3c:	e24a      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
 8006d42:	e247      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d48:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	d12d      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006d50:	4b45      	ldr	r3, [pc, #276]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d56:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006d5a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006d5c:	4b42      	ldr	r3, [pc, #264]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d68:	d105      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d102      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006d70:	4b3f      	ldr	r3, [pc, #252]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
 8006d74:	e22e      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d7c:	d107      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe fc70 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8c:	e222      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d94:	d107      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d96:	f107 0318 	add.w	r3, r7, #24
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fdbe 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
 8006da4:	e216      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	e213      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006db4:	430b      	orrs	r3, r1
 8006db6:	d15d      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006db8:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dca:	d028      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dd2:	d845      	bhi.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dda:	d013      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de2:	d83d      	bhi.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df0:	d004      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006df2:	e035      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fd fdae 	bl	8004954 <HAL_RCC_GetPCLK2Freq>
 8006df8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006dfa:	e1eb      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006dfc:	f7fd fc7a 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006e00:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e02:	e1e7      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e04:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e10:	d102      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006e12:	4b17      	ldr	r3, [pc, #92]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e16:	e1dd      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e1c:	e1da      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d117      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e2a:	4b0f      	ldr	r3, [pc, #60]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	0e1b      	lsrs	r3, r3, #24
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	e006      	b.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	4a06      	ldr	r2, [pc, #24]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e58:	e1bc      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e5e:	e1b9      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e64:	e1b6      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006e66:	bf00      	nop
 8006e68:	46020c00 	.word	0x46020c00
 8006e6c:	08011d0c 	.word	0x08011d0c
 8006e70:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e78:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	d156      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e80:	4ba5      	ldr	r3, [pc, #660]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e8a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e92:	d028      	beq.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e9a:	d845      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea2:	d013      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eaa:	d83d      	bhi.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb8:	d004      	beq.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006eba:	e035      	b.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fd fd36 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8006ec0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ec2:	e187      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ec4:	f7fd fc16 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006ec8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006eca:	e183      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ecc:	4b92      	ldr	r3, [pc, #584]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006eda:	4b90      	ldr	r3, [pc, #576]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ede:	e179      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ee4:	e176      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ee6:	4b8c      	ldr	r3, [pc, #560]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d117      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ef2:	4b89      	ldr	r3, [pc, #548]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006efe:	4b86      	ldr	r3, [pc, #536]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0e1b      	lsrs	r3, r3, #24
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	e006      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006f0a:	4b83      	ldr	r3, [pc, #524]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	0e1b      	lsrs	r3, r3, #24
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	4a81      	ldr	r2, [pc, #516]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f20:	e158      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f26:	e155      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f2c:	e152      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f32:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006f36:	430b      	orrs	r3, r1
 8006f38:	d177      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006f3a:	4b77      	ldr	r3, [pc, #476]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f40:	f003 0318 	and.w	r3, r3, #24
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	2b18      	cmp	r3, #24
 8006f4a:	d86b      	bhi.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006fb9 	.word	0x08006fb9
 8006f58:	08007025 	.word	0x08007025
 8006f5c:	08007025 	.word	0x08007025
 8006f60:	08007025 	.word	0x08007025
 8006f64:	08007025 	.word	0x08007025
 8006f68:	08007025 	.word	0x08007025
 8006f6c:	08007025 	.word	0x08007025
 8006f70:	08007025 	.word	0x08007025
 8006f74:	08006fc1 	.word	0x08006fc1
 8006f78:	08007025 	.word	0x08007025
 8006f7c:	08007025 	.word	0x08007025
 8006f80:	08007025 	.word	0x08007025
 8006f84:	08007025 	.word	0x08007025
 8006f88:	08007025 	.word	0x08007025
 8006f8c:	08007025 	.word	0x08007025
 8006f90:	08007025 	.word	0x08007025
 8006f94:	08006fc9 	.word	0x08006fc9
 8006f98:	08007025 	.word	0x08007025
 8006f9c:	08007025 	.word	0x08007025
 8006fa0:	08007025 	.word	0x08007025
 8006fa4:	08007025 	.word	0x08007025
 8006fa8:	08007025 	.word	0x08007025
 8006fac:	08007025 	.word	0x08007025
 8006fb0:	08007025 	.word	0x08007025
 8006fb4:	08006fe3 	.word	0x08006fe3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006fb8:	f7fd fce0 	bl	800497c <HAL_RCC_GetPCLK3Freq>
 8006fbc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006fbe:	e109      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006fc0:	f7fd fb98 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8006fc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006fc6:	e105      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fc8:	4b53      	ldr	r3, [pc, #332]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd4:	d102      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006fd6:	4b51      	ldr	r3, [pc, #324]	; (800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fda:	e0fb      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fe0:	e0f8      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fe2:	4b4d      	ldr	r3, [pc, #308]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d117      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fee:	4b4a      	ldr	r3, [pc, #296]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006ffa:	4b47      	ldr	r3, [pc, #284]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	0e1b      	lsrs	r3, r3, #24
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	e006      	b.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007006:	4b44      	ldr	r3, [pc, #272]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	0e1b      	lsrs	r3, r3, #24
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	4a42      	ldr	r2, [pc, #264]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800701c:	e0da      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007022:	e0d7      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007028:	e0d4      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800702a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800702e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007032:	430b      	orrs	r3, r1
 8007034:	d155      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007036:	4b38      	ldr	r3, [pc, #224]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800703c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007040:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007048:	d013      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007050:	d844      	bhi.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007058:	d013      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007060:	d83c      	bhi.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	2b00      	cmp	r3, #0
 8007066:	d014      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706e:	d014      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007070:	e034      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0318 	add.w	r3, r7, #24
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fc50 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007080:	e0a8      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe faee 	bl	8005668 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007090:	e0a0      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007092:	f7fd fb2f 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 8007096:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007098:	e09c      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800709a:	4b1f      	ldr	r3, [pc, #124]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d117      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070a6:	4b1c      	ldr	r3, [pc, #112]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80070b2:	4b19      	ldr	r3, [pc, #100]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0e1b      	lsrs	r3, r3, #24
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	e006      	b.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80070be:	4b16      	ldr	r3, [pc, #88]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	0e1b      	lsrs	r3, r3, #24
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80070ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070d4:	e07e      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070da:	e07b      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070e0:	e078      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80070e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80070ea:	430b      	orrs	r3, r1
 80070ec:	d138      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80070fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d10d      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800710e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
 8007114:	e05e      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007116:	bf00      	nop
 8007118:	46020c00 	.word	0x46020c00
 800711c:	00f42400 	.word	0x00f42400
 8007120:	08011d0c 	.word	0x08011d0c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007124:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800712a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800712e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007132:	d112      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713a:	d10e      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800713c:	4b28      	ldr	r3, [pc, #160]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800713e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800714a:	d102      	bne.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800714c:	23fa      	movs	r3, #250	; 0xfa
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007150:	e040      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007152:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007158:	e03c      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
 800715e:	e039      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007164:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007168:	430b      	orrs	r3, r1
 800716a:	d131      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800716c:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800716e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007172:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007176:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007178:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007184:	d105      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800718c:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
 8007190:	e020      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007192:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800719a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719e:	d106      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a6:	d102      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
 80071ac:	e012      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ba:	d106      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c2:	d102      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
 80071c8:	e004      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
 80071ce:	e001      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3738      	adds	r7, #56	; 0x38
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	46020c00 	.word	0x46020c00
 80071e4:	02dc6c00 	.word	0x02dc6c00
 80071e8:	016e3600 	.word	0x016e3600
 80071ec:	00f42400 	.word	0x00f42400

080071f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80071f8:	4b47      	ldr	r3, [pc, #284]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a46      	ldr	r2, [pc, #280]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80071fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007202:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007204:	f7fb fbb4 	bl	8002970 <HAL_GetTick>
 8007208:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800720a:	e008      	b.n	800721e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800720c:	f7fb fbb0 	bl	8002970 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e077      	b.n	800730e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800721e:	4b3e      	ldr	r3, [pc, #248]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f0      	bne.n	800720c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800722a:	4b3b      	ldr	r3, [pc, #236]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6811      	ldr	r1, [r2, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	3a01      	subs	r2, #1
 8007240:	0212      	lsls	r2, r2, #8
 8007242:	430a      	orrs	r2, r1
 8007244:	4934      	ldr	r1, [pc, #208]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 8007246:	4313      	orrs	r3, r2
 8007248:	62cb      	str	r3, [r1, #44]	; 0x2c
 800724a:	4b33      	ldr	r3, [pc, #204]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 800724c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800724e:	4b33      	ldr	r3, [pc, #204]	; (800731c <RCCEx_PLL2_Config+0x12c>)
 8007250:	4013      	ands	r3, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6892      	ldr	r2, [r2, #8]
 8007256:	3a01      	subs	r2, #1
 8007258:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68d2      	ldr	r2, [r2, #12]
 8007260:	3a01      	subs	r2, #1
 8007262:	0252      	lsls	r2, r2, #9
 8007264:	b292      	uxth	r2, r2
 8007266:	4311      	orrs	r1, r2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6912      	ldr	r2, [r2, #16]
 800726c:	3a01      	subs	r2, #1
 800726e:	0412      	lsls	r2, r2, #16
 8007270:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007274:	4311      	orrs	r1, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6952      	ldr	r2, [r2, #20]
 800727a:	3a01      	subs	r2, #1
 800727c:	0612      	lsls	r2, r2, #24
 800727e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007282:	430a      	orrs	r2, r1
 8007284:	4924      	ldr	r1, [pc, #144]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 8007286:	4313      	orrs	r3, r2
 8007288:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800728a:	4b23      	ldr	r3, [pc, #140]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	f023 020c 	bic.w	r2, r3, #12
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	4920      	ldr	r1, [pc, #128]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 8007298:	4313      	orrs	r3, r2
 800729a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800729c:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	491c      	ldr	r1, [pc, #112]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072b0:	f023 0310 	bic.w	r3, r3, #16
 80072b4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072b6:	4b18      	ldr	r3, [pc, #96]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	69d2      	ldr	r2, [r2, #28]
 80072c6:	00d2      	lsls	r2, r2, #3
 80072c8:	4913      	ldr	r1, [pc, #76]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80072ce:	4b12      	ldr	r3, [pc, #72]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4a11      	ldr	r2, [pc, #68]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072d4:	f043 0310 	orr.w	r3, r3, #16
 80072d8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80072da:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a0e      	ldr	r2, [pc, #56]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 80072e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072e6:	f7fb fb43 	bl	8002970 <HAL_GetTick>
 80072ea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072ec:	e008      	b.n	8007300 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072ee:	f7fb fb3f 	bl	8002970 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e006      	b.n	800730e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <RCCEx_PLL2_Config+0x128>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f0      	beq.n	80072ee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800730c:	2300      	movs	r3, #0

}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	46020c00 	.word	0x46020c00
 800731c:	80800000 	.word	0x80800000

08007320 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007328:	4b47      	ldr	r3, [pc, #284]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a46      	ldr	r2, [pc, #280]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 800732e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007332:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007334:	f7fb fb1c 	bl	8002970 <HAL_GetTick>
 8007338:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800733a:	e008      	b.n	800734e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800733c:	f7fb fb18 	bl	8002970 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e077      	b.n	800743e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800734e:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800735a:	4b3b      	ldr	r3, [pc, #236]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 800735c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6811      	ldr	r1, [r2, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6852      	ldr	r2, [r2, #4]
 800736e:	3a01      	subs	r2, #1
 8007370:	0212      	lsls	r2, r2, #8
 8007372:	430a      	orrs	r2, r1
 8007374:	4934      	ldr	r1, [pc, #208]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 8007376:	4313      	orrs	r3, r2
 8007378:	630b      	str	r3, [r1, #48]	; 0x30
 800737a:	4b33      	ldr	r3, [pc, #204]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 800737c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800737e:	4b33      	ldr	r3, [pc, #204]	; (800744c <RCCEx_PLL3_Config+0x12c>)
 8007380:	4013      	ands	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6892      	ldr	r2, [r2, #8]
 8007386:	3a01      	subs	r2, #1
 8007388:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68d2      	ldr	r2, [r2, #12]
 8007390:	3a01      	subs	r2, #1
 8007392:	0252      	lsls	r2, r2, #9
 8007394:	b292      	uxth	r2, r2
 8007396:	4311      	orrs	r1, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6912      	ldr	r2, [r2, #16]
 800739c:	3a01      	subs	r2, #1
 800739e:	0412      	lsls	r2, r2, #16
 80073a0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80073a4:	4311      	orrs	r1, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6952      	ldr	r2, [r2, #20]
 80073aa:	3a01      	subs	r2, #1
 80073ac:	0612      	lsls	r2, r2, #24
 80073ae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80073b2:	430a      	orrs	r2, r1
 80073b4:	4924      	ldr	r1, [pc, #144]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f023 020c 	bic.w	r2, r3, #12
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	4920      	ldr	r1, [pc, #128]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80073cc:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	491c      	ldr	r1, [pc, #112]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	4a1a      	ldr	r2, [pc, #104]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073e0:	f023 0310 	bic.w	r3, r3, #16
 80073e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073e6:	4b18      	ldr	r3, [pc, #96]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	69d2      	ldr	r2, [r2, #28]
 80073f6:	00d2      	lsls	r2, r2, #3
 80073f8:	4913      	ldr	r1, [pc, #76]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80073fe:	4b12      	ldr	r3, [pc, #72]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	4a11      	ldr	r2, [pc, #68]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 8007404:	f043 0310 	orr.w	r3, r3, #16
 8007408:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800740a:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a0e      	ldr	r2, [pc, #56]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 8007410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007414:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007416:	f7fb faab 	bl	8002970 <HAL_GetTick>
 800741a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800741c:	e008      	b.n	8007430 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800741e:	f7fb faa7 	bl	8002970 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e006      	b.n	800743e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <RCCEx_PLL3_Config+0x128>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	46020c00 	.word	0x46020c00
 800744c:	80800000 	.word	0x80800000

08007450 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e0fb      	b.n	800765a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a7f      	ldr	r2, [pc, #508]	; (8007664 <HAL_SPI_Init+0x214>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <HAL_SPI_Init+0x26>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a7d      	ldr	r2, [pc, #500]	; (8007668 <HAL_SPI_Init+0x218>)
 8007472:	4293      	cmp	r3, r2
 8007474:	e000      	b.n	8007478 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007476:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a78      	ldr	r2, [pc, #480]	; (8007664 <HAL_SPI_Init+0x214>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_SPI_Init+0x42>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a76      	ldr	r2, [pc, #472]	; (8007668 <HAL_SPI_Init+0x218>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d105      	bne.n	800749e <HAL_SPI_Init+0x4e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d901      	bls.n	800749e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e0dd      	b.n	800765a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fe16 	bl	80080d0 <SPI_GetPacketSize>
 80074a4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a6e      	ldr	r2, [pc, #440]	; (8007664 <HAL_SPI_Init+0x214>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_SPI_Init+0x6a>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a6c      	ldr	r2, [pc, #432]	; (8007668 <HAL_SPI_Init+0x218>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d102      	bne.n	80074c0 <HAL_SPI_Init+0x70>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d816      	bhi.n	80074ee <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074c4:	4a69      	ldr	r2, [pc, #420]	; (800766c <HAL_SPI_Init+0x21c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a68      	ldr	r2, [pc, #416]	; (8007670 <HAL_SPI_Init+0x220>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_SPI_Init+0x98>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a66      	ldr	r2, [pc, #408]	; (8007674 <HAL_SPI_Init+0x224>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_SPI_Init+0x98>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a65      	ldr	r2, [pc, #404]	; (8007678 <HAL_SPI_Init+0x228>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d104      	bne.n	80074f2 <HAL_SPI_Init+0xa2>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d901      	bls.n	80074f2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e0b3      	b.n	800765a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fa fca4 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800752e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007538:	d119      	bne.n	800756e <HAL_SPI_Init+0x11e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007542:	d103      	bne.n	800754c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10c      	bne.n	800756e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800755c:	d107      	bne.n	800756e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800756c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00f      	beq.n	800759a <HAL_SPI_Init+0x14a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	2b06      	cmp	r3, #6
 8007580:	d90b      	bls.n	800759a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e007      	b.n	80075aa <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	69da      	ldr	r2, [r3, #28]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075bc:	ea42 0103 	orr.w	r1, r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007616:	ea42 0103 	orr.w	r1, r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	46002000 	.word	0x46002000
 8007668:	56002000 	.word	0x56002000
 800766c:	40013000 	.word	0x40013000
 8007670:	50013000 	.word	0x50013000
 8007674:	40003800 	.word	0x40003800
 8007678:	50003800 	.word	0x50003800

0800767c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3320      	adds	r3, #32
 8007692:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_SPI_Transmit+0x2a>
 80076a2:	2302      	movs	r3, #2
 80076a4:	e203      	b.n	8007aae <HAL_SPI_Transmit+0x432>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ae:	f7fb f95f 	bl	8002970 <HAL_GetTick>
 80076b2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d007      	beq.n	80076d0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
 80076c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80076cc:	7efb      	ldrb	r3, [r7, #27]
 80076ce:	e1ee      	b.n	8007aae <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_SPI_Transmit+0x60>
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80076e8:	7efb      	ldrb	r3, [r7, #27]
 80076ea:	e1e0      	b.n	8007aae <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2203      	movs	r2, #3
 80076f0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	88fa      	ldrh	r2, [r7, #6]
 8007706:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800773c:	d108      	bne.n	8007750 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e009      	b.n	8007764 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007762:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	041b      	lsls	r3, r3, #16
 800776e:	88f9      	ldrh	r1, [r7, #6]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	430b      	orrs	r3, r1
 8007776:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10c      	bne.n	80077b0 <HAL_SPI_Transmit+0x134>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800779e:	d107      	bne.n	80077b0 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b0f      	cmp	r3, #15
 80077b6:	d95b      	bls.n	8007870 <HAL_SPI_Transmit+0x1f4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a8f      	ldr	r2, [pc, #572]	; (80079fc <HAL_SPI_Transmit+0x380>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d04f      	beq.n	8007862 <HAL_SPI_Transmit+0x1e6>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a8e      	ldr	r2, [pc, #568]	; (8007a00 <HAL_SPI_Transmit+0x384>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d04a      	beq.n	8007862 <HAL_SPI_Transmit+0x1e6>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a8c      	ldr	r2, [pc, #560]	; (8007a04 <HAL_SPI_Transmit+0x388>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d045      	beq.n	8007862 <HAL_SPI_Transmit+0x1e6>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a8b      	ldr	r2, [pc, #556]	; (8007a08 <HAL_SPI_Transmit+0x38c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d147      	bne.n	8007870 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80077e0:	e03f      	b.n	8007862 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d114      	bne.n	800781a <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007800:	1d1a      	adds	r2, r3, #4
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007818:	e023      	b.n	8007862 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800781a:	f7fb f8a9 	bl	8002970 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d803      	bhi.n	8007832 <HAL_SPI_Transmit+0x1b6>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d102      	bne.n	8007838 <HAL_SPI_Transmit+0x1bc>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d114      	bne.n	8007862 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fb7b 	bl	8007f34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e125      	b.n	8007aae <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1b9      	bne.n	80077e2 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800786e:	e0f8      	b.n	8007a62 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b07      	cmp	r3, #7
 8007876:	f240 80ed 	bls.w	8007a54 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800787a:	e05d      	b.n	8007938 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d132      	bne.n	80078f0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d918      	bls.n	80078c8 <HAL_SPI_Transmit+0x24c>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d014      	beq.n	80078c8 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b02      	subs	r3, #2
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80078c6:	e037      	b.n	8007938 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078cc:	881a      	ldrh	r2, [r3, #0]
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d6:	1c9a      	adds	r2, r3, #2
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80078ee:	e023      	b.n	8007938 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f0:	f7fb f83e 	bl	8002970 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d803      	bhi.n	8007908 <HAL_SPI_Transmit+0x28c>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d102      	bne.n	800790e <HAL_SPI_Transmit+0x292>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d114      	bne.n	8007938 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fb10 	bl	8007f34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e0ba      	b.n	8007aae <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d19b      	bne.n	800787c <HAL_SPI_Transmit+0x200>
 8007944:	e08d      	b.n	8007a62 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b02      	cmp	r3, #2
 8007952:	d15b      	bne.n	8007a0c <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b03      	cmp	r3, #3
 800795e:	d918      	bls.n	8007992 <HAL_SPI_Transmit+0x316>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d914      	bls.n	8007992 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007978:	1d1a      	adds	r2, r3, #4
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b04      	subs	r3, #4
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007990:	e060      	b.n	8007a54 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b01      	cmp	r3, #1
 800799c:	d917      	bls.n	80079ce <HAL_SPI_Transmit+0x352>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d013      	beq.n	80079ce <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b4:	1c9a      	adds	r2, r3, #2
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b02      	subs	r3, #2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80079cc:	e042      	b.n	8007a54 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3320      	adds	r3, #32
 80079d8:	7812      	ldrb	r2, [r2, #0]
 80079da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80079f8:	e02c      	b.n	8007a54 <HAL_SPI_Transmit+0x3d8>
 80079fa:	bf00      	nop
 80079fc:	40013000 	.word	0x40013000
 8007a00:	50013000 	.word	0x50013000
 8007a04:	40003800 	.word	0x40003800
 8007a08:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a0c:	f7fa ffb0 	bl	8002970 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d803      	bhi.n	8007a24 <HAL_SPI_Transmit+0x3a8>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a22:	d102      	bne.n	8007a2a <HAL_SPI_Transmit+0x3ae>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d114      	bne.n	8007a54 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 fa82 	bl	8007f34 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e02c      	b.n	8007aae <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f47f af72 	bne.w	8007946 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2108      	movs	r1, #8
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 fb01 	bl	8008074 <SPI_WaitOnFlagUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7e:	f043 0220 	orr.w	r2, r3, #32
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fa53 	bl	8007f34 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e000      	b.n	8007aae <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 8007aac:	7efb      	ldrb	r3, [r7, #27]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop

08007ab8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	; 0x30
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3320      	adds	r3, #32
 8007ad2:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3330      	adds	r3, #48	; 0x30
 8007ada:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x32>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e21f      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007af2:	f7fa ff3d 	bl	8002970 <HAL_GetTick>
 8007af6:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007af8:	887b      	ldrh	r3, [r7, #2]
 8007afa:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007afc:	887b      	ldrh	r3, [r7, #2]
 8007afe:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d009      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b1e:	e204      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x7a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x7a>
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b44:	e1f1      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	887a      	ldrh	r2, [r7, #2]
 8007b68:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	887a      	ldrh	r2, [r7, #2]
 8007b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	887a      	ldrh	r2, [r7, #2]
 8007b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007b9c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	0c1b      	lsrs	r3, r3, #16
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	8879      	ldrh	r1, [r7, #2]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	6812      	ldr	r2, [r2, #0]
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10c      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x132>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd8:	d107      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	f240 8085 	bls.w	8007cfe <HAL_SPI_TransmitReceive+0x246>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a7b      	ldr	r2, [pc, #492]	; (8007de8 <HAL_SPI_TransmitReceive+0x330>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d078      	beq.n	8007cf0 <HAL_SPI_TransmitReceive+0x238>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a7a      	ldr	r2, [pc, #488]	; (8007dec <HAL_SPI_TransmitReceive+0x334>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d073      	beq.n	8007cf0 <HAL_SPI_TransmitReceive+0x238>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a78      	ldr	r2, [pc, #480]	; (8007df0 <HAL_SPI_TransmitReceive+0x338>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d06e      	beq.n	8007cf0 <HAL_SPI_TransmitReceive+0x238>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a77      	ldr	r2, [pc, #476]	; (8007df4 <HAL_SPI_TransmitReceive+0x33c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d170      	bne.n	8007cfe <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c1c:	e068      	b.n	8007cf0 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d11a      	bne.n	8007c62 <HAL_SPI_TransmitReceive+0x1aa>
 8007c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d017      	beq.n	8007c62 <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6812      	ldr	r2, [r2, #0]
 8007c3c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c42:	1d1a      	adds	r2, r3, #4
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c60:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	695a      	ldr	r2, [r3, #20]
 8007c68:	f248 0308 	movw	r3, #32776	; 0x8008
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d01a      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x1f0>
 8007c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d017      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c82:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c88:	1d1a      	adds	r2, r3, #4
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007ca6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ca8:	f7fa fe62 	bl	8002970 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d803      	bhi.n	8007cc0 <HAL_SPI_TransmitReceive+0x208>
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d102      	bne.n	8007cc6 <HAL_SPI_TransmitReceive+0x20e>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d114      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f934 	bl	8007f34 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e11c      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d193      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x166>
 8007cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d190      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007cfc:	e0ee      	b.n	8007edc <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b07      	cmp	r3, #7
 8007d04:	f240 80e4 	bls.w	8007ed0 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007d08:	e066      	b.n	8007dd8 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d119      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x294>
 8007d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d016      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d22:	881a      	ldrh	r2, [r3, #0]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2c:	1c9a      	adds	r2, r3, #2
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d11a      	bne.n	8007d90 <HAL_SPI_TransmitReceive+0x2d8>
 8007d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d017      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	8812      	ldrh	r2, [r2, #0]
 8007d68:	b292      	uxth	r2, r2
 8007d6a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d70:	1c9a      	adds	r2, r3, #2
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d90:	f7fa fdee 	bl	8002970 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d803      	bhi.n	8007da8 <HAL_SPI_TransmitReceive+0x2f0>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d102      	bne.n	8007dae <HAL_SPI_TransmitReceive+0x2f6>
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d114      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 f8c0 	bl	8007f34 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e0a8      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d195      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x252>
 8007dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d192      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x252>
 8007de4:	e07a      	b.n	8007edc <HAL_SPI_TransmitReceive+0x424>
 8007de6:	bf00      	nop
 8007de8:	40013000 	.word	0x40013000
 8007dec:	50013000 	.word	0x50013000
 8007df0:	40003800 	.word	0x40003800
 8007df4:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d11b      	bne.n	8007e3e <HAL_SPI_TransmitReceive+0x386>
 8007e06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d018      	beq.n	8007e3e <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3320      	adds	r3, #32
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d11d      	bne.n	8007e88 <HAL_SPI_TransmitReceive+0x3d0>
 8007e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d01a      	beq.n	8007e88 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5e:	7812      	ldrb	r2, [r2, #0]
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007e86:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e88:	f7fa fd72 	bl	8002970 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d803      	bhi.n	8007ea0 <HAL_SPI_TransmitReceive+0x3e8>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d102      	bne.n	8007ea6 <HAL_SPI_TransmitReceive+0x3ee>
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d114      	bne.n	8007ed0 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f844 	bl	8007f34 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e02c      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d190      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x340>
 8007ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d18d      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 f8c4 	bl	8008074 <SPI_WaitOnFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f816 	bl	8007f34 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e001      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 8007f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3728      	adds	r7, #40	; 0x28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop

08007f34 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0208 	orr.w	r2, r2, #8
 8007f52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0210 	orr.w	r2, r2, #16
 8007f62:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d014      	beq.n	8007fce <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00f      	beq.n	8007fce <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0220 	orr.w	r2, r2, #32
 8007fcc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d014      	beq.n	8008004 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00f      	beq.n	8008004 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fea:	f043 0204 	orr.w	r2, r3, #4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008002:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008014:	f043 0201 	orr.w	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00f      	beq.n	8008058 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803e:	f043 0208 	orr.w	r2, r3, #8
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699a      	ldr	r2, [r3, #24]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008056:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008068:	bf00      	nop
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008084:	e010      	b.n	80080a8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008086:	f7fa fc73 	bl	8002970 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d803      	bhi.n	800809e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d102      	bne.n	80080a4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e00f      	b.n	80080c8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695a      	ldr	r2, [r3, #20]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4013      	ands	r3, r2
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	bf0c      	ite	eq
 80080b8:	2301      	moveq	r3, #1
 80080ba:	2300      	movne	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d0df      	beq.n	8008086 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	3301      	adds	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	3307      	adds	r3, #7
 80080ee:	08db      	lsrs	r3, r3, #3
 80080f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	d12e      	bne.n	800817a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008126:	2302      	movs	r3, #2
 8008128:	e028      	b.n	800817c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008156:	ea42 0103 	orr.w	r1, r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e049      	b.n	800822e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f841 	bl	8008236 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f000 fa58 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
	...

0800824c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	d001      	beq.n	8008264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e072      	b.n	800834a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0201 	orr.w	r2, r2, #1
 800827a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a35      	ldr	r2, [pc, #212]	; (8008358 <HAL_TIM_Base_Start_IT+0x10c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d040      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a34      	ldr	r2, [pc, #208]	; (800835c <HAL_TIM_Base_Start_IT+0x110>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d03b      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008298:	d036      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082a2:	d031      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a2d      	ldr	r2, [pc, #180]	; (8008360 <HAL_TIM_Base_Start_IT+0x114>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d02c      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <HAL_TIM_Base_Start_IT+0x118>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d027      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <HAL_TIM_Base_Start_IT+0x11c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d022      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a29      	ldr	r2, [pc, #164]	; (800836c <HAL_TIM_Base_Start_IT+0x120>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d01d      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a27      	ldr	r2, [pc, #156]	; (8008370 <HAL_TIM_Base_Start_IT+0x124>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d018      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a26      	ldr	r2, [pc, #152]	; (8008374 <HAL_TIM_Base_Start_IT+0x128>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d013      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a24      	ldr	r2, [pc, #144]	; (8008378 <HAL_TIM_Base_Start_IT+0x12c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a23      	ldr	r2, [pc, #140]	; (800837c <HAL_TIM_Base_Start_IT+0x130>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a21      	ldr	r2, [pc, #132]	; (8008380 <HAL_TIM_Base_Start_IT+0x134>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0xbc>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a20      	ldr	r2, [pc, #128]	; (8008384 <HAL_TIM_Base_Start_IT+0x138>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d115      	bne.n	8008334 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <HAL_TIM_Base_Start_IT+0x13c>)
 8008310:	4013      	ands	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b06      	cmp	r3, #6
 8008318:	d015      	beq.n	8008346 <HAL_TIM_Base_Start_IT+0xfa>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008320:	d011      	beq.n	8008346 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008332:	e008      	b.n	8008346 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e000      	b.n	8008348 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40012c00 	.word	0x40012c00
 800835c:	50012c00 	.word	0x50012c00
 8008360:	40000400 	.word	0x40000400
 8008364:	50000400 	.word	0x50000400
 8008368:	40000800 	.word	0x40000800
 800836c:	50000800 	.word	0x50000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	50000c00 	.word	0x50000c00
 8008378:	40013400 	.word	0x40013400
 800837c:	50013400 	.word	0x50013400
 8008380:	40014000 	.word	0x40014000
 8008384:	50014000 	.word	0x50014000
 8008388:	00010007 	.word	0x00010007

0800838c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d020      	beq.n	80083f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01b      	beq.n	80083f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0202 	mvn.w	r2, #2
 80083c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f931 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 80083dc:	e005      	b.n	80083ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f923 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f934 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d020      	beq.n	800843c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01b      	beq.n	800843c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f06f 0204 	mvn.w	r2, #4
 800840c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f90b 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 8008428:	e005      	b.n	8008436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8fd 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f90e 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d020      	beq.n	8008488 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01b      	beq.n	8008488 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f06f 0208 	mvn.w	r2, #8
 8008458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2204      	movs	r2, #4
 800845e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f8e5 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 8008474:	e005      	b.n	8008482 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8d7 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8e8 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f003 0310 	and.w	r3, r3, #16
 800848e:	2b00      	cmp	r3, #0
 8008490:	d020      	beq.n	80084d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01b      	beq.n	80084d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0210 	mvn.w	r2, #16
 80084a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2208      	movs	r2, #8
 80084aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f8bf 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 80084c0:	e005      	b.n	80084ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f8b1 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8c2 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0201 	mvn.w	r2, #1
 80084f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7f9 f8a2 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00c      	beq.n	8008526 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d007      	beq.n	8008526 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800851e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f9af 	bl	8008884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00c      	beq.n	800854a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f9a7 	bl	8008898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f87c 	bl	8008666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00c      	beq.n	8008592 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f003 0320 	and.w	r3, r3, #32
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f06f 0220 	mvn.w	r2, #32
 800858a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f96f 	bl	8008870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00c      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80085ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f97b 	bl	80088ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00c      	beq.n	80085da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80085d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f973 	bl	80088c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00c      	beq.n	80085fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80085f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f96b 	bl	80088d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800861a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f963 	bl	80088e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a68      	ldr	r2, [pc, #416]	; (8008830 <TIM_Base_SetConfig+0x1b4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d02b      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a67      	ldr	r2, [pc, #412]	; (8008834 <TIM_Base_SetConfig+0x1b8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d027      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a2:	d023      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086aa:	d01f      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a62      	ldr	r2, [pc, #392]	; (8008838 <TIM_Base_SetConfig+0x1bc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d01b      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a61      	ldr	r2, [pc, #388]	; (800883c <TIM_Base_SetConfig+0x1c0>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d017      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a60      	ldr	r2, [pc, #384]	; (8008840 <TIM_Base_SetConfig+0x1c4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d013      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a5f      	ldr	r2, [pc, #380]	; (8008844 <TIM_Base_SetConfig+0x1c8>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00f      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a5e      	ldr	r2, [pc, #376]	; (8008848 <TIM_Base_SetConfig+0x1cc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00b      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a5d      	ldr	r2, [pc, #372]	; (800884c <TIM_Base_SetConfig+0x1d0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d007      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a5c      	ldr	r2, [pc, #368]	; (8008850 <TIM_Base_SetConfig+0x1d4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d003      	beq.n	80086ec <TIM_Base_SetConfig+0x70>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a5b      	ldr	r2, [pc, #364]	; (8008854 <TIM_Base_SetConfig+0x1d8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d108      	bne.n	80086fe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a4b      	ldr	r2, [pc, #300]	; (8008830 <TIM_Base_SetConfig+0x1b4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d043      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a4a      	ldr	r2, [pc, #296]	; (8008834 <TIM_Base_SetConfig+0x1b8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d03f      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008714:	d03b      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800871c:	d037      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a45      	ldr	r2, [pc, #276]	; (8008838 <TIM_Base_SetConfig+0x1bc>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d033      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a44      	ldr	r2, [pc, #272]	; (800883c <TIM_Base_SetConfig+0x1c0>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d02f      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a43      	ldr	r2, [pc, #268]	; (8008840 <TIM_Base_SetConfig+0x1c4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d02b      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a42      	ldr	r2, [pc, #264]	; (8008844 <TIM_Base_SetConfig+0x1c8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d027      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a41      	ldr	r2, [pc, #260]	; (8008848 <TIM_Base_SetConfig+0x1cc>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d023      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a40      	ldr	r2, [pc, #256]	; (800884c <TIM_Base_SetConfig+0x1d0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d01f      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a3f      	ldr	r2, [pc, #252]	; (8008850 <TIM_Base_SetConfig+0x1d4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d01b      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a3e      	ldr	r2, [pc, #248]	; (8008854 <TIM_Base_SetConfig+0x1d8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d017      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a3d      	ldr	r2, [pc, #244]	; (8008858 <TIM_Base_SetConfig+0x1dc>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d013      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a3c      	ldr	r2, [pc, #240]	; (800885c <TIM_Base_SetConfig+0x1e0>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a3b      	ldr	r2, [pc, #236]	; (8008860 <TIM_Base_SetConfig+0x1e4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a3a      	ldr	r2, [pc, #232]	; (8008864 <TIM_Base_SetConfig+0x1e8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a39      	ldr	r2, [pc, #228]	; (8008868 <TIM_Base_SetConfig+0x1ec>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_Base_SetConfig+0x112>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a38      	ldr	r2, [pc, #224]	; (800886c <TIM_Base_SetConfig+0x1f0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d108      	bne.n	80087a0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a1a      	ldr	r2, [pc, #104]	; (8008830 <TIM_Base_SetConfig+0x1b4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d023      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a19      	ldr	r2, [pc, #100]	; (8008834 <TIM_Base_SetConfig+0x1b8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d01f      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <TIM_Base_SetConfig+0x1d4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d01b      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <TIM_Base_SetConfig+0x1d8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d017      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <TIM_Base_SetConfig+0x1dc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d013      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a1b      	ldr	r2, [pc, #108]	; (800885c <TIM_Base_SetConfig+0x1e0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00f      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a1a      	ldr	r2, [pc, #104]	; (8008860 <TIM_Base_SetConfig+0x1e4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d00b      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a19      	ldr	r2, [pc, #100]	; (8008864 <TIM_Base_SetConfig+0x1e8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d007      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a18      	ldr	r2, [pc, #96]	; (8008868 <TIM_Base_SetConfig+0x1ec>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <TIM_Base_SetConfig+0x198>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a17      	ldr	r2, [pc, #92]	; (800886c <TIM_Base_SetConfig+0x1f0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d103      	bne.n	800881c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	615a      	str	r2, [r3, #20]
}
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40012c00 	.word	0x40012c00
 8008834:	50012c00 	.word	0x50012c00
 8008838:	40000400 	.word	0x40000400
 800883c:	50000400 	.word	0x50000400
 8008840:	40000800 	.word	0x40000800
 8008844:	50000800 	.word	0x50000800
 8008848:	40000c00 	.word	0x40000c00
 800884c:	50000c00 	.word	0x50000c00
 8008850:	40013400 	.word	0x40013400
 8008854:	50013400 	.word	0x50013400
 8008858:	40014000 	.word	0x40014000
 800885c:	50014000 	.word	0x50014000
 8008860:	40014400 	.word	0x40014400
 8008864:	50014400 	.word	0x50014400
 8008868:	40014800 	.word	0x40014800
 800886c:	50014800 	.word	0x50014800

08008870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e042      	b.n	8008994 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7f9 fb01 	bl	8001f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2224      	movs	r2, #36	; 0x24
 800892a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa68 	bl	8008e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f8c3 	bl	8008ad8 <UART_SetConfig>
 8008952:	4603      	mov	r3, r0
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e01b      	b.n	8008994 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800896a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800897a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0201 	orr.w	r2, r2, #1
 800898a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fae7 	bl	8008f60 <UART_CheckIdleState>
 8008992:	4603      	mov	r3, r0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08a      	sub	sp, #40	; 0x28
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	f040 808b 	bne.w	8008ace <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <HAL_UART_Transmit+0x28>
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e083      	b.n	8008ad0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d2:	2b80      	cmp	r3, #128	; 0x80
 80089d4:	d107      	bne.n	80089e6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089e4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2221      	movs	r2, #33	; 0x21
 80089f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089f6:	f7f9 ffbb 	bl	8002970 <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	88fa      	ldrh	r2, [r7, #6]
 8008a08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d108      	bne.n	8008a28 <HAL_UART_Transmit+0x8c>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	e003      	b.n	8008a30 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a30:	e030      	b.n	8008a94 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2180      	movs	r1, #128	; 0x80
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 fb39 	bl	80090b4 <UART_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e03d      	b.n	8008ad0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	e007      	b.n	8008a82 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1c8      	bne.n	8008a32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2140      	movs	r1, #64	; 0x40
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fb02 	bl	80090b4 <UART_WaitOnFlagUntilTimeout>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e006      	b.n	8008ad0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	e000      	b.n	8008ad0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008ace:	2302      	movs	r3, #2
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008adc:	b094      	sub	sp, #80	; 0x50
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b7e      	ldr	r3, [pc, #504]	; (8008ce8 <UART_SetConfig+0x210>)
 8008aee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	431a      	orrs	r2, r3
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4977      	ldr	r1, [pc, #476]	; (8008cec <UART_SetConfig+0x214>)
 8008b10:	4019      	ands	r1, r3
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	68d9      	ldr	r1, [r3, #12]
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	ea40 0301 	orr.w	r3, r0, r1
 8008b32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b6a      	ldr	r3, [pc, #424]	; (8008ce8 <UART_SetConfig+0x210>)
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d009      	beq.n	8008b58 <UART_SetConfig+0x80>
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	4b69      	ldr	r3, [pc, #420]	; (8008cf0 <UART_SetConfig+0x218>)
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d004      	beq.n	8008b58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	6a1a      	ldr	r2, [r3, #32]
 8008b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b54:	4313      	orrs	r3, r2
 8008b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008b62:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	f023 000f 	bic.w	r0, r3, #15
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	ea40 0301 	orr.w	r3, r0, r1
 8008b86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b59      	ldr	r3, [pc, #356]	; (8008cf4 <UART_SetConfig+0x21c>)
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d102      	bne.n	8008b98 <UART_SetConfig+0xc0>
 8008b92:	2301      	movs	r3, #1
 8008b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b96:	e029      	b.n	8008bec <UART_SetConfig+0x114>
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	4b56      	ldr	r3, [pc, #344]	; (8008cf8 <UART_SetConfig+0x220>)
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d102      	bne.n	8008ba8 <UART_SetConfig+0xd0>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba6:	e021      	b.n	8008bec <UART_SetConfig+0x114>
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b53      	ldr	r3, [pc, #332]	; (8008cfc <UART_SetConfig+0x224>)
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d102      	bne.n	8008bb8 <UART_SetConfig+0xe0>
 8008bb2:	2304      	movs	r3, #4
 8008bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb6:	e019      	b.n	8008bec <UART_SetConfig+0x114>
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4b50      	ldr	r3, [pc, #320]	; (8008d00 <UART_SetConfig+0x228>)
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d102      	bne.n	8008bc8 <UART_SetConfig+0xf0>
 8008bc2:	2308      	movs	r3, #8
 8008bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc6:	e011      	b.n	8008bec <UART_SetConfig+0x114>
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	4b4d      	ldr	r3, [pc, #308]	; (8008d04 <UART_SetConfig+0x22c>)
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d102      	bne.n	8008bd8 <UART_SetConfig+0x100>
 8008bd2:	2310      	movs	r3, #16
 8008bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd6:	e009      	b.n	8008bec <UART_SetConfig+0x114>
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b42      	ldr	r3, [pc, #264]	; (8008ce8 <UART_SetConfig+0x210>)
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d102      	bne.n	8008be8 <UART_SetConfig+0x110>
 8008be2:	2320      	movs	r3, #32
 8008be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be6:	e001      	b.n	8008bec <UART_SetConfig+0x114>
 8008be8:	2300      	movs	r3, #0
 8008bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b3d      	ldr	r3, [pc, #244]	; (8008ce8 <UART_SetConfig+0x210>)
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d005      	beq.n	8008c02 <UART_SetConfig+0x12a>
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4b3d      	ldr	r3, [pc, #244]	; (8008cf0 <UART_SetConfig+0x218>)
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	f040 8085 	bne.w	8008d0c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c04:	2200      	movs	r2, #0
 8008c06:	623b      	str	r3, [r7, #32]
 8008c08:	627a      	str	r2, [r7, #36]	; 0x24
 8008c0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c0e:	f7fd f939 	bl	8005e84 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c12:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80e8 	beq.w	8008dec <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	4a39      	ldr	r2, [pc, #228]	; (8008d08 <UART_SetConfig+0x230>)
 8008c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c26:	461a      	mov	r2, r3
 8008c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	4413      	add	r3, r2
 8008c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d305      	bcc.n	8008c4c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d903      	bls.n	8008c54 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c52:	e048      	b.n	8008ce6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c56:	2200      	movs	r2, #0
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	61fa      	str	r2, [r7, #28]
 8008c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	4a29      	ldr	r2, [pc, #164]	; (8008d08 <UART_SetConfig+0x230>)
 8008c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2200      	movs	r2, #0
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	617a      	str	r2, [r7, #20]
 8008c6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c76:	f7f7 ff9f 	bl	8000bb8 <__aeabi_uldivmod>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4619      	mov	r1, r3
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	020b      	lsls	r3, r1, #8
 8008c8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c90:	0202      	lsls	r2, r0, #8
 8008c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c94:	6849      	ldr	r1, [r1, #4]
 8008c96:	0849      	lsrs	r1, r1, #1
 8008c98:	2000      	movs	r0, #0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	eb12 0804 	adds.w	r8, r2, r4
 8008ca2:	eb43 0905 	adc.w	r9, r3, r5
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	60fa      	str	r2, [r7, #12]
 8008cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	f7f7 ff7e 	bl	8000bb8 <__aeabi_uldivmod>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cca:	d308      	bcc.n	8008cde <UART_SetConfig+0x206>
 8008ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cd2:	d204      	bcs.n	8008cde <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cda:	60da      	str	r2, [r3, #12]
 8008cdc:	e003      	b.n	8008ce6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008ce4:	e082      	b.n	8008dec <UART_SetConfig+0x314>
 8008ce6:	e081      	b.n	8008dec <UART_SetConfig+0x314>
 8008ce8:	46002400 	.word	0x46002400
 8008cec:	cfff69f3 	.word	0xcfff69f3
 8008cf0:	56002400 	.word	0x56002400
 8008cf4:	40013800 	.word	0x40013800
 8008cf8:	40004400 	.word	0x40004400
 8008cfc:	40004800 	.word	0x40004800
 8008d00:	40004c00 	.word	0x40004c00
 8008d04:	40005000 	.word	0x40005000
 8008d08:	08011dcc 	.word	0x08011dcc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d14:	d13c      	bne.n	8008d90 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d18:	2200      	movs	r2, #0
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d22:	f7fd f8af 	bl	8005e84 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d26:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d05e      	beq.n	8008dec <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	4a39      	ldr	r2, [pc, #228]	; (8008e18 <UART_SetConfig+0x340>)
 8008d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d40:	005a      	lsls	r2, r3, #1
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	441a      	add	r2, r3
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d56:	2b0f      	cmp	r3, #15
 8008d58:	d916      	bls.n	8008d88 <UART_SetConfig+0x2b0>
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d60:	d212      	bcs.n	8008d88 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f023 030f 	bic.w	r3, r3, #15
 8008d6a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008d84:	60da      	str	r2, [r3, #12]
 8008d86:	e031      	b.n	8008dec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d8e:	e02d      	b.n	8008dec <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d92:	2200      	movs	r2, #0
 8008d94:	469a      	mov	sl, r3
 8008d96:	4693      	mov	fp, r2
 8008d98:	4650      	mov	r0, sl
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	f7fd f872 	bl	8005e84 <HAL_RCCEx_GetPeriphCLKFreq>
 8008da0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d021      	beq.n	8008dec <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	4a1a      	ldr	r2, [pc, #104]	; (8008e18 <UART_SetConfig+0x340>)
 8008dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db2:	461a      	mov	r2, r3
 8008db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dce:	2b0f      	cmp	r3, #15
 8008dd0:	d909      	bls.n	8008de6 <UART_SetConfig+0x30e>
 8008dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd8:	d205      	bcs.n	8008de6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60da      	str	r2, [r3, #12]
 8008de4:	e002      	b.n	8008dec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	2201      	movs	r2, #1
 8008df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	2201      	movs	r2, #1
 8008df8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	2200      	movs	r2, #0
 8008e00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	2200      	movs	r2, #0
 8008e06:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3750      	adds	r7, #80	; 0x50
 8008e10:	46bd      	mov	sp, r7
 8008e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e16:	bf00      	nop
 8008e18:	08011dcc 	.word	0x08011dcc

08008e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01a      	beq.n	8008f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f1a:	d10a      	bne.n	8008f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	605a      	str	r2, [r3, #4]
  }
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b098      	sub	sp, #96	; 0x60
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f70:	f7f9 fcfe 	bl	8002970 <HAL_GetTick>
 8008f74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d12f      	bne.n	8008fe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f88e 	bl	80090b4 <UART_WaitOnFlagUntilTimeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d022      	beq.n	8008fe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8008fbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e6      	bne.n	8008f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e063      	b.n	80090ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d149      	bne.n	8009086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f857 	bl	80090b4 <UART_WaitOnFlagUntilTimeout>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d03c      	beq.n	8009086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	623b      	str	r3, [r7, #32]
   return(result);
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
 800902c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e6      	bne.n	800900c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	60fb      	str	r3, [r7, #12]
   return(result);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	64bb      	str	r3, [r7, #72]	; 0x48
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800905e:	61fa      	str	r2, [r7, #28]
 8009060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	69b9      	ldr	r1, [r7, #24]
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	617b      	str	r3, [r7, #20]
   return(result);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e5      	bne.n	800903e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2220      	movs	r2, #32
 8009076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e012      	b.n	80090ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3758      	adds	r7, #88	; 0x58
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c4:	e049      	b.n	800915a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090cc:	d045      	beq.n	800915a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ce:	f7f9 fc4f 	bl	8002970 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d302      	bcc.n	80090e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e048      	b.n	800917a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d031      	beq.n	800915a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b08      	cmp	r3, #8
 8009102:	d110      	bne.n	8009126 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2208      	movs	r2, #8
 800910a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f000 f838 	bl	8009182 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2208      	movs	r2, #8
 8009116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e029      	b.n	800917a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009134:	d111      	bne.n	800915a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800913e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f81e 	bl	8009182 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e00f      	b.n	800917a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69da      	ldr	r2, [r3, #28]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	4013      	ands	r3, r2
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	bf0c      	ite	eq
 800916a:	2301      	moveq	r3, #1
 800916c:	2300      	movne	r3, #0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	461a      	mov	r2, r3
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	429a      	cmp	r2, r3
 8009176:	d0a6      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009182:	b480      	push	{r7}
 8009184:	b095      	sub	sp, #84	; 0x54
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800919e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a8:	643b      	str	r3, [r7, #64]	; 0x40
 80091aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e6      	bne.n	800918a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091d2:	f023 0301 	bic.w	r3, r3, #1
 80091d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e3      	bne.n	80091bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d118      	bne.n	800922e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	60bb      	str	r3, [r7, #8]
   return(result);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f023 0310 	bic.w	r3, r3, #16
 8009210:	647b      	str	r3, [r7, #68]	; 0x44
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800921a:	61bb      	str	r3, [r7, #24]
 800921c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6979      	ldr	r1, [r7, #20]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	613b      	str	r3, [r7, #16]
   return(result);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e6      	bne.n	80091fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2220      	movs	r2, #32
 8009232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009242:	bf00      	nop
 8009244:	3754      	adds	r7, #84	; 0x54
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_UARTEx_EnableFifoMode+0x16>
 8009260:	2302      	movs	r3, #2
 8009262:	e02b      	b.n	80092bc <HAL_UARTEx_EnableFifoMode+0x6e>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2224      	movs	r2, #36	; 0x24
 8009270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0201 	bic.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009292:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800929a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f8c3 	bl	8009430 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_DisableFifoMode+0x16>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e027      	b.n	800932a <HAL_UARTEx_DisableFifoMode+0x66>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	; 0x24
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009308:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800934a:	2302      	movs	r3, #2
 800934c:	e02d      	b.n	80093aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2224      	movs	r2, #36	; 0x24
 800935a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0201 	bic.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f850 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e02d      	b.n	8009426 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2224      	movs	r2, #36	; 0x24
 80093d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	683a      	ldr	r2, [r7, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f812 	bl	8009430 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009450:	e031      	b.n	80094b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009452:	2308      	movs	r3, #8
 8009454:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009456:	2308      	movs	r3, #8
 8009458:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	0e5b      	lsrs	r3, r3, #25
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	0f5b      	lsrs	r3, r3, #29
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	7b3a      	ldrb	r2, [r7, #12]
 800947e:	4911      	ldr	r1, [pc, #68]	; (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009480:	5c8a      	ldrb	r2, [r1, r2]
 8009482:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009486:	7b3a      	ldrb	r2, [r7, #12]
 8009488:	490f      	ldr	r1, [pc, #60]	; (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 800948a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800948c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	7b7a      	ldrb	r2, [r7, #13]
 800949c:	4909      	ldr	r1, [pc, #36]	; (80094c4 <UARTEx_SetNbDataToProcess+0x94>)
 800949e:	5c8a      	ldrb	r2, [r1, r2]
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	4908      	ldr	r1, [pc, #32]	; (80094c8 <UARTEx_SetNbDataToProcess+0x98>)
 80094a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	08011de4 	.word	0x08011de4
 80094c8:	08011dec 	.word	0x08011dec

080094cc <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3301      	adds	r3, #1
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80094dc:	89fb      	ldrh	r3, [r7, #14]
 80094de:	021b      	lsls	r3, r3, #8
 80094e0:	b21a      	sxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	b21b      	sxth	r3, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	b21b      	sxth	r3, r3
 80094ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80094ee:	89fb      	ldrh	r3, [r7, #14]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3303      	adds	r3, #3
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	3202      	adds	r2, #2
 8009514:	7812      	ldrb	r2, [r2, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	3201      	adds	r2, #1
 8009522:	7812      	ldrb	r2, [r2, #0]
 8009524:	4313      	orrs	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7812      	ldrb	r2, [r2, #0]
 8009530:	4313      	orrs	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]
	return rv;
 8009534:	68fb      	ldr	r3, [r7, #12]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	887a      	ldrh	r2, [r7, #2]
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	887b      	ldrh	r3, [r7, #2]
 800955c:	0a1b      	lsrs	r3, r3, #8
 800955e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	887a      	ldrh	r2, [r7, #2]
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	701a      	strb	r2, [r3, #0]
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	1c5a      	adds	r2, r3, #1
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	b2d2      	uxtb	r2, r2
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	0a1b      	lsrs	r3, r3, #8
 8009592:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	607a      	str	r2, [r7, #4]
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	b2d2      	uxtb	r2, r2
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	0a1b      	lsrs	r3, r3, #8
 80095b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	b2d2      	uxtb	r2, r2
 80095c2:	701a      	strb	r2, [r3, #0]
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80095da:	2281      	movs	r2, #129	; 0x81
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	4293      	cmp	r3, r2
 80095e0:	d30f      	bcc.n	8009602 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80095e2:	229f      	movs	r2, #159	; 0x9f
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d801      	bhi.n	80095ee <dbc_1st+0x1e>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e00a      	b.n	8009604 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80095ee:	22e0      	movs	r2, #224	; 0xe0
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d305      	bcc.n	8009602 <dbc_1st+0x32>
 80095f6:	22fc      	movs	r2, #252	; 0xfc
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d801      	bhi.n	8009602 <dbc_1st+0x32>
 80095fe:	2301      	movs	r3, #1
 8009600:	e000      	b.n	8009604 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800961a:	2240      	movs	r2, #64	; 0x40
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	4293      	cmp	r3, r2
 8009620:	d319      	bcc.n	8009656 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8009622:	227e      	movs	r2, #126	; 0x7e
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	4293      	cmp	r3, r2
 8009628:	d801      	bhi.n	800962e <dbc_2nd+0x1e>
 800962a:	2301      	movs	r3, #1
 800962c:	e014      	b.n	8009658 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800962e:	2280      	movs	r2, #128	; 0x80
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	4293      	cmp	r3, r2
 8009634:	d305      	bcc.n	8009642 <dbc_2nd+0x32>
 8009636:	22fc      	movs	r2, #252	; 0xfc
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	4293      	cmp	r3, r2
 800963c:	d801      	bhi.n	8009642 <dbc_2nd+0x32>
 800963e:	2301      	movs	r3, #1
 8009640:	e00a      	b.n	8009658 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8009642:	2200      	movs	r2, #0
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	4293      	cmp	r3, r2
 8009648:	d305      	bcc.n	8009656 <dbc_2nd+0x46>
 800964a:	2200      	movs	r2, #0
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	4293      	cmp	r3, r2
 8009650:	d801      	bhi.n	8009656 <dbc_2nd+0x46>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	791b      	ldrb	r3, [r3, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d02c      	beq.n	80096d2 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	7858      	ldrb	r0, [r3, #1]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009686:	2301      	movs	r3, #1
 8009688:	f7f8 fae2 	bl	8001c50 <disk_write>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d11d      	bne.n	80096ce <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	1ad2      	subs	r2, r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d213      	bcs.n	80096d2 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	78db      	ldrb	r3, [r3, #3]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d10f      	bne.n	80096d2 <sync_window+0x6e>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7858      	ldrb	r0, [r3, #1]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	441a      	add	r2, r3
 80096c6:	2301      	movs	r3, #1
 80096c8:	f7f8 fac2 	bl	8001c50 <disk_write>
 80096cc:	e001      	b.n	80096d2 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d01b      	beq.n	800972c <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff ffb5 	bl	8009664 <sync_window>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d113      	bne.n	800972c <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7858      	ldrb	r0, [r3, #1]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800970e:	2301      	movs	r3, #1
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	f7f8 fa37 	bl	8001b84 <disk_read>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800971c:	f04f 33ff 	mov.w	r3, #4294967295
 8009720:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009722:	2301      	movs	r3, #1
 8009724:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3b02      	subs	r3, #2
 8009744:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	3b02      	subs	r3, #2
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d301      	bcc.n	8009756 <clst2sect+0x20>
 8009752:	2300      	movs	r3, #0
 8009754:	e008      	b.n	8009768 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	895b      	ldrh	r3, [r3, #10]
 800975e:	4619      	mov	r1, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	fb01 f303 	mul.w	r3, r1, r3
 8009766:	4413      	add	r3, r2
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d904      	bls.n	8009794 <get_fat+0x20>
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d302      	bcc.n	800979a <get_fat+0x26>
		val = 1;	/* Internal error */
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e08f      	b.n	80098ba <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800979a:	f04f 33ff 	mov.w	r3, #4294967295
 800979e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d062      	beq.n	800986e <get_fat+0xfa>
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	dc7c      	bgt.n	80098a6 <get_fat+0x132>
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d002      	beq.n	80097b6 <get_fat+0x42>
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d042      	beq.n	800983a <get_fat+0xc6>
 80097b4:	e077      	b.n	80098a6 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	085b      	lsrs	r3, r3, #1
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6a1a      	ldr	r2, [r3, #32]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	0a5b      	lsrs	r3, r3, #9
 80097cc:	4413      	add	r3, r2
 80097ce:	4619      	mov	r1, r3
 80097d0:	6938      	ldr	r0, [r7, #16]
 80097d2:	f7ff ff83 	bl	80096dc <move_window>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d167      	bne.n	80098ac <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	60fa      	str	r2, [r7, #12]
 80097e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4413      	add	r3, r2
 80097ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	6a1a      	ldr	r2, [r3, #32]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	0a5b      	lsrs	r3, r3, #9
 80097f8:	4413      	add	r3, r2
 80097fa:	4619      	mov	r1, r3
 80097fc:	6938      	ldr	r0, [r7, #16]
 80097fe:	f7ff ff6d 	bl	80096dc <move_window>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d153      	bne.n	80098b0 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4413      	add	r3, r2
 8009812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	461a      	mov	r2, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	4313      	orrs	r3, r2
 800981e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <get_fat+0xbc>
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	091b      	lsrs	r3, r3, #4
 800982e:	e002      	b.n	8009836 <get_fat+0xc2>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009836:	617b      	str	r3, [r7, #20]
			break;
 8009838:	e03f      	b.n	80098ba <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	6a1a      	ldr	r2, [r3, #32]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	4413      	add	r3, r2
 8009844:	4619      	mov	r1, r3
 8009846:	6938      	ldr	r0, [r7, #16]
 8009848:	f7ff ff48 	bl	80096dc <move_window>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d130      	bne.n	80098b4 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009860:	4413      	add	r3, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fe32 	bl	80094cc <ld_word>
 8009868:	4603      	mov	r3, r0
 800986a:	617b      	str	r3, [r7, #20]
			break;
 800986c:	e025      	b.n	80098ba <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6a1a      	ldr	r2, [r3, #32]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	09db      	lsrs	r3, r3, #7
 8009876:	4413      	add	r3, r2
 8009878:	4619      	mov	r1, r3
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f7ff ff2e 	bl	80096dc <move_window>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d118      	bne.n	80098b8 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009894:	4413      	add	r3, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fe30 	bl	80094fc <ld_dword>
 800989c:	4603      	mov	r3, r0
 800989e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80098a2:	617b      	str	r3, [r7, #20]
			break;
 80098a4:	e009      	b.n	80098ba <get_fat+0x146>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80098a6:	2301      	movs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	e006      	b.n	80098ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098ac:	bf00      	nop
 80098ae:	e004      	b.n	80098ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098b0:	bf00      	nop
 80098b2:	e002      	b.n	80098ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80098b4:	bf00      	nop
 80098b6:	e000      	b.n	80098ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80098b8:	bf00      	nop
		}
	}

	return val;
 80098ba:	697b      	ldr	r3, [r7, #20]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80098c4:	b590      	push	{r4, r7, lr}
 80098c6:	b089      	sub	sp, #36	; 0x24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80098d0:	2302      	movs	r3, #2
 80098d2:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	f240 80d9 	bls.w	8009a8e <put_fat+0x1ca>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	f080 80d3 	bcs.w	8009a8e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	f000 8096 	beq.w	8009a1e <put_fat+0x15a>
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	f300 80cb 	bgt.w	8009a8e <put_fat+0x1ca>
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d002      	beq.n	8009902 <put_fat+0x3e>
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d06e      	beq.n	80099de <put_fat+0x11a>
 8009900:	e0c5      	b.n	8009a8e <put_fat+0x1ca>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	085b      	lsrs	r3, r3, #1
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	4413      	add	r3, r2
 800990e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a1a      	ldr	r2, [r3, #32]
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	0a5b      	lsrs	r3, r3, #9
 8009918:	4413      	add	r3, r2
 800991a:	4619      	mov	r1, r3
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f7ff fedd 	bl	80096dc <move_window>
 8009922:	4603      	mov	r3, r0
 8009924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009926:	7ffb      	ldrb	r3, [r7, #31]
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 80a9 	bne.w	8009a80 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	61b9      	str	r1, [r7, #24]
 800993a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993e:	4413      	add	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00d      	beq.n	8009968 <put_fat+0xa4>
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	b25b      	sxtb	r3, r3
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	b25a      	sxtb	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	b25b      	sxtb	r3, r3
 8009960:	4313      	orrs	r3, r2
 8009962:	b25b      	sxtb	r3, r3
 8009964:	b2db      	uxtb	r3, r3
 8009966:	e001      	b.n	800996c <put_fat+0xa8>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	b2db      	uxtb	r3, r3
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2201      	movs	r2, #1
 8009974:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1a      	ldr	r2, [r3, #32]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	0a5b      	lsrs	r3, r3, #9
 800997e:	4413      	add	r3, r2
 8009980:	4619      	mov	r1, r3
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f7ff feaa 	bl	80096dc <move_window>
 8009988:	4603      	mov	r3, r0
 800998a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800998c:	7ffb      	ldrb	r3, [r7, #31]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d178      	bne.n	8009a84 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999e:	4413      	add	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <put_fat+0xf0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	091b      	lsrs	r3, r3, #4
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	e00e      	b.n	80099d2 <put_fat+0x10e>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	b25b      	sxtb	r3, r3
 80099ba:	f023 030f 	bic.w	r3, r3, #15
 80099be:	b25a      	sxtb	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	b25b      	sxtb	r3, r3
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	b25b      	sxtb	r3, r3
 80099cc:	4313      	orrs	r3, r2
 80099ce:	b25b      	sxtb	r3, r3
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	711a      	strb	r2, [r3, #4]
			break;
 80099dc:	e057      	b.n	8009a8e <put_fat+0x1ca>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	0a1b      	lsrs	r3, r3, #8
 80099e6:	4413      	add	r3, r2
 80099e8:	4619      	mov	r1, r3
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7ff fe76 	bl	80096dc <move_window>
 80099f0:	4603      	mov	r3, r0
 80099f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099f4:	7ffb      	ldrb	r3, [r7, #31]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d146      	bne.n	8009a88 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009a08:	4413      	add	r3, r2
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	b292      	uxth	r2, r2
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fd96 	bl	8009542 <st_word>
			fs->wflag = 1;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	711a      	strb	r2, [r3, #4]
			break;
 8009a1c:	e037      	b.n	8009a8e <put_fat+0x1ca>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a1a      	ldr	r2, [r3, #32]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	09db      	lsrs	r3, r3, #7
 8009a26:	4413      	add	r3, r2
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff fe56 	bl	80096dc <move_window>
 8009a30:	4603      	mov	r3, r0
 8009a32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a34:	7ffb      	ldrb	r3, [r7, #31]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d128      	bne.n	8009a8c <put_fat+0x1c8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009a4e:	4413      	add	r3, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff fd53 	bl	80094fc <ld_dword>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a5c:	4323      	orrs	r3, r4
 8009a5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009a6e:	4413      	add	r3, r2
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff fd80 	bl	8009578 <st_dword>
			fs->wflag = 1;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	711a      	strb	r2, [r3, #4]
			break;
 8009a7e:	e006      	b.n	8009a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a80:	bf00      	nop
 8009a82:	e004      	b.n	8009a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a84:	bf00      	nop
 8009a86:	e002      	b.n	8009a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a88:	bf00      	nop
 8009a8a:	e000      	b.n	8009a8e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009a8c:	bf00      	nop
		}
	}
	return res;
 8009a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3724      	adds	r7, #36	; 0x24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10d      	bne.n	8009aca <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d004      	beq.n	8009ac4 <create_chain+0x2c>
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d31b      	bcc.n	8009afc <create_chain+0x64>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	61bb      	str	r3, [r7, #24]
 8009ac8:	e018      	b.n	8009afc <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fe51 	bl	8009774 <get_fat>
 8009ad2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d801      	bhi.n	8009ade <create_chain+0x46>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e0a9      	b.n	8009c32 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d101      	bne.n	8009aea <create_chain+0x52>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	e0a3      	b.n	8009c32 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d201      	bcs.n	8009af8 <create_chain+0x60>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	e09c      	b.n	8009c32 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <create_chain+0x70>
 8009b04:	2300      	movs	r3, #0
 8009b06:	e094      	b.n	8009c32 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d129      	bne.n	8009b68 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	3301      	adds	r3, #1
 8009b18:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	69fa      	ldr	r2, [r7, #28]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d301      	bcc.n	8009b28 <create_chain+0x90>
 8009b24:	2302      	movs	r3, #2
 8009b26:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8009b28:	69f9      	ldr	r1, [r7, #28]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fe22 	bl	8009774 <get_fat>
 8009b30:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d003      	beq.n	8009b40 <create_chain+0xa8>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	d101      	bne.n	8009b44 <create_chain+0xac>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	e076      	b.n	8009c32 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00e      	beq.n	8009b68 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d906      	bls.n	8009b64 <create_chain+0xcc>
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d201      	bcs.n	8009b64 <create_chain+0xcc>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d129      	bne.n	8009bc2 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	3301      	adds	r3, #1
 8009b76:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d307      	bcc.n	8009b92 <create_chain+0xfa>
					ncl = 2;
 8009b82:	2302      	movs	r3, #2
 8009b84:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d901      	bls.n	8009b92 <create_chain+0xfa>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e04f      	b.n	8009c32 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009b92:	69f9      	ldr	r1, [r7, #28]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff fded 	bl	8009774 <get_fat>
 8009b9a:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d003      	beq.n	8009bb0 <create_chain+0x118>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d101      	bne.n	8009bb4 <create_chain+0x11c>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	e03e      	b.n	8009c32 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d1da      	bne.n	8009b72 <create_chain+0xda>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e038      	b.n	8009c32 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8009bc0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	69f9      	ldr	r1, [r7, #28]
 8009bc8:	6938      	ldr	r0, [r7, #16]
 8009bca:	f7ff fe7b 	bl	80098c4 <put_fat>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <create_chain+0x154>
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d006      	beq.n	8009bec <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6938      	ldr	r0, [r7, #16]
 8009be4:	f7ff fe6e 	bl	80098c4 <put_fat>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d116      	bne.n	8009c20 <create_chain+0x188>
		fs->last_clst = ncl;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	69fa      	ldr	r2, [r7, #28]
 8009bf6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	691a      	ldr	r2, [r3, #16]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	3b02      	subs	r3, #2
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d804      	bhi.n	8009c10 <create_chain+0x178>
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	1e5a      	subs	r2, r3, #1
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	795b      	ldrb	r3, [r3, #5]
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	715a      	strb	r2, [r3, #5]
 8009c1e:	e007      	b.n	8009c30 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d102      	bne.n	8009c2c <create_chain+0x194>
 8009c26:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2a:	e000      	b.n	8009c2e <create_chain+0x196>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009c30:	69fb      	ldr	r3, [r7, #28]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b086      	sub	sp, #24
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff fd0d 	bl	8009664 <sync_window>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <dir_clear+0x1a>
 8009c50:	2301      	movs	r3, #1
 8009c52:	e036      	b.n	8009cc2 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fd6d 	bl	8009736 <clst2sect>
 8009c5c:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3330      	adds	r3, #48	; 0x30
 8009c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f003 fd3d 	bl	800d6ee <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3330      	adds	r3, #48	; 0x30
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	e003      	b.n	8009c8c <dir_clear+0x52>
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4413      	add	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	895b      	ldrh	r3, [r3, #10]
 8009c90:	461a      	mov	r2, r3
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d20b      	bcs.n	8009cb0 <dir_clear+0x76>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7858      	ldrb	r0, [r3, #1]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	68f9      	ldr	r1, [r7, #12]
 8009ca6:	f7f7 ffd3 	bl	8001c50 <disk_write>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d0e9      	beq.n	8009c84 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	895b      	ldrh	r3, [r3, #10]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	bf14      	ite	ne
 8009cbc:	2301      	movne	r3, #1
 8009cbe:	2300      	moveq	r3, #0
 8009cc0:	b2db      	uxtb	r3, r3
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b086      	sub	sp, #24
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ce0:	d204      	bcs.n	8009cec <dir_sdi+0x22>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	f003 031f 	and.w	r3, r3, #31
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009cec:	2302      	movs	r3, #2
 8009cee:	e063      	b.n	8009db8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <dir_sdi+0x46>
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d902      	bls.n	8009d10 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10c      	bne.n	8009d30 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	095b      	lsrs	r3, r3, #5
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	8912      	ldrh	r2, [r2, #8]
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d301      	bcc.n	8009d26 <dir_sdi+0x5c>
 8009d22:	2302      	movs	r3, #2
 8009d24:	e048      	b.n	8009db8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	619a      	str	r2, [r3, #24]
 8009d2e:	e029      	b.n	8009d84 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	895b      	ldrh	r3, [r3, #10]
 8009d34:	025b      	lsls	r3, r3, #9
 8009d36:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d38:	e019      	b.n	8009d6e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6979      	ldr	r1, [r7, #20]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7ff fd18 	bl	8009774 <get_fat>
 8009d44:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d101      	bne.n	8009d52 <dir_sdi+0x88>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e032      	b.n	8009db8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d904      	bls.n	8009d62 <dir_sdi+0x98>
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d301      	bcc.n	8009d66 <dir_sdi+0x9c>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e028      	b.n	8009db8 <dir_sdi+0xee>
			ofs -= csz;
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d2e1      	bcs.n	8009d3a <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8009d76:	6979      	ldr	r1, [r7, #20]
 8009d78:	6938      	ldr	r0, [r7, #16]
 8009d7a:	f7ff fcdc 	bl	8009736 <clst2sect>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <dir_sdi+0xcc>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e010      	b.n	8009db8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	0a5b      	lsrs	r3, r3, #9
 8009d9e:	441a      	add	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009db0:	441a      	add	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	3320      	adds	r3, #32
 8009dd6:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dde:	d302      	bcc.n	8009de6 <dir_next+0x26>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <dir_next+0x32>
 8009dee:	2304      	movs	r3, #4
 8009df0:	e078      	b.n	8009ee4 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d166      	bne.n	8009eca <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	8912      	ldrh	r2, [r2, #8]
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d357      	bcc.n	8009eca <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	619a      	str	r2, [r3, #24]
 8009e20:	2304      	movs	r3, #4
 8009e22:	e05f      	b.n	8009ee4 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	0a5b      	lsrs	r3, r3, #9
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	8952      	ldrh	r2, [r2, #10]
 8009e2c:	3a01      	subs	r2, #1
 8009e2e:	4013      	ands	r3, r2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d14a      	bne.n	8009eca <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7ff fc99 	bl	8009774 <get_fat>
 8009e42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d801      	bhi.n	8009e4e <dir_next+0x8e>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e04a      	b.n	8009ee4 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d101      	bne.n	8009e5a <dir_next+0x9a>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e044      	b.n	8009ee4 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d328      	bcc.n	8009eb6 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	619a      	str	r2, [r3, #24]
 8009e70:	2304      	movs	r3, #4
 8009e72:	e037      	b.n	8009ee4 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	f7ff fe0b 	bl	8009a98 <create_chain>
 8009e82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <dir_next+0xce>
 8009e8a:	2307      	movs	r3, #7
 8009e8c:	e02a      	b.n	8009ee4 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d101      	bne.n	8009e98 <dir_next+0xd8>
 8009e94:	2302      	movs	r3, #2
 8009e96:	e025      	b.n	8009ee4 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9e:	d101      	bne.n	8009ea4 <dir_next+0xe4>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e01f      	b.n	8009ee4 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8009ea4:	6979      	ldr	r1, [r7, #20]
 8009ea6:	6938      	ldr	r0, [r7, #16]
 8009ea8:	f7ff fec7 	bl	8009c3a <dir_clear>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <dir_next+0xf6>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e016      	b.n	8009ee4 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	6938      	ldr	r0, [r7, #16]
 8009ec0:	f7ff fc39 	bl	8009736 <clst2sect>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009edc:	441a      	add	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	331a      	adds	r3, #26
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff fae6 	bl	80094cc <ld_word>
 8009f00:	4603      	mov	r3, r0
 8009f02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d109      	bne.n	8009f20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	3314      	adds	r3, #20
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff fadb 	bl	80094cc <ld_word>
 8009f16:	4603      	mov	r3, r0
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009f20:	68fb      	ldr	r3, [r7, #12]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009f38:	2100      	movs	r1, #0
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff fec5 	bl	8009cca <dir_sdi>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <dir_find+0x24>
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	e03e      	b.n	8009fcc <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6938      	ldr	r0, [r7, #16]
 8009f56:	f7ff fbc1 	bl	80096dc <move_window>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d12f      	bne.n	8009fc4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <dir_find+0x4e>
 8009f72:	2304      	movs	r3, #4
 8009f74:	75fb      	strb	r3, [r7, #23]
 8009f76:	e028      	b.n	8009fca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	330b      	adds	r3, #11
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	330b      	adds	r3, #11
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	f003 0308 	and.w	r3, r3, #8
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <dir_find+0x86>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69d8      	ldr	r0, [r3, #28]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3320      	adds	r3, #32
 8009fa2:	220b      	movs	r2, #11
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f003 fb92 	bl	800d6ce <memcmp>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00b      	beq.n	8009fc8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff ff04 	bl	8009dc0 <dir_next>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0c5      	beq.n	8009f4e <dir_find+0x24>
 8009fc2:	e002      	b.n	8009fca <dir_find+0xa0>
		if (res != FR_OK) break;
 8009fc4:	bf00      	nop
 8009fc6:	e000      	b.n	8009fca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009fc8:	bf00      	nop

	return res;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d056      	beq.n	800a09a <get_fileinfo+0xc6>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 8009ff4:	e021      	b.n	800a03a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	69da      	ldr	r2, [r3, #28]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	1c59      	adds	r1, r3, #1
 8009ffe:	6179      	str	r1, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d100      	bne.n	800a00e <get_fileinfo+0x3a>
 800a00c:	e015      	b.n	800a03a <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b05      	cmp	r3, #5
 800a012:	d101      	bne.n	800a018 <get_fileinfo+0x44>
 800a014:	23e5      	movs	r3, #229	; 0xe5
 800a016:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b09      	cmp	r3, #9
 800a01c:	d106      	bne.n	800a02c <get_fileinfo+0x58>
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	613a      	str	r2, [r7, #16]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	4413      	add	r3, r2
 800a028:	222e      	movs	r2, #46	; 0x2e
 800a02a:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	613a      	str	r2, [r7, #16]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4413      	add	r3, r2
 800a036:	7bfa      	ldrb	r2, [r7, #15]
 800a038:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b0a      	cmp	r3, #10
 800a03e:	d9da      	bls.n	8009ff6 <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	4413      	add	r3, r2
 800a046:	3309      	adds	r3, #9
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	330b      	adds	r3, #11
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a058:	b2da      	uxtb	r2, r3
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	331c      	adds	r3, #28
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fa49 	bl	80094fc <ld_dword>
 800a06a:	4602      	mov	r2, r0
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	3316      	adds	r3, #22
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff fa28 	bl	80094cc <ld_word>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	3318      	adds	r3, #24
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff fa1e 	bl	80094cc <ld_word>
 800a090:	4603      	mov	r3, r0
 800a092:	461a      	mov	r2, r3
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	809a      	strh	r2, [r3, #4]
 800a098:	e000      	b.n	800a09c <get_fileinfo+0xc8>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800a09a:	bf00      	nop
}
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3320      	adds	r3, #32
 800a0b8:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 800a0ba:	220b      	movs	r2, #11
 800a0bc:	2120      	movs	r1, #32
 800a0be:	6938      	ldr	r0, [r7, #16]
 800a0c0:	f003 fb15 	bl	800d6ee <memset>
	si = i = 0; ni = 8;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	61bb      	str	r3, [r7, #24]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	61fb      	str	r3, [r7, #28]
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	61fa      	str	r2, [r7, #28]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4413      	add	r3, r2
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e4:	2b20      	cmp	r3, #32
 800a0e6:	d97c      	bls.n	800a1e2 <create_name+0x13e>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800a0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0ec:	2b2f      	cmp	r3, #47	; 0x2f
 800a0ee:	d007      	beq.n	800a100 <create_name+0x5c>
 800a0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0f4:	2b5c      	cmp	r3, #92	; 0x5c
 800a0f6:	d110      	bne.n	800a11a <create_name+0x76>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800a0f8:	e002      	b.n	800a100 <create_name+0x5c>
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	61fb      	str	r3, [r7, #28]
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b2f      	cmp	r3, #47	; 0x2f
 800a10a:	d0f6      	beq.n	800a0fa <create_name+0x56>
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	4413      	add	r3, r2
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b5c      	cmp	r3, #92	; 0x5c
 800a116:	d0f0      	beq.n	800a0fa <create_name+0x56>
			break;
 800a118:	e064      	b.n	800a1e4 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800a11a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a11e:	2b2e      	cmp	r3, #46	; 0x2e
 800a120:	d003      	beq.n	800a12a <create_name+0x86>
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	429a      	cmp	r2, r3
 800a128:	d30d      	bcc.n	800a146 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	2b0b      	cmp	r3, #11
 800a12e:	d003      	beq.n	800a138 <create_name+0x94>
 800a130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a134:	2b2e      	cmp	r3, #46	; 0x2e
 800a136:	d001      	beq.n	800a13c <create_name+0x98>
 800a138:	2306      	movs	r3, #6
 800a13a:	e075      	b.n	800a228 <create_name+0x184>
			i = 8; ni = 11;				/* Enter file extension field */
 800a13c:	2308      	movs	r3, #8
 800a13e:	61bb      	str	r3, [r7, #24]
 800a140:	230b      	movs	r3, #11
 800a142:	623b      	str	r3, [r7, #32]
			continue;
 800a144:	e04c      	b.n	800a1e0 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800a146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff fa40 	bl	80095d0 <dbc_1st>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d024      	beq.n	800a1a0 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	61fa      	str	r2, [r7, #28]
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	4413      	add	r3, r2
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fa52 	bl	8009610 <dbc_2nd>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <create_name+0xd8>
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	3b01      	subs	r3, #1
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d301      	bcc.n	800a180 <create_name+0xdc>
 800a17c:	2306      	movs	r3, #6
 800a17e:	e053      	b.n	800a228 <create_name+0x184>
			sfn[i++] = c;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	61ba      	str	r2, [r7, #24]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4413      	add	r3, r2
 800a18a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a18e:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	61ba      	str	r2, [r7, #24]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4413      	add	r3, r2
 800a19a:	7bfa      	ldrb	r2, [r7, #15]
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	e797      	b.n	800a0d0 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4822      	ldr	r0, [pc, #136]	; (800a230 <create_name+0x18c>)
 800a1a8:	f003 faa9 	bl	800d6fe <strchr>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <create_name+0x112>
 800a1b2:	2306      	movs	r3, #6
 800a1b4:	e038      	b.n	800a228 <create_name+0x184>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ba:	2b60      	cmp	r3, #96	; 0x60
 800a1bc:	d908      	bls.n	800a1d0 <create_name+0x12c>
 800a1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1c2:	2b7a      	cmp	r3, #122	; 0x7a
 800a1c4:	d804      	bhi.n	800a1d0 <create_name+0x12c>
 800a1c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ca:	3b20      	subs	r3, #32
 800a1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	61ba      	str	r2, [r7, #24]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800a1e0:	e776      	b.n	800a0d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a1e2:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	441a      	add	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <create_name+0x154>
 800a1f4:	2306      	movs	r3, #6
 800a1f6:	e017      	b.n	800a228 <create_name+0x184>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2be5      	cmp	r3, #229	; 0xe5
 800a1fe:	d102      	bne.n	800a206 <create_name+0x162>
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2205      	movs	r2, #5
 800a204:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800a206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	d905      	bls.n	800a21a <create_name+0x176>
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b20      	cmp	r3, #32
 800a218:	d801      	bhi.n	800a21e <create_name+0x17a>
 800a21a:	2204      	movs	r2, #4
 800a21c:	e000      	b.n	800a220 <create_name+0x17c>
 800a21e:	2200      	movs	r2, #0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	330b      	adds	r3, #11
 800a224:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a226:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3728      	adds	r7, #40	; 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	08011c78 	.word	0x08011c78

0800a234 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800a244:	e002      	b.n	800a24c <follow_path+0x18>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b2f      	cmp	r3, #47	; 0x2f
 800a252:	d0f8      	beq.n	800a246 <follow_path+0x12>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	2b5c      	cmp	r3, #92	; 0x5c
 800a25a:	d0f4      	beq.n	800a246 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b1f      	cmp	r3, #31
 800a268:	d80a      	bhi.n	800a280 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2280      	movs	r2, #128	; 0x80
 800a26e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800a272:	2100      	movs	r1, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff fd28 	bl	8009cca <dir_sdi>
 800a27a:	4603      	mov	r3, r0
 800a27c:	75fb      	strb	r3, [r7, #23]
 800a27e:	e043      	b.n	800a308 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a280:	463b      	mov	r3, r7
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff ff0d 	bl	800a0a4 <create_name>
 800a28a:	4603      	mov	r3, r0
 800a28c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d134      	bne.n	800a2fe <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff fe48 	bl	8009f2a <dir_find>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a2a4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00a      	beq.n	800a2c2 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d127      	bne.n	800a302 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d122      	bne.n	800a302 <follow_path+0xce>
 800a2bc:	2305      	movs	r3, #5
 800a2be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a2c0:	e01f      	b.n	800a302 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d11c      	bne.n	800a306 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	799b      	ldrb	r3, [r3, #6]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800a2d8:	2305      	movs	r3, #5
 800a2da:	75fb      	strb	r3, [r7, #23]
 800a2dc:	e014      	b.n	800a308 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ec:	4413      	add	r3, r2
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6938      	ldr	r0, [r7, #16]
 800a2f2:	f7ff fdfb 	bl	8009eec <ld_clust>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2fc:	e7c0      	b.n	800a280 <follow_path+0x4c>
			if (res != FR_OK) break;
 800a2fe:	bf00      	nop
 800a300:	e002      	b.n	800a308 <follow_path+0xd4>
				break;
 800a302:	bf00      	nop
 800a304:	e000      	b.n	800a308 <follow_path+0xd4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800a306:	bf00      	nop
			}
		}
	}

	return res;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800a312:	b480      	push	{r7}
 800a314:	b089      	sub	sp, #36	; 0x24
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <get_ldnumber+0x22>
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	e02d      	b.n	800a390 <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	61fa      	str	r2, [r7, #28]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
 800a340:	2b20      	cmp	r3, #32
 800a342:	d902      	bls.n	800a34a <get_ldnumber+0x38>
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	2b3a      	cmp	r3, #58	; 0x3a
 800a348:	d1f4      	bne.n	800a334 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	2b3a      	cmp	r3, #58	; 0x3a
 800a34e:	d11c      	bne.n	800a38a <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800a350:	2301      	movs	r3, #1
 800a352:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b2f      	cmp	r3, #47	; 0x2f
 800a35a:	d90c      	bls.n	800a376 <get_ldnumber+0x64>
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b39      	cmp	r3, #57	; 0x39
 800a362:	d808      	bhi.n	800a376 <get_ldnumber+0x64>
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	3302      	adds	r3, #2
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d103      	bne.n	800a376 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	3b30      	subs	r3, #48	; 0x30
 800a374:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	dc04      	bgt.n	800a386 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	e002      	b.n	800a390 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800a38e:	697b      	ldr	r3, [r7, #20]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3724      	adds	r7, #36	; 0x24
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	711a      	strb	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff f990 	bl	80096dc <move_window>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <check_fs+0x2a>
 800a3c2:	2304      	movs	r3, #4
 800a3c4:	e088      	b.n	800a4d8 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3330      	adds	r3, #48	; 0x30
 800a3ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff f87c 	bl	80094cc <ld_word>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3de:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800a3e0:	7b7b      	ldrb	r3, [r7, #13]
 800a3e2:	2beb      	cmp	r3, #235	; 0xeb
 800a3e4:	d005      	beq.n	800a3f2 <check_fs+0x56>
 800a3e6:	7b7b      	ldrb	r3, [r7, #13]
 800a3e8:	2be9      	cmp	r3, #233	; 0xe9
 800a3ea:	d002      	beq.n	800a3f2 <check_fs+0x56>
 800a3ec:	7b7b      	ldrb	r3, [r7, #13]
 800a3ee:	2be8      	cmp	r3, #232	; 0xe8
 800a3f0:	d16a      	bne.n	800a4c8 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800a3f2:	89fb      	ldrh	r3, [r7, #14]
 800a3f4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d10c      	bne.n	800a416 <check_fs+0x7a>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3330      	adds	r3, #48	; 0x30
 800a400:	3352      	adds	r3, #82	; 0x52
 800a402:	2208      	movs	r2, #8
 800a404:	4936      	ldr	r1, [pc, #216]	; (800a4e0 <check_fs+0x144>)
 800a406:	4618      	mov	r0, r3
 800a408:	f003 f961 	bl	800d6ce <memcmp>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800a412:	2300      	movs	r3, #0
 800a414:	e060      	b.n	800a4d8 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3330      	adds	r3, #48	; 0x30
 800a41a:	330b      	adds	r3, #11
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff f855 	bl	80094cc <ld_word>
 800a422:	4603      	mov	r3, r0
 800a424:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a42c:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800a42e:	897a      	ldrh	r2, [r7, #10]
 800a430:	897b      	ldrh	r3, [r7, #10]
 800a432:	3b01      	subs	r3, #1
 800a434:	4013      	ands	r3, r2
 800a436:	2b00      	cmp	r3, #0
 800a438:	d146      	bne.n	800a4c8 <check_fs+0x12c>
 800a43a:	897b      	ldrh	r3, [r7, #10]
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a440:	d342      	bcc.n	800a4c8 <check_fs+0x12c>
 800a442:	897b      	ldrh	r3, [r7, #10]
 800a444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a448:	d83e      	bhi.n	800a4c8 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800a44a:	7b7b      	ldrb	r3, [r7, #13]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d03b      	beq.n	800a4c8 <check_fs+0x12c>
 800a450:	7b7a      	ldrb	r2, [r7, #13]
 800a452:	7b7b      	ldrb	r3, [r7, #13]
 800a454:	3b01      	subs	r3, #1
 800a456:	4013      	ands	r3, r2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d135      	bne.n	800a4c8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3330      	adds	r3, #48	; 0x30
 800a460:	330e      	adds	r3, #14
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff f832 	bl	80094cc <ld_word>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d02c      	beq.n	800a4c8 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a474:	3b01      	subs	r3, #1
 800a476:	2b01      	cmp	r3, #1
 800a478:	d826      	bhi.n	800a4c8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3330      	adds	r3, #48	; 0x30
 800a47e:	3311      	adds	r3, #17
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff f823 	bl	80094cc <ld_word>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01d      	beq.n	800a4c8 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3330      	adds	r3, #48	; 0x30
 800a490:	3313      	adds	r3, #19
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff f81a 	bl	80094cc <ld_word>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b7f      	cmp	r3, #127	; 0x7f
 800a49c:	d809      	bhi.n	800a4b2 <check_fs+0x116>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3330      	adds	r3, #48	; 0x30
 800a4a2:	3320      	adds	r3, #32
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff f829 	bl	80094fc <ld_dword>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b0:	d30a      	bcc.n	800a4c8 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3330      	adds	r3, #48	; 0x30
 800a4b6:	3316      	adds	r3, #22
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7ff f807 	bl	80094cc <ld_word>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	e007      	b.n	800a4d8 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800a4c8:	89fb      	ldrh	r3, [r7, #14]
 800a4ca:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d101      	bne.n	800a4d6 <check_fs+0x13a>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e000      	b.n	800a4d8 <check_fs+0x13c>
 800a4d6:	2303      	movs	r3, #3
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	08011c88 	.word	0x08011c88

0800a4e4 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b088      	sub	sp, #32
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff ff53 	bl	800a39c <check_fs>
 800a4f6:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d007      	beq.n	800a50e <find_volume+0x2a>
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d802      	bhi.n	800a50a <find_volume+0x26>
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <find_volume+0x2a>
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	e045      	b.n	800a59a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a50e:	2300      	movs	r3, #0
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	e014      	b.n	800a53e <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800a522:	4413      	add	r3, r2
 800a524:	4618      	mov	r0, r3
 800a526:	f7fe ffe9 	bl	80094fc <ld_dword>
 800a52a:	4602      	mov	r2, r0
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	3320      	adds	r3, #32
 800a532:	443b      	add	r3, r7
 800a534:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	3301      	adds	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b03      	cmp	r3, #3
 800a542:	d9e7      	bls.n	800a514 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <find_volume+0x6c>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	e000      	b.n	800a552 <find_volume+0x6e>
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	3320      	adds	r3, #32
 800a55a:	443b      	add	r3, r7
 800a55c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00b      	beq.n	800a57c <find_volume+0x98>
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	3320      	adds	r3, #32
 800a56a:	443b      	add	r3, r7
 800a56c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff ff12 	bl	800a39c <check_fs>
 800a578:	4603      	mov	r3, r0
 800a57a:	e000      	b.n	800a57e <find_volume+0x9a>
 800a57c:	2303      	movs	r3, #3
 800a57e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d108      	bne.n	800a598 <find_volume+0xb4>
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d905      	bls.n	800a598 <find_volume+0xb4>
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	3301      	adds	r3, #1
 800a590:	61fb      	str	r3, [r7, #28]
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d9dd      	bls.n	800a554 <find_volume+0x70>
	return fmt;
 800a598:	69bb      	ldr	r3, [r7, #24]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b090      	sub	sp, #64	; 0x40
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff feaa 	bl	800a312 <get_ldnumber>
 800a5be:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da01      	bge.n	800a5ca <mount_volume+0x26>
 800a5c6:	230b      	movs	r3, #11
 800a5c8:	e1dc      	b.n	800a984 <mount_volume+0x3e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800a5ca:	4a9d      	ldr	r2, [pc, #628]	; (800a840 <mount_volume+0x29c>)
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <mount_volume+0x3a>
 800a5da:	230c      	movs	r3, #12
 800a5dc:	e1d2      	b.n	800a984 <mount_volume+0x3e0>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	f023 0301 	bic.w	r3, r3, #1
 800a5ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01a      	beq.n	800a62a <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f7 faad 	bl	8001b58 <disk_status>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10c      	bne.n	800a62a <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <mount_volume+0x82>
 800a616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a622:	230a      	movs	r3, #10
 800a624:	e1ae      	b.n	800a984 <mount_volume+0x3e0>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800a626:	2300      	movs	r3, #0
 800a628:	e1ac      	b.n	800a984 <mount_volume+0x3e0>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	4618      	mov	r0, r3
 800a636:	f7f7 f9a3 	bl	8001980 <disk_initialize>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a64c:	2303      	movs	r3, #3
 800a64e:	e199      	b.n	800a984 <mount_volume+0x3e0>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <mount_volume+0xc2>
 800a656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800a662:	230a      	movs	r3, #10
 800a664:	e18e      	b.n	800a984 <mount_volume+0x3e0>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800a666:	2100      	movs	r1, #0
 800a668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a66a:	f7ff ff3b 	bl	800a4e4 <find_volume>
 800a66e:	6338      	str	r0, [r7, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	2b04      	cmp	r3, #4
 800a674:	d101      	bne.n	800a67a <mount_volume+0xd6>
 800a676:	2301      	movs	r3, #1
 800a678:	e184      	b.n	800a984 <mount_volume+0x3e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d901      	bls.n	800a684 <mount_volume+0xe0>
 800a680:	230d      	movs	r3, #13
 800a682:	e17f      	b.n	800a984 <mount_volume+0x3e0>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	3330      	adds	r3, #48	; 0x30
 800a68e:	330b      	adds	r3, #11
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe ff1b 	bl	80094cc <ld_word>
 800a696:	4603      	mov	r3, r0
 800a698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a69c:	d001      	beq.n	800a6a2 <mount_volume+0xfe>
 800a69e:	230d      	movs	r3, #13
 800a6a0:	e170      	b.n	800a984 <mount_volume+0x3e0>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	3330      	adds	r3, #48	; 0x30
 800a6a6:	3316      	adds	r3, #22
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe ff0f 	bl	80094cc <ld_word>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	63bb      	str	r3, [r7, #56]	; 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d106      	bne.n	800a6c6 <mount_volume+0x122>
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	3330      	adds	r3, #48	; 0x30
 800a6bc:	3324      	adds	r3, #36	; 0x24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe ff1c 	bl	80094fc <ld_dword>
 800a6c4:	63b8      	str	r0, [r7, #56]	; 0x38
		fs->fsize = fasize;
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6ca:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	78db      	ldrb	r3, [r3, #3]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d005      	beq.n	800a6ea <mount_volume+0x146>
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	78db      	ldrb	r3, [r3, #3]
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d001      	beq.n	800a6ea <mount_volume+0x146>
 800a6e6:	230d      	movs	r3, #13
 800a6e8:	e14c      	b.n	800a984 <mount_volume+0x3e0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	78db      	ldrb	r3, [r3, #3]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	63bb      	str	r3, [r7, #56]	; 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	895b      	ldrh	r3, [r3, #10]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d008      	beq.n	800a71e <mount_volume+0x17a>
 800a70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70e:	895b      	ldrh	r3, [r3, #10]
 800a710:	461a      	mov	r2, r3
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	895b      	ldrh	r3, [r3, #10]
 800a716:	3b01      	subs	r3, #1
 800a718:	4013      	ands	r3, r2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <mount_volume+0x17e>
 800a71e:	230d      	movs	r3, #13
 800a720:	e130      	b.n	800a984 <mount_volume+0x3e0>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	3330      	adds	r3, #48	; 0x30
 800a726:	3311      	adds	r3, #17
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fecf 	bl	80094cc <ld_word>
 800a72e:	4603      	mov	r3, r0
 800a730:	461a      	mov	r2, r3
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	891b      	ldrh	r3, [r3, #8]
 800a73a:	f003 030f 	and.w	r3, r3, #15
 800a73e:	b29b      	uxth	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <mount_volume+0x1a4>
 800a744:	230d      	movs	r3, #13
 800a746:	e11d      	b.n	800a984 <mount_volume+0x3e0>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	3330      	adds	r3, #48	; 0x30
 800a74c:	3313      	adds	r3, #19
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe febc 	bl	80094cc <ld_word>
 800a754:	4603      	mov	r3, r0
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <mount_volume+0x1c8>
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	3330      	adds	r3, #48	; 0x30
 800a762:	3320      	adds	r3, #32
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe fec9 	bl	80094fc <ld_dword>
 800a76a:	63f8      	str	r0, [r7, #60]	; 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	3330      	adds	r3, #48	; 0x30
 800a770:	330e      	adds	r3, #14
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe feaa 	bl	80094cc <ld_word>
 800a778:	4603      	mov	r3, r0
 800a77a:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a77c:	8bfb      	ldrh	r3, [r7, #30]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <mount_volume+0x1e2>
 800a782:	230d      	movs	r3, #13
 800a784:	e0fe      	b.n	800a984 <mount_volume+0x3e0>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a786:	8bfa      	ldrh	r2, [r7, #30]
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	4413      	add	r3, r2
 800a78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a78e:	8912      	ldrh	r2, [r2, #8]
 800a790:	0912      	lsrs	r2, r2, #4
 800a792:	b292      	uxth	r2, r2
 800a794:	4413      	add	r3, r2
 800a796:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d201      	bcs.n	800a7a4 <mount_volume+0x200>
 800a7a0:	230d      	movs	r3, #13
 800a7a2:	e0ef      	b.n	800a984 <mount_volume+0x3e0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a7a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ac:	8952      	ldrh	r2, [r2, #10]
 800a7ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7b2:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <mount_volume+0x21a>
 800a7ba:	230d      	movs	r3, #13
 800a7bc:	e0e2      	b.n	800a984 <mount_volume+0x3e0>
		fmt = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	4a1f      	ldr	r2, [pc, #124]	; (800a844 <mount_volume+0x2a0>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d801      	bhi.n	800a7ce <mount_volume+0x22a>
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d801      	bhi.n	800a7dc <mount_volume+0x238>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d801      	bhi.n	800a7ea <mount_volume+0x246>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	633b      	str	r3, [r7, #48]	; 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <mount_volume+0x250>
 800a7f0:	230d      	movs	r3, #13
 800a7f2:	e0c7      	b.n	800a984 <mount_volume+0x3e0>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	1c9a      	adds	r2, r3, #2
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	6a3a      	ldr	r2, [r7, #32]
 800a800:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a802:	8bfa      	ldrh	r2, [r7, #30]
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	441a      	add	r2, r3
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a80c:	6a3a      	ldr	r2, [r7, #32]
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	441a      	add	r2, r3
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d123      	bne.n	800a864 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	3330      	adds	r3, #48	; 0x30
 800a820:	332a      	adds	r3, #42	; 0x2a
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe fe52 	bl	80094cc <ld_word>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <mount_volume+0x28e>
 800a82e:	230d      	movs	r3, #13
 800a830:	e0a8      	b.n	800a984 <mount_volume+0x3e0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	891b      	ldrh	r3, [r3, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d006      	beq.n	800a848 <mount_volume+0x2a4>
 800a83a:	230d      	movs	r3, #13
 800a83c:	e0a2      	b.n	800a984 <mount_volume+0x3e0>
 800a83e:	bf00      	nop
 800a840:	200009fc 	.word	0x200009fc
 800a844:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	3330      	adds	r3, #48	; 0x30
 800a84c:	332c      	adds	r3, #44	; 0x2c
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fe54 	bl	80094fc <ld_dword>
 800a854:	4602      	mov	r2, r0
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
 800a862:	e01e      	b.n	800a8a2 <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	891b      	ldrh	r3, [r3, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <mount_volume+0x2cc>
 800a86c:	230d      	movs	r3, #13
 800a86e:	e089      	b.n	800a984 <mount_volume+0x3e0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	441a      	add	r2, r3
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d103      	bne.n	800a88a <mount_volume+0x2e6>
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	e00a      	b.n	800a8a0 <mount_volume+0x2fc>
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	695a      	ldr	r2, [r3, #20]
 800a88e:	4613      	mov	r3, r2
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	4413      	add	r3, r2
 800a894:	085a      	lsrs	r2, r3, #1
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a8a0:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a8ac:	0a5b      	lsrs	r3, r3, #9
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d201      	bcs.n	800a8b6 <mount_volume+0x312>
 800a8b2:	230d      	movs	r3, #13
 800a8b4:	e066      	b.n	800a984 <mount_volume+0x3e0>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8bc:	611a      	str	r2, [r3, #16]
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	691a      	ldr	r2, [r3, #16]
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c8:	2280      	movs	r2, #128	; 0x80
 800a8ca:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d149      	bne.n	800a966 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	3330      	adds	r3, #48	; 0x30
 800a8d6:	3330      	adds	r3, #48	; 0x30
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fe fdf7 	bl	80094cc <ld_word>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d140      	bne.n	800a966 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ec:	f7fe fef6 	bl	80096dc <move_window>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d137      	bne.n	800a966 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fe:	3330      	adds	r3, #48	; 0x30
 800a900:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a904:	4618      	mov	r0, r3
 800a906:	f7fe fde1 	bl	80094cc <ld_word>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a912:	429a      	cmp	r2, r3
 800a914:	d127      	bne.n	800a966 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	3330      	adds	r3, #48	; 0x30
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fdee 	bl	80094fc <ld_dword>
 800a920:	4603      	mov	r3, r0
 800a922:	4a1a      	ldr	r2, [pc, #104]	; (800a98c <mount_volume+0x3e8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d11e      	bne.n	800a966 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	3330      	adds	r3, #48	; 0x30
 800a92c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe fde3 	bl	80094fc <ld_dword>
 800a936:	4603      	mov	r3, r0
 800a938:	4a15      	ldr	r2, [pc, #84]	; (800a990 <mount_volume+0x3ec>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d113      	bne.n	800a966 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	3330      	adds	r3, #48	; 0x30
 800a942:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fdd8 	bl	80094fc <ld_dword>
 800a94c:	4602      	mov	r2, r0
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	3330      	adds	r3, #48	; 0x30
 800a956:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7fe fdce 	bl	80094fc <ld_dword>
 800a960:	4602      	mov	r2, r0
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800a96e:	4b09      	ldr	r3, [pc, #36]	; (800a994 <mount_volume+0x3f0>)
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	b29a      	uxth	r2, r3
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <mount_volume+0x3f0>)
 800a978:	801a      	strh	r2, [r3, #0]
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <mount_volume+0x3f0>)
 800a97c:	881a      	ldrh	r2, [r3, #0]
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3740      	adds	r7, #64	; 0x40
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	41615252 	.word	0x41615252
 800a990:	61417272 	.word	0x61417272
 800a994:	20000a00 	.word	0x20000a00

0800a998 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800a9aa:	f107 0310 	add.w	r3, r7, #16
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7ff fcaf 	bl	800a312 <get_ldnumber>
 800a9b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	da01      	bge.n	800a9c0 <f_mount+0x28>
 800a9bc:	230b      	movs	r3, #11
 800a9be:	e02e      	b.n	800aa1e <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800a9c0:	4a19      	ldr	r2, [pc, #100]	; (800aa28 <f_mount+0x90>)
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <f_mount+0x48>
		FatFs[vol] = 0;
 800a9d0:	4a15      	ldr	r2, [pc, #84]	; (800aa28 <f_mount+0x90>)
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00b      	beq.n	800a9fe <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	490c      	ldr	r1, [pc, #48]	; (800aa28 <f_mount+0x90>)
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <f_mount+0x70>
 800aa04:	2300      	movs	r3, #0
 800aa06:	e00a      	b.n	800aa1e <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aa08:	f107 010c 	add.w	r1, r7, #12
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	2200      	movs	r2, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fdc6 	bl	800a5a4 <mount_volume>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3720      	adds	r7, #32
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200009fc 	.word	0x200009fc

0800aa2c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08e      	sub	sp, #56	; 0x38
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 800aa36:	f107 0108 	add.w	r1, r7, #8
 800aa3a:	1d3b      	adds	r3, r7, #4
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff fdb0 	bl	800a5a4 <mount_volume>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 800aa4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d11f      	bne.n	800aa92 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff fbea 	bl	800a234 <follow_path>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {				/* Follow completed */
 800aa66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d111      	bne.n	800aa92 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800aa6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa72:	b25b      	sxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da03      	bge.n	800aa80 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800aa78:	2306      	movs	r3, #6
 800aa7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aa7e:	e008      	b.n	800aa92 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <f_stat+0x66>
 800aa86:	f107 0308 	add.w	r3, r7, #8
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff faa1 	bl	8009fd4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800aa92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3738      	adds	r7, #56	; 0x38
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b090      	sub	sp, #64	; 0x40
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 800aaaa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800aaae:	f107 030c 	add.w	r3, r7, #12
 800aab2:	2200      	movs	r2, #0
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fd75 	bl	800a5a4 <mount_volume>
 800aaba:	4603      	mov	r3, r0
 800aabc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800aac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f040 809d 	bne.w	800ac04 <f_getfree+0x166>
		*fatfs = fs;				/* Return ptr to the fs object */
 800aaca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	691a      	ldr	r2, [r3, #16]
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	3b02      	subs	r3, #2
 800aada:	429a      	cmp	r2, r3
 800aadc:	d804      	bhi.n	800aae8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	691a      	ldr	r2, [r3, #16]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	e08d      	b.n	800ac04 <f_getfree+0x166>
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63bb      	str	r3, [r7, #56]	; 0x38
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d128      	bne.n	800ab46 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800aafc:	f107 0314 	add.w	r3, r7, #20
 800ab00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fe36 	bl	8009774 <get_fat>
 800ab08:	62b8      	str	r0, [r7, #40]	; 0x28
					if (stat == 0xFFFFFFFF) {
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab10:	d103      	bne.n	800ab1a <f_getfree+0x7c>
						res = FR_DISK_ERR; break;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ab18:	e063      	b.n	800abe2 <f_getfree+0x144>
					}
					if (stat == 1) {
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d103      	bne.n	800ab28 <f_getfree+0x8a>
						res = FR_INT_ERR; break;
 800ab20:	2302      	movs	r3, #2
 800ab22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ab26:	e05c      	b.n	800abe2 <f_getfree+0x144>
					}
					if (stat == 0) nfree++;
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <f_getfree+0x96>
 800ab2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab30:	3301      	adds	r3, #1
 800ab32:	63bb      	str	r3, [r7, #56]	; 0x38
				} while (++clst < fs->n_fatent);
 800ab34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab36:	3301      	adds	r3, #1
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d3db      	bcc.n	800aafc <f_getfree+0x5e>
 800ab44:	e04d      	b.n	800abe2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	637b      	str	r3, [r7, #52]	; 0x34
					sect = fs->fatbase;		/* Top of the FAT */
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	633b      	str	r3, [r7, #48]	; 0x30
					i = 0;					/* Offset in the sector */
 800ab52:	2300      	movs	r3, #0
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {	/* New sector? */
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10d      	bne.n	800ab78 <f_getfree+0xda>
							res = move_window(fs, sect++);
 800ab5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	633a      	str	r2, [r7, #48]	; 0x30
 800ab64:	4619      	mov	r1, r3
 800ab66:	f7fe fdb9 	bl	80096dc <move_window>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							if (res != FR_OK) break;
 800ab70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d133      	bne.n	800abe0 <f_getfree+0x142>
						}
						if (fs->fs_type == FS_FAT16) {
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d111      	bne.n	800aba4 <f_getfree+0x106>
							if (ld_word(fs->win + i) == 0) nfree++;
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab88:	4413      	add	r3, r2
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe fc9e 	bl	80094cc <ld_word>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <f_getfree+0xfe>
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	3301      	adds	r3, #1
 800ab9a:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 2;
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	3302      	adds	r3, #2
 800aba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aba2:	e012      	b.n	800abca <f_getfree+0x12c>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	4413      	add	r3, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fca4 	bl	80094fc <ld_dword>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d102      	bne.n	800abc4 <f_getfree+0x126>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	3301      	adds	r3, #1
 800abc2:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 4;
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	3304      	adds	r3, #4
 800abc8:	62fb      	str	r3, [r7, #44]	; 0x2c
						}
						i %= SS(fs);
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
					} while (--clst);
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	3b01      	subs	r3, #1
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1bb      	bne.n	800ab56 <f_getfree+0xb8>
 800abde:	e000      	b.n	800abe2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800abe0:	bf00      	nop
				}
			}
			if (res == FR_OK) {		/* Update parameters if succeeded */
 800abe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10c      	bne.n	800ac04 <f_getfree+0x166>
				*nclst = nfree;			/* Return the free clusters */
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abee:	601a      	str	r2, [r3, #0]
				fs->free_clst = nfree;	/* Now free_clst is valid */
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abf4:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	795a      	ldrb	r2, [r3, #5]
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	f042 0201 	orr.w	r2, r2, #1
 800ac00:	b2d2      	uxtb	r2, r2
 800ac02:	715a      	strb	r2, [r3, #5]
			}
		}
	}

	LEAVE_FF(fs, res);
 800ac04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3740      	adds	r7, #64	; 0x40
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <__NVIC_SetPriority>:
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	db0a      	blt.n	800ac3a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	490c      	ldr	r1, [pc, #48]	; (800ac5c <__NVIC_SetPriority+0x4c>)
 800ac2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac2e:	0112      	lsls	r2, r2, #4
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	440b      	add	r3, r1
 800ac34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac38:	e00a      	b.n	800ac50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	4908      	ldr	r1, [pc, #32]	; (800ac60 <__NVIC_SetPriority+0x50>)
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	f003 030f 	and.w	r3, r3, #15
 800ac46:	3b04      	subs	r3, #4
 800ac48:	0112      	lsls	r2, r2, #4
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	761a      	strb	r2, [r3, #24]
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	e000e100 	.word	0xe000e100
 800ac60:	e000ed00 	.word	0xe000ed00

0800ac64 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <SysTick_Handler+0x1c>)
 800ac6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac6c:	f001 fb98 	bl	800c3a0 <xTaskGetSchedulerState>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d001      	beq.n	800ac7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac76:	f001 ff53 	bl	800cb20 <xPortSysTickHandler>
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	e000e010 	.word	0xe000e010

0800ac84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800ac88:	2100      	movs	r1, #0
 800ac8a:	f06f 0004 	mvn.w	r0, #4
 800ac8e:	f7ff ffbf 	bl	800ac10 <__NVIC_SetPriority>
#endif
}
 800ac92:	bf00      	nop
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca0:	f3ef 8305 	mrs	r3, IPSR
 800aca4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aca6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800acac:	2301      	movs	r3, #1
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	e013      	b.n	800acda <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800acb2:	f001 fb75 	bl	800c3a0 <xTaskGetSchedulerState>
 800acb6:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d00d      	beq.n	800acda <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800acbe:	f3ef 8310 	mrs	r3, PRIMASK
 800acc2:	60bb      	str	r3, [r7, #8]
  return(result);
 800acc4:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d105      	bne.n	800acd6 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acca:	f3ef 8311 	mrs	r3, BASEPRI
 800acce:	607b      	str	r3, [r7, #4]
  return(result);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800acd6:	2301      	movs	r3, #1
 800acd8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800acda:	697b      	ldr	r3, [r7, #20]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800acea:	f7ff ffd4 	bl	800ac96 <IRQ_Context>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d003      	beq.n	800acfc <osKernelInitialize+0x18>
    stat = osErrorISR;
 800acf4:	f06f 0305 	mvn.w	r3, #5
 800acf8:	607b      	str	r3, [r7, #4]
 800acfa:	e012      	b.n	800ad22 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800acfc:	f001 fb50 	bl	800c3a0 <xTaskGetSchedulerState>
 800ad00:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d109      	bne.n	800ad1c <osKernelInitialize+0x38>
 800ad08:	4b08      	ldr	r3, [pc, #32]	; (800ad2c <osKernelInitialize+0x48>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d105      	bne.n	800ad1c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad10:	4b06      	ldr	r3, [pc, #24]	; (800ad2c <osKernelInitialize+0x48>)
 800ad12:	2201      	movs	r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	e002      	b.n	800ad22 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800ad1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad20:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800ad22:	687b      	ldr	r3, [r7, #4]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20000a04 	.word	0x20000a04

0800ad30 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800ad36:	f7ff ffae 	bl	800ac96 <IRQ_Context>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <osKernelStart+0x18>
    stat = osErrorISR;
 800ad40:	f06f 0305 	mvn.w	r3, #5
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	e016      	b.n	800ad76 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800ad48:	f001 fb2a 	bl	800c3a0 <xTaskGetSchedulerState>
 800ad4c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d10d      	bne.n	800ad70 <osKernelStart+0x40>
 800ad54:	4b0a      	ldr	r3, [pc, #40]	; (800ad80 <osKernelStart+0x50>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d109      	bne.n	800ad70 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad5c:	f7ff ff92 	bl	800ac84 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <osKernelStart+0x50>)
 800ad62:	2202      	movs	r2, #2
 800ad64:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad66:	f000 fdf1 	bl	800b94c <vTaskStartScheduler>
      stat = osOK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	607b      	str	r3, [r7, #4]
 800ad6e:	e002      	b.n	800ad76 <osKernelStart+0x46>
    } else {
      stat = osError;
 800ad70:	f04f 33ff 	mov.w	r3, #4294967295
 800ad74:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800ad76:	687b      	ldr	r3, [r7, #4]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	20000a04 	.word	0x20000a04

0800ad84 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08e      	sub	sp, #56	; 0x38
 800ad88:	af04      	add	r7, sp, #16
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800ad94:	f7ff ff7f 	bl	800ac96 <IRQ_Context>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d17e      	bne.n	800ae9c <osThreadNew+0x118>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d07b      	beq.n	800ae9c <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800ada4:	2380      	movs	r3, #128	; 0x80
 800ada6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ada8:	2318      	movs	r3, #24
 800adaa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800adac:	2300      	movs	r3, #0
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295
 800adb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d045      	beq.n	800ae48 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <osThreadNew+0x46>
        name = attr->name;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <osThreadNew+0x6c>
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	2b38      	cmp	r3, #56	; 0x38
 800ade2:	d805      	bhi.n	800adf0 <osThreadNew+0x6c>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800adf0:	2300      	movs	r3, #0
 800adf2:	e054      	b.n	800ae9e <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	089b      	lsrs	r3, r3, #2
 800ae02:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <osThreadNew+0xa6>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	2b5b      	cmp	r3, #91	; 0x5b
 800ae12:	d90a      	bls.n	800ae2a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d006      	beq.n	800ae2a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800ae24:	2301      	movs	r3, #1
 800ae26:	61bb      	str	r3, [r7, #24]
 800ae28:	e010      	b.n	800ae4c <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10c      	bne.n	800ae4c <osThreadNew+0xc8>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d108      	bne.n	800ae4c <osThreadNew+0xc8>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d104      	bne.n	800ae4c <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	61bb      	str	r3, [r7, #24]
 800ae46:	e001      	b.n	800ae4c <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d110      	bne.n	800ae74 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae5a:	9202      	str	r2, [sp, #8]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6a3a      	ldr	r2, [r7, #32]
 800ae66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 fb9b 	bl	800b5a4 <xTaskCreateStatic>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	617b      	str	r3, [r7, #20]
 800ae72:	e013      	b.n	800ae9c <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d110      	bne.n	800ae9c <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	f107 0314 	add.w	r3, r7, #20
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fbce 	bl	800b62e <xTaskCreate>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d001      	beq.n	800ae9c <osThreadNew+0x118>
            hTask = NULL;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800ae9c:	697b      	ldr	r3, [r7, #20]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3728      	adds	r7, #40	; 0x28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800aeae:	f7ff fef2 	bl	800ac96 <IRQ_Context>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <osDelay+0x1a>
    stat = osErrorISR;
 800aeb8:	f06f 0305 	mvn.w	r3, #5
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e007      	b.n	800aed0 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <osDelay+0x2a>
      vTaskDelay(ticks);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fd1a 	bl	800b904 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800aed0:	68fb      	ldr	r3, [r7, #12]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
	...

0800aedc <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4a07      	ldr	r2, [pc, #28]	; (800af08 <vApplicationGetIdleTaskMemory+0x2c>)
 800aeec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	4a06      	ldr	r2, [pc, #24]	; (800af0c <vApplicationGetIdleTaskMemory+0x30>)
 800aef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2280      	movs	r2, #128	; 0x80
 800aef8:	601a      	str	r2, [r3, #0]
}
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20000a08 	.word	0x20000a08
 800af0c:	20000a64 	.word	0x20000a64

0800af10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4a07      	ldr	r2, [pc, #28]	; (800af3c <vApplicationGetTimerTaskMemory+0x2c>)
 800af20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a06      	ldr	r2, [pc, #24]	; (800af40 <vApplicationGetTimerTaskMemory+0x30>)
 800af26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af2e:	601a      	str	r2, [r3, #0]
}
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	20000c64 	.word	0x20000c64
 800af40:	20000cc0 	.word	0x20000cc0

0800af44 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f103 0208 	add.w	r2, r3, #8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f04f 32ff 	mov.w	r2, #4294967295
 800af5c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f103 0208 	add.w	r2, r3, #8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f103 0208 	add.w	r2, r3, #8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb4:	d103      	bne.n	800afbe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	e00c      	b.n	800afd8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3308      	adds	r3, #8
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	e002      	b.n	800afcc <vListInsert+0x2e>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d2f6      	bcs.n	800afc6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	601a      	str	r2, [r3, #0]
}
 800b004:	bf00      	nop
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	6892      	ldr	r2, [r2, #8]
 800b026:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6852      	ldr	r2, [r2, #4]
 800b030:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d103      	bne.n	800b044 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689a      	ldr	r2, [r3, #8]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	1e5a      	subs	r2, r3, #1
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800b06e:	2301      	movs	r3, #1
 800b070:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <xQueueGenericReset+0x1e>
 800b07c:	f001 fe64 	bl	800cd48 <ulSetInterruptMask>
 800b080:	e7fe      	b.n	800b080 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d057      	beq.n	800b138 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d053      	beq.n	800b138 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b098:	2100      	movs	r1, #0
 800b09a:	fba3 2302 	umull	r2, r3, r3, r2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d000      	beq.n	800b0a4 <xQueueGenericReset+0x40>
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d146      	bne.n	800b138 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800b0aa:	f001 fd0d 	bl	800cac8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0ba:	fb01 f303 	mul.w	r3, r1, r3
 800b0be:	441a      	add	r2, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	441a      	add	r2, r3
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	22ff      	movs	r2, #255	; 0xff
 800b0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10e      	bne.n	800b11e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d014      	beq.n	800b132 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	3310      	adds	r3, #16
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 ff3f 	bl	800bf90 <xTaskRemoveFromEventList>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00c      	beq.n	800b132 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b118:	f001 fcc4 	bl	800caa4 <vPortYield>
 800b11c:	e009      	b.n	800b132 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	3310      	adds	r3, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff ff0e 	bl	800af44 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3324      	adds	r3, #36	; 0x24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff ff09 	bl	800af44 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800b132:	f001 fcdb 	bl	800caec <vPortExitCritical>
 800b136:	e001      	b.n	800b13c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d102      	bne.n	800b148 <xQueueGenericReset+0xe4>
 800b142:	f001 fe01 	bl	800cd48 <ulSetInterruptMask>
 800b146:	e7fe      	b.n	800b146 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800b148:	68fb      	ldr	r3, [r7, #12]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800b152:	b580      	push	{r7, lr}
 800b154:	b088      	sub	sp, #32
 800b156:	af02      	add	r7, sp, #8
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
 800b15e:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d102      	bne.n	800b170 <xQueueGenericCreateStatic+0x1e>
 800b16a:	f001 fded 	bl	800cd48 <ulSetInterruptMask>
 800b16e:	e7fe      	b.n	800b16e <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d028      	beq.n	800b1c8 <xQueueGenericCreateStatic+0x76>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d025      	beq.n	800b1c8 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01f      	beq.n	800b1c8 <xQueueGenericCreateStatic+0x76>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d119      	bne.n	800b1c8 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                     * the real queue and semaphore structures. */
                    volatile size_t xSize = sizeof( StaticQueue_t );
 800b194:	2350      	movs	r3, #80	; 0x50
 800b196:	613b      	str	r3, [r7, #16]

                    /* This assertion cannot be branch covered in unit tests */
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2b50      	cmp	r3, #80	; 0x50
 800b19c:	d002      	beq.n	800b1a4 <xQueueGenericCreateStatic+0x52>
 800b19e:	f001 fdd3 	bl	800cd48 <ulSetInterruptMask>
 800b1a2:	e7fe      	b.n	800b1a2 <xQueueGenericCreateStatic+0x50>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800b1a4:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f80c 	bl	800b1de <prvInitialiseNewQueue>
 800b1c6:	e005      	b.n	800b1d4 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <xQueueGenericCreateStatic+0x82>
 800b1ce:	f001 fdbb 	bl	800cd48 <ulSetInterruptMask>
 800b1d2:	e7fe      	b.n	800b1d2 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800b1d4:	697b      	ldr	r3, [r7, #20]
    }
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	607a      	str	r2, [r7, #4]
 800b1ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	69ba      	ldr	r2, [r7, #24]
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e002      	b.n	800b200 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b20c:	2101      	movs	r1, #1
 800b20e:	69b8      	ldr	r0, [r7, #24]
 800b210:	f7ff ff28 	bl	800b064 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	78fa      	ldrb	r2, [r7, #3]
 800b218:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800b21c:	bf00      	nop
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800b230:	2300      	movs	r3, #0
 800b232:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d102      	bne.n	800b244 <xQueueReceive+0x20>
 800b23e:	f001 fd83 	bl	800cd48 <ulSetInterruptMask>
 800b242:	e7fe      	b.n	800b242 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d103      	bne.n	800b252 <xQueueReceive+0x2e>
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <xQueueReceive+0x32>
 800b252:	2301      	movs	r3, #1
 800b254:	e000      	b.n	800b258 <xQueueReceive+0x34>
 800b256:	2300      	movs	r3, #0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <xQueueReceive+0x3e>
 800b25c:	f001 fd74 	bl	800cd48 <ulSetInterruptMask>
 800b260:	e7fe      	b.n	800b260 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b262:	f001 f89d 	bl	800c3a0 <xTaskGetSchedulerState>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <xQueueReceive+0x4e>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <xQueueReceive+0x52>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <xQueueReceive+0x54>
 800b276:	2300      	movs	r3, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d102      	bne.n	800b282 <xQueueReceive+0x5e>
 800b27c:	f001 fd64 	bl	800cd48 <ulSetInterruptMask>
 800b280:	e7fe      	b.n	800b280 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b282:	f001 fc21 	bl	800cac8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d019      	beq.n	800b2c6 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	6a38      	ldr	r0, [r7, #32]
 800b296:	f000 f87e 	bl	800b396 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	1e5a      	subs	r2, r3, #1
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 fe6e 	bl	800bf90 <xTaskRemoveFromEventList>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b2ba:	f001 fbf3 	bl	800caa4 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800b2be:	f001 fc15 	bl	800caec <vPortExitCritical>
                return pdPASS;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e063      	b.n	800b38e <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d103      	bne.n	800b2d4 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800b2cc:	f001 fc0e 	bl	800caec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e05c      	b.n	800b38e <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b2da:	f107 0314 	add.w	r3, r7, #20
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 ff24 	bl	800c12c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b2e8:	f001 fc00 	bl	800caec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b2ec:	f000 fb88 	bl	800ba00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b2f0:	f001 fbea 	bl	800cac8 <vPortEnterCritical>
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2fa:	b25b      	sxtb	r3, r3
 800b2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b300:	d103      	bne.n	800b30a <xQueueReceive+0xe6>
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b310:	b25b      	sxtb	r3, r3
 800b312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b316:	d103      	bne.n	800b320 <xQueueReceive+0xfc>
 800b318:	6a3b      	ldr	r3, [r7, #32]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b320:	f001 fbe4 	bl	800caec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b324:	1d3a      	adds	r2, r7, #4
 800b326:	f107 0314 	add.w	r3, r7, #20
 800b32a:	4611      	mov	r1, r2
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 ff13 	bl	800c158 <xTaskCheckForTimeOut>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d11d      	bne.n	800b374 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b338:	6a38      	ldr	r0, [r7, #32]
 800b33a:	f000 f8a4 	bl	800b486 <prvIsQueueEmpty>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d011      	beq.n	800b368 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	3324      	adds	r3, #36	; 0x24
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	4611      	mov	r1, r2
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fdc5 	bl	800bedc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800b352:	6a38      	ldr	r0, [r7, #32]
 800b354:	f000 f845 	bl	800b3e2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800b358:	f000 fb60 	bl	800ba1c <xTaskResumeAll>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d18f      	bne.n	800b282 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800b362:	f001 fb9f 	bl	800caa4 <vPortYield>
 800b366:	e78c      	b.n	800b282 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800b368:	6a38      	ldr	r0, [r7, #32]
 800b36a:	f000 f83a 	bl	800b3e2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b36e:	f000 fb55 	bl	800ba1c <xTaskResumeAll>
 800b372:	e786      	b.n	800b282 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800b374:	6a38      	ldr	r0, [r7, #32]
 800b376:	f000 f834 	bl	800b3e2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b37a:	f000 fb4f 	bl	800ba1c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b37e:	6a38      	ldr	r0, [r7, #32]
 800b380:	f000 f881 	bl	800b486 <prvIsQueueEmpty>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	f43f af7b 	beq.w	800b282 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800b38c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3728      	adds	r7, #40	; 0x28
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d018      	beq.n	800b3da <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	441a      	add	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68da      	ldr	r2, [r3, #12]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d303      	bcc.n	800b3ca <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68d9      	ldr	r1, [r3, #12]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	6838      	ldr	r0, [r7, #0]
 800b3d6:	f002 fa2b 	bl	800d830 <memcpy>
    }
}
 800b3da:	bf00      	nop
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800b3ea:	f001 fb6d 	bl	800cac8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3f4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3f6:	e011      	b.n	800b41c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d012      	beq.n	800b426 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3324      	adds	r3, #36	; 0x24
 800b404:	4618      	mov	r0, r3
 800b406:	f000 fdc3 	bl	800bf90 <xTaskRemoveFromEventList>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800b410:	f000 fef8 	bl	800c204 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	3b01      	subs	r3, #1
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800b41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b420:	2b00      	cmp	r3, #0
 800b422:	dce9      	bgt.n	800b3f8 <prvUnlockQueue+0x16>
 800b424:	e000      	b.n	800b428 <prvUnlockQueue+0x46>
                        break;
 800b426:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	22ff      	movs	r2, #255	; 0xff
 800b42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800b430:	f001 fb5c 	bl	800caec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800b434:	f001 fb48 	bl	800cac8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b43e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b440:	e011      	b.n	800b466 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d012      	beq.n	800b470 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3310      	adds	r3, #16
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 fd9e 	bl	800bf90 <xTaskRemoveFromEventList>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800b45a:	f000 fed3 	bl	800c204 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	3b01      	subs	r3, #1
 800b462:	b2db      	uxtb	r3, r3
 800b464:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800b466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	dce9      	bgt.n	800b442 <prvUnlockQueue+0x60>
 800b46e:	e000      	b.n	800b472 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800b470:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	22ff      	movs	r2, #255	; 0xff
 800b476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800b47a:	f001 fb37 	bl	800caec <vPortExitCritical>
}
 800b47e:	bf00      	nop
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800b48e:	f001 fb1b 	bl	800cac8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800b49a:	2301      	movs	r3, #1
 800b49c:	60fb      	str	r3, [r7, #12]
 800b49e:	e001      	b.n	800b4a4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800b4a4:	f001 fb22 	bl	800caec <vPortExitCritical>

    return xReturn;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d102      	bne.n	800b4ca <vQueueAddToRegistry+0x16>
 800b4c4:	f001 fc40 	bl	800cd48 <ulSetInterruptMask>
 800b4c8:	e7fe      	b.n	800b4c8 <vQueueAddToRegistry+0x14>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d024      	beq.n	800b51e <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	e01e      	b.n	800b518 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800b4da:	4a17      	ldr	r2, [pc, #92]	; (800b538 <vQueueAddToRegistry+0x84>)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	4413      	add	r3, r2
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d105      	bne.n	800b4f6 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	00db      	lsls	r3, r3, #3
 800b4ee:	4a12      	ldr	r2, [pc, #72]	; (800b538 <vQueueAddToRegistry+0x84>)
 800b4f0:	4413      	add	r3, r2
 800b4f2:	60bb      	str	r3, [r7, #8]
                    break;
 800b4f4:	e013      	b.n	800b51e <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <vQueueAddToRegistry+0x5e>
 800b4fc:	4a0e      	ldr	r2, [pc, #56]	; (800b538 <vQueueAddToRegistry+0x84>)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d104      	bne.n	800b512 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	4a0a      	ldr	r2, [pc, #40]	; (800b538 <vQueueAddToRegistry+0x84>)
 800b50e:	4413      	add	r3, r2
 800b510:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3301      	adds	r3, #1
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b07      	cmp	r3, #7
 800b51c:	d9dd      	bls.n	800b4da <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d005      	beq.n	800b530 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200010c0 	.word	0x200010c0

0800b53c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800b54c:	f001 fabc 	bl	800cac8 <vPortEnterCritical>
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b556:	b25b      	sxtb	r3, r3
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d103      	bne.n	800b566 <vQueueWaitForMessageRestricted+0x2a>
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b56c:	b25b      	sxtb	r3, r3
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b572:	d103      	bne.n	800b57c <vQueueWaitForMessageRestricted+0x40>
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b57c:	f001 fab6 	bl	800caec <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b584:	2b00      	cmp	r3, #0
 800b586:	d106      	bne.n	800b596 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	3324      	adds	r3, #36	; 0x24
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	4618      	mov	r0, r3
 800b592:	f000 fcbf 	bl	800bf14 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800b596:	6978      	ldr	r0, [r7, #20]
 800b598:	f7ff ff23 	bl	800b3e2 <prvUnlockQueue>
    }
 800b59c:	bf00      	nop
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08c      	sub	sp, #48	; 0x30
 800b5a8:	af04      	add	r7, sp, #16
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <xTaskCreateStatic+0x1a>
 800b5b8:	f001 fbc6 	bl	800cd48 <ulSetInterruptMask>
 800b5bc:	e7fe      	b.n	800b5bc <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <xTaskCreateStatic+0x26>
 800b5c4:	f001 fbc0 	bl	800cd48 <ulSetInterruptMask>
 800b5c8:	e7fe      	b.n	800b5c8 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800b5ca:	235c      	movs	r3, #92	; 0x5c
 800b5cc:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b5d2:	d002      	beq.n	800b5da <xTaskCreateStatic+0x36>
 800b5d4:	f001 fbb8 	bl	800cd48 <ulSetInterruptMask>
 800b5d8:	e7fe      	b.n	800b5d8 <xTaskCreateStatic+0x34>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5da:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01e      	beq.n	800b620 <xTaskCreateStatic+0x7c>
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01b      	beq.n	800b620 <xTaskCreateStatic+0x7c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ea:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5f0:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9303      	str	r3, [sp, #12]
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	f107 0318 	add.w	r3, r7, #24
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 f850 	bl	800b6b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b618:	69f8      	ldr	r0, [r7, #28]
 800b61a:	f000 f8e3 	bl	800b7e4 <prvAddNewTaskToReadyList>
 800b61e:	e001      	b.n	800b624 <xTaskCreateStatic+0x80>
        }
        else
        {
            xReturn = NULL;
 800b620:	2300      	movs	r3, #0
 800b622:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b624:	69bb      	ldr	r3, [r7, #24]
    }
 800b626:	4618      	mov	r0, r3
 800b628:	3720      	adds	r7, #32
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800b62e:	b580      	push	{r7, lr}
 800b630:	b08c      	sub	sp, #48	; 0x30
 800b632:	af04      	add	r7, sp, #16
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	60b9      	str	r1, [r7, #8]
 800b638:	603b      	str	r3, [r7, #0]
 800b63a:	4613      	mov	r3, r2
 800b63c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b63e:	88fb      	ldrh	r3, [r7, #6]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4618      	mov	r0, r3
 800b644:	f001 fbe8 	bl	800ce18 <pvPortMalloc>
 800b648:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b650:	205c      	movs	r0, #92	; 0x5c
 800b652:	f001 fbe1 	bl	800ce18 <pvPortMalloc>
 800b656:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d003      	beq.n	800b666 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	631a      	str	r2, [r3, #48]	; 0x30
 800b664:	e005      	b.n	800b672 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800b666:	6978      	ldr	r0, [r7, #20]
 800b668:	f001 fc2a 	bl	800cec0 <vPortFree>
 800b66c:	e001      	b.n	800b672 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d017      	beq.n	800b6a8 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b680:	88fa      	ldrh	r2, [r7, #6]
 800b682:	2300      	movs	r3, #0
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	9302      	str	r3, [sp, #8]
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f80e 	bl	800b6b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b69c:	69f8      	ldr	r0, [r7, #28]
 800b69e:	f000 f8a1 	bl	800b7e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	61bb      	str	r3, [r7, #24]
 800b6a6:	e002      	b.n	800b6ae <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800b6ae:	69bb      	ldr	r3, [r7, #24]
    }
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	21a5      	movs	r1, #165	; 0xa5
 800b6d2:	f002 f80c 	bl	800d6ee <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4413      	add	r3, r2
 800b6e6:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	f023 0307 	bic.w	r3, r3, #7
 800b6ee:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f003 0307 	and.w	r3, r3, #7
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <prvInitialiseNewTask+0x48>
 800b6fa:	f001 fb25 	bl	800cd48 <ulSetInterruptMask>
 800b6fe:	e7fe      	b.n	800b6fe <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d01f      	beq.n	800b746 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b706:	2300      	movs	r3, #0
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e012      	b.n	800b732 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	4413      	add	r3, r2
 800b712:	7819      	ldrb	r1, [r3, #0]
 800b714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	3334      	adds	r3, #52	; 0x34
 800b71c:	460a      	mov	r2, r1
 800b71e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	4413      	add	r3, r2
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d006      	beq.n	800b73a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	3301      	adds	r3, #1
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	2b0f      	cmp	r3, #15
 800b736:	d9e9      	bls.n	800b70c <prvInitialiseNewTask+0x54>
 800b738:	e000      	b.n	800b73c <prvInitialiseNewTask+0x84>
            {
                break;
 800b73a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b744:	e003      	b.n	800b74e <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	2b37      	cmp	r3, #55	; 0x37
 800b752:	d902      	bls.n	800b75a <prvInitialiseNewTask+0xa2>
 800b754:	f001 faf8 	bl	800cd48 <ulSetInterruptMask>
 800b758:	e7fe      	b.n	800b758 <prvInitialiseNewTask+0xa0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	2b37      	cmp	r3, #55	; 0x37
 800b75e:	d901      	bls.n	800b764 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b760:	2337      	movs	r3, #55	; 0x37
 800b762:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	6a3a      	ldr	r2, [r7, #32]
 800b768:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800b76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76c:	6a3a      	ldr	r2, [r7, #32]
 800b76e:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	2200      	movs	r2, #0
 800b774:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b778:	3304      	adds	r3, #4
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff fc02 	bl	800af84 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	3318      	adds	r3, #24
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fbfd 	bl	800af84 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b798:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b79e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800b7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a2:	3354      	adds	r3, #84	; 0x54
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 ffa0 	bl	800d6ee <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	3358      	adds	r3, #88	; 0x58
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f001 ff99 	bl	800d6ee <memset>
             * function as well. */
            #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
                {
                    #if ( portSTACK_GROWTH < 0 )
                        {
                            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	6938      	ldr	r0, [r7, #16]
 800b7c6:	f001 f9dd 	bl	800cb84 <pxPortInitialiseStack>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d002      	beq.n	800b7dc <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7da:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b7dc:	bf00      	nop
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800b7ec:	f001 f96c 	bl	800cac8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800b7f0:	4b3e      	ldr	r3, [pc, #248]	; (800b8ec <prvAddNewTaskToReadyList+0x108>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	4a3d      	ldr	r2, [pc, #244]	; (800b8ec <prvAddNewTaskToReadyList+0x108>)
 800b7f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800b7fa:	4b3d      	ldr	r3, [pc, #244]	; (800b8f0 <prvAddNewTaskToReadyList+0x10c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d109      	bne.n	800b816 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800b802:	4a3b      	ldr	r2, [pc, #236]	; (800b8f0 <prvAddNewTaskToReadyList+0x10c>)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b808:	4b38      	ldr	r3, [pc, #224]	; (800b8ec <prvAddNewTaskToReadyList+0x108>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d110      	bne.n	800b832 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800b810:	f000 fd14 	bl	800c23c <prvInitialiseTaskLists>
 800b814:	e00d      	b.n	800b832 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800b816:	4b37      	ldr	r3, [pc, #220]	; (800b8f4 <prvAddNewTaskToReadyList+0x110>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d109      	bne.n	800b832 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b81e:	4b34      	ldr	r3, [pc, #208]	; (800b8f0 <prvAddNewTaskToReadyList+0x10c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b828:	429a      	cmp	r2, r3
 800b82a:	d802      	bhi.n	800b832 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800b82c:	4a30      	ldr	r2, [pc, #192]	; (800b8f0 <prvAddNewTaskToReadyList+0x10c>)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800b832:	4b31      	ldr	r3, [pc, #196]	; (800b8f8 <prvAddNewTaskToReadyList+0x114>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3301      	adds	r3, #1
 800b838:	4a2f      	ldr	r2, [pc, #188]	; (800b8f8 <prvAddNewTaskToReadyList+0x114>)
 800b83a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b83c:	4b2e      	ldr	r3, [pc, #184]	; (800b8f8 <prvAddNewTaskToReadyList+0x114>)
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	4b2c      	ldr	r3, [pc, #176]	; (800b8fc <prvAddNewTaskToReadyList+0x118>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d903      	bls.n	800b858 <prvAddNewTaskToReadyList+0x74>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	4a29      	ldr	r2, [pc, #164]	; (800b8fc <prvAddNewTaskToReadyList+0x118>)
 800b856:	6013      	str	r3, [r2, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85c:	4928      	ldr	r1, [pc, #160]	; (800b900 <prvAddNewTaskToReadyList+0x11c>)
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	440b      	add	r3, r1
 800b868:	3304      	adds	r3, #4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	609a      	str	r2, [r3, #8]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689a      	ldr	r2, [r3, #8]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	60da      	str	r2, [r3, #12]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	3204      	adds	r2, #4
 800b884:	605a      	str	r2, [r3, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	1d1a      	adds	r2, r3, #4
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	609a      	str	r2, [r3, #8]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4a19      	ldr	r2, [pc, #100]	; (800b900 <prvAddNewTaskToReadyList+0x11c>)
 800b89c:	441a      	add	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	615a      	str	r2, [r3, #20]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a6:	4916      	ldr	r1, [pc, #88]	; (800b900 <prvAddNewTaskToReadyList+0x11c>)
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	440b      	add	r3, r1
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	1c59      	adds	r1, r3, #1
 800b8b6:	4812      	ldr	r0, [pc, #72]	; (800b900 <prvAddNewTaskToReadyList+0x11c>)
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4403      	add	r3, r0
 800b8c2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800b8c4:	f001 f912 	bl	800caec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <prvAddNewTaskToReadyList+0x110>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d008      	beq.n	800b8e2 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8d0:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <prvAddNewTaskToReadyList+0x10c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d201      	bcs.n	800b8e2 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800b8de:	f001 f8e1 	bl	800caa4 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200015d4 	.word	0x200015d4
 800b8f0:	20001100 	.word	0x20001100
 800b8f4:	200015e0 	.word	0x200015e0
 800b8f8:	200015f0 	.word	0x200015f0
 800b8fc:	200015dc 	.word	0x200015dc
 800b900:	20001104 	.word	0x20001104

0800b904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800b90c:	2300      	movs	r3, #0
 800b90e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00f      	beq.n	800b936 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800b916:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <vTaskDelay+0x44>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <vTaskDelay+0x20>
 800b91e:	f001 fa13 	bl	800cd48 <ulSetInterruptMask>
 800b922:	e7fe      	b.n	800b922 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800b924:	f000 f86c 	bl	800ba00 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b928:	2100      	movs	r1, #0
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fd56 	bl	800c3dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800b930:	f000 f874 	bl	800ba1c <xTaskResumeAll>
 800b934:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800b93c:	f001 f8b2 	bl	800caa4 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b940:	bf00      	nop
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	200015fc 	.word	0x200015fc

0800b94c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b95a:	463a      	mov	r2, r7
 800b95c:	1d39      	adds	r1, r7, #4
 800b95e:	f107 0308 	add.w	r3, r7, #8
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff faba 	bl	800aedc <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	9202      	str	r2, [sp, #8]
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	2300      	movs	r3, #0
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	460a      	mov	r2, r1
 800b97a:	491a      	ldr	r1, [pc, #104]	; (800b9e4 <vTaskStartScheduler+0x98>)
 800b97c:	481a      	ldr	r0, [pc, #104]	; (800b9e8 <vTaskStartScheduler+0x9c>)
 800b97e:	f7ff fe11 	bl	800b5a4 <xTaskCreateStatic>
 800b982:	4603      	mov	r3, r0
 800b984:	4a19      	ldr	r2, [pc, #100]	; (800b9ec <vTaskStartScheduler+0xa0>)
 800b986:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800b988:	4b18      	ldr	r3, [pc, #96]	; (800b9ec <vTaskStartScheduler+0xa0>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800b990:	2301      	movs	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	e001      	b.n	800b99a <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d102      	bne.n	800b9a6 <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800b9a0:	f000 fd8a 	bl	800c4b8 <xTimerCreateTimerTask>
 800b9a4:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d10e      	bne.n	800b9ca <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800b9ac:	f001 f9cc 	bl	800cd48 <ulSetInterruptMask>
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800b9b0:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <vTaskStartScheduler+0xa4>)
 800b9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800b9b8:	4b0e      	ldr	r3, [pc, #56]	; (800b9f4 <vTaskStartScheduler+0xa8>)
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9be:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <vTaskStartScheduler+0xac>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800b9c4:	f001 f968 	bl	800cc98 <xPortStartScheduler>
 800b9c8:	e006      	b.n	800b9d8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d0:	d102      	bne.n	800b9d8 <vTaskStartScheduler+0x8c>
 800b9d2:	f001 f9b9 	bl	800cd48 <ulSetInterruptMask>
 800b9d6:	e7fe      	b.n	800b9d6 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800b9d8:	4b08      	ldr	r3, [pc, #32]	; (800b9fc <vTaskStartScheduler+0xb0>)
 800b9da:	681b      	ldr	r3, [r3, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	08011c94 	.word	0x08011c94
 800b9e8:	0800c21d 	.word	0x0800c21d
 800b9ec:	200015f8 	.word	0x200015f8
 800b9f0:	200015f4 	.word	0x200015f4
 800b9f4:	200015e0 	.word	0x200015e0
 800b9f8:	200015d8 	.word	0x200015d8
 800b9fc:	20000010 	.word	0x20000010

0800ba00 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba00:	b480      	push	{r7}
 800ba02:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800ba04:	4b04      	ldr	r3, [pc, #16]	; (800ba18 <vTaskSuspendAll+0x18>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	4a03      	ldr	r2, [pc, #12]	; (800ba18 <vTaskSuspendAll+0x18>)
 800ba0c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800ba0e:	bf00      	nop
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	200015fc 	.word	0x200015fc

0800ba1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800ba2a:	4b6a      	ldr	r3, [pc, #424]	; (800bbd4 <xTaskResumeAll+0x1b8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d102      	bne.n	800ba38 <xTaskResumeAll+0x1c>
 800ba32:	f001 f989 	bl	800cd48 <ulSetInterruptMask>
 800ba36:	e7fe      	b.n	800ba36 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800ba38:	f001 f846 	bl	800cac8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800ba3c:	4b65      	ldr	r3, [pc, #404]	; (800bbd4 <xTaskResumeAll+0x1b8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	4a64      	ldr	r2, [pc, #400]	; (800bbd4 <xTaskResumeAll+0x1b8>)
 800ba44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba46:	4b63      	ldr	r3, [pc, #396]	; (800bbd4 <xTaskResumeAll+0x1b8>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f040 80bb 	bne.w	800bbc6 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba50:	4b61      	ldr	r3, [pc, #388]	; (800bbd8 <xTaskResumeAll+0x1bc>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 80b6 	beq.w	800bbc6 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba5a:	e08b      	b.n	800bb74 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5c:	4b5f      	ldr	r3, [pc, #380]	; (800bbdc <xTaskResumeAll+0x1c0>)
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	60bb      	str	r3, [r7, #8]
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	6a12      	ldr	r2, [r2, #32]
 800ba72:	609a      	str	r2, [r3, #8]
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	69d2      	ldr	r2, [r2, #28]
 800ba7c:	605a      	str	r2, [r3, #4]
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	3318      	adds	r3, #24
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d103      	bne.n	800ba92 <xTaskResumeAll+0x76>
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	6a1a      	ldr	r2, [r3, #32]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2200      	movs	r2, #0
 800ba96:	629a      	str	r2, [r3, #40]	; 0x28
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	1e5a      	subs	r2, r3, #1
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	607b      	str	r3, [r7, #4]
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	68d2      	ldr	r2, [r2, #12]
 800bab0:	609a      	str	r2, [r3, #8]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	6892      	ldr	r2, [r2, #8]
 800baba:	605a      	str	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	3304      	adds	r3, #4
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d103      	bne.n	800bad0 <xTaskResumeAll+0xb4>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	68da      	ldr	r2, [r3, #12]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	605a      	str	r2, [r3, #4]
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	2200      	movs	r2, #0
 800bad4:	615a      	str	r2, [r3, #20]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	1e5a      	subs	r2, r3, #1
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae4:	4b3e      	ldr	r3, [pc, #248]	; (800bbe0 <xTaskResumeAll+0x1c4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d903      	bls.n	800baf4 <xTaskResumeAll+0xd8>
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	4a3b      	ldr	r2, [pc, #236]	; (800bbe0 <xTaskResumeAll+0x1c4>)
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf8:	493a      	ldr	r1, [pc, #232]	; (800bbe4 <xTaskResumeAll+0x1c8>)
 800bafa:	4613      	mov	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4413      	add	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	440b      	add	r3, r1
 800bb04:	3304      	adds	r3, #4
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	603b      	str	r3, [r7, #0]
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	609a      	str	r2, [r3, #8]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	60da      	str	r2, [r3, #12]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	3204      	adds	r2, #4
 800bb20:	605a      	str	r2, [r3, #4]
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	1d1a      	adds	r2, r3, #4
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	609a      	str	r2, [r3, #8]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2e:	4613      	mov	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4413      	add	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	4a2b      	ldr	r2, [pc, #172]	; (800bbe4 <xTaskResumeAll+0x1c8>)
 800bb38:	441a      	add	r2, r3
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	615a      	str	r2, [r3, #20]
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb42:	4928      	ldr	r1, [pc, #160]	; (800bbe4 <xTaskResumeAll+0x1c8>)
 800bb44:	4613      	mov	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	440b      	add	r3, r1
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	1c59      	adds	r1, r3, #1
 800bb52:	4824      	ldr	r0, [pc, #144]	; (800bbe4 <xTaskResumeAll+0x1c8>)
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4403      	add	r3, r0
 800bb5e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb64:	4b20      	ldr	r3, [pc, #128]	; (800bbe8 <xTaskResumeAll+0x1cc>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d302      	bcc.n	800bb74 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800bb6e:	4b1f      	ldr	r3, [pc, #124]	; (800bbec <xTaskResumeAll+0x1d0>)
 800bb70:	2201      	movs	r2, #1
 800bb72:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb74:	4b19      	ldr	r3, [pc, #100]	; (800bbdc <xTaskResumeAll+0x1c0>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f47f af6f 	bne.w	800ba5c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800bb84:	f000 fbf0 	bl	800c368 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb88:	4b19      	ldr	r3, [pc, #100]	; (800bbf0 <xTaskResumeAll+0x1d4>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d010      	beq.n	800bbb6 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800bb94:	f000 f83e 	bl	800bc14 <xTaskIncrementTick>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d002      	beq.n	800bba4 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800bb9e:	4b13      	ldr	r3, [pc, #76]	; (800bbec <xTaskResumeAll+0x1d0>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3b01      	subs	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1f1      	bne.n	800bb94 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <xTaskResumeAll+0x1d4>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <xTaskResumeAll+0x1d0>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d003      	beq.n	800bbc6 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800bbc2:	f000 ff6f 	bl	800caa4 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800bbc6:	f000 ff91 	bl	800caec <vPortExitCritical>

    return xAlreadyYielded;
 800bbca:	693b      	ldr	r3, [r7, #16]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	200015fc 	.word	0x200015fc
 800bbd8:	200015d4 	.word	0x200015d4
 800bbdc:	20001594 	.word	0x20001594
 800bbe0:	200015dc 	.word	0x200015dc
 800bbe4:	20001104 	.word	0x20001104
 800bbe8:	20001100 	.word	0x20001100
 800bbec:	200015e8 	.word	0x200015e8
 800bbf0:	200015e4 	.word	0x200015e4

0800bbf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800bbfa:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <xTaskGetTickCount+0x1c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800bc00:	687b      	ldr	r3, [r7, #4]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	200015d8 	.word	0x200015d8

0800bc14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc1e:	4b7a      	ldr	r3, [pc, #488]	; (800be08 <xTaskIncrementTick+0x1f4>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f040 80e5 	bne.w	800bdf2 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc28:	4b78      	ldr	r3, [pc, #480]	; (800be0c <xTaskIncrementTick+0x1f8>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800bc30:	4a76      	ldr	r2, [pc, #472]	; (800be0c <xTaskIncrementTick+0x1f8>)
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d118      	bne.n	800bc6e <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800bc3c:	4b74      	ldr	r3, [pc, #464]	; (800be10 <xTaskIncrementTick+0x1fc>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <xTaskIncrementTick+0x38>
 800bc46:	f001 f87f 	bl	800cd48 <ulSetInterruptMask>
 800bc4a:	e7fe      	b.n	800bc4a <xTaskIncrementTick+0x36>
 800bc4c:	4b70      	ldr	r3, [pc, #448]	; (800be10 <xTaskIncrementTick+0x1fc>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	4b70      	ldr	r3, [pc, #448]	; (800be14 <xTaskIncrementTick+0x200>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a6e      	ldr	r2, [pc, #440]	; (800be10 <xTaskIncrementTick+0x1fc>)
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	4a6e      	ldr	r2, [pc, #440]	; (800be14 <xTaskIncrementTick+0x200>)
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	6013      	str	r3, [r2, #0]
 800bc60:	4b6d      	ldr	r3, [pc, #436]	; (800be18 <xTaskIncrementTick+0x204>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3301      	adds	r3, #1
 800bc66:	4a6c      	ldr	r2, [pc, #432]	; (800be18 <xTaskIncrementTick+0x204>)
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	f000 fb7d 	bl	800c368 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800bc6e:	4b6b      	ldr	r3, [pc, #428]	; (800be1c <xTaskIncrementTick+0x208>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	f0c0 80a7 	bcc.w	800bdc8 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc7a:	4b65      	ldr	r3, [pc, #404]	; (800be10 <xTaskIncrementTick+0x1fc>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc84:	4b65      	ldr	r3, [pc, #404]	; (800be1c <xTaskIncrementTick+0x208>)
 800bc86:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8a:	601a      	str	r2, [r3, #0]
                    break;
 800bc8c:	e09c      	b.n	800bdc8 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc8e:	4b60      	ldr	r3, [pc, #384]	; (800be10 <xTaskIncrementTick+0x1fc>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800bc9e:	69ba      	ldr	r2, [r7, #24]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d203      	bcs.n	800bcae <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800bca6:	4a5d      	ldr	r2, [pc, #372]	; (800be1c <xTaskIncrementTick+0x208>)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800bcac:	e08c      	b.n	800bdc8 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	60bb      	str	r3, [r7, #8]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	68d2      	ldr	r2, [r2, #12]
 800bcbc:	609a      	str	r2, [r3, #8]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	6892      	ldr	r2, [r2, #8]
 800bcc6:	605a      	str	r2, [r3, #4]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	3304      	adds	r3, #4
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d103      	bne.n	800bcdc <xTaskIncrementTick+0xc8>
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	605a      	str	r2, [r3, #4]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	2200      	movs	r2, #0
 800bce0:	615a      	str	r2, [r3, #20]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	1e5a      	subs	r2, r3, #1
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01e      	beq.n	800bd32 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf8:	607b      	str	r3, [r7, #4]
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	6a12      	ldr	r2, [r2, #32]
 800bd02:	609a      	str	r2, [r3, #8]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	6a1b      	ldr	r3, [r3, #32]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	69d2      	ldr	r2, [r2, #28]
 800bd0c:	605a      	str	r2, [r3, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	3318      	adds	r3, #24
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d103      	bne.n	800bd22 <xTaskIncrementTick+0x10e>
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6a1a      	ldr	r2, [r3, #32]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	605a      	str	r2, [r3, #4]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	2200      	movs	r2, #0
 800bd26:	629a      	str	r2, [r3, #40]	; 0x28
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	1e5a      	subs	r2, r3, #1
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd36:	4b3a      	ldr	r3, [pc, #232]	; (800be20 <xTaskIncrementTick+0x20c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d903      	bls.n	800bd46 <xTaskIncrementTick+0x132>
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd42:	4a37      	ldr	r2, [pc, #220]	; (800be20 <xTaskIncrementTick+0x20c>)
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4a:	4936      	ldr	r1, [pc, #216]	; (800be24 <xTaskIncrementTick+0x210>)
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	3304      	adds	r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	603b      	str	r3, [r7, #0]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	609a      	str	r2, [r3, #8]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	3204      	adds	r2, #4
 800bd72:	605a      	str	r2, [r3, #4]
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	1d1a      	adds	r2, r3, #4
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	609a      	str	r2, [r3, #8]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd80:	4613      	mov	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	4a26      	ldr	r2, [pc, #152]	; (800be24 <xTaskIncrementTick+0x210>)
 800bd8a:	441a      	add	r2, r3
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	615a      	str	r2, [r3, #20]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd94:	4923      	ldr	r1, [pc, #140]	; (800be24 <xTaskIncrementTick+0x210>)
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	440b      	add	r3, r1
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	1c59      	adds	r1, r3, #1
 800bda4:	481f      	ldr	r0, [pc, #124]	; (800be24 <xTaskIncrementTick+0x210>)
 800bda6:	4613      	mov	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4403      	add	r3, r0
 800bdb0:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb6:	4b1c      	ldr	r3, [pc, #112]	; (800be28 <xTaskIncrementTick+0x214>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	f4ff af5c 	bcc.w	800bc7a <xTaskIncrementTick+0x66>
                            {
                                xSwitchRequired = pdTRUE;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdc6:	e758      	b.n	800bc7a <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdc8:	4b17      	ldr	r3, [pc, #92]	; (800be28 <xTaskIncrementTick+0x214>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdce:	4915      	ldr	r1, [pc, #84]	; (800be24 <xTaskIncrementTick+0x210>)
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	440b      	add	r3, r1
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d901      	bls.n	800bde4 <xTaskIncrementTick+0x1d0>
                {
                    xSwitchRequired = pdTRUE;
 800bde0:	2301      	movs	r3, #1
 800bde2:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800bde4:	4b11      	ldr	r3, [pc, #68]	; (800be2c <xTaskIncrementTick+0x218>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d007      	beq.n	800bdfc <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 800bdec:	2301      	movs	r3, #1
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	e004      	b.n	800bdfc <xTaskIncrementTick+0x1e8>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <xTaskIncrementTick+0x21c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	4a0d      	ldr	r2, [pc, #52]	; (800be30 <xTaskIncrementTick+0x21c>)
 800bdfa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3720      	adds	r7, #32
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	200015fc 	.word	0x200015fc
 800be0c:	200015d8 	.word	0x200015d8
 800be10:	2000158c 	.word	0x2000158c
 800be14:	20001590 	.word	0x20001590
 800be18:	200015ec 	.word	0x200015ec
 800be1c:	200015f4 	.word	0x200015f4
 800be20:	200015dc 	.word	0x200015dc
 800be24:	20001104 	.word	0x20001104
 800be28:	20001100 	.word	0x20001100
 800be2c:	200015e8 	.word	0x200015e8
 800be30:	200015e4 	.word	0x200015e4

0800be34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be3a:	4b23      	ldr	r3, [pc, #140]	; (800bec8 <vTaskSwitchContext+0x94>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800be42:	4b22      	ldr	r3, [pc, #136]	; (800becc <vTaskSwitchContext+0x98>)
 800be44:	2201      	movs	r2, #1
 800be46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800be48:	e039      	b.n	800bebe <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800be4a:	4b20      	ldr	r3, [pc, #128]	; (800becc <vTaskSwitchContext+0x98>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be50:	4b1f      	ldr	r3, [pc, #124]	; (800bed0 <vTaskSwitchContext+0x9c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	e008      	b.n	800be6a <vTaskSwitchContext+0x36>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <vTaskSwitchContext+0x30>
 800be5e:	f000 ff73 	bl	800cd48 <ulSetInterruptMask>
 800be62:	e7fe      	b.n	800be62 <vTaskSwitchContext+0x2e>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3b01      	subs	r3, #1
 800be68:	607b      	str	r3, [r7, #4]
 800be6a:	491a      	ldr	r1, [pc, #104]	; (800bed4 <vTaskSwitchContext+0xa0>)
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	440b      	add	r3, r1
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ec      	beq.n	800be58 <vTaskSwitchContext+0x24>
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4a12      	ldr	r2, [pc, #72]	; (800bed4 <vTaskSwitchContext+0xa0>)
 800be8a:	4413      	add	r3, r2
 800be8c:	603b      	str	r3, [r7, #0]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	605a      	str	r2, [r3, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d104      	bne.n	800beae <vTaskSwitchContext+0x7a>
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	605a      	str	r2, [r3, #4]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <vTaskSwitchContext+0xa4>)
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	4a05      	ldr	r2, [pc, #20]	; (800bed0 <vTaskSwitchContext+0x9c>)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6013      	str	r3, [r2, #0]
}
 800bebe:	bf00      	nop
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	200015fc 	.word	0x200015fc
 800becc:	200015e8 	.word	0x200015e8
 800bed0:	200015dc 	.word	0x200015dc
 800bed4:	20001104 	.word	0x20001104
 800bed8:	20001100 	.word	0x20001100

0800bedc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d102      	bne.n	800bef2 <vTaskPlaceOnEventList+0x16>
 800beec:	f000 ff2c 	bl	800cd48 <ulSetInterruptMask>
 800bef0:	e7fe      	b.n	800bef0 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bef2:	4b07      	ldr	r3, [pc, #28]	; (800bf10 <vTaskPlaceOnEventList+0x34>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3318      	adds	r3, #24
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff f84f 	bl	800af9e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf00:	2101      	movs	r1, #1
 800bf02:	6838      	ldr	r0, [r7, #0]
 800bf04:	f000 fa6a 	bl	800c3dc <prvAddCurrentTaskToDelayedList>
}
 800bf08:	bf00      	nop
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	20001100 	.word	0x20001100

0800bf14 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <vTaskPlaceOnEventListRestricted+0x18>
 800bf26:	f000 ff0f 	bl	800cd48 <ulSetInterruptMask>
 800bf2a:	e7fe      	b.n	800bf2a <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	617b      	str	r3, [r7, #20]
 800bf32:	4b16      	ldr	r3, [pc, #88]	; (800bf8c <vTaskPlaceOnEventListRestricted+0x78>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	61da      	str	r2, [r3, #28]
 800bf3a:	4b14      	ldr	r3, [pc, #80]	; (800bf8c <vTaskPlaceOnEventListRestricted+0x78>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	697a      	ldr	r2, [r7, #20]
 800bf40:	6892      	ldr	r2, [r2, #8]
 800bf42:	621a      	str	r2, [r3, #32]
 800bf44:	4b11      	ldr	r3, [pc, #68]	; (800bf8c <vTaskPlaceOnEventListRestricted+0x78>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	3218      	adds	r2, #24
 800bf4e:	605a      	str	r2, [r3, #4]
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <vTaskPlaceOnEventListRestricted+0x78>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f103 0218 	add.w	r2, r3, #24
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	609a      	str	r2, [r3, #8]
 800bf5c:	4b0b      	ldr	r3, [pc, #44]	; (800bf8c <vTaskPlaceOnEventListRestricted+0x78>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	629a      	str	r2, [r3, #40]	; 0x28
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800bf74:	f04f 33ff 	mov.w	r3, #4294967295
 800bf78:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf7a:	6879      	ldr	r1, [r7, #4]
 800bf7c:	68b8      	ldr	r0, [r7, #8]
 800bf7e:	f000 fa2d 	bl	800c3dc <prvAddCurrentTaskToDelayedList>
    }
 800bf82:	bf00      	nop
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20001100 	.word	0x20001100

0800bf90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b088      	sub	sp, #32
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d102      	bne.n	800bfac <xTaskRemoveFromEventList+0x1c>
 800bfa6:	f000 fecf 	bl	800cd48 <ulSetInterruptMask>
 800bfaa:	e7fe      	b.n	800bfaa <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	6a12      	ldr	r2, [r2, #32]
 800bfba:	609a      	str	r2, [r3, #8]
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	69d2      	ldr	r2, [r2, #28]
 800bfc4:	605a      	str	r2, [r3, #4]
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	3318      	adds	r3, #24
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d103      	bne.n	800bfda <xTaskRemoveFromEventList+0x4a>
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	6a1a      	ldr	r2, [r3, #32]
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	605a      	str	r2, [r3, #4]
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	629a      	str	r2, [r3, #40]	; 0x28
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	1e5a      	subs	r2, r3, #1
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfea:	4b4a      	ldr	r3, [pc, #296]	; (800c114 <xTaskRemoveFromEventList+0x184>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d15f      	bne.n	800c0b2 <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	68d2      	ldr	r2, [r2, #12]
 800c000:	609a      	str	r2, [r3, #8]
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	69ba      	ldr	r2, [r7, #24]
 800c008:	6892      	ldr	r2, [r2, #8]
 800c00a:	605a      	str	r2, [r3, #4]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	3304      	adds	r3, #4
 800c014:	429a      	cmp	r2, r3
 800c016:	d103      	bne.n	800c020 <xTaskRemoveFromEventList+0x90>
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	605a      	str	r2, [r3, #4]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	2200      	movs	r2, #0
 800c024:	615a      	str	r2, [r3, #20]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	1e5a      	subs	r2, r3, #1
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c034:	4b38      	ldr	r3, [pc, #224]	; (800c118 <xTaskRemoveFromEventList+0x188>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d903      	bls.n	800c044 <xTaskRemoveFromEventList+0xb4>
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	4a35      	ldr	r2, [pc, #212]	; (800c118 <xTaskRemoveFromEventList+0x188>)
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c048:	4934      	ldr	r1, [pc, #208]	; (800c11c <xTaskRemoveFromEventList+0x18c>)
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	440b      	add	r3, r1
 800c054:	3304      	adds	r3, #4
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	60bb      	str	r3, [r7, #8]
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	609a      	str	r2, [r3, #8]
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	60da      	str	r2, [r3, #12]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	3204      	adds	r2, #4
 800c070:	605a      	str	r2, [r3, #4]
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	1d1a      	adds	r2, r3, #4
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	609a      	str	r2, [r3, #8]
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4a25      	ldr	r2, [pc, #148]	; (800c11c <xTaskRemoveFromEventList+0x18c>)
 800c088:	441a      	add	r2, r3
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	615a      	str	r2, [r3, #20]
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c092:	4922      	ldr	r1, [pc, #136]	; (800c11c <xTaskRemoveFromEventList+0x18c>)
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	440b      	add	r3, r1
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	1c59      	adds	r1, r3, #1
 800c0a2:	481e      	ldr	r0, [pc, #120]	; (800c11c <xTaskRemoveFromEventList+0x18c>)
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4403      	add	r3, r0
 800c0ae:	6019      	str	r1, [r3, #0]
 800c0b0:	e01b      	b.n	800c0ea <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0b2:	4b1b      	ldr	r3, [pc, #108]	; (800c120 <xTaskRemoveFromEventList+0x190>)
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	613b      	str	r3, [r7, #16]
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	61da      	str	r2, [r3, #28]
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	689a      	ldr	r2, [r3, #8]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	621a      	str	r2, [r3, #32]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	3218      	adds	r2, #24
 800c0ce:	605a      	str	r2, [r3, #4]
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	f103 0218 	add.w	r2, r3, #24
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	609a      	str	r2, [r3, #8]
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	4a10      	ldr	r2, [pc, #64]	; (800c120 <xTaskRemoveFromEventList+0x190>)
 800c0de:	629a      	str	r2, [r3, #40]	; 0x28
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <xTaskRemoveFromEventList+0x190>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	4a0e      	ldr	r2, [pc, #56]	; (800c120 <xTaskRemoveFromEventList+0x190>)
 800c0e8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ee:	4b0d      	ldr	r3, [pc, #52]	; (800c124 <xTaskRemoveFromEventList+0x194>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d905      	bls.n	800c104 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <xTaskRemoveFromEventList+0x198>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	e001      	b.n	800c108 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800c108:	69fb      	ldr	r3, [r7, #28]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200015fc 	.word	0x200015fc
 800c118:	200015dc 	.word	0x200015dc
 800c11c:	20001104 	.word	0x20001104
 800c120:	20001594 	.word	0x20001594
 800c124:	20001100 	.word	0x20001100
 800c128:	200015e8 	.word	0x200015e8

0800c12c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c134:	4b06      	ldr	r3, [pc, #24]	; (800c150 <vTaskInternalSetTimeOutState+0x24>)
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c13c:	4b05      	ldr	r3, [pc, #20]	; (800c154 <vTaskInternalSetTimeOutState+0x28>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	605a      	str	r2, [r3, #4]
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	200015ec 	.word	0x200015ec
 800c154:	200015d8 	.word	0x200015d8

0800c158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d102      	bne.n	800c16e <xTaskCheckForTimeOut+0x16>
 800c168:	f000 fdee 	bl	800cd48 <ulSetInterruptMask>
 800c16c:	e7fe      	b.n	800c16c <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d102      	bne.n	800c17a <xTaskCheckForTimeOut+0x22>
 800c174:	f000 fde8 	bl	800cd48 <ulSetInterruptMask>
 800c178:	e7fe      	b.n	800c178 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800c17a:	f000 fca5 	bl	800cac8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800c17e:	4b1f      	ldr	r3, [pc, #124]	; (800c1fc <xTaskCheckForTimeOut+0xa4>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c196:	d102      	bne.n	800c19e <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]
 800c19c:	e026      	b.n	800c1ec <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b17      	ldr	r3, [pc, #92]	; (800c200 <xTaskCheckForTimeOut+0xa8>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d00a      	beq.n	800c1c0 <xTaskCheckForTimeOut+0x68>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d305      	bcc.n	800c1c0 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	e015      	b.n	800c1ec <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d20b      	bcs.n	800c1e2 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad2      	subs	r2, r2, r3
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff ffa8 	bl	800c12c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	e004      	b.n	800c1ec <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800c1ec:	f000 fc7e 	bl	800caec <vPortExitCritical>

    return xReturn;
 800c1f0:	697b      	ldr	r3, [r7, #20]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3718      	adds	r7, #24
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200015d8 	.word	0x200015d8
 800c200:	200015ec 	.word	0x200015ec

0800c204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800c208:	4b03      	ldr	r3, [pc, #12]	; (800c218 <vTaskMissedYield+0x14>)
 800c20a:	2201      	movs	r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
}
 800c20e:	bf00      	nop
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	200015e8 	.word	0x200015e8

0800c21c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800c224:	f000 f84a 	bl	800c2bc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c228:	4b03      	ldr	r3, [pc, #12]	; (800c238 <prvIdleTask+0x1c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d9f9      	bls.n	800c224 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800c230:	f000 fc38 	bl	800caa4 <vPortYield>
        prvCheckTasksWaitingTermination();
 800c234:	e7f6      	b.n	800c224 <prvIdleTask+0x8>
 800c236:	bf00      	nop
 800c238:	20001104 	.word	0x20001104

0800c23c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c242:	2300      	movs	r3, #0
 800c244:	607b      	str	r3, [r7, #4]
 800c246:	e00c      	b.n	800c262 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4613      	mov	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4a12      	ldr	r2, [pc, #72]	; (800c29c <prvInitialiseTaskLists+0x60>)
 800c254:	4413      	add	r3, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fe74 	bl	800af44 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3301      	adds	r3, #1
 800c260:	607b      	str	r3, [r7, #4]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b37      	cmp	r3, #55	; 0x37
 800c266:	d9ef      	bls.n	800c248 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800c268:	480d      	ldr	r0, [pc, #52]	; (800c2a0 <prvInitialiseTaskLists+0x64>)
 800c26a:	f7fe fe6b 	bl	800af44 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800c26e:	480d      	ldr	r0, [pc, #52]	; (800c2a4 <prvInitialiseTaskLists+0x68>)
 800c270:	f7fe fe68 	bl	800af44 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800c274:	480c      	ldr	r0, [pc, #48]	; (800c2a8 <prvInitialiseTaskLists+0x6c>)
 800c276:	f7fe fe65 	bl	800af44 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800c27a:	480c      	ldr	r0, [pc, #48]	; (800c2ac <prvInitialiseTaskLists+0x70>)
 800c27c:	f7fe fe62 	bl	800af44 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800c280:	480b      	ldr	r0, [pc, #44]	; (800c2b0 <prvInitialiseTaskLists+0x74>)
 800c282:	f7fe fe5f 	bl	800af44 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800c286:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <prvInitialiseTaskLists+0x78>)
 800c288:	4a05      	ldr	r2, [pc, #20]	; (800c2a0 <prvInitialiseTaskLists+0x64>)
 800c28a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c28c:	4b0a      	ldr	r3, [pc, #40]	; (800c2b8 <prvInitialiseTaskLists+0x7c>)
 800c28e:	4a05      	ldr	r2, [pc, #20]	; (800c2a4 <prvInitialiseTaskLists+0x68>)
 800c290:	601a      	str	r2, [r3, #0]
}
 800c292:	bf00      	nop
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20001104 	.word	0x20001104
 800c2a0:	20001564 	.word	0x20001564
 800c2a4:	20001578 	.word	0x20001578
 800c2a8:	20001594 	.word	0x20001594
 800c2ac:	200015a8 	.word	0x200015a8
 800c2b0:	200015c0 	.word	0x200015c0
 800c2b4:	2000158c 	.word	0x2000158c
 800c2b8:	20001590 	.word	0x20001590

0800c2bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2c2:	e019      	b.n	800c2f8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800c2c4:	f000 fc00 	bl	800cac8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2c8:	4b10      	ldr	r3, [pc, #64]	; (800c30c <prvCheckTasksWaitingTermination+0x50>)
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fe fe9b 	bl	800b010 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800c2da:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <prvCheckTasksWaitingTermination+0x54>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	4a0b      	ldr	r2, [pc, #44]	; (800c310 <prvCheckTasksWaitingTermination+0x54>)
 800c2e2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800c2e4:	4b0b      	ldr	r3, [pc, #44]	; (800c314 <prvCheckTasksWaitingTermination+0x58>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	4a0a      	ldr	r2, [pc, #40]	; (800c314 <prvCheckTasksWaitingTermination+0x58>)
 800c2ec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800c2ee:	f000 fbfd 	bl	800caec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f810 	bl	800c318 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2f8:	4b06      	ldr	r3, [pc, #24]	; (800c314 <prvCheckTasksWaitingTermination+0x58>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e1      	bne.n	800c2c4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	200015a8 	.word	0x200015a8
 800c310:	200015d4 	.word	0x200015d4
 800c314:	200015bc 	.word	0x200015bc

0800c318 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c326:	2b00      	cmp	r3, #0
 800c328:	d108      	bne.n	800c33c <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fdc6 	bl	800cec0 <vPortFree>
                    vPortFree( pxTCB );
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fdc3 	bl	800cec0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800c33a:	e010      	b.n	800c35e <prvDeleteTCB+0x46>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c342:	2b01      	cmp	r3, #1
 800c344:	d103      	bne.n	800c34e <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fdba 	bl	800cec0 <vPortFree>
    }
 800c34c:	e007      	b.n	800c35e <prvDeleteTCB+0x46>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c354:	2b02      	cmp	r3, #2
 800c356:	d002      	beq.n	800c35e <prvDeleteTCB+0x46>
 800c358:	f000 fcf6 	bl	800cd48 <ulSetInterruptMask>
 800c35c:	e7fe      	b.n	800c35c <prvDeleteTCB+0x44>
    }
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
	...

0800c368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c368:	b480      	push	{r7}
 800c36a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c36c:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <prvResetNextTaskUnblockTime+0x30>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d104      	bne.n	800c380 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <prvResetNextTaskUnblockTime+0x34>)
 800c378:	f04f 32ff 	mov.w	r2, #4294967295
 800c37c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800c37e:	e005      	b.n	800c38c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c380:	4b05      	ldr	r3, [pc, #20]	; (800c398 <prvResetNextTaskUnblockTime+0x30>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a04      	ldr	r2, [pc, #16]	; (800c39c <prvResetNextTaskUnblockTime+0x34>)
 800c38a:	6013      	str	r3, [r2, #0]
}
 800c38c:	bf00      	nop
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	2000158c 	.word	0x2000158c
 800c39c:	200015f4 	.word	0x200015f4

0800c3a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <xTaskGetSchedulerState+0x34>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d102      	bne.n	800c3b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	607b      	str	r3, [r7, #4]
 800c3b2:	e008      	b.n	800c3c6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3b4:	4b08      	ldr	r3, [pc, #32]	; (800c3d8 <xTaskGetSchedulerState+0x38>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	607b      	str	r3, [r7, #4]
 800c3c0:	e001      	b.n	800c3c6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800c3c6:	687b      	ldr	r3, [r7, #4]
    }
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	200015e0 	.word	0x200015e0
 800c3d8:	200015fc 	.word	0x200015fc

0800c3dc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800c3e6:	4b2e      	ldr	r3, [pc, #184]	; (800c4a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3ec:	4b2d      	ldr	r3, [pc, #180]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fe0c 	bl	800b010 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fe:	d124      	bne.n	800c44a <prvAddCurrentTaskToDelayedList+0x6e>
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d021      	beq.n	800c44a <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c406:	4b28      	ldr	r3, [pc, #160]	; (800c4a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	613b      	str	r3, [r7, #16]
 800c40c:	4b25      	ldr	r3, [pc, #148]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	693a      	ldr	r2, [r7, #16]
 800c412:	609a      	str	r2, [r3, #8]
 800c414:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	6892      	ldr	r2, [r2, #8]
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	4b21      	ldr	r3, [pc, #132]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	3204      	adds	r2, #4
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	4b1e      	ldr	r3, [pc, #120]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	1d1a      	adds	r2, r3, #4
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	609a      	str	r2, [r3, #8]
 800c434:	4b1b      	ldr	r3, [pc, #108]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a1b      	ldr	r2, [pc, #108]	; (800c4a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c43a:	615a      	str	r2, [r3, #20]
 800c43c:	4b1a      	ldr	r3, [pc, #104]	; (800c4a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3301      	adds	r3, #1
 800c442:	4a19      	ldr	r2, [pc, #100]	; (800c4a8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800c448:	e026      	b.n	800c498 <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4413      	add	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c452:	4b14      	ldr	r3, [pc, #80]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d209      	bcs.n	800c476 <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <prvAddCurrentTaskToDelayedList+0xd0>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3304      	adds	r3, #4
 800c46c:	4619      	mov	r1, r3
 800c46e:	4610      	mov	r0, r2
 800c470:	f7fe fd95 	bl	800af9e <vListInsert>
}
 800c474:	e010      	b.n	800c498 <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c476:	4b0e      	ldr	r3, [pc, #56]	; (800c4b0 <prvAddCurrentTaskToDelayedList+0xd4>)
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3304      	adds	r3, #4
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7fe fd8b 	bl	800af9e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d202      	bcs.n	800c498 <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 800c492:	4a08      	ldr	r2, [pc, #32]	; (800c4b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6013      	str	r3, [r2, #0]
}
 800c498:	bf00      	nop
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	200015d8 	.word	0x200015d8
 800c4a4:	20001100 	.word	0x20001100
 800c4a8:	200015c0 	.word	0x200015c0
 800c4ac:	20001590 	.word	0x20001590
 800c4b0:	2000158c 	.word	0x2000158c
 800c4b4:	200015f4 	.word	0x200015f4

0800c4b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b088      	sub	sp, #32
 800c4bc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800c4c2:	f000 fa59 	bl	800c978 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <xTimerCreateTimerTask+0x70>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d020      	beq.n	800c510 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4d6:	463a      	mov	r2, r7
 800c4d8:	1d39      	adds	r1, r7, #4
 800c4da:	f107 0308 	add.w	r3, r7, #8
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe fd16 	bl	800af10 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	9202      	str	r2, [sp, #8]
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	460a      	mov	r2, r1
 800c4f6:	490d      	ldr	r1, [pc, #52]	; (800c52c <xTimerCreateTimerTask+0x74>)
 800c4f8:	480d      	ldr	r0, [pc, #52]	; (800c530 <xTimerCreateTimerTask+0x78>)
 800c4fa:	f7ff f853 	bl	800b5a4 <xTaskCreateStatic>
 800c4fe:	4603      	mov	r3, r0
 800c500:	4a0c      	ldr	r2, [pc, #48]	; (800c534 <xTimerCreateTimerTask+0x7c>)
 800c502:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800c504:	4b0b      	ldr	r3, [pc, #44]	; (800c534 <xTimerCreateTimerTask+0x7c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 800c50c:	2301      	movs	r3, #1
 800c50e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <xTimerCreateTimerTask+0x64>
 800c516:	f000 fc17 	bl	800cd48 <ulSetInterruptMask>
 800c51a:	e7fe      	b.n	800c51a <xTimerCreateTimerTask+0x62>
        return xReturn;
 800c51c:	68fb      	ldr	r3, [r7, #12]
    }
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20001630 	.word	0x20001630
 800c52c:	08011c9c 	.word	0x08011c9c
 800c530:	0800c5dd 	.word	0x0800c5dd
 800c534:	20001634 	.word	0x20001634

0800c538 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c544:	e008      	b.n	800c558 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	4413      	add	r3, r2
 800c54e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6a1b      	ldr	r3, [r3, #32]
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699a      	ldr	r2, [r3, #24]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	18d1      	adds	r1, r2, r3
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f000 f8d5 	bl	800c714 <prvInsertTimerInActiveList>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1ea      	bne.n	800c546 <prvReloadTimer+0xe>
        }
    }
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c586:	4b14      	ldr	r3, [pc, #80]	; (800c5d8 <prvProcessExpiredTimer+0x5c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3304      	adds	r3, #4
 800c594:	4618      	mov	r0, r3
 800c596:	f7fe fd3b 	bl	800b010 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f7ff ffc3 	bl	800c538 <prvReloadTimer>
 800c5b2:	e008      	b.n	800c5c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ba:	f023 0301 	bic.w	r3, r3, #1
 800c5be:	b2da      	uxtb	r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	4798      	blx	r3
    }
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20001628 	.word	0x20001628

0800c5dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5e4:	f107 0308 	add.w	r3, r7, #8
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f84f 	bl	800c68c <prvGetNextExpireTime>
 800c5ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 f803 	bl	800c600 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c5fa:	f000 f8cd 	bl	800c798 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5fe:	e7f1      	b.n	800c5e4 <prvTimerTask+0x8>

0800c600 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c60a:	f7ff f9f9 	bl	800ba00 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c60e:	f107 0308 	add.w	r3, r7, #8
 800c612:	4618      	mov	r0, r3
 800c614:	f000 f85e 	bl	800c6d4 <prvSampleTimeNow>
 800c618:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d12a      	bne.n	800c676 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <prvProcessTimerOrBlockTask+0x3c>
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d806      	bhi.n	800c63c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c62e:	f7ff f9f5 	bl	800ba1c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c632:	68f9      	ldr	r1, [r7, #12]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ffa1 	bl	800c57c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c63a:	e01e      	b.n	800c67a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d008      	beq.n	800c654 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c642:	4b10      	ldr	r3, [pc, #64]	; (800c684 <prvProcessTimerOrBlockTask+0x84>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <prvProcessTimerOrBlockTask+0x50>
 800c64c:	2301      	movs	r3, #1
 800c64e:	e000      	b.n	800c652 <prvProcessTimerOrBlockTask+0x52>
 800c650:	2300      	movs	r3, #0
 800c652:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c654:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <prvProcessTimerOrBlockTask+0x88>)
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	4619      	mov	r1, r3
 800c662:	f7fe ff6b 	bl	800b53c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c666:	f7ff f9d9 	bl	800ba1c <xTaskResumeAll>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d104      	bne.n	800c67a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800c670:	f000 fa18 	bl	800caa4 <vPortYield>
    }
 800c674:	e001      	b.n	800c67a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800c676:	f7ff f9d1 	bl	800ba1c <xTaskResumeAll>
    }
 800c67a:	bf00      	nop
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	2000162c 	.word	0x2000162c
 800c688:	20001630 	.word	0x20001630

0800c68c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c694:	4b0e      	ldr	r3, [pc, #56]	; (800c6d0 <prvGetNextExpireTime+0x44>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <prvGetNextExpireTime+0x16>
 800c69e:	2201      	movs	r2, #1
 800c6a0:	e000      	b.n	800c6a4 <prvGetNextExpireTime+0x18>
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d105      	bne.n	800c6bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6b0:	4b07      	ldr	r3, [pc, #28]	; (800c6d0 <prvGetNextExpireTime+0x44>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	e001      	b.n	800c6c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
    }
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3714      	adds	r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	20001628 	.word	0x20001628

0800c6d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c6dc:	f7ff fa8a 	bl	800bbf4 <xTaskGetTickCount>
 800c6e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c6e2:	4b0b      	ldr	r3, [pc, #44]	; (800c710 <prvSampleTimeNow+0x3c>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d205      	bcs.n	800c6f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c6ec:	f000 f91e 	bl	800c92c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	e002      	b.n	800c6fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c6fe:	4a04      	ldr	r2, [pc, #16]	; (800c710 <prvSampleTimeNow+0x3c>)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c704:	68fb      	ldr	r3, [r7, #12]
    }
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20001638 	.word	0x20001638

0800c714 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c722:	2300      	movs	r3, #0
 800c724:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d812      	bhi.n	800c760 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	1ad2      	subs	r2, r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	429a      	cmp	r2, r3
 800c746:	d302      	bcc.n	800c74e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c748:	2301      	movs	r3, #1
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	e01b      	b.n	800c786 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <prvInsertTimerInActiveList+0x7c>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	3304      	adds	r3, #4
 800c756:	4619      	mov	r1, r3
 800c758:	4610      	mov	r0, r2
 800c75a:	f7fe fc20 	bl	800af9e <vListInsert>
 800c75e:	e012      	b.n	800c786 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d206      	bcs.n	800c776 <prvInsertTimerInActiveList+0x62>
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d302      	bcc.n	800c776 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c770:	2301      	movs	r3, #1
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	e007      	b.n	800c786 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c776:	4b07      	ldr	r3, [pc, #28]	; (800c794 <prvInsertTimerInActiveList+0x80>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3304      	adds	r3, #4
 800c77e:	4619      	mov	r1, r3
 800c780:	4610      	mov	r0, r2
 800c782:	f7fe fc0c 	bl	800af9e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c786:	697b      	ldr	r3, [r7, #20]
    }
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	2000162c 	.word	0x2000162c
 800c794:	20001628 	.word	0x20001628

0800c798 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c79e:	e0b2      	b.n	800c906 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	da10      	bge.n	800c7c8 <prvProcessReceivedCommands+0x30>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7a6:	1d3b      	adds	r3, r7, #4
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	61fb      	str	r3, [r7, #28]

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d102      	bne.n	800c7b8 <prvProcessReceivedCommands+0x20>
 800c7b2:	f000 fac9 	bl	800cd48 <ulSetInterruptMask>
 800c7b6:	e7fe      	b.n	800c7b6 <prvProcessReceivedCommands+0x1e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	69fa      	ldr	r2, [r7, #28]
 800c7be:	6850      	ldr	r0, [r2, #4]
 800c7c0:	69fa      	ldr	r2, [r7, #28]
 800c7c2:	6892      	ldr	r2, [r2, #8]
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f2c0 809b 	blt.w	800c906 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d004      	beq.n	800c7e6 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	3304      	adds	r3, #4
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fc15 	bl	800b010 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7e6:	463b      	mov	r3, r7
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff ff73 	bl	800c6d4 <prvSampleTimeNow>
 800c7ee:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	f200 8085 	bhi.w	800c904 <prvProcessReceivedCommands+0x16c>
 800c7fa:	a201      	add	r2, pc, #4	; (adr r2, 800c800 <prvProcessReceivedCommands+0x68>)
 800c7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c800:	0800c825 	.word	0x0800c825
 800c804:	0800c825 	.word	0x0800c825
 800c808:	0800c88d 	.word	0x0800c88d
 800c80c:	0800c8a1 	.word	0x0800c8a1
 800c810:	0800c8db 	.word	0x0800c8db
 800c814:	0800c825 	.word	0x0800c825
 800c818:	0800c825 	.word	0x0800c825
 800c81c:	0800c88d 	.word	0x0800c88d
 800c820:	0800c8a1 	.word	0x0800c8a1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c82a:	f043 0301 	orr.w	r3, r3, #1
 800c82e:	b2da      	uxtb	r2, r3
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	18d1      	adds	r1, r2, r3
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	69b8      	ldr	r0, [r7, #24]
 800c844:	f7ff ff66 	bl	800c714 <prvInsertTimerInActiveList>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d05b      	beq.n	800c906 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d009      	beq.n	800c870 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	4413      	add	r3, r2
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	4619      	mov	r1, r3
 800c868:	69b8      	ldr	r0, [r7, #24]
 800c86a:	f7ff fe65 	bl	800c538 <prvReloadTimer>
 800c86e:	e008      	b.n	800c882 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c876:	f023 0301 	bic.w	r3, r3, #1
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	69bb      	ldr	r3, [r7, #24]
 800c87e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	69b8      	ldr	r0, [r7, #24]
 800c888:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c88a:	e03c      	b.n	800c906 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c892:	f023 0301 	bic.w	r3, r3, #1
 800c896:	b2da      	uxtb	r2, r3
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800c89e:	e032      	b.n	800c906 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a6:	f043 0301 	orr.w	r3, r3, #1
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d102      	bne.n	800c8c6 <prvProcessReceivedCommands+0x12e>
 800c8c0:	f000 fa42 	bl	800cd48 <ulSetInterruptMask>
 800c8c4:	e7fe      	b.n	800c8c4 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	699a      	ldr	r2, [r3, #24]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	18d1      	adds	r1, r2, r3
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	69b8      	ldr	r0, [r7, #24]
 800c8d4:	f7ff ff1e 	bl	800c714 <prvInsertTimerInActiveList>
                        break;
 800c8d8:	e015      	b.n	800c906 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d103      	bne.n	800c8f0 <prvProcessReceivedCommands+0x158>
                                {
                                    vPortFree( pxTimer );
 800c8e8:	69b8      	ldr	r0, [r7, #24]
 800c8ea:	f000 fae9 	bl	800cec0 <vPortFree>
 800c8ee:	e00a      	b.n	800c906 <prvProcessReceivedCommands+0x16e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c8f0:	69bb      	ldr	r3, [r7, #24]
 800c8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8f6:	f023 0301 	bic.w	r3, r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c902:	e000      	b.n	800c906 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c904:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c906:	4b08      	ldr	r3, [pc, #32]	; (800c928 <prvProcessReceivedCommands+0x190>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	1d39      	adds	r1, r7, #4
 800c90c:	2200      	movs	r2, #0
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fc88 	bl	800b224 <xQueueReceive>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	f47f af42 	bne.w	800c7a0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	3720      	adds	r7, #32
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	20001630 	.word	0x20001630

0800c92c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c932:	e009      	b.n	800c948 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c934:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <prvSwitchTimerLists+0x44>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c93e:	f04f 31ff 	mov.w	r1, #4294967295
 800c942:	6838      	ldr	r0, [r7, #0]
 800c944:	f7ff fe1a 	bl	800c57c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c948:	4b09      	ldr	r3, [pc, #36]	; (800c970 <prvSwitchTimerLists+0x44>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1f0      	bne.n	800c934 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800c952:	4b07      	ldr	r3, [pc, #28]	; (800c970 <prvSwitchTimerLists+0x44>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800c958:	4b06      	ldr	r3, [pc, #24]	; (800c974 <prvSwitchTimerLists+0x48>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a04      	ldr	r2, [pc, #16]	; (800c970 <prvSwitchTimerLists+0x44>)
 800c95e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c960:	4a04      	ldr	r2, [pc, #16]	; (800c974 <prvSwitchTimerLists+0x48>)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6013      	str	r3, [r2, #0]
    }
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20001628 	.word	0x20001628
 800c974:	2000162c 	.word	0x2000162c

0800c978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c97e:	f000 f8a3 	bl	800cac8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c982:	4b15      	ldr	r3, [pc, #84]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d120      	bne.n	800c9cc <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800c98a:	4814      	ldr	r0, [pc, #80]	; (800c9dc <prvCheckForValidListAndQueue+0x64>)
 800c98c:	f7fe fada 	bl	800af44 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c990:	4813      	ldr	r0, [pc, #76]	; (800c9e0 <prvCheckForValidListAndQueue+0x68>)
 800c992:	f7fe fad7 	bl	800af44 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c996:	4b13      	ldr	r3, [pc, #76]	; (800c9e4 <prvCheckForValidListAndQueue+0x6c>)
 800c998:	4a10      	ldr	r2, [pc, #64]	; (800c9dc <prvCheckForValidListAndQueue+0x64>)
 800c99a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c99c:	4b12      	ldr	r3, [pc, #72]	; (800c9e8 <prvCheckForValidListAndQueue+0x70>)
 800c99e:	4a10      	ldr	r2, [pc, #64]	; (800c9e0 <prvCheckForValidListAndQueue+0x68>)
 800c9a0:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	4b11      	ldr	r3, [pc, #68]	; (800c9ec <prvCheckForValidListAndQueue+0x74>)
 800c9a8:	4a11      	ldr	r2, [pc, #68]	; (800c9f0 <prvCheckForValidListAndQueue+0x78>)
 800c9aa:	2110      	movs	r1, #16
 800c9ac:	200a      	movs	r0, #10
 800c9ae:	f7fe fbd0 	bl	800b152 <xQueueGenericCreateStatic>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4a08      	ldr	r2, [pc, #32]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c9b6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800c9b8:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d005      	beq.n	800c9cc <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9c0:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	490b      	ldr	r1, [pc, #44]	; (800c9f4 <prvCheckForValidListAndQueue+0x7c>)
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fd74 	bl	800b4b4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c9cc:	f000 f88e 	bl	800caec <vPortExitCritical>
    }
 800c9d0:	bf00      	nop
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20001630 	.word	0x20001630
 800c9dc:	20001600 	.word	0x20001600
 800c9e0:	20001614 	.word	0x20001614
 800c9e4:	20001628 	.word	0x20001628
 800c9e8:	2000162c 	.word	0x2000162c
 800c9ec:	200016dc 	.word	0x200016dc
 800c9f0:	2000163c 	.word	0x2000163c
 800c9f4:	08011ca4 	.word	0x08011ca4

0800c9f8 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <vPortSetupTimerInterrupt+0x34>)
 800c9fe:	2200      	movs	r2, #0
 800ca00:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca02:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <vPortSetupTimerInterrupt+0x38>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca08:	4b0a      	ldr	r3, [pc, #40]	; (800ca34 <vPortSetupTimerInterrupt+0x3c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a0a      	ldr	r2, [pc, #40]	; (800ca38 <vPortSetupTimerInterrupt+0x40>)
 800ca0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca12:	099b      	lsrs	r3, r3, #6
 800ca14:	4a09      	ldr	r2, [pc, #36]	; (800ca3c <vPortSetupTimerInterrupt+0x44>)
 800ca16:	3b01      	subs	r3, #1
 800ca18:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ca1a:	4b04      	ldr	r3, [pc, #16]	; (800ca2c <vPortSetupTimerInterrupt+0x34>)
 800ca1c:	2207      	movs	r2, #7
 800ca1e:	601a      	str	r2, [r3, #0]
}
 800ca20:	bf00      	nop
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	e000e010 	.word	0xe000e010
 800ca30:	e000e018 	.word	0xe000e018
 800ca34:	20000004 	.word	0x20000004
 800ca38:	10624dd3 	.word	0x10624dd3
 800ca3c:	e000e014 	.word	0xe000e014

0800ca40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800ca4a:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <prvTaskExitError+0x30>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca52:	d002      	beq.n	800ca5a <prvTaskExitError+0x1a>
 800ca54:	f000 f978 	bl	800cd48 <ulSetInterruptMask>
 800ca58:	e7fe      	b.n	800ca58 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800ca5a:	f000 f975 	bl	800cd48 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800ca5e:	bf00      	nop
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d0fc      	beq.n	800ca60 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800ca66:	bf00      	nop
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	20000014 	.word	0x20000014

0800ca74 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 800ca74:	b480      	push	{r7}
 800ca76:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 800ca78:	4b08      	ldr	r3, [pc, #32]	; (800ca9c <prvSetupFPU+0x28>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a07      	ldr	r2, [pc, #28]	; (800ca9c <prvSetupFPU+0x28>)
 800ca7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca82:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 800ca84:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <prvSetupFPU+0x2c>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a05      	ldr	r2, [pc, #20]	; (800caa0 <prvSetupFPU+0x2c>)
 800ca8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca8e:	6013      	str	r3, [r2, #0]
    }
 800ca90:	bf00      	nop
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	e000ed88 	.word	0xe000ed88
 800caa0:	e000ef34 	.word	0xe000ef34

0800caa4 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800caa4:	b480      	push	{r7}
 800caa6:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800caa8:	4b06      	ldr	r3, [pc, #24]	; (800cac4 <vPortYield+0x20>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caae:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800cab0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800cab4:	f3bf 8f6f 	isb	sy
}
 800cab8:	bf00      	nop
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	e000ed04 	.word	0xe000ed04

0800cac8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800cacc:	f000 f93c 	bl	800cd48 <ulSetInterruptMask>
    ulCriticalNesting++;
 800cad0:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <vPortEnterCritical+0x20>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3301      	adds	r3, #1
 800cad6:	4a04      	ldr	r2, [pc, #16]	; (800cae8 <vPortEnterCritical+0x20>)
 800cad8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800cada:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800cade:	f3bf 8f6f 	isb	sy
}
 800cae2:	bf00      	nop
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	20000014 	.word	0x20000014

0800caec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800caec:	b580      	push	{r7, lr}
 800caee:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800caf0:	4b0a      	ldr	r3, [pc, #40]	; (800cb1c <vPortExitCritical+0x30>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <vPortExitCritical+0x12>
 800caf8:	f000 f926 	bl	800cd48 <ulSetInterruptMask>
 800cafc:	e7fe      	b.n	800cafc <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800cafe:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <vPortExitCritical+0x30>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	4a05      	ldr	r2, [pc, #20]	; (800cb1c <vPortExitCritical+0x30>)
 800cb06:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <vPortExitCritical+0x30>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d102      	bne.n	800cb16 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800cb10:	2000      	movs	r0, #0
 800cb12:	f000 f926 	bl	800cd62 <vClearInterruptMask>
    }
}
 800cb16:	bf00      	nop
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20000014 	.word	0x20000014

0800cb20 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb26:	f000 f90f 	bl	800cd48 <ulSetInterruptMask>
 800cb2a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800cb2c:	f7ff f872 	bl	800bc14 <xTaskIncrementTick>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb36:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <xPortSysTickHandler+0x2c>)
 800cb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f90f 	bl	800cd62 <vClearInterruptMask>
}
 800cb44:	bf00      	nop
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	e000ed04 	.word	0xe000ed04

0800cb50 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3b02      	subs	r3, #2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800cb66:	7afb      	ldrb	r3, [r7, #11]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d104      	bne.n	800cb76 <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
                {
                    /* Setup the Floating Point Unit (FPU). */
                    prvSetupFPU();
 800cb6c:	f7ff ff82 	bl	800ca74 <prvSetupFPU>
                }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800cb70:	f000 f8b6 	bl	800cce0 <vRestoreContextOfFirstTask>
            break;
 800cb74:	e002      	b.n	800cb7c <vPortSVCHandler_C+0x2c>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800cb76:	f000 f8e7 	bl	800cd48 <ulSetInterruptMask>
 800cb7a:	e7fe      	b.n	800cb7a <vPortSVCHandler_C+0x2a>
    }
}
 800cb7c:	bf00      	nop
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3b04      	subs	r3, #4
 800cb96:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb9e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	3b04      	subs	r3, #4
 800cba4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3b04      	subs	r3, #4
 800cbb0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800cbb2:	4a38      	ldr	r2, [pc, #224]	; (800cc94 <pxPortInitialiseStack+0x110>)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	3b04      	subs	r3, #4
 800cbbc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800cbc4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3b04      	subs	r3, #4
 800cbca:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800cbd2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	3b04      	subs	r3, #4
 800cbd8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800cbe0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3b04      	subs	r3, #4
 800cbe6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800cbee:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3b04      	subs	r3, #4
 800cbf4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3b04      	subs	r3, #4
 800cc00:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800cc08:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3b04      	subs	r3, #4
 800cc0e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800cc16:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3b04      	subs	r3, #4
 800cc1c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800cc24:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	3b04      	subs	r3, #4
 800cc2a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800cc32:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	3b04      	subs	r3, #4
 800cc38:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800cc40:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3b04      	subs	r3, #4
 800cc46:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800cc4e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3b04      	subs	r3, #4
 800cc54:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800cc5c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3b04      	subs	r3, #4
 800cc62:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800cc6a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	3b04      	subs	r3, #4
 800cc70:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800cc78:	601a      	str	r2, [r3, #0]
                        *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
                    }
                }
            #endif /* configENABLE_MPU */

            pxTopOfStack--;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3b04      	subs	r3, #4
 800cc7e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	601a      	str	r2, [r3, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800cc86:	68fb      	ldr	r3, [r7, #12]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	0800ca41 	.word	0x0800ca41

0800cc98 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800cc9c:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <xPortStartScheduler+0x38>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a0b      	ldr	r2, [pc, #44]	; (800ccd0 <xPortStartScheduler+0x38>)
 800cca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800cca8:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <xPortStartScheduler+0x38>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a08      	ldr	r2, [pc, #32]	; (800ccd0 <xPortStartScheduler+0x38>)
 800ccae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccb2:	6013      	str	r3, [r2, #0]
        }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ccb4:	f7ff fea0 	bl	800c9f8 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ccb8:	4b06      	ldr	r3, [pc, #24]	; (800ccd4 <xPortStartScheduler+0x3c>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800ccbe:	f000 f82f 	bl	800cd20 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ccc2:	f7ff f8b7 	bl	800be34 <vTaskSwitchContext>
    prvTaskExitError();
 800ccc6:	f7ff febb 	bl	800ca40 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	e000ed20 	.word	0xe000ed20
 800ccd4:	20000014 	.word	0x20000014
	...

0800cce0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cce0:	4a0b      	ldr	r2, [pc, #44]	; (800cd10 <pxCurrentTCBConst2>)
 800cce2:	6811      	ldr	r1, [r2, #0]
 800cce4:	6808      	ldr	r0, [r1, #0]
 800cce6:	c806      	ldmia	r0!, {r1, r2}
 800cce8:	f381 880b 	msr	PSPLIM, r1
 800ccec:	2102      	movs	r1, #2
 800ccee:	f381 8814 	msr	CONTROL, r1
 800ccf2:	3020      	adds	r0, #32
 800ccf4:	f380 8809 	msr	PSP, r0
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f04f 0000 	mov.w	r0, #0
 800cd00:	f380 8811 	msr	BASEPRI, r0
 800cd04:	4710      	bx	r2
 800cd06:	bf00      	nop
 800cd08:	f3af 8000 	nop.w
 800cd0c:	f3af 8000 	nop.w

0800cd10 <pxCurrentTCBConst2>:
 800cd10:	20001100 	.word	0x20001100
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop
	...

0800cd20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cd20:	4807      	ldr	r0, [pc, #28]	; (800cd40 <xVTORConst>)
 800cd22:	6800      	ldr	r0, [r0, #0]
 800cd24:	6800      	ldr	r0, [r0, #0]
 800cd26:	f380 8808 	msr	MSP, r0
 800cd2a:	b662      	cpsie	i
 800cd2c:	b661      	cpsie	f
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	df02      	svc	2
 800cd38:	bf00      	nop
 800cd3a:	bf00      	nop
 800cd3c:	f3af 8000 	nop.w

0800cd40 <xVTORConst>:
 800cd40:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop

0800cd48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cd48:	f3ef 8011 	mrs	r0, BASEPRI
 800cd4c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800cd50:	f381 8811 	msr	BASEPRI, r1
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800cd5e:	bf00      	nop
 800cd60:	4618      	mov	r0, r3

0800cd62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cd62:	f380 8811 	msr	BASEPRI, r0
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800cd70:	bf00      	nop
	...

0800cd80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cd80:	f3ef 8009 	mrs	r0, PSP
 800cd84:	f01e 0f10 	tst.w	lr, #16
 800cd88:	bf08      	it	eq
 800cd8a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd8e:	f3ef 820b 	mrs	r2, PSPLIM
 800cd92:	4673      	mov	r3, lr
 800cd94:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800cd98:	4a11      	ldr	r2, [pc, #68]	; (800cde0 <pxCurrentTCBConst>)
 800cd9a:	6811      	ldr	r1, [r2, #0]
 800cd9c:	6008      	str	r0, [r1, #0]
 800cd9e:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cda2:	f380 8811 	msr	BASEPRI, r0
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f7ff f841 	bl	800be34 <vTaskSwitchContext>
 800cdb2:	f04f 0000 	mov.w	r0, #0
 800cdb6:	f380 8811 	msr	BASEPRI, r0
 800cdba:	4a09      	ldr	r2, [pc, #36]	; (800cde0 <pxCurrentTCBConst>)
 800cdbc:	6811      	ldr	r1, [r2, #0]
 800cdbe:	6808      	ldr	r0, [r1, #0]
 800cdc0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800cdc4:	f013 0f10 	tst.w	r3, #16
 800cdc8:	bf08      	it	eq
 800cdca:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdce:	f382 880b 	msr	PSPLIM, r2
 800cdd2:	f380 8809 	msr	PSP, r0
 800cdd6:	4718      	bx	r3
 800cdd8:	f3af 8000 	nop.w
 800cddc:	f3af 8000 	nop.w

0800cde0 <pxCurrentTCBConst>:
 800cde0:	20001100 	.word	0x20001100
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
	...

0800cdf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800cdf0:	f01e 0f04 	tst.w	lr, #4
 800cdf4:	bf0c      	ite	eq
 800cdf6:	f3ef 8008 	mrseq	r0, MSP
 800cdfa:	f3ef 8009 	mrsne	r0, PSP
 800cdfe:	4904      	ldr	r1, [pc, #16]	; (800ce10 <svchandler_address_const>)
 800ce00:	4708      	bx	r1
 800ce02:	bf00      	nop
 800ce04:	f3af 8000 	nop.w
 800ce08:	f3af 8000 	nop.w
 800ce0c:	f3af 8000 	nop.w

0800ce10 <svchandler_address_const>:
 800ce10:	0800cb51 	.word	0x0800cb51
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop

0800ce18 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800ce20:	2300      	movs	r3, #0
 800ce22:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00e      	beq.n	800ce4c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f023 0307 	bic.w	r3, r3, #7
 800ce34:	3308      	adds	r3, #8
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d205      	bcs.n	800ce48 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f023 0307 	bic.w	r3, r3, #7
 800ce42:	3308      	adds	r3, #8
 800ce44:	607b      	str	r3, [r7, #4]
 800ce46:	e001      	b.n	800ce4c <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 800ce4c:	f7fe fdd8 	bl	800ba00 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800ce50:	4b17      	ldr	r3, [pc, #92]	; (800ceb0 <pvPortMalloc+0x98>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d105      	bne.n	800ce64 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800ce58:	4b16      	ldr	r3, [pc, #88]	; (800ceb4 <pvPortMalloc+0x9c>)
 800ce5a:	f023 0307 	bic.w	r3, r3, #7
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4b13      	ldr	r3, [pc, #76]	; (800ceb0 <pvPortMalloc+0x98>)
 800ce62:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d01a      	beq.n	800cea0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800ce6a:	4b13      	ldr	r3, [pc, #76]	; (800ceb8 <pvPortMalloc+0xa0>)
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 800ce72:	4a12      	ldr	r2, [pc, #72]	; (800cebc <pvPortMalloc+0xa4>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d813      	bhi.n	800cea0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800ce78:	4b0f      	ldr	r3, [pc, #60]	; (800ceb8 <pvPortMalloc+0xa0>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	441a      	add	r2, r3
 800ce80:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <pvPortMalloc+0xa0>)
 800ce82:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d90b      	bls.n	800cea0 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800ce88:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <pvPortMalloc+0x98>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <pvPortMalloc+0xa0>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4413      	add	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800ce94:	4b08      	ldr	r3, [pc, #32]	; (800ceb8 <pvPortMalloc+0xa0>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	4a06      	ldr	r2, [pc, #24]	; (800ceb8 <pvPortMalloc+0xa0>)
 800ce9e:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800cea0:	f7fe fdbc 	bl	800ba1c <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800cea4:	68fb      	ldr	r3, [r7, #12]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20081730 	.word	0x20081730
 800ceb4:	20001733 	.word	0x20001733
 800ceb8:	2008172c 	.word	0x2008172c
 800cebc:	0007fff7 	.word	0x0007fff7

0800cec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d002      	beq.n	800ced4 <vPortFree+0x14>
 800cece:	f7ff ff3b 	bl	800cd48 <ulSetInterruptMask>
 800ced2:	e7fe      	b.n	800ced2 <vPortFree+0x12>
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <_calloc_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	fba1 1502 	umull	r1, r5, r1, r2
 800cee2:	b92d      	cbnz	r5, 800cef0 <_calloc_r+0x14>
 800cee4:	f000 f840 	bl	800cf68 <_malloc_r>
 800cee8:	4604      	mov	r4, r0
 800ceea:	b938      	cbnz	r0, 800cefc <_calloc_r+0x20>
 800ceec:	4620      	mov	r0, r4
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	f000 fc68 	bl	800d7c4 <__errno>
 800cef4:	230c      	movs	r3, #12
 800cef6:	2400      	movs	r4, #0
 800cef8:	6003      	str	r3, [r0, #0]
 800cefa:	e7f7      	b.n	800ceec <_calloc_r+0x10>
 800cefc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800cf00:	f022 0203 	bic.w	r2, r2, #3
 800cf04:	3a04      	subs	r2, #4
 800cf06:	2a24      	cmp	r2, #36	; 0x24
 800cf08:	d819      	bhi.n	800cf3e <_calloc_r+0x62>
 800cf0a:	2a13      	cmp	r2, #19
 800cf0c:	d915      	bls.n	800cf3a <_calloc_r+0x5e>
 800cf0e:	2a1b      	cmp	r2, #27
 800cf10:	e9c0 5500 	strd	r5, r5, [r0]
 800cf14:	d806      	bhi.n	800cf24 <_calloc_r+0x48>
 800cf16:	f100 0308 	add.w	r3, r0, #8
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	e9c3 2200 	strd	r2, r2, [r3]
 800cf20:	609a      	str	r2, [r3, #8]
 800cf22:	e7e3      	b.n	800ceec <_calloc_r+0x10>
 800cf24:	2a24      	cmp	r2, #36	; 0x24
 800cf26:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800cf2a:	bf11      	iteee	ne
 800cf2c:	f100 0310 	addne.w	r3, r0, #16
 800cf30:	f100 0318 	addeq.w	r3, r0, #24
 800cf34:	6105      	streq	r5, [r0, #16]
 800cf36:	6145      	streq	r5, [r0, #20]
 800cf38:	e7ef      	b.n	800cf1a <_calloc_r+0x3e>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	e7ed      	b.n	800cf1a <_calloc_r+0x3e>
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f000 fbd5 	bl	800d6ee <memset>
 800cf44:	e7d2      	b.n	800ceec <_calloc_r+0x10>
	...

0800cf48 <malloc>:
 800cf48:	4b02      	ldr	r3, [pc, #8]	; (800cf54 <malloc+0xc>)
 800cf4a:	4601      	mov	r1, r0
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	f000 b80b 	b.w	800cf68 <_malloc_r>
 800cf52:	bf00      	nop
 800cf54:	20000558 	.word	0x20000558

0800cf58 <free>:
 800cf58:	4b02      	ldr	r3, [pc, #8]	; (800cf64 <free+0xc>)
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	6818      	ldr	r0, [r3, #0]
 800cf5e:	f000 bcd9 	b.w	800d914 <_free_r>
 800cf62:	bf00      	nop
 800cf64:	20000558 	.word	0x20000558

0800cf68 <_malloc_r>:
 800cf68:	f101 030b 	add.w	r3, r1, #11
 800cf6c:	2b16      	cmp	r3, #22
 800cf6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf72:	4605      	mov	r5, r0
 800cf74:	d906      	bls.n	800cf84 <_malloc_r+0x1c>
 800cf76:	f033 0707 	bics.w	r7, r3, #7
 800cf7a:	d504      	bpl.n	800cf86 <_malloc_r+0x1e>
 800cf7c:	230c      	movs	r3, #12
 800cf7e:	602b      	str	r3, [r5, #0]
 800cf80:	2400      	movs	r4, #0
 800cf82:	e1a3      	b.n	800d2cc <_malloc_r+0x364>
 800cf84:	2710      	movs	r7, #16
 800cf86:	42b9      	cmp	r1, r7
 800cf88:	d8f8      	bhi.n	800cf7c <_malloc_r+0x14>
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	4eb1      	ldr	r6, [pc, #708]	; (800d254 <_malloc_r+0x2ec>)
 800cf8e:	f000 fa25 	bl	800d3dc <__malloc_lock>
 800cf92:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800cf96:	d236      	bcs.n	800d006 <_malloc_r+0x9e>
 800cf98:	f107 0208 	add.w	r2, r7, #8
 800cf9c:	08fb      	lsrs	r3, r7, #3
 800cf9e:	4432      	add	r2, r6
 800cfa0:	6854      	ldr	r4, [r2, #4]
 800cfa2:	f1a2 0108 	sub.w	r1, r2, #8
 800cfa6:	428c      	cmp	r4, r1
 800cfa8:	d102      	bne.n	800cfb0 <_malloc_r+0x48>
 800cfaa:	68d4      	ldr	r4, [r2, #12]
 800cfac:	42a2      	cmp	r2, r4
 800cfae:	d010      	beq.n	800cfd2 <_malloc_r+0x6a>
 800cfb0:	6863      	ldr	r3, [r4, #4]
 800cfb2:	f023 0303 	bic.w	r3, r3, #3
 800cfb6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800cfba:	4423      	add	r3, r4
 800cfbc:	60ca      	str	r2, [r1, #12]
 800cfbe:	6091      	str	r1, [r2, #8]
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	f042 0201 	orr.w	r2, r2, #1
 800cfc6:	605a      	str	r2, [r3, #4]
 800cfc8:	4628      	mov	r0, r5
 800cfca:	3408      	adds	r4, #8
 800cfcc:	f000 fa0c 	bl	800d3e8 <__malloc_unlock>
 800cfd0:	e17c      	b.n	800d2cc <_malloc_r+0x364>
 800cfd2:	3302      	adds	r3, #2
 800cfd4:	6934      	ldr	r4, [r6, #16]
 800cfd6:	49a0      	ldr	r1, [pc, #640]	; (800d258 <_malloc_r+0x2f0>)
 800cfd8:	428c      	cmp	r4, r1
 800cfda:	d077      	beq.n	800d0cc <_malloc_r+0x164>
 800cfdc:	6862      	ldr	r2, [r4, #4]
 800cfde:	f022 0c03 	bic.w	ip, r2, #3
 800cfe2:	ebac 0007 	sub.w	r0, ip, r7
 800cfe6:	280f      	cmp	r0, #15
 800cfe8:	dd48      	ble.n	800d07c <_malloc_r+0x114>
 800cfea:	19e2      	adds	r2, r4, r7
 800cfec:	f040 0301 	orr.w	r3, r0, #1
 800cff0:	f047 0701 	orr.w	r7, r7, #1
 800cff4:	6067      	str	r7, [r4, #4]
 800cff6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800cffa:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800cffe:	6053      	str	r3, [r2, #4]
 800d000:	f844 000c 	str.w	r0, [r4, ip]
 800d004:	e7e0      	b.n	800cfc8 <_malloc_r+0x60>
 800d006:	0a7b      	lsrs	r3, r7, #9
 800d008:	d02a      	beq.n	800d060 <_malloc_r+0xf8>
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d812      	bhi.n	800d034 <_malloc_r+0xcc>
 800d00e:	09bb      	lsrs	r3, r7, #6
 800d010:	3338      	adds	r3, #56	; 0x38
 800d012:	1c5a      	adds	r2, r3, #1
 800d014:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800d018:	f1a2 0c08 	sub.w	ip, r2, #8
 800d01c:	6854      	ldr	r4, [r2, #4]
 800d01e:	4564      	cmp	r4, ip
 800d020:	d006      	beq.n	800d030 <_malloc_r+0xc8>
 800d022:	6862      	ldr	r2, [r4, #4]
 800d024:	f022 0203 	bic.w	r2, r2, #3
 800d028:	1bd0      	subs	r0, r2, r7
 800d02a:	280f      	cmp	r0, #15
 800d02c:	dd1c      	ble.n	800d068 <_malloc_r+0x100>
 800d02e:	3b01      	subs	r3, #1
 800d030:	3301      	adds	r3, #1
 800d032:	e7cf      	b.n	800cfd4 <_malloc_r+0x6c>
 800d034:	2b14      	cmp	r3, #20
 800d036:	d801      	bhi.n	800d03c <_malloc_r+0xd4>
 800d038:	335b      	adds	r3, #91	; 0x5b
 800d03a:	e7ea      	b.n	800d012 <_malloc_r+0xaa>
 800d03c:	2b54      	cmp	r3, #84	; 0x54
 800d03e:	d802      	bhi.n	800d046 <_malloc_r+0xde>
 800d040:	0b3b      	lsrs	r3, r7, #12
 800d042:	336e      	adds	r3, #110	; 0x6e
 800d044:	e7e5      	b.n	800d012 <_malloc_r+0xaa>
 800d046:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800d04a:	d802      	bhi.n	800d052 <_malloc_r+0xea>
 800d04c:	0bfb      	lsrs	r3, r7, #15
 800d04e:	3377      	adds	r3, #119	; 0x77
 800d050:	e7df      	b.n	800d012 <_malloc_r+0xaa>
 800d052:	f240 5254 	movw	r2, #1364	; 0x554
 800d056:	4293      	cmp	r3, r2
 800d058:	d804      	bhi.n	800d064 <_malloc_r+0xfc>
 800d05a:	0cbb      	lsrs	r3, r7, #18
 800d05c:	337c      	adds	r3, #124	; 0x7c
 800d05e:	e7d8      	b.n	800d012 <_malloc_r+0xaa>
 800d060:	233f      	movs	r3, #63	; 0x3f
 800d062:	e7d6      	b.n	800d012 <_malloc_r+0xaa>
 800d064:	237e      	movs	r3, #126	; 0x7e
 800d066:	e7d4      	b.n	800d012 <_malloc_r+0xaa>
 800d068:	2800      	cmp	r0, #0
 800d06a:	68e1      	ldr	r1, [r4, #12]
 800d06c:	db04      	blt.n	800d078 <_malloc_r+0x110>
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	60d9      	str	r1, [r3, #12]
 800d072:	608b      	str	r3, [r1, #8]
 800d074:	18a3      	adds	r3, r4, r2
 800d076:	e7a3      	b.n	800cfc0 <_malloc_r+0x58>
 800d078:	460c      	mov	r4, r1
 800d07a:	e7d0      	b.n	800d01e <_malloc_r+0xb6>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800d082:	db07      	blt.n	800d094 <_malloc_r+0x12c>
 800d084:	44a4      	add	ip, r4
 800d086:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d08a:	f043 0301 	orr.w	r3, r3, #1
 800d08e:	f8cc 3004 	str.w	r3, [ip, #4]
 800d092:	e799      	b.n	800cfc8 <_malloc_r+0x60>
 800d094:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800d098:	6870      	ldr	r0, [r6, #4]
 800d09a:	f080 8095 	bcs.w	800d1c8 <_malloc_r+0x260>
 800d09e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800d0a2:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800d0a6:	f04f 0c01 	mov.w	ip, #1
 800d0aa:	3201      	adds	r2, #1
 800d0ac:	fa0c fc0e 	lsl.w	ip, ip, lr
 800d0b0:	ea4c 0000 	orr.w	r0, ip, r0
 800d0b4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800d0b8:	6070      	str	r0, [r6, #4]
 800d0ba:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800d0be:	3808      	subs	r0, #8
 800d0c0:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800d0c4:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800d0c8:	f8cc 400c 	str.w	r4, [ip, #12]
 800d0cc:	1098      	asrs	r0, r3, #2
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	4082      	lsls	r2, r0
 800d0d2:	6870      	ldr	r0, [r6, #4]
 800d0d4:	4290      	cmp	r0, r2
 800d0d6:	d325      	bcc.n	800d124 <_malloc_r+0x1bc>
 800d0d8:	4210      	tst	r0, r2
 800d0da:	d105      	bne.n	800d0e8 <_malloc_r+0x180>
 800d0dc:	f023 0303 	bic.w	r3, r3, #3
 800d0e0:	0052      	lsls	r2, r2, #1
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	4210      	tst	r0, r2
 800d0e6:	d0fb      	beq.n	800d0e0 <_malloc_r+0x178>
 800d0e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800d0ec:	469e      	mov	lr, r3
 800d0ee:	46c1      	mov	r9, r8
 800d0f0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d0f4:	454c      	cmp	r4, r9
 800d0f6:	f040 80bb 	bne.w	800d270 <_malloc_r+0x308>
 800d0fa:	f10e 0e01 	add.w	lr, lr, #1
 800d0fe:	f109 0908 	add.w	r9, r9, #8
 800d102:	f01e 0f03 	tst.w	lr, #3
 800d106:	d1f3      	bne.n	800d0f0 <_malloc_r+0x188>
 800d108:	0798      	lsls	r0, r3, #30
 800d10a:	f040 80e5 	bne.w	800d2d8 <_malloc_r+0x370>
 800d10e:	6873      	ldr	r3, [r6, #4]
 800d110:	ea23 0302 	bic.w	r3, r3, r2
 800d114:	6073      	str	r3, [r6, #4]
 800d116:	0052      	lsls	r2, r2, #1
 800d118:	6870      	ldr	r0, [r6, #4]
 800d11a:	4290      	cmp	r0, r2
 800d11c:	d302      	bcc.n	800d124 <_malloc_r+0x1bc>
 800d11e:	2a00      	cmp	r2, #0
 800d120:	f040 80e6 	bne.w	800d2f0 <_malloc_r+0x388>
 800d124:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800d128:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d12c:	f023 0903 	bic.w	r9, r3, #3
 800d130:	45b9      	cmp	r9, r7
 800d132:	d304      	bcc.n	800d13e <_malloc_r+0x1d6>
 800d134:	eba9 0207 	sub.w	r2, r9, r7
 800d138:	2a0f      	cmp	r2, #15
 800d13a:	f300 8142 	bgt.w	800d3c2 <_malloc_r+0x45a>
 800d13e:	4b47      	ldr	r3, [pc, #284]	; (800d25c <_malloc_r+0x2f4>)
 800d140:	2008      	movs	r0, #8
 800d142:	eb0a 0b09 	add.w	fp, sl, r9
 800d146:	6819      	ldr	r1, [r3, #0]
 800d148:	3110      	adds	r1, #16
 800d14a:	4439      	add	r1, r7
 800d14c:	9101      	str	r1, [sp, #4]
 800d14e:	f000 fb63 	bl	800d818 <sysconf>
 800d152:	4a43      	ldr	r2, [pc, #268]	; (800d260 <_malloc_r+0x2f8>)
 800d154:	4680      	mov	r8, r0
 800d156:	9901      	ldr	r1, [sp, #4]
 800d158:	6813      	ldr	r3, [r2, #0]
 800d15a:	3301      	adds	r3, #1
 800d15c:	bf1e      	ittt	ne
 800d15e:	f101 31ff 	addne.w	r1, r1, #4294967295
 800d162:	4243      	negne	r3, r0
 800d164:	1809      	addne	r1, r1, r0
 800d166:	4628      	mov	r0, r5
 800d168:	bf18      	it	ne
 800d16a:	4019      	andne	r1, r3
 800d16c:	9101      	str	r1, [sp, #4]
 800d16e:	f000 fb07 	bl	800d780 <_sbrk_r>
 800d172:	1c42      	adds	r2, r0, #1
 800d174:	4604      	mov	r4, r0
 800d176:	f000 80f7 	beq.w	800d368 <_malloc_r+0x400>
 800d17a:	4583      	cmp	fp, r0
 800d17c:	9901      	ldr	r1, [sp, #4]
 800d17e:	4a38      	ldr	r2, [pc, #224]	; (800d260 <_malloc_r+0x2f8>)
 800d180:	d902      	bls.n	800d188 <_malloc_r+0x220>
 800d182:	45b2      	cmp	sl, r6
 800d184:	f040 80f0 	bne.w	800d368 <_malloc_r+0x400>
 800d188:	4b36      	ldr	r3, [pc, #216]	; (800d264 <_malloc_r+0x2fc>)
 800d18a:	45a3      	cmp	fp, r4
 800d18c:	f108 3cff 	add.w	ip, r8, #4294967295
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	eb00 0e01 	add.w	lr, r0, r1
 800d196:	f8c3 e000 	str.w	lr, [r3]
 800d19a:	f040 80ab 	bne.w	800d2f4 <_malloc_r+0x38c>
 800d19e:	ea1b 0f0c 	tst.w	fp, ip
 800d1a2:	f040 80a7 	bne.w	800d2f4 <_malloc_r+0x38c>
 800d1a6:	4449      	add	r1, r9
 800d1a8:	68b2      	ldr	r2, [r6, #8]
 800d1aa:	f041 0101 	orr.w	r1, r1, #1
 800d1ae:	6051      	str	r1, [r2, #4]
 800d1b0:	4a2d      	ldr	r2, [pc, #180]	; (800d268 <_malloc_r+0x300>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6811      	ldr	r1, [r2, #0]
 800d1b6:	428b      	cmp	r3, r1
 800d1b8:	bf88      	it	hi
 800d1ba:	6013      	strhi	r3, [r2, #0]
 800d1bc:	4a2b      	ldr	r2, [pc, #172]	; (800d26c <_malloc_r+0x304>)
 800d1be:	6811      	ldr	r1, [r2, #0]
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	bf88      	it	hi
 800d1c4:	6013      	strhi	r3, [r2, #0]
 800d1c6:	e0cf      	b.n	800d368 <_malloc_r+0x400>
 800d1c8:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800d1cc:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800d1d0:	d218      	bcs.n	800d204 <_malloc_r+0x29c>
 800d1d2:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800d1d6:	3238      	adds	r2, #56	; 0x38
 800d1d8:	f102 0e01 	add.w	lr, r2, #1
 800d1dc:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800d1e0:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800d1e4:	45f0      	cmp	r8, lr
 800d1e6:	d12b      	bne.n	800d240 <_malloc_r+0x2d8>
 800d1e8:	1092      	asrs	r2, r2, #2
 800d1ea:	f04f 0c01 	mov.w	ip, #1
 800d1ee:	fa0c f202 	lsl.w	r2, ip, r2
 800d1f2:	4302      	orrs	r2, r0
 800d1f4:	6072      	str	r2, [r6, #4]
 800d1f6:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800d1fa:	f8c8 4008 	str.w	r4, [r8, #8]
 800d1fe:	f8ce 400c 	str.w	r4, [lr, #12]
 800d202:	e763      	b.n	800d0cc <_malloc_r+0x164>
 800d204:	2a14      	cmp	r2, #20
 800d206:	d801      	bhi.n	800d20c <_malloc_r+0x2a4>
 800d208:	325b      	adds	r2, #91	; 0x5b
 800d20a:	e7e5      	b.n	800d1d8 <_malloc_r+0x270>
 800d20c:	2a54      	cmp	r2, #84	; 0x54
 800d20e:	d803      	bhi.n	800d218 <_malloc_r+0x2b0>
 800d210:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800d214:	326e      	adds	r2, #110	; 0x6e
 800d216:	e7df      	b.n	800d1d8 <_malloc_r+0x270>
 800d218:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800d21c:	d803      	bhi.n	800d226 <_malloc_r+0x2be>
 800d21e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800d222:	3277      	adds	r2, #119	; 0x77
 800d224:	e7d8      	b.n	800d1d8 <_malloc_r+0x270>
 800d226:	f240 5e54 	movw	lr, #1364	; 0x554
 800d22a:	4572      	cmp	r2, lr
 800d22c:	bf96      	itet	ls
 800d22e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800d232:	227e      	movhi	r2, #126	; 0x7e
 800d234:	327c      	addls	r2, #124	; 0x7c
 800d236:	e7cf      	b.n	800d1d8 <_malloc_r+0x270>
 800d238:	f8de e008 	ldr.w	lr, [lr, #8]
 800d23c:	45f0      	cmp	r8, lr
 800d23e:	d005      	beq.n	800d24c <_malloc_r+0x2e4>
 800d240:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d244:	f022 0203 	bic.w	r2, r2, #3
 800d248:	4562      	cmp	r2, ip
 800d24a:	d8f5      	bhi.n	800d238 <_malloc_r+0x2d0>
 800d24c:	f8de 800c 	ldr.w	r8, [lr, #12]
 800d250:	e7d1      	b.n	800d1f6 <_malloc_r+0x28e>
 800d252:	bf00      	nop
 800d254:	20000018 	.word	0x20000018
 800d258:	20000020 	.word	0x20000020
 800d25c:	20081764 	.word	0x20081764
 800d260:	20000420 	.word	0x20000420
 800d264:	20081734 	.word	0x20081734
 800d268:	2008175c 	.word	0x2008175c
 800d26c:	20081760 	.word	0x20081760
 800d270:	6860      	ldr	r0, [r4, #4]
 800d272:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800d276:	f020 0003 	bic.w	r0, r0, #3
 800d27a:	eba0 0a07 	sub.w	sl, r0, r7
 800d27e:	f1ba 0f0f 	cmp.w	sl, #15
 800d282:	dd12      	ble.n	800d2aa <_malloc_r+0x342>
 800d284:	68a3      	ldr	r3, [r4, #8]
 800d286:	19e2      	adds	r2, r4, r7
 800d288:	f047 0701 	orr.w	r7, r7, #1
 800d28c:	6067      	str	r7, [r4, #4]
 800d28e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800d292:	f8cc 3008 	str.w	r3, [ip, #8]
 800d296:	f04a 0301 	orr.w	r3, sl, #1
 800d29a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d29e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800d2a2:	6053      	str	r3, [r2, #4]
 800d2a4:	f844 a000 	str.w	sl, [r4, r0]
 800d2a8:	e68e      	b.n	800cfc8 <_malloc_r+0x60>
 800d2aa:	f1ba 0f00 	cmp.w	sl, #0
 800d2ae:	db11      	blt.n	800d2d4 <_malloc_r+0x36c>
 800d2b0:	4420      	add	r0, r4
 800d2b2:	6843      	ldr	r3, [r0, #4]
 800d2b4:	f043 0301 	orr.w	r3, r3, #1
 800d2b8:	6043      	str	r3, [r0, #4]
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800d2c0:	f8c3 c00c 	str.w	ip, [r3, #12]
 800d2c4:	f8cc 3008 	str.w	r3, [ip, #8]
 800d2c8:	f000 f88e 	bl	800d3e8 <__malloc_unlock>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	b003      	add	sp, #12
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	4664      	mov	r4, ip
 800d2d6:	e70d      	b.n	800d0f4 <_malloc_r+0x18c>
 800d2d8:	f858 0908 	ldr.w	r0, [r8], #-8
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	4540      	cmp	r0, r8
 800d2e0:	f43f af12 	beq.w	800d108 <_malloc_r+0x1a0>
 800d2e4:	e717      	b.n	800d116 <_malloc_r+0x1ae>
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	0052      	lsls	r2, r2, #1
 800d2ea:	4210      	tst	r0, r2
 800d2ec:	d0fb      	beq.n	800d2e6 <_malloc_r+0x37e>
 800d2ee:	e6fb      	b.n	800d0e8 <_malloc_r+0x180>
 800d2f0:	4673      	mov	r3, lr
 800d2f2:	e7fa      	b.n	800d2ea <_malloc_r+0x382>
 800d2f4:	6810      	ldr	r0, [r2, #0]
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	bf17      	itett	ne
 800d2fa:	eba4 0b0b 	subne.w	fp, r4, fp
 800d2fe:	6014      	streq	r4, [r2, #0]
 800d300:	eb0b 020e 	addne.w	r2, fp, lr
 800d304:	601a      	strne	r2, [r3, #0]
 800d306:	f014 0b07 	ands.w	fp, r4, #7
 800d30a:	bf16      	itet	ne
 800d30c:	f1cb 0008 	rsbne	r0, fp, #8
 800d310:	4658      	moveq	r0, fp
 800d312:	1824      	addne	r4, r4, r0
 800d314:	4480      	add	r8, r0
 800d316:	4628      	mov	r0, r5
 800d318:	1862      	adds	r2, r4, r1
 800d31a:	ea02 010c 	and.w	r1, r2, ip
 800d31e:	9201      	str	r2, [sp, #4]
 800d320:	eba8 0801 	sub.w	r8, r8, r1
 800d324:	ea08 080c 	and.w	r8, r8, ip
 800d328:	4641      	mov	r1, r8
 800d32a:	f000 fa29 	bl	800d780 <_sbrk_r>
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	9a01      	ldr	r2, [sp, #4]
 800d332:	4b29      	ldr	r3, [pc, #164]	; (800d3d8 <_malloc_r+0x470>)
 800d334:	d107      	bne.n	800d346 <_malloc_r+0x3de>
 800d336:	f1bb 0f00 	cmp.w	fp, #0
 800d33a:	d023      	beq.n	800d384 <_malloc_r+0x41c>
 800d33c:	f1ab 0008 	sub.w	r0, fp, #8
 800d340:	f04f 0800 	mov.w	r8, #0
 800d344:	4410      	add	r0, r2
 800d346:	1b00      	subs	r0, r0, r4
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	45b2      	cmp	sl, r6
 800d34c:	60b4      	str	r4, [r6, #8]
 800d34e:	4440      	add	r0, r8
 800d350:	4442      	add	r2, r8
 800d352:	f040 0001 	orr.w	r0, r0, #1
 800d356:	601a      	str	r2, [r3, #0]
 800d358:	6060      	str	r0, [r4, #4]
 800d35a:	f43f af29 	beq.w	800d1b0 <_malloc_r+0x248>
 800d35e:	f1b9 0f0f 	cmp.w	r9, #15
 800d362:	d812      	bhi.n	800d38a <_malloc_r+0x422>
 800d364:	2301      	movs	r3, #1
 800d366:	6063      	str	r3, [r4, #4]
 800d368:	68b3      	ldr	r3, [r6, #8]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f023 0303 	bic.w	r3, r3, #3
 800d370:	42bb      	cmp	r3, r7
 800d372:	eba3 0207 	sub.w	r2, r3, r7
 800d376:	d301      	bcc.n	800d37c <_malloc_r+0x414>
 800d378:	2a0f      	cmp	r2, #15
 800d37a:	dc22      	bgt.n	800d3c2 <_malloc_r+0x45a>
 800d37c:	4628      	mov	r0, r5
 800d37e:	f000 f833 	bl	800d3e8 <__malloc_unlock>
 800d382:	e5fd      	b.n	800cf80 <_malloc_r+0x18>
 800d384:	4610      	mov	r0, r2
 800d386:	46d8      	mov	r8, fp
 800d388:	e7dd      	b.n	800d346 <_malloc_r+0x3de>
 800d38a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800d38e:	f1a9 090c 	sub.w	r9, r9, #12
 800d392:	2105      	movs	r1, #5
 800d394:	f029 0907 	bic.w	r9, r9, #7
 800d398:	f002 0201 	and.w	r2, r2, #1
 800d39c:	ea42 0209 	orr.w	r2, r2, r9
 800d3a0:	f1b9 0f0f 	cmp.w	r9, #15
 800d3a4:	f8ca 2004 	str.w	r2, [sl, #4]
 800d3a8:	eb0a 0209 	add.w	r2, sl, r9
 800d3ac:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800d3b0:	f67f aefe 	bls.w	800d1b0 <_malloc_r+0x248>
 800d3b4:	f10a 0108 	add.w	r1, sl, #8
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f000 faab 	bl	800d914 <_free_r>
 800d3be:	4b06      	ldr	r3, [pc, #24]	; (800d3d8 <_malloc_r+0x470>)
 800d3c0:	e6f6      	b.n	800d1b0 <_malloc_r+0x248>
 800d3c2:	68b4      	ldr	r4, [r6, #8]
 800d3c4:	f047 0301 	orr.w	r3, r7, #1
 800d3c8:	f042 0201 	orr.w	r2, r2, #1
 800d3cc:	4427      	add	r7, r4
 800d3ce:	6063      	str	r3, [r4, #4]
 800d3d0:	60b7      	str	r7, [r6, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	e5f8      	b.n	800cfc8 <_malloc_r+0x60>
 800d3d6:	bf00      	nop
 800d3d8:	20081734 	.word	0x20081734

0800d3dc <__malloc_lock>:
 800d3dc:	4801      	ldr	r0, [pc, #4]	; (800d3e4 <__malloc_lock+0x8>)
 800d3de:	f7f5 ba5d 	b.w	800289c <__retarget_lock_acquire_recursive>
 800d3e2:	bf00      	nop
 800d3e4:	200009f4 	.word	0x200009f4

0800d3e8 <__malloc_unlock>:
 800d3e8:	4801      	ldr	r0, [pc, #4]	; (800d3f0 <__malloc_unlock+0x8>)
 800d3ea:	f7f5 ba6b 	b.w	80028c4 <__retarget_lock_release_recursive>
 800d3ee:	bf00      	nop
 800d3f0:	200009f4 	.word	0x200009f4

0800d3f4 <std>:
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	b510      	push	{r4, lr}
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	6083      	str	r3, [r0, #8]
 800d3fc:	8181      	strh	r1, [r0, #12]
 800d3fe:	4619      	mov	r1, r3
 800d400:	6643      	str	r3, [r0, #100]	; 0x64
 800d402:	81c2      	strh	r2, [r0, #14]
 800d404:	2208      	movs	r2, #8
 800d406:	6183      	str	r3, [r0, #24]
 800d408:	e9c0 3300 	strd	r3, r3, [r0]
 800d40c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d410:	305c      	adds	r0, #92	; 0x5c
 800d412:	f000 f96c 	bl	800d6ee <memset>
 800d416:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <std+0x58>)
 800d418:	61e4      	str	r4, [r4, #28]
 800d41a:	6223      	str	r3, [r4, #32]
 800d41c:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <std+0x5c>)
 800d41e:	6263      	str	r3, [r4, #36]	; 0x24
 800d420:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <std+0x60>)
 800d422:	62a3      	str	r3, [r4, #40]	; 0x28
 800d424:	4b0c      	ldr	r3, [pc, #48]	; (800d458 <std+0x64>)
 800d426:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d428:	4b0c      	ldr	r3, [pc, #48]	; (800d45c <std+0x68>)
 800d42a:	429c      	cmp	r4, r3
 800d42c:	d006      	beq.n	800d43c <std+0x48>
 800d42e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d432:	4294      	cmp	r4, r2
 800d434:	d002      	beq.n	800d43c <std+0x48>
 800d436:	33d0      	adds	r3, #208	; 0xd0
 800d438:	429c      	cmp	r4, r3
 800d43a:	d105      	bne.n	800d448 <std+0x54>
 800d43c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d444:	f7f5 b9f9 	b.w	800283a <__retarget_lock_init_recursive>
 800d448:	bd10      	pop	{r4, pc}
 800d44a:	bf00      	nop
 800d44c:	0800d649 	.word	0x0800d649
 800d450:	0800d66b 	.word	0x0800d66b
 800d454:	0800d6a3 	.word	0x0800d6a3
 800d458:	0800d6c7 	.word	0x0800d6c7
 800d45c:	20081768 	.word	0x20081768

0800d460 <stdio_exit_handler>:
 800d460:	4a02      	ldr	r2, [pc, #8]	; (800d46c <stdio_exit_handler+0xc>)
 800d462:	4903      	ldr	r1, [pc, #12]	; (800d470 <stdio_exit_handler+0x10>)
 800d464:	4803      	ldr	r0, [pc, #12]	; (800d474 <stdio_exit_handler+0x14>)
 800d466:	f000 b869 	b.w	800d53c <_fwalk_sglue>
 800d46a:	bf00      	nop
 800d46c:	20000428 	.word	0x20000428
 800d470:	0800f97d 	.word	0x0800f97d
 800d474:	20000438 	.word	0x20000438

0800d478 <cleanup_stdio>:
 800d478:	6841      	ldr	r1, [r0, #4]
 800d47a:	4b0c      	ldr	r3, [pc, #48]	; (800d4ac <cleanup_stdio+0x34>)
 800d47c:	4299      	cmp	r1, r3
 800d47e:	b510      	push	{r4, lr}
 800d480:	4604      	mov	r4, r0
 800d482:	d001      	beq.n	800d488 <cleanup_stdio+0x10>
 800d484:	f002 fa7a 	bl	800f97c <_fclose_r>
 800d488:	68a1      	ldr	r1, [r4, #8]
 800d48a:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <cleanup_stdio+0x38>)
 800d48c:	4299      	cmp	r1, r3
 800d48e:	d002      	beq.n	800d496 <cleanup_stdio+0x1e>
 800d490:	4620      	mov	r0, r4
 800d492:	f002 fa73 	bl	800f97c <_fclose_r>
 800d496:	68e1      	ldr	r1, [r4, #12]
 800d498:	4b06      	ldr	r3, [pc, #24]	; (800d4b4 <cleanup_stdio+0x3c>)
 800d49a:	4299      	cmp	r1, r3
 800d49c:	d004      	beq.n	800d4a8 <cleanup_stdio+0x30>
 800d49e:	4620      	mov	r0, r4
 800d4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4a4:	f002 ba6a 	b.w	800f97c <_fclose_r>
 800d4a8:	bd10      	pop	{r4, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20081768 	.word	0x20081768
 800d4b0:	200817d0 	.word	0x200817d0
 800d4b4:	20081838 	.word	0x20081838

0800d4b8 <global_stdio_init.part.0>:
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <global_stdio_init.part.0+0x30>)
 800d4bc:	2104      	movs	r1, #4
 800d4be:	4c0b      	ldr	r4, [pc, #44]	; (800d4ec <global_stdio_init.part.0+0x34>)
 800d4c0:	4a0b      	ldr	r2, [pc, #44]	; (800d4f0 <global_stdio_init.part.0+0x38>)
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f7ff ff94 	bl	800d3f4 <std>
 800d4cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	2109      	movs	r1, #9
 800d4d4:	f7ff ff8e 	bl	800d3f4 <std>
 800d4d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d4dc:	2202      	movs	r2, #2
 800d4de:	2112      	movs	r1, #18
 800d4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4e4:	f7ff bf86 	b.w	800d3f4 <std>
 800d4e8:	200818a0 	.word	0x200818a0
 800d4ec:	20081768 	.word	0x20081768
 800d4f0:	0800d461 	.word	0x0800d461

0800d4f4 <__sfp_lock_acquire>:
 800d4f4:	4801      	ldr	r0, [pc, #4]	; (800d4fc <__sfp_lock_acquire+0x8>)
 800d4f6:	f7f5 b9d1 	b.w	800289c <__retarget_lock_acquire_recursive>
 800d4fa:	bf00      	nop
 800d4fc:	200009ec 	.word	0x200009ec

0800d500 <__sfp_lock_release>:
 800d500:	4801      	ldr	r0, [pc, #4]	; (800d508 <__sfp_lock_release+0x8>)
 800d502:	f7f5 b9df 	b.w	80028c4 <__retarget_lock_release_recursive>
 800d506:	bf00      	nop
 800d508:	200009ec 	.word	0x200009ec

0800d50c <__sinit>:
 800d50c:	b510      	push	{r4, lr}
 800d50e:	4604      	mov	r4, r0
 800d510:	f7ff fff0 	bl	800d4f4 <__sfp_lock_acquire>
 800d514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d516:	b11b      	cbz	r3, 800d520 <__sinit+0x14>
 800d518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d51c:	f7ff bff0 	b.w	800d500 <__sfp_lock_release>
 800d520:	4b04      	ldr	r3, [pc, #16]	; (800d534 <__sinit+0x28>)
 800d522:	6363      	str	r3, [r4, #52]	; 0x34
 800d524:	4b04      	ldr	r3, [pc, #16]	; (800d538 <__sinit+0x2c>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1f5      	bne.n	800d518 <__sinit+0xc>
 800d52c:	f7ff ffc4 	bl	800d4b8 <global_stdio_init.part.0>
 800d530:	e7f2      	b.n	800d518 <__sinit+0xc>
 800d532:	bf00      	nop
 800d534:	0800d479 	.word	0x0800d479
 800d538:	200818a0 	.word	0x200818a0

0800d53c <_fwalk_sglue>:
 800d53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d540:	4607      	mov	r7, r0
 800d542:	4688      	mov	r8, r1
 800d544:	4614      	mov	r4, r2
 800d546:	2600      	movs	r6, #0
 800d548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d54c:	f1b9 0901 	subs.w	r9, r9, #1
 800d550:	d505      	bpl.n	800d55e <_fwalk_sglue+0x22>
 800d552:	6824      	ldr	r4, [r4, #0]
 800d554:	2c00      	cmp	r4, #0
 800d556:	d1f7      	bne.n	800d548 <_fwalk_sglue+0xc>
 800d558:	4630      	mov	r0, r6
 800d55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d55e:	89ab      	ldrh	r3, [r5, #12]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d907      	bls.n	800d574 <_fwalk_sglue+0x38>
 800d564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d568:	3301      	adds	r3, #1
 800d56a:	d003      	beq.n	800d574 <_fwalk_sglue+0x38>
 800d56c:	4629      	mov	r1, r5
 800d56e:	4638      	mov	r0, r7
 800d570:	47c0      	blx	r8
 800d572:	4306      	orrs	r6, r0
 800d574:	3568      	adds	r5, #104	; 0x68
 800d576:	e7e9      	b.n	800d54c <_fwalk_sglue+0x10>

0800d578 <printf>:
 800d578:	b40f      	push	{r0, r1, r2, r3}
 800d57a:	b507      	push	{r0, r1, r2, lr}
 800d57c:	4906      	ldr	r1, [pc, #24]	; (800d598 <printf+0x20>)
 800d57e:	ab04      	add	r3, sp, #16
 800d580:	6808      	ldr	r0, [r1, #0]
 800d582:	f853 2b04 	ldr.w	r2, [r3], #4
 800d586:	6881      	ldr	r1, [r0, #8]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	f000 fa85 	bl	800da98 <_vfprintf_r>
 800d58e:	b003      	add	sp, #12
 800d590:	f85d eb04 	ldr.w	lr, [sp], #4
 800d594:	b004      	add	sp, #16
 800d596:	4770      	bx	lr
 800d598:	20000558 	.word	0x20000558

0800d59c <putchar>:
 800d59c:	4b02      	ldr	r3, [pc, #8]	; (800d5a8 <putchar+0xc>)
 800d59e:	4601      	mov	r1, r0
 800d5a0:	6818      	ldr	r0, [r3, #0]
 800d5a2:	6882      	ldr	r2, [r0, #8]
 800d5a4:	f002 bc40 	b.w	800fe28 <_putc_r>
 800d5a8:	20000558 	.word	0x20000558

0800d5ac <_puts_r>:
 800d5ac:	b530      	push	{r4, r5, lr}
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	b089      	sub	sp, #36	; 0x24
 800d5b2:	4608      	mov	r0, r1
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	f7f2 fe63 	bl	8000280 <strlen>
 800d5ba:	4b1e      	ldr	r3, [pc, #120]	; (800d634 <_puts_r+0x88>)
 800d5bc:	9306      	str	r3, [sp, #24]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e9cd 4004 	strd	r4, r0, [sp, #16]
 800d5c4:	9307      	str	r3, [sp, #28]
 800d5c6:	4418      	add	r0, r3
 800d5c8:	ab04      	add	r3, sp, #16
 800d5ca:	68ac      	ldr	r4, [r5, #8]
 800d5cc:	9003      	str	r0, [sp, #12]
 800d5ce:	9301      	str	r3, [sp, #4]
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	9302      	str	r3, [sp, #8]
 800d5d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d5d6:	b913      	cbnz	r3, 800d5de <_puts_r+0x32>
 800d5d8:	4628      	mov	r0, r5
 800d5da:	f7ff ff97 	bl	800d50c <__sinit>
 800d5de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5e0:	07db      	lsls	r3, r3, #31
 800d5e2:	d405      	bmi.n	800d5f0 <_puts_r+0x44>
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	0598      	lsls	r0, r3, #22
 800d5e8:	d402      	bmi.n	800d5f0 <_puts_r+0x44>
 800d5ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ec:	f7f5 f956 	bl	800289c <__retarget_lock_acquire_recursive>
 800d5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5f4:	0499      	lsls	r1, r3, #18
 800d5f6:	d406      	bmi.n	800d606 <_puts_r+0x5a>
 800d5f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d5fc:	81a3      	strh	r3, [r4, #12]
 800d5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d604:	6663      	str	r3, [r4, #100]	; 0x64
 800d606:	4628      	mov	r0, r5
 800d608:	aa01      	add	r2, sp, #4
 800d60a:	4621      	mov	r1, r4
 800d60c:	f002 fac2 	bl	800fb94 <__sfvwrite_r>
 800d610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d612:	2800      	cmp	r0, #0
 800d614:	bf14      	ite	ne
 800d616:	f04f 35ff 	movne.w	r5, #4294967295
 800d61a:	250a      	moveq	r5, #10
 800d61c:	07da      	lsls	r2, r3, #31
 800d61e:	d405      	bmi.n	800d62c <_puts_r+0x80>
 800d620:	89a3      	ldrh	r3, [r4, #12]
 800d622:	059b      	lsls	r3, r3, #22
 800d624:	d402      	bmi.n	800d62c <_puts_r+0x80>
 800d626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d628:	f7f5 f94c 	bl	80028c4 <__retarget_lock_release_recursive>
 800d62c:	4628      	mov	r0, r5
 800d62e:	b009      	add	sp, #36	; 0x24
 800d630:	bd30      	pop	{r4, r5, pc}
 800d632:	bf00      	nop
 800d634:	0801217e 	.word	0x0801217e

0800d638 <puts>:
 800d638:	4b02      	ldr	r3, [pc, #8]	; (800d644 <puts+0xc>)
 800d63a:	4601      	mov	r1, r0
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	f7ff bfb5 	b.w	800d5ac <_puts_r>
 800d642:	bf00      	nop
 800d644:	20000558 	.word	0x20000558

0800d648 <__sread>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	460c      	mov	r4, r1
 800d64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d650:	f000 f884 	bl	800d75c <_read_r>
 800d654:	2800      	cmp	r0, #0
 800d656:	bfab      	itete	ge
 800d658:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800d65a:	89a3      	ldrhlt	r3, [r4, #12]
 800d65c:	181b      	addge	r3, r3, r0
 800d65e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d662:	bfac      	ite	ge
 800d664:	6523      	strge	r3, [r4, #80]	; 0x50
 800d666:	81a3      	strhlt	r3, [r4, #12]
 800d668:	bd10      	pop	{r4, pc}

0800d66a <__swrite>:
 800d66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66e:	461f      	mov	r7, r3
 800d670:	898b      	ldrh	r3, [r1, #12]
 800d672:	4605      	mov	r5, r0
 800d674:	460c      	mov	r4, r1
 800d676:	05db      	lsls	r3, r3, #23
 800d678:	4616      	mov	r6, r2
 800d67a:	d505      	bpl.n	800d688 <__swrite+0x1e>
 800d67c:	2302      	movs	r3, #2
 800d67e:	2200      	movs	r2, #0
 800d680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d684:	f000 f858 	bl	800d738 <_lseek_r>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	4632      	mov	r2, r6
 800d68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d690:	4628      	mov	r0, r5
 800d692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d696:	81a3      	strh	r3, [r4, #12]
 800d698:	463b      	mov	r3, r7
 800d69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d69e:	f000 b87f 	b.w	800d7a0 <_write_r>

0800d6a2 <__sseek>:
 800d6a2:	b510      	push	{r4, lr}
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6aa:	f000 f845 	bl	800d738 <_lseek_r>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	bf15      	itete	ne
 800d6b4:	6520      	strne	r0, [r4, #80]	; 0x50
 800d6b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6be:	81a3      	strheq	r3, [r4, #12]
 800d6c0:	bf18      	it	ne
 800d6c2:	81a3      	strhne	r3, [r4, #12]
 800d6c4:	bd10      	pop	{r4, pc}

0800d6c6 <__sclose>:
 800d6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ca:	f000 b825 	b.w	800d718 <_close_r>

0800d6ce <memcmp>:
 800d6ce:	3901      	subs	r1, #1
 800d6d0:	4402      	add	r2, r0
 800d6d2:	b510      	push	{r4, lr}
 800d6d4:	4290      	cmp	r0, r2
 800d6d6:	d101      	bne.n	800d6dc <memcmp+0xe>
 800d6d8:	2000      	movs	r0, #0
 800d6da:	e005      	b.n	800d6e8 <memcmp+0x1a>
 800d6dc:	7803      	ldrb	r3, [r0, #0]
 800d6de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d6e2:	42a3      	cmp	r3, r4
 800d6e4:	d001      	beq.n	800d6ea <memcmp+0x1c>
 800d6e6:	1b18      	subs	r0, r3, r4
 800d6e8:	bd10      	pop	{r4, pc}
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	e7f2      	b.n	800d6d4 <memcmp+0x6>

0800d6ee <memset>:
 800d6ee:	4402      	add	r2, r0
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d100      	bne.n	800d6f8 <memset+0xa>
 800d6f6:	4770      	bx	lr
 800d6f8:	f803 1b01 	strb.w	r1, [r3], #1
 800d6fc:	e7f9      	b.n	800d6f2 <memset+0x4>

0800d6fe <strchr>:
 800d6fe:	b2c9      	uxtb	r1, r1
 800d700:	4603      	mov	r3, r0
 800d702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d706:	b11a      	cbz	r2, 800d710 <strchr+0x12>
 800d708:	428a      	cmp	r2, r1
 800d70a:	d1f9      	bne.n	800d700 <strchr+0x2>
 800d70c:	4618      	mov	r0, r3
 800d70e:	4770      	bx	lr
 800d710:	2900      	cmp	r1, #0
 800d712:	bf18      	it	ne
 800d714:	2300      	movne	r3, #0
 800d716:	e7f9      	b.n	800d70c <strchr+0xe>

0800d718 <_close_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	2300      	movs	r3, #0
 800d71c:	4d05      	ldr	r5, [pc, #20]	; (800d734 <_close_r+0x1c>)
 800d71e:	4604      	mov	r4, r0
 800d720:	4608      	mov	r0, r1
 800d722:	602b      	str	r3, [r5, #0]
 800d724:	f7f4 fead 	bl	8002482 <_close>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d102      	bne.n	800d732 <_close_r+0x1a>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	b103      	cbz	r3, 800d732 <_close_r+0x1a>
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	200818a4 	.word	0x200818a4

0800d738 <_lseek_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4604      	mov	r4, r0
 800d73c:	4d06      	ldr	r5, [pc, #24]	; (800d758 <_lseek_r+0x20>)
 800d73e:	4608      	mov	r0, r1
 800d740:	4611      	mov	r1, r2
 800d742:	2200      	movs	r2, #0
 800d744:	602a      	str	r2, [r5, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	f7f4 fec2 	bl	80024d0 <_lseek>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_lseek_r+0x1e>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	b103      	cbz	r3, 800d756 <_lseek_r+0x1e>
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	200818a4 	.word	0x200818a4

0800d75c <_read_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4604      	mov	r4, r0
 800d760:	4d06      	ldr	r5, [pc, #24]	; (800d77c <_read_r+0x20>)
 800d762:	4608      	mov	r0, r1
 800d764:	4611      	mov	r1, r2
 800d766:	2200      	movs	r2, #0
 800d768:	602a      	str	r2, [r5, #0]
 800d76a:	461a      	mov	r2, r3
 800d76c:	f7f4 fe50 	bl	8002410 <_read>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d102      	bne.n	800d77a <_read_r+0x1e>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	b103      	cbz	r3, 800d77a <_read_r+0x1e>
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	bd38      	pop	{r3, r4, r5, pc}
 800d77c:	200818a4 	.word	0x200818a4

0800d780 <_sbrk_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	2300      	movs	r3, #0
 800d784:	4d05      	ldr	r5, [pc, #20]	; (800d79c <_sbrk_r+0x1c>)
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	602b      	str	r3, [r5, #0]
 800d78c:	f7f4 feae 	bl	80024ec <_sbrk>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_sbrk_r+0x1a>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_sbrk_r+0x1a>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	200818a4 	.word	0x200818a4

0800d7a0 <_write_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	4d06      	ldr	r5, [pc, #24]	; (800d7c0 <_write_r+0x20>)
 800d7a6:	4608      	mov	r0, r1
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	602a      	str	r2, [r5, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	f7f4 fe4b 	bl	800244a <_write>
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	d102      	bne.n	800d7be <_write_r+0x1e>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	b103      	cbz	r3, 800d7be <_write_r+0x1e>
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	200818a4 	.word	0x200818a4

0800d7c4 <__errno>:
 800d7c4:	4b01      	ldr	r3, [pc, #4]	; (800d7cc <__errno+0x8>)
 800d7c6:	6818      	ldr	r0, [r3, #0]
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000558 	.word	0x20000558

0800d7d0 <__libc_init_array>:
 800d7d0:	b570      	push	{r4, r5, r6, lr}
 800d7d2:	4d0d      	ldr	r5, [pc, #52]	; (800d808 <__libc_init_array+0x38>)
 800d7d4:	2600      	movs	r6, #0
 800d7d6:	4c0d      	ldr	r4, [pc, #52]	; (800d80c <__libc_init_array+0x3c>)
 800d7d8:	1b64      	subs	r4, r4, r5
 800d7da:	10a4      	asrs	r4, r4, #2
 800d7dc:	42a6      	cmp	r6, r4
 800d7de:	d109      	bne.n	800d7f4 <__libc_init_array+0x24>
 800d7e0:	4d0b      	ldr	r5, [pc, #44]	; (800d810 <__libc_init_array+0x40>)
 800d7e2:	2600      	movs	r6, #0
 800d7e4:	4c0b      	ldr	r4, [pc, #44]	; (800d814 <__libc_init_array+0x44>)
 800d7e6:	f004 f9b7 	bl	8011b58 <_init>
 800d7ea:	1b64      	subs	r4, r4, r5
 800d7ec:	10a4      	asrs	r4, r4, #2
 800d7ee:	42a6      	cmp	r6, r4
 800d7f0:	d105      	bne.n	800d7fe <__libc_init_array+0x2e>
 800d7f2:	bd70      	pop	{r4, r5, r6, pc}
 800d7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7f8:	3601      	adds	r6, #1
 800d7fa:	4798      	blx	r3
 800d7fc:	e7ee      	b.n	800d7dc <__libc_init_array+0xc>
 800d7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d802:	3601      	adds	r6, #1
 800d804:	4798      	blx	r3
 800d806:	e7f2      	b.n	800d7ee <__libc_init_array+0x1e>
 800d808:	08012188 	.word	0x08012188
 800d80c:	08012188 	.word	0x08012188
 800d810:	08012188 	.word	0x08012188
 800d814:	08012190 	.word	0x08012190

0800d818 <sysconf>:
 800d818:	2808      	cmp	r0, #8
 800d81a:	b508      	push	{r3, lr}
 800d81c:	d006      	beq.n	800d82c <sysconf+0x14>
 800d81e:	f7ff ffd1 	bl	800d7c4 <__errno>
 800d822:	2316      	movs	r3, #22
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	f04f 30ff 	mov.w	r0, #4294967295
 800d82a:	bd08      	pop	{r3, pc}
 800d82c:	2080      	movs	r0, #128	; 0x80
 800d82e:	e7fc      	b.n	800d82a <sysconf+0x12>

0800d830 <memcpy>:
 800d830:	440a      	add	r2, r1
 800d832:	1e43      	subs	r3, r0, #1
 800d834:	4291      	cmp	r1, r2
 800d836:	d100      	bne.n	800d83a <memcpy+0xa>
 800d838:	4770      	bx	lr
 800d83a:	b510      	push	{r4, lr}
 800d83c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d840:	4291      	cmp	r1, r2
 800d842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d846:	d1f9      	bne.n	800d83c <memcpy+0xc>
 800d848:	bd10      	pop	{r4, pc}
	...

0800d84c <register_fini>:
 800d84c:	4b02      	ldr	r3, [pc, #8]	; (800d858 <register_fini+0xc>)
 800d84e:	b113      	cbz	r3, 800d856 <register_fini+0xa>
 800d850:	4802      	ldr	r0, [pc, #8]	; (800d85c <register_fini+0x10>)
 800d852:	f000 b805 	b.w	800d860 <atexit>
 800d856:	4770      	bx	lr
 800d858:	00000000 	.word	0x00000000
 800d85c:	08010119 	.word	0x08010119

0800d860 <atexit>:
 800d860:	2300      	movs	r3, #0
 800d862:	4601      	mov	r1, r0
 800d864:	461a      	mov	r2, r3
 800d866:	4618      	mov	r0, r3
 800d868:	f002 bcb0 	b.w	80101cc <__register_exitproc>

0800d86c <_malloc_trim_r>:
 800d86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d870:	4606      	mov	r6, r0
 800d872:	4f25      	ldr	r7, [pc, #148]	; (800d908 <_malloc_trim_r+0x9c>)
 800d874:	2008      	movs	r0, #8
 800d876:	460c      	mov	r4, r1
 800d878:	f7ff ffce 	bl	800d818 <sysconf>
 800d87c:	4680      	mov	r8, r0
 800d87e:	4630      	mov	r0, r6
 800d880:	f7ff fdac 	bl	800d3dc <__malloc_lock>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	685d      	ldr	r5, [r3, #4]
 800d888:	f025 0503 	bic.w	r5, r5, #3
 800d88c:	1b2c      	subs	r4, r5, r4
 800d88e:	3c11      	subs	r4, #17
 800d890:	4444      	add	r4, r8
 800d892:	fbb4 f4f8 	udiv	r4, r4, r8
 800d896:	3c01      	subs	r4, #1
 800d898:	fb08 f404 	mul.w	r4, r8, r4
 800d89c:	45a0      	cmp	r8, r4
 800d89e:	dd05      	ble.n	800d8ac <_malloc_trim_r+0x40>
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	f7ff fda1 	bl	800d3e8 <__malloc_unlock>
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7ff ff66 	bl	800d780 <_sbrk_r>
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	442b      	add	r3, r5
 800d8b8:	4298      	cmp	r0, r3
 800d8ba:	d1f1      	bne.n	800d8a0 <_malloc_trim_r+0x34>
 800d8bc:	4261      	negs	r1, r4
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f7ff ff5e 	bl	800d780 <_sbrk_r>
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d110      	bne.n	800d8ea <_malloc_trim_r+0x7e>
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f7ff ff58 	bl	800d780 <_sbrk_r>
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	1a83      	subs	r3, r0, r2
 800d8d4:	2b0f      	cmp	r3, #15
 800d8d6:	dde3      	ble.n	800d8a0 <_malloc_trim_r+0x34>
 800d8d8:	490c      	ldr	r1, [pc, #48]	; (800d90c <_malloc_trim_r+0xa0>)
 800d8da:	f043 0301 	orr.w	r3, r3, #1
 800d8de:	6809      	ldr	r1, [r1, #0]
 800d8e0:	6053      	str	r3, [r2, #4]
 800d8e2:	1a40      	subs	r0, r0, r1
 800d8e4:	490a      	ldr	r1, [pc, #40]	; (800d910 <_malloc_trim_r+0xa4>)
 800d8e6:	6008      	str	r0, [r1, #0]
 800d8e8:	e7da      	b.n	800d8a0 <_malloc_trim_r+0x34>
 800d8ea:	1b2d      	subs	r5, r5, r4
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4a08      	ldr	r2, [pc, #32]	; (800d910 <_malloc_trim_r+0xa4>)
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f045 0501 	orr.w	r5, r5, #1
 800d8f6:	605d      	str	r5, [r3, #4]
 800d8f8:	6813      	ldr	r3, [r2, #0]
 800d8fa:	1b1b      	subs	r3, r3, r4
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	f7ff fd73 	bl	800d3e8 <__malloc_unlock>
 800d902:	2001      	movs	r0, #1
 800d904:	e7d0      	b.n	800d8a8 <_malloc_trim_r+0x3c>
 800d906:	bf00      	nop
 800d908:	20000018 	.word	0x20000018
 800d90c:	20000420 	.word	0x20000420
 800d910:	20081734 	.word	0x20081734

0800d914 <_free_r>:
 800d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d916:	4605      	mov	r5, r0
 800d918:	460f      	mov	r7, r1
 800d91a:	2900      	cmp	r1, #0
 800d91c:	f000 80b1 	beq.w	800da82 <_free_r+0x16e>
 800d920:	f7ff fd5c 	bl	800d3dc <__malloc_lock>
 800d924:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d928:	f1a7 0308 	sub.w	r3, r7, #8
 800d92c:	4855      	ldr	r0, [pc, #340]	; (800da84 <_free_r+0x170>)
 800d92e:	f022 0401 	bic.w	r4, r2, #1
 800d932:	f002 0201 	and.w	r2, r2, #1
 800d936:	6881      	ldr	r1, [r0, #8]
 800d938:	eb03 0c04 	add.w	ip, r3, r4
 800d93c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d940:	4561      	cmp	r1, ip
 800d942:	f026 0603 	bic.w	r6, r6, #3
 800d946:	d11b      	bne.n	800d980 <_free_r+0x6c>
 800d948:	4426      	add	r6, r4
 800d94a:	b93a      	cbnz	r2, 800d95c <_free_r+0x48>
 800d94c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800d950:	1a9b      	subs	r3, r3, r2
 800d952:	4416      	add	r6, r2
 800d954:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d958:	60ca      	str	r2, [r1, #12]
 800d95a:	6091      	str	r1, [r2, #8]
 800d95c:	f046 0201 	orr.w	r2, r6, #1
 800d960:	605a      	str	r2, [r3, #4]
 800d962:	6083      	str	r3, [r0, #8]
 800d964:	4b48      	ldr	r3, [pc, #288]	; (800da88 <_free_r+0x174>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	42b3      	cmp	r3, r6
 800d96a:	d804      	bhi.n	800d976 <_free_r+0x62>
 800d96c:	4b47      	ldr	r3, [pc, #284]	; (800da8c <_free_r+0x178>)
 800d96e:	4628      	mov	r0, r5
 800d970:	6819      	ldr	r1, [r3, #0]
 800d972:	f7ff ff7b 	bl	800d86c <_malloc_trim_r>
 800d976:	4628      	mov	r0, r5
 800d978:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d97c:	f7ff bd34 	b.w	800d3e8 <__malloc_unlock>
 800d980:	f8cc 6004 	str.w	r6, [ip, #4]
 800d984:	2a00      	cmp	r2, #0
 800d986:	d138      	bne.n	800d9fa <_free_r+0xe6>
 800d988:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800d98c:	f100 0708 	add.w	r7, r0, #8
 800d990:	1a5b      	subs	r3, r3, r1
 800d992:	440c      	add	r4, r1
 800d994:	6899      	ldr	r1, [r3, #8]
 800d996:	42b9      	cmp	r1, r7
 800d998:	d031      	beq.n	800d9fe <_free_r+0xea>
 800d99a:	68df      	ldr	r7, [r3, #12]
 800d99c:	60cf      	str	r7, [r1, #12]
 800d99e:	60b9      	str	r1, [r7, #8]
 800d9a0:	eb0c 0106 	add.w	r1, ip, r6
 800d9a4:	6849      	ldr	r1, [r1, #4]
 800d9a6:	07c9      	lsls	r1, r1, #31
 800d9a8:	d40b      	bmi.n	800d9c2 <_free_r+0xae>
 800d9aa:	4434      	add	r4, r6
 800d9ac:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d9b0:	bb3a      	cbnz	r2, 800da02 <_free_r+0xee>
 800d9b2:	4e37      	ldr	r6, [pc, #220]	; (800da90 <_free_r+0x17c>)
 800d9b4:	42b1      	cmp	r1, r6
 800d9b6:	d124      	bne.n	800da02 <_free_r+0xee>
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9be:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d9c2:	f044 0101 	orr.w	r1, r4, #1
 800d9c6:	6059      	str	r1, [r3, #4]
 800d9c8:	511c      	str	r4, [r3, r4]
 800d9ca:	2a00      	cmp	r2, #0
 800d9cc:	d1d3      	bne.n	800d976 <_free_r+0x62>
 800d9ce:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800d9d2:	d21b      	bcs.n	800da0c <_free_r+0xf8>
 800d9d4:	08e2      	lsrs	r2, r4, #3
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	0964      	lsrs	r4, r4, #5
 800d9da:	3201      	adds	r2, #1
 800d9dc:	40a1      	lsls	r1, r4
 800d9de:	6844      	ldr	r4, [r0, #4]
 800d9e0:	4321      	orrs	r1, r4
 800d9e2:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800d9e6:	6041      	str	r1, [r0, #4]
 800d9e8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800d9ec:	3908      	subs	r1, #8
 800d9ee:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800d9f2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800d9f6:	60e3      	str	r3, [r4, #12]
 800d9f8:	e7bd      	b.n	800d976 <_free_r+0x62>
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	e7d0      	b.n	800d9a0 <_free_r+0x8c>
 800d9fe:	2201      	movs	r2, #1
 800da00:	e7ce      	b.n	800d9a0 <_free_r+0x8c>
 800da02:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800da06:	60ce      	str	r6, [r1, #12]
 800da08:	60b1      	str	r1, [r6, #8]
 800da0a:	e7da      	b.n	800d9c2 <_free_r+0xae>
 800da0c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800da10:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800da14:	d214      	bcs.n	800da40 <_free_r+0x12c>
 800da16:	09a2      	lsrs	r2, r4, #6
 800da18:	3238      	adds	r2, #56	; 0x38
 800da1a:	1c51      	adds	r1, r2, #1
 800da1c:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800da20:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800da24:	428e      	cmp	r6, r1
 800da26:	d125      	bne.n	800da74 <_free_r+0x160>
 800da28:	2401      	movs	r4, #1
 800da2a:	1092      	asrs	r2, r2, #2
 800da2c:	fa04 f202 	lsl.w	r2, r4, r2
 800da30:	6844      	ldr	r4, [r0, #4]
 800da32:	4322      	orrs	r2, r4
 800da34:	6042      	str	r2, [r0, #4]
 800da36:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800da3a:	60b3      	str	r3, [r6, #8]
 800da3c:	60cb      	str	r3, [r1, #12]
 800da3e:	e79a      	b.n	800d976 <_free_r+0x62>
 800da40:	2a14      	cmp	r2, #20
 800da42:	d801      	bhi.n	800da48 <_free_r+0x134>
 800da44:	325b      	adds	r2, #91	; 0x5b
 800da46:	e7e8      	b.n	800da1a <_free_r+0x106>
 800da48:	2a54      	cmp	r2, #84	; 0x54
 800da4a:	d802      	bhi.n	800da52 <_free_r+0x13e>
 800da4c:	0b22      	lsrs	r2, r4, #12
 800da4e:	326e      	adds	r2, #110	; 0x6e
 800da50:	e7e3      	b.n	800da1a <_free_r+0x106>
 800da52:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800da56:	d802      	bhi.n	800da5e <_free_r+0x14a>
 800da58:	0be2      	lsrs	r2, r4, #15
 800da5a:	3277      	adds	r2, #119	; 0x77
 800da5c:	e7dd      	b.n	800da1a <_free_r+0x106>
 800da5e:	f240 5154 	movw	r1, #1364	; 0x554
 800da62:	428a      	cmp	r2, r1
 800da64:	bf96      	itet	ls
 800da66:	0ca2      	lsrls	r2, r4, #18
 800da68:	227e      	movhi	r2, #126	; 0x7e
 800da6a:	327c      	addls	r2, #124	; 0x7c
 800da6c:	e7d5      	b.n	800da1a <_free_r+0x106>
 800da6e:	6889      	ldr	r1, [r1, #8]
 800da70:	428e      	cmp	r6, r1
 800da72:	d004      	beq.n	800da7e <_free_r+0x16a>
 800da74:	684a      	ldr	r2, [r1, #4]
 800da76:	f022 0203 	bic.w	r2, r2, #3
 800da7a:	42a2      	cmp	r2, r4
 800da7c:	d8f7      	bhi.n	800da6e <_free_r+0x15a>
 800da7e:	68ce      	ldr	r6, [r1, #12]
 800da80:	e7d9      	b.n	800da36 <_free_r+0x122>
 800da82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da84:	20000018 	.word	0x20000018
 800da88:	20000424 	.word	0x20000424
 800da8c:	20081764 	.word	0x20081764
 800da90:	20000020 	.word	0x20000020
 800da94:	00000000 	.word	0x00000000

0800da98 <_vfprintf_r>:
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	ed2d 8b04 	vpush	{d8-d9}
 800daa0:	b0cf      	sub	sp, #316	; 0x13c
 800daa2:	468b      	mov	fp, r1
 800daa4:	4691      	mov	r9, r2
 800daa6:	461c      	mov	r4, r3
 800daa8:	461d      	mov	r5, r3
 800daaa:	4682      	mov	sl, r0
 800daac:	f002 fb30 	bl	8010110 <_localeconv_r>
 800dab0:	6803      	ldr	r3, [r0, #0]
 800dab2:	4618      	mov	r0, r3
 800dab4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dab6:	f7f2 fbe3 	bl	8000280 <strlen>
 800daba:	900e      	str	r0, [sp, #56]	; 0x38
 800dabc:	f1ba 0f00 	cmp.w	sl, #0
 800dac0:	d005      	beq.n	800dace <_vfprintf_r+0x36>
 800dac2:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 800dac6:	b913      	cbnz	r3, 800dace <_vfprintf_r+0x36>
 800dac8:	4650      	mov	r0, sl
 800daca:	f7ff fd1f 	bl	800d50c <__sinit>
 800dace:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800dad2:	07d8      	lsls	r0, r3, #31
 800dad4:	d407      	bmi.n	800dae6 <_vfprintf_r+0x4e>
 800dad6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800dada:	0599      	lsls	r1, r3, #22
 800dadc:	d403      	bmi.n	800dae6 <_vfprintf_r+0x4e>
 800dade:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800dae2:	f7f4 fedb 	bl	800289c <__retarget_lock_acquire_recursive>
 800dae6:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800daea:	049a      	lsls	r2, r3, #18
 800daec:	d409      	bmi.n	800db02 <_vfprintf_r+0x6a>
 800daee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800daf2:	f8ab 300c 	strh.w	r3, [fp, #12]
 800daf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800dafa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dafe:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 800db02:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800db06:	071b      	lsls	r3, r3, #28
 800db08:	d502      	bpl.n	800db10 <_vfprintf_r+0x78>
 800db0a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800db0e:	b9d3      	cbnz	r3, 800db46 <_vfprintf_r+0xae>
 800db10:	4659      	mov	r1, fp
 800db12:	4650      	mov	r0, sl
 800db14:	f002 fa06 	bl	800ff24 <__swsetup_r>
 800db18:	b1a8      	cbz	r0, 800db46 <_vfprintf_r+0xae>
 800db1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800db1e:	07df      	lsls	r7, r3, #31
 800db20:	d508      	bpl.n	800db34 <_vfprintf_r+0x9c>
 800db22:	f04f 33ff 	mov.w	r3, #4294967295
 800db26:	930f      	str	r3, [sp, #60]	; 0x3c
 800db28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800db2a:	b04f      	add	sp, #316	; 0x13c
 800db2c:	ecbd 8b04 	vpop	{d8-d9}
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800db38:	059e      	lsls	r6, r3, #22
 800db3a:	d4f2      	bmi.n	800db22 <_vfprintf_r+0x8a>
 800db3c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800db40:	f7f4 fec0 	bl	80028c4 <__retarget_lock_release_recursive>
 800db44:	e7ed      	b.n	800db22 <_vfprintf_r+0x8a>
 800db46:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800db4a:	f003 021a 	and.w	r2, r3, #26
 800db4e:	2a0a      	cmp	r2, #10
 800db50:	d118      	bne.n	800db84 <_vfprintf_r+0xec>
 800db52:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 800db56:	2a00      	cmp	r2, #0
 800db58:	db14      	blt.n	800db84 <_vfprintf_r+0xec>
 800db5a:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800db5e:	07d5      	lsls	r5, r2, #31
 800db60:	d405      	bmi.n	800db6e <_vfprintf_r+0xd6>
 800db62:	0598      	lsls	r0, r3, #22
 800db64:	d403      	bmi.n	800db6e <_vfprintf_r+0xd6>
 800db66:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800db6a:	f7f4 feab 	bl	80028c4 <__retarget_lock_release_recursive>
 800db6e:	4623      	mov	r3, r4
 800db70:	464a      	mov	r2, r9
 800db72:	4659      	mov	r1, fp
 800db74:	4650      	mov	r0, sl
 800db76:	b04f      	add	sp, #316	; 0x13c
 800db78:	ecbd 8b04 	vpop	{d8-d9}
 800db7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db80:	f001 b9b8 	b.w	800eef4 <__sbprintf>
 800db84:	ed9f 7b92 	vldr	d7, [pc, #584]	; 800ddd0 <_vfprintf_r+0x338>
 800db88:	2300      	movs	r3, #0
 800db8a:	ac25      	add	r4, sp, #148	; 0x94
 800db8c:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800db90:	9422      	str	r4, [sp, #136]	; 0x88
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	930a      	str	r3, [sp, #40]	; 0x28
 800db96:	9312      	str	r3, [sp, #72]	; 0x48
 800db98:	9314      	str	r3, [sp, #80]	; 0x50
 800db9a:	930f      	str	r3, [sp, #60]	; 0x3c
 800db9c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dba0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800dba4:	464b      	mov	r3, r9
 800dba6:	461e      	mov	r6, r3
 800dba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbac:	b10a      	cbz	r2, 800dbb2 <_vfprintf_r+0x11a>
 800dbae:	2a25      	cmp	r2, #37	; 0x25
 800dbb0:	d1f9      	bne.n	800dba6 <_vfprintf_r+0x10e>
 800dbb2:	ebb6 0709 	subs.w	r7, r6, r9
 800dbb6:	d00d      	beq.n	800dbd4 <_vfprintf_r+0x13c>
 800dbb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dbba:	443b      	add	r3, r7
 800dbbc:	9324      	str	r3, [sp, #144]	; 0x90
 800dbbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	2b07      	cmp	r3, #7
 800dbc4:	9323      	str	r3, [sp, #140]	; 0x8c
 800dbc6:	e9c4 9700 	strd	r9, r7, [r4]
 800dbca:	dc79      	bgt.n	800dcc0 <_vfprintf_r+0x228>
 800dbcc:	3408      	adds	r4, #8
 800dbce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbd0:	443b      	add	r3, r7
 800dbd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbd4:	7833      	ldrb	r3, [r6, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f001 8149 	beq.w	800ee6e <_vfprintf_r+0x13d6>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe2:	3601      	adds	r6, #1
 800dbe4:	270a      	movs	r7, #10
 800dbe6:	4698      	mov	r8, r3
 800dbe8:	212b      	movs	r1, #43	; 0x2b
 800dbea:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800dbee:	9204      	str	r2, [sp, #16]
 800dbf0:	9310      	str	r3, [sp, #64]	; 0x40
 800dbf2:	4633      	mov	r3, r6
 800dbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbf8:	9207      	str	r2, [sp, #28]
 800dbfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbfc:	9b07      	ldr	r3, [sp, #28]
 800dbfe:	3b20      	subs	r3, #32
 800dc00:	2b5a      	cmp	r3, #90	; 0x5a
 800dc02:	f200 85c0 	bhi.w	800e786 <_vfprintf_r+0xcee>
 800dc06:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dc0a:	007e      	.short	0x007e
 800dc0c:	05be05be 	.word	0x05be05be
 800dc10:	05be0086 	.word	0x05be0086
 800dc14:	05be05be 	.word	0x05be05be
 800dc18:	05be0065 	.word	0x05be0065
 800dc1c:	008905be 	.word	0x008905be
 800dc20:	05be0093 	.word	0x05be0093
 800dc24:	00960090 	.word	0x00960090
 800dc28:	00b205be 	.word	0x00b205be
 800dc2c:	00b500b5 	.word	0x00b500b5
 800dc30:	00b500b5 	.word	0x00b500b5
 800dc34:	00b500b5 	.word	0x00b500b5
 800dc38:	00b500b5 	.word	0x00b500b5
 800dc3c:	05be00b5 	.word	0x05be00b5
 800dc40:	05be05be 	.word	0x05be05be
 800dc44:	05be05be 	.word	0x05be05be
 800dc48:	05be05be 	.word	0x05be05be
 800dc4c:	05be012a 	.word	0x05be012a
 800dc50:	00fa00e7 	.word	0x00fa00e7
 800dc54:	012a012a 	.word	0x012a012a
 800dc58:	05be012a 	.word	0x05be012a
 800dc5c:	05be05be 	.word	0x05be05be
 800dc60:	00c505be 	.word	0x00c505be
 800dc64:	05be05be 	.word	0x05be05be
 800dc68:	05be049e 	.word	0x05be049e
 800dc6c:	05be05be 	.word	0x05be05be
 800dc70:	05be04e7 	.word	0x05be04e7
 800dc74:	05be0508 	.word	0x05be0508
 800dc78:	052a05be 	.word	0x052a05be
 800dc7c:	05be05be 	.word	0x05be05be
 800dc80:	05be05be 	.word	0x05be05be
 800dc84:	05be05be 	.word	0x05be05be
 800dc88:	05be05be 	.word	0x05be05be
 800dc8c:	05be012a 	.word	0x05be012a
 800dc90:	00fc00e7 	.word	0x00fc00e7
 800dc94:	012a012a 	.word	0x012a012a
 800dc98:	00c8012a 	.word	0x00c8012a
 800dc9c:	00dc00fc 	.word	0x00dc00fc
 800dca0:	00d505be 	.word	0x00d505be
 800dca4:	047905be 	.word	0x047905be
 800dca8:	04d604a0 	.word	0x04d604a0
 800dcac:	05be00dc 	.word	0x05be00dc
 800dcb0:	007c04e7 	.word	0x007c04e7
 800dcb4:	05be050a 	.word	0x05be050a
 800dcb8:	054905be 	.word	0x054905be
 800dcbc:	007c05be 	.word	0x007c05be
 800dcc0:	aa22      	add	r2, sp, #136	; 0x88
 800dcc2:	4659      	mov	r1, fp
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	f001 f955 	bl	800ef74 <__sprint_r>
 800dcca:	2800      	cmp	r0, #0
 800dccc:	f040 8135 	bne.w	800df3a <_vfprintf_r+0x4a2>
 800dcd0:	ac25      	add	r4, sp, #148	; 0x94
 800dcd2:	e77c      	b.n	800dbce <_vfprintf_r+0x136>
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	f002 fa1b 	bl	8010110 <_localeconv_r>
 800dcda:	6843      	ldr	r3, [r0, #4]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	9314      	str	r3, [sp, #80]	; 0x50
 800dce0:	f7f2 face 	bl	8000280 <strlen>
 800dce4:	9012      	str	r0, [sp, #72]	; 0x48
 800dce6:	4650      	mov	r0, sl
 800dce8:	f002 fa12 	bl	8010110 <_localeconv_r>
 800dcec:	6883      	ldr	r3, [r0, #8]
 800dcee:	212b      	movs	r1, #43	; 0x2b
 800dcf0:	930a      	str	r3, [sp, #40]	; 0x28
 800dcf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcf4:	b12b      	cbz	r3, 800dd02 <_vfprintf_r+0x26a>
 800dcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf8:	b11b      	cbz	r3, 800dd02 <_vfprintf_r+0x26a>
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	b10b      	cbz	r3, 800dd02 <_vfprintf_r+0x26a>
 800dcfe:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800dd02:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dd04:	e775      	b.n	800dbf2 <_vfprintf_r+0x15a>
 800dd06:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1f9      	bne.n	800dd02 <_vfprintf_r+0x26a>
 800dd0e:	2320      	movs	r3, #32
 800dd10:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800dd14:	e7f5      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd16:	f048 0801 	orr.w	r8, r8, #1
 800dd1a:	e7f2      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	9310      	str	r3, [sp, #64]	; 0x40
 800dd24:	daed      	bge.n	800dd02 <_vfprintf_r+0x26a>
 800dd26:	425b      	negs	r3, r3
 800dd28:	9310      	str	r3, [sp, #64]	; 0x40
 800dd2a:	f048 0804 	orr.w	r8, r8, #4
 800dd2e:	e7e8      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd30:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800dd34:	e7e5      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd3c:	2a2a      	cmp	r2, #42	; 0x2a
 800dd3e:	9207      	str	r2, [sp, #28]
 800dd40:	d112      	bne.n	800dd68 <_vfprintf_r+0x2d0>
 800dd42:	f855 2b04 	ldr.w	r2, [r5], #4
 800dd46:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd48:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 800dd4c:	9204      	str	r2, [sp, #16]
 800dd4e:	e7d8      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd50:	9804      	ldr	r0, [sp, #16]
 800dd52:	fb07 2200 	mla	r2, r7, r0, r2
 800dd56:	9204      	str	r2, [sp, #16]
 800dd58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd5c:	9207      	str	r2, [sp, #28]
 800dd5e:	9a07      	ldr	r2, [sp, #28]
 800dd60:	3a30      	subs	r2, #48	; 0x30
 800dd62:	2a09      	cmp	r2, #9
 800dd64:	d9f4      	bls.n	800dd50 <_vfprintf_r+0x2b8>
 800dd66:	e748      	b.n	800dbfa <_vfprintf_r+0x162>
 800dd68:	2200      	movs	r2, #0
 800dd6a:	9204      	str	r2, [sp, #16]
 800dd6c:	e7f7      	b.n	800dd5e <_vfprintf_r+0x2c6>
 800dd6e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800dd72:	e7c6      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd74:	2200      	movs	r2, #0
 800dd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd78:	9210      	str	r2, [sp, #64]	; 0x40
 800dd7a:	9a07      	ldr	r2, [sp, #28]
 800dd7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800dd7e:	3a30      	subs	r2, #48	; 0x30
 800dd80:	fb07 2200 	mla	r2, r7, r0, r2
 800dd84:	9210      	str	r2, [sp, #64]	; 0x40
 800dd86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd8a:	9207      	str	r2, [sp, #28]
 800dd8c:	3a30      	subs	r2, #48	; 0x30
 800dd8e:	2a09      	cmp	r2, #9
 800dd90:	d9f3      	bls.n	800dd7a <_vfprintf_r+0x2e2>
 800dd92:	e732      	b.n	800dbfa <_vfprintf_r+0x162>
 800dd94:	f048 0808 	orr.w	r8, r8, #8
 800dd98:	e7b3      	b.n	800dd02 <_vfprintf_r+0x26a>
 800dd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b68      	cmp	r3, #104	; 0x68
 800dda0:	bf05      	ittet	eq
 800dda2:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800dda4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800dda8:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 800ddac:	3301      	addeq	r3, #1
 800ddae:	bf08      	it	eq
 800ddb0:	930b      	streq	r3, [sp, #44]	; 0x2c
 800ddb2:	e7a6      	b.n	800dd02 <_vfprintf_r+0x26a>
 800ddb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	2b6c      	cmp	r3, #108	; 0x6c
 800ddba:	d105      	bne.n	800ddc8 <_vfprintf_r+0x330>
 800ddbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddc2:	f048 0820 	orr.w	r8, r8, #32
 800ddc6:	e79c      	b.n	800dd02 <_vfprintf_r+0x26a>
 800ddc8:	f048 0810 	orr.w	r8, r8, #16
 800ddcc:	e799      	b.n	800dd02 <_vfprintf_r+0x26a>
 800ddce:	bf00      	nop
	...
 800ddd8:	462a      	mov	r2, r5
 800ddda:	f852 3b04 	ldr.w	r3, [r2], #4
 800ddde:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800dde2:	2300      	movs	r3, #0
 800dde4:	9206      	str	r2, [sp, #24]
 800dde6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ddea:	2600      	movs	r6, #0
 800ddec:	9303      	str	r3, [sp, #12]
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800ddf4:	4635      	mov	r5, r6
 800ddf6:	9304      	str	r3, [sp, #16]
 800ddf8:	e9cd 6608 	strd	r6, r6, [sp, #32]
 800ddfc:	e1c3      	b.n	800e186 <_vfprintf_r+0x6ee>
 800ddfe:	f048 0810 	orr.w	r8, r8, #16
 800de02:	f018 0f20 	tst.w	r8, #32
 800de06:	d012      	beq.n	800de2e <_vfprintf_r+0x396>
 800de08:	3507      	adds	r5, #7
 800de0a:	f025 0307 	bic.w	r3, r5, #7
 800de0e:	461a      	mov	r2, r3
 800de10:	685e      	ldr	r6, [r3, #4]
 800de12:	f852 5b08 	ldr.w	r5, [r2], #8
 800de16:	9206      	str	r2, [sp, #24]
 800de18:	2e00      	cmp	r6, #0
 800de1a:	da06      	bge.n	800de2a <_vfprintf_r+0x392>
 800de1c:	426d      	negs	r5, r5
 800de1e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800de22:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800de26:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800de2a:	2301      	movs	r3, #1
 800de2c:	e39e      	b.n	800e56c <_vfprintf_r+0xad4>
 800de2e:	462b      	mov	r3, r5
 800de30:	f018 0f10 	tst.w	r8, #16
 800de34:	f853 6b04 	ldr.w	r6, [r3], #4
 800de38:	9306      	str	r3, [sp, #24]
 800de3a:	d002      	beq.n	800de42 <_vfprintf_r+0x3aa>
 800de3c:	4635      	mov	r5, r6
 800de3e:	17f6      	asrs	r6, r6, #31
 800de40:	e7ea      	b.n	800de18 <_vfprintf_r+0x380>
 800de42:	f018 0f40 	tst.w	r8, #64	; 0x40
 800de46:	d003      	beq.n	800de50 <_vfprintf_r+0x3b8>
 800de48:	b235      	sxth	r5, r6
 800de4a:	f346 36c0 	sbfx	r6, r6, #15, #1
 800de4e:	e7e3      	b.n	800de18 <_vfprintf_r+0x380>
 800de50:	f418 7f00 	tst.w	r8, #512	; 0x200
 800de54:	d0f2      	beq.n	800de3c <_vfprintf_r+0x3a4>
 800de56:	b275      	sxtb	r5, r6
 800de58:	f346 16c0 	sbfx	r6, r6, #7, #1
 800de5c:	e7dc      	b.n	800de18 <_vfprintf_r+0x380>
 800de5e:	3507      	adds	r5, #7
 800de60:	f04f 32ff 	mov.w	r2, #4294967295
 800de64:	f025 0307 	bic.w	r3, r5, #7
 800de68:	ecb3 7b02 	vldmia	r3!, {d7}
 800de6c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800de70:	9306      	str	r3, [sp, #24]
 800de72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de74:	ee09 3a10 	vmov	s18, r3
 800de78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de7e:	ee09 3a90 	vmov	s19, r3
 800de82:	4b3f      	ldr	r3, [pc, #252]	; (800df80 <_vfprintf_r+0x4e8>)
 800de84:	ec51 0b19 	vmov	r0, r1, d9
 800de88:	f7f2 fe58 	bl	8000b3c <__aeabi_dcmpun>
 800de8c:	bb10      	cbnz	r0, 800ded4 <_vfprintf_r+0x43c>
 800de8e:	f04f 32ff 	mov.w	r2, #4294967295
 800de92:	4b3b      	ldr	r3, [pc, #236]	; (800df80 <_vfprintf_r+0x4e8>)
 800de94:	ec51 0b19 	vmov	r0, r1, d9
 800de98:	f7f2 fe32 	bl	8000b00 <__aeabi_dcmple>
 800de9c:	b9d0      	cbnz	r0, 800ded4 <_vfprintf_r+0x43c>
 800de9e:	2200      	movs	r2, #0
 800dea0:	2300      	movs	r3, #0
 800dea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dea6:	f7f2 fe21 	bl	8000aec <__aeabi_dcmplt>
 800deaa:	b110      	cbz	r0, 800deb2 <_vfprintf_r+0x41a>
 800deac:	232d      	movs	r3, #45	; 0x2d
 800deae:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800deb2:	4a34      	ldr	r2, [pc, #208]	; (800df84 <_vfprintf_r+0x4ec>)
 800deb4:	4b34      	ldr	r3, [pc, #208]	; (800df88 <_vfprintf_r+0x4f0>)
 800deb6:	9907      	ldr	r1, [sp, #28]
 800deb8:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800debc:	2947      	cmp	r1, #71	; 0x47
 800debe:	bfd4      	ite	le
 800dec0:	4691      	movle	r9, r2
 800dec2:	4699      	movgt	r9, r3
 800dec4:	2100      	movs	r1, #0
 800dec6:	2303      	movs	r3, #3
 800dec8:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800decc:	2600      	movs	r6, #0
 800dece:	4633      	mov	r3, r6
 800ded0:	f001 b807 	b.w	800eee2 <_vfprintf_r+0x144a>
 800ded4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ded8:	4610      	mov	r0, r2
 800deda:	4619      	mov	r1, r3
 800dedc:	f7f2 fe2e 	bl	8000b3c <__aeabi_dcmpun>
 800dee0:	b140      	cbz	r0, 800def4 <_vfprintf_r+0x45c>
 800dee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dee4:	4a29      	ldr	r2, [pc, #164]	; (800df8c <_vfprintf_r+0x4f4>)
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	bfbc      	itt	lt
 800deea:	232d      	movlt	r3, #45	; 0x2d
 800deec:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800def0:	4b27      	ldr	r3, [pc, #156]	; (800df90 <_vfprintf_r+0x4f8>)
 800def2:	e7e0      	b.n	800deb6 <_vfprintf_r+0x41e>
 800def4:	9b07      	ldr	r3, [sp, #28]
 800def6:	f023 0320 	bic.w	r3, r3, #32
 800defa:	2b41      	cmp	r3, #65	; 0x41
 800defc:	9308      	str	r3, [sp, #32]
 800defe:	d12e      	bne.n	800df5e <_vfprintf_r+0x4c6>
 800df00:	2330      	movs	r3, #48	; 0x30
 800df02:	f048 0802 	orr.w	r8, r8, #2
 800df06:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800df0a:	9b07      	ldr	r3, [sp, #28]
 800df0c:	2b61      	cmp	r3, #97	; 0x61
 800df0e:	bf0c      	ite	eq
 800df10:	2378      	moveq	r3, #120	; 0x78
 800df12:	2358      	movne	r3, #88	; 0x58
 800df14:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800df18:	9b04      	ldr	r3, [sp, #16]
 800df1a:	2b63      	cmp	r3, #99	; 0x63
 800df1c:	dd3a      	ble.n	800df94 <_vfprintf_r+0x4fc>
 800df1e:	1c59      	adds	r1, r3, #1
 800df20:	4650      	mov	r0, sl
 800df22:	f7ff f821 	bl	800cf68 <_malloc_r>
 800df26:	4681      	mov	r9, r0
 800df28:	2800      	cmp	r0, #0
 800df2a:	f040 8203 	bne.w	800e334 <_vfprintf_r+0x89c>
 800df2e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800df32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df36:	f8ab 300c 	strh.w	r3, [fp, #12]
 800df3a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800df3e:	07d9      	lsls	r1, r3, #31
 800df40:	d407      	bmi.n	800df52 <_vfprintf_r+0x4ba>
 800df42:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800df46:	059a      	lsls	r2, r3, #22
 800df48:	d403      	bmi.n	800df52 <_vfprintf_r+0x4ba>
 800df4a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800df4e:	f7f4 fcb9 	bl	80028c4 <__retarget_lock_release_recursive>
 800df52:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800df56:	065b      	lsls	r3, r3, #25
 800df58:	f57f ade6 	bpl.w	800db28 <_vfprintf_r+0x90>
 800df5c:	e5e1      	b.n	800db22 <_vfprintf_r+0x8a>
 800df5e:	9b04      	ldr	r3, [sp, #16]
 800df60:	3301      	adds	r3, #1
 800df62:	f000 81e9 	beq.w	800e338 <_vfprintf_r+0x8a0>
 800df66:	9b08      	ldr	r3, [sp, #32]
 800df68:	2b47      	cmp	r3, #71	; 0x47
 800df6a:	f040 81e8 	bne.w	800e33e <_vfprintf_r+0x8a6>
 800df6e:	9b04      	ldr	r3, [sp, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	f040 81e4 	bne.w	800e33e <_vfprintf_r+0x8a6>
 800df76:	9303      	str	r3, [sp, #12]
 800df78:	2301      	movs	r3, #1
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	e00d      	b.n	800df9a <_vfprintf_r+0x502>
 800df7e:	bf00      	nop
 800df80:	7fefffff 	.word	0x7fefffff
 800df84:	08011ef5 	.word	0x08011ef5
 800df88:	08011ef9 	.word	0x08011ef9
 800df8c:	08011efd 	.word	0x08011efd
 800df90:	08011f01 	.word	0x08011f01
 800df94:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 800df98:	9003      	str	r0, [sp, #12]
 800df9a:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800df9e:	9311      	str	r3, [sp, #68]	; 0x44
 800dfa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f280 81cd 	bge.w	800e342 <_vfprintf_r+0x8aa>
 800dfa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfaa:	ee08 3a10 	vmov	s16, r3
 800dfae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dfb4:	ee08 3a90 	vmov	s17, r3
 800dfb8:	232d      	movs	r3, #45	; 0x2d
 800dfba:	9318      	str	r3, [sp, #96]	; 0x60
 800dfbc:	9b08      	ldr	r3, [sp, #32]
 800dfbe:	2b41      	cmp	r3, #65	; 0x41
 800dfc0:	f040 81dd 	bne.w	800e37e <_vfprintf_r+0x8e6>
 800dfc4:	a81c      	add	r0, sp, #112	; 0x70
 800dfc6:	eeb0 0a48 	vmov.f32	s0, s16
 800dfca:	eef0 0a68 	vmov.f32	s1, s17
 800dfce:	f002 f8c5 	bl	801015c <frexp>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dfd8:	ec51 0b10 	vmov	r0, r1, d0
 800dfdc:	f7f2 fb14 	bl	8000608 <__aeabi_dmul>
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	460f      	mov	r7, r1
 800dfe8:	f7f2 fd76 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfec:	b108      	cbz	r0, 800dff2 <_vfprintf_r+0x55a>
 800dfee:	2301      	movs	r3, #1
 800dff0:	931c      	str	r3, [sp, #112]	; 0x70
 800dff2:	4ba5      	ldr	r3, [pc, #660]	; (800e288 <_vfprintf_r+0x7f0>)
 800dff4:	464d      	mov	r5, r9
 800dff6:	4aa5      	ldr	r2, [pc, #660]	; (800e28c <_vfprintf_r+0x7f4>)
 800dff8:	9907      	ldr	r1, [sp, #28]
 800dffa:	2961      	cmp	r1, #97	; 0x61
 800dffc:	bf18      	it	ne
 800dffe:	461a      	movne	r2, r3
 800e000:	9b04      	ldr	r3, [sp, #16]
 800e002:	3b01      	subs	r3, #1
 800e004:	9217      	str	r2, [sp, #92]	; 0x5c
 800e006:	9305      	str	r3, [sp, #20]
 800e008:	2200      	movs	r2, #0
 800e00a:	4ba1      	ldr	r3, [pc, #644]	; (800e290 <_vfprintf_r+0x7f8>)
 800e00c:	4630      	mov	r0, r6
 800e00e:	4639      	mov	r1, r7
 800e010:	f7f2 fafa 	bl	8000608 <__aeabi_dmul>
 800e014:	460f      	mov	r7, r1
 800e016:	4606      	mov	r6, r0
 800e018:	f7f2 fda6 	bl	8000b68 <__aeabi_d2iz>
 800e01c:	9019      	str	r0, [sp, #100]	; 0x64
 800e01e:	f7f2 fa89 	bl	8000534 <__aeabi_i2d>
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
 800e026:	4630      	mov	r0, r6
 800e028:	4639      	mov	r1, r7
 800e02a:	f7f2 f935 	bl	8000298 <__aeabi_dsub>
 800e02e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e032:	4606      	mov	r6, r0
 800e034:	460f      	mov	r7, r1
 800e036:	5c9b      	ldrb	r3, [r3, r2]
 800e038:	f805 3b01 	strb.w	r3, [r5], #1
 800e03c:	9b05      	ldr	r3, [sp, #20]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	9309      	str	r3, [sp, #36]	; 0x24
 800e042:	d007      	beq.n	800e054 <_vfprintf_r+0x5bc>
 800e044:	3b01      	subs	r3, #1
 800e046:	2200      	movs	r2, #0
 800e048:	9305      	str	r3, [sp, #20]
 800e04a:	2300      	movs	r3, #0
 800e04c:	f7f2 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 800e050:	2800      	cmp	r0, #0
 800e052:	d0d9      	beq.n	800e008 <_vfprintf_r+0x570>
 800e054:	2200      	movs	r2, #0
 800e056:	4b8f      	ldr	r3, [pc, #572]	; (800e294 <_vfprintf_r+0x7fc>)
 800e058:	4630      	mov	r0, r6
 800e05a:	4639      	mov	r1, r7
 800e05c:	f7f2 fd64 	bl	8000b28 <__aeabi_dcmpgt>
 800e060:	b960      	cbnz	r0, 800e07c <_vfprintf_r+0x5e4>
 800e062:	2200      	movs	r2, #0
 800e064:	4b8b      	ldr	r3, [pc, #556]	; (800e294 <_vfprintf_r+0x7fc>)
 800e066:	4630      	mov	r0, r6
 800e068:	4639      	mov	r1, r7
 800e06a:	f7f2 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800e06e:	2800      	cmp	r0, #0
 800e070:	f000 8180 	beq.w	800e374 <_vfprintf_r+0x8dc>
 800e074:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e076:	07da      	lsls	r2, r3, #31
 800e078:	f140 817c 	bpl.w	800e374 <_vfprintf_r+0x8dc>
 800e07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e07e:	2030      	movs	r0, #48	; 0x30
 800e080:	9520      	str	r5, [sp, #128]	; 0x80
 800e082:	7bd9      	ldrb	r1, [r3, #15]
 800e084:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e086:	1e53      	subs	r3, r2, #1
 800e088:	9320      	str	r3, [sp, #128]	; 0x80
 800e08a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800e08e:	428b      	cmp	r3, r1
 800e090:	f000 815f 	beq.w	800e352 <_vfprintf_r+0x8ba>
 800e094:	2b39      	cmp	r3, #57	; 0x39
 800e096:	bf0b      	itete	eq
 800e098:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800e09a:	3301      	addne	r3, #1
 800e09c:	7a9b      	ldrbeq	r3, [r3, #10]
 800e09e:	b2db      	uxtbne	r3, r3
 800e0a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e0a4:	eba5 0309 	sub.w	r3, r5, r9
 800e0a8:	9305      	str	r3, [sp, #20]
 800e0aa:	9b08      	ldr	r3, [sp, #32]
 800e0ac:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800e0ae:	2b47      	cmp	r3, #71	; 0x47
 800e0b0:	f040 81af 	bne.w	800e412 <_vfprintf_r+0x97a>
 800e0b4:	1ceb      	adds	r3, r5, #3
 800e0b6:	db03      	blt.n	800e0c0 <_vfprintf_r+0x628>
 800e0b8:	9b04      	ldr	r3, [sp, #16]
 800e0ba:	42ab      	cmp	r3, r5
 800e0bc:	f280 81cf 	bge.w	800e45e <_vfprintf_r+0x9c6>
 800e0c0:	9b07      	ldr	r3, [sp, #28]
 800e0c2:	3b02      	subs	r3, #2
 800e0c4:	9307      	str	r3, [sp, #28]
 800e0c6:	9907      	ldr	r1, [sp, #28]
 800e0c8:	1e6b      	subs	r3, r5, #1
 800e0ca:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e0ce:	f021 0120 	bic.w	r1, r1, #32
 800e0d2:	931c      	str	r3, [sp, #112]	; 0x70
 800e0d4:	2941      	cmp	r1, #65	; 0x41
 800e0d6:	bf05      	ittet	eq
 800e0d8:	320f      	addeq	r2, #15
 800e0da:	2101      	moveq	r1, #1
 800e0dc:	2100      	movne	r1, #0
 800e0de:	b2d2      	uxtbeq	r2, r2
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	bfb8      	it	lt
 800e0e4:	f1c5 0301 	rsblt	r3, r5, #1
 800e0e8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800e0ec:	bfb4      	ite	lt
 800e0ee:	222d      	movlt	r2, #45	; 0x2d
 800e0f0:	222b      	movge	r2, #43	; 0x2b
 800e0f2:	2b09      	cmp	r3, #9
 800e0f4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800e0f8:	f340 81a4 	ble.w	800e444 <_vfprintf_r+0x9ac>
 800e0fc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800e100:	260a      	movs	r6, #10
 800e102:	4602      	mov	r2, r0
 800e104:	3801      	subs	r0, #1
 800e106:	fb93 f5f6 	sdiv	r5, r3, r6
 800e10a:	fb06 3115 	mls	r1, r6, r5, r3
 800e10e:	3130      	adds	r1, #48	; 0x30
 800e110:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e114:	4619      	mov	r1, r3
 800e116:	462b      	mov	r3, r5
 800e118:	2963      	cmp	r1, #99	; 0x63
 800e11a:	dcf2      	bgt.n	800e102 <_vfprintf_r+0x66a>
 800e11c:	3330      	adds	r3, #48	; 0x30
 800e11e:	1e91      	subs	r1, r2, #2
 800e120:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800e124:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e128:	460b      	mov	r3, r1
 800e12a:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800e12e:	4283      	cmp	r3, r0
 800e130:	f0c0 8183 	bcc.w	800e43a <_vfprintf_r+0x9a2>
 800e134:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800e138:	1a9b      	subs	r3, r3, r2
 800e13a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800e13e:	4281      	cmp	r1, r0
 800e140:	bf88      	it	hi
 800e142:	2300      	movhi	r3, #0
 800e144:	441a      	add	r2, r3
 800e146:	ab1e      	add	r3, sp, #120	; 0x78
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	9a05      	ldr	r2, [sp, #20]
 800e14c:	9315      	str	r3, [sp, #84]	; 0x54
 800e14e:	2a01      	cmp	r2, #1
 800e150:	4413      	add	r3, r2
 800e152:	9304      	str	r3, [sp, #16]
 800e154:	dc02      	bgt.n	800e15c <_vfprintf_r+0x6c4>
 800e156:	f018 0f01 	tst.w	r8, #1
 800e15a:	d003      	beq.n	800e164 <_vfprintf_r+0x6cc>
 800e15c:	9b04      	ldr	r3, [sp, #16]
 800e15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e160:	4413      	add	r3, r2
 800e162:	9304      	str	r3, [sp, #16]
 800e164:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800e168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e16c:	9311      	str	r3, [sp, #68]	; 0x44
 800e16e:	2300      	movs	r3, #0
 800e170:	461d      	mov	r5, r3
 800e172:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e176:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e178:	b113      	cbz	r3, 800e180 <_vfprintf_r+0x6e8>
 800e17a:	232d      	movs	r3, #45	; 0x2d
 800e17c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e180:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800e184:	2600      	movs	r6, #0
 800e186:	9b04      	ldr	r3, [sp, #16]
 800e188:	42b3      	cmp	r3, r6
 800e18a:	bfb8      	it	lt
 800e18c:	4633      	movlt	r3, r6
 800e18e:	9311      	str	r3, [sp, #68]	; 0x44
 800e190:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800e194:	b113      	cbz	r3, 800e19c <_vfprintf_r+0x704>
 800e196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e198:	3301      	adds	r3, #1
 800e19a:	9311      	str	r3, [sp, #68]	; 0x44
 800e19c:	f018 0302 	ands.w	r3, r8, #2
 800e1a0:	9317      	str	r3, [sp, #92]	; 0x5c
 800e1a2:	bf1e      	ittt	ne
 800e1a4:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800e1a6:	3302      	addne	r3, #2
 800e1a8:	9311      	strne	r3, [sp, #68]	; 0x44
 800e1aa:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800e1ae:	9318      	str	r3, [sp, #96]	; 0x60
 800e1b0:	d11f      	bne.n	800e1f2 <_vfprintf_r+0x75a>
 800e1b2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800e1b6:	1a9f      	subs	r7, r3, r2
 800e1b8:	2f00      	cmp	r7, #0
 800e1ba:	dd1a      	ble.n	800e1f2 <_vfprintf_r+0x75a>
 800e1bc:	4836      	ldr	r0, [pc, #216]	; (800e298 <_vfprintf_r+0x800>)
 800e1be:	2f10      	cmp	r7, #16
 800e1c0:	f104 0108 	add.w	r1, r4, #8
 800e1c4:	6020      	str	r0, [r4, #0]
 800e1c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800e1ca:	f103 0301 	add.w	r3, r3, #1
 800e1ce:	f300 82e9 	bgt.w	800e7a4 <_vfprintf_r+0xd0c>
 800e1d2:	6067      	str	r7, [r4, #4]
 800e1d4:	2b07      	cmp	r3, #7
 800e1d6:	4417      	add	r7, r2
 800e1d8:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800e1dc:	f340 82f5 	ble.w	800e7ca <_vfprintf_r+0xd32>
 800e1e0:	aa22      	add	r2, sp, #136	; 0x88
 800e1e2:	4659      	mov	r1, fp
 800e1e4:	4650      	mov	r0, sl
 800e1e6:	f000 fec5 	bl	800ef74 <__sprint_r>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	f040 861d 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e1f0:	ac25      	add	r4, sp, #148	; 0x94
 800e1f2:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800e1f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e1f8:	b16a      	cbz	r2, 800e216 <_vfprintf_r+0x77e>
 800e1fa:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800e1fe:	6022      	str	r2, [r4, #0]
 800e200:	2201      	movs	r2, #1
 800e202:	4413      	add	r3, r2
 800e204:	6062      	str	r2, [r4, #4]
 800e206:	9324      	str	r3, [sp, #144]	; 0x90
 800e208:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e20a:	4413      	add	r3, r2
 800e20c:	2b07      	cmp	r3, #7
 800e20e:	9323      	str	r3, [sp, #140]	; 0x8c
 800e210:	f300 82dd 	bgt.w	800e7ce <_vfprintf_r+0xd36>
 800e214:	3408      	adds	r4, #8
 800e216:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e218:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e21a:	b162      	cbz	r2, 800e236 <_vfprintf_r+0x79e>
 800e21c:	aa1b      	add	r2, sp, #108	; 0x6c
 800e21e:	6022      	str	r2, [r4, #0]
 800e220:	2202      	movs	r2, #2
 800e222:	4413      	add	r3, r2
 800e224:	6062      	str	r2, [r4, #4]
 800e226:	9324      	str	r3, [sp, #144]	; 0x90
 800e228:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e22a:	3301      	adds	r3, #1
 800e22c:	2b07      	cmp	r3, #7
 800e22e:	9323      	str	r3, [sp, #140]	; 0x8c
 800e230:	f300 82d7 	bgt.w	800e7e2 <_vfprintf_r+0xd4a>
 800e234:	3408      	adds	r4, #8
 800e236:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e238:	2b80      	cmp	r3, #128	; 0x80
 800e23a:	d11f      	bne.n	800e27c <_vfprintf_r+0x7e4>
 800e23c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800e240:	1a9f      	subs	r7, r3, r2
 800e242:	2f00      	cmp	r7, #0
 800e244:	dd1a      	ble.n	800e27c <_vfprintf_r+0x7e4>
 800e246:	4815      	ldr	r0, [pc, #84]	; (800e29c <_vfprintf_r+0x804>)
 800e248:	2f10      	cmp	r7, #16
 800e24a:	f104 0108 	add.w	r1, r4, #8
 800e24e:	6020      	str	r0, [r4, #0]
 800e250:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800e254:	f103 0301 	add.w	r3, r3, #1
 800e258:	f300 82cd 	bgt.w	800e7f6 <_vfprintf_r+0xd5e>
 800e25c:	6067      	str	r7, [r4, #4]
 800e25e:	2b07      	cmp	r3, #7
 800e260:	4417      	add	r7, r2
 800e262:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800e266:	f340 82d9 	ble.w	800e81c <_vfprintf_r+0xd84>
 800e26a:	aa22      	add	r2, sp, #136	; 0x88
 800e26c:	4659      	mov	r1, fp
 800e26e:	4650      	mov	r0, sl
 800e270:	f000 fe80 	bl	800ef74 <__sprint_r>
 800e274:	2800      	cmp	r0, #0
 800e276:	f040 85d8 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e27a:	ac25      	add	r4, sp, #148	; 0x94
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	1af6      	subs	r6, r6, r3
 800e280:	2e00      	cmp	r6, #0
 800e282:	dd27      	ble.n	800e2d4 <_vfprintf_r+0x83c>
 800e284:	4f05      	ldr	r7, [pc, #20]	; (800e29c <_vfprintf_r+0x804>)
 800e286:	e00b      	b.n	800e2a0 <_vfprintf_r+0x808>
 800e288:	08011f16 	.word	0x08011f16
 800e28c:	08011f05 	.word	0x08011f05
 800e290:	40300000 	.word	0x40300000
 800e294:	3fe00000 	.word	0x3fe00000
 800e298:	08011f29 	.word	0x08011f29
 800e29c:	08011f39 	.word	0x08011f39
 800e2a0:	2e10      	cmp	r6, #16
 800e2a2:	f104 0108 	add.w	r1, r4, #8
 800e2a6:	6027      	str	r7, [r4, #0]
 800e2a8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800e2ac:	f103 0301 	add.w	r3, r3, #1
 800e2b0:	f300 82b6 	bgt.w	800e820 <_vfprintf_r+0xd88>
 800e2b4:	6066      	str	r6, [r4, #4]
 800e2b6:	2b07      	cmp	r3, #7
 800e2b8:	4416      	add	r6, r2
 800e2ba:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800e2be:	f340 82c2 	ble.w	800e846 <_vfprintf_r+0xdae>
 800e2c2:	aa22      	add	r2, sp, #136	; 0x88
 800e2c4:	4659      	mov	r1, fp
 800e2c6:	4650      	mov	r0, sl
 800e2c8:	f000 fe54 	bl	800ef74 <__sprint_r>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f040 85ac 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e2d2:	ac25      	add	r4, sp, #148	; 0x94
 800e2d4:	f418 7f80 	tst.w	r8, #256	; 0x100
 800e2d8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800e2da:	f040 82bb 	bne.w	800e854 <_vfprintf_r+0xdbc>
 800e2de:	9b04      	ldr	r3, [sp, #16]
 800e2e0:	f8c4 9000 	str.w	r9, [r4]
 800e2e4:	441e      	add	r6, r3
 800e2e6:	6063      	str	r3, [r4, #4]
 800e2e8:	9624      	str	r6, [sp, #144]	; 0x90
 800e2ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	2b07      	cmp	r3, #7
 800e2f0:	9323      	str	r3, [sp, #140]	; 0x8c
 800e2f2:	f300 82f4 	bgt.w	800e8de <_vfprintf_r+0xe46>
 800e2f6:	3408      	adds	r4, #8
 800e2f8:	f018 0f04 	tst.w	r8, #4
 800e2fc:	f040 8577 	bne.w	800edee <_vfprintf_r+0x1356>
 800e300:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e302:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800e306:	428a      	cmp	r2, r1
 800e308:	bfac      	ite	ge
 800e30a:	189b      	addge	r3, r3, r2
 800e30c:	185b      	addlt	r3, r3, r1
 800e30e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e310:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e312:	b13b      	cbz	r3, 800e324 <_vfprintf_r+0x88c>
 800e314:	aa22      	add	r2, sp, #136	; 0x88
 800e316:	4659      	mov	r1, fp
 800e318:	4650      	mov	r0, sl
 800e31a:	f000 fe2b 	bl	800ef74 <__sprint_r>
 800e31e:	2800      	cmp	r0, #0
 800e320:	f040 8583 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e324:	2300      	movs	r3, #0
 800e326:	9323      	str	r3, [sp, #140]	; 0x8c
 800e328:	9b03      	ldr	r3, [sp, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f040 8599 	bne.w	800ee62 <_vfprintf_r+0x13ca>
 800e330:	ac25      	add	r4, sp, #148	; 0x94
 800e332:	e0ee      	b.n	800e512 <_vfprintf_r+0xa7a>
 800e334:	9003      	str	r0, [sp, #12]
 800e336:	e630      	b.n	800df9a <_vfprintf_r+0x502>
 800e338:	2306      	movs	r3, #6
 800e33a:	9003      	str	r0, [sp, #12]
 800e33c:	e61d      	b.n	800df7a <_vfprintf_r+0x4e2>
 800e33e:	9003      	str	r0, [sp, #12]
 800e340:	e62b      	b.n	800df9a <_vfprintf_r+0x502>
 800e342:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800e346:	2300      	movs	r3, #0
 800e348:	eeb0 8a47 	vmov.f32	s16, s14
 800e34c:	eef0 8a67 	vmov.f32	s17, s15
 800e350:	e633      	b.n	800dfba <_vfprintf_r+0x522>
 800e352:	f802 0c01 	strb.w	r0, [r2, #-1]
 800e356:	e695      	b.n	800e084 <_vfprintf_r+0x5ec>
 800e358:	f803 0b01 	strb.w	r0, [r3], #1
 800e35c:	1aca      	subs	r2, r1, r3
 800e35e:	2a00      	cmp	r2, #0
 800e360:	dafa      	bge.n	800e358 <_vfprintf_r+0x8c0>
 800e362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e366:	3201      	adds	r2, #1
 800e368:	f103 0301 	add.w	r3, r3, #1
 800e36c:	bfb8      	it	lt
 800e36e:	2300      	movlt	r3, #0
 800e370:	441d      	add	r5, r3
 800e372:	e697      	b.n	800e0a4 <_vfprintf_r+0x60c>
 800e374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e376:	462b      	mov	r3, r5
 800e378:	2030      	movs	r0, #48	; 0x30
 800e37a:	18a9      	adds	r1, r5, r2
 800e37c:	e7ee      	b.n	800e35c <_vfprintf_r+0x8c4>
 800e37e:	9b08      	ldr	r3, [sp, #32]
 800e380:	2b46      	cmp	r3, #70	; 0x46
 800e382:	d005      	beq.n	800e390 <_vfprintf_r+0x8f8>
 800e384:	2b45      	cmp	r3, #69	; 0x45
 800e386:	d11d      	bne.n	800e3c4 <_vfprintf_r+0x92c>
 800e388:	9b04      	ldr	r3, [sp, #16]
 800e38a:	1c5d      	adds	r5, r3, #1
 800e38c:	2102      	movs	r1, #2
 800e38e:	e001      	b.n	800e394 <_vfprintf_r+0x8fc>
 800e390:	9d04      	ldr	r5, [sp, #16]
 800e392:	2103      	movs	r1, #3
 800e394:	ab20      	add	r3, sp, #128	; 0x80
 800e396:	eeb0 0a48 	vmov.f32	s0, s16
 800e39a:	eef0 0a68 	vmov.f32	s1, s17
 800e39e:	462a      	mov	r2, r5
 800e3a0:	4650      	mov	r0, sl
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	ab1d      	add	r3, sp, #116	; 0x74
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	ab1c      	add	r3, sp, #112	; 0x70
 800e3aa:	f001 ffe1 	bl	8010370 <_dtoa_r>
 800e3ae:	9b08      	ldr	r3, [sp, #32]
 800e3b0:	4681      	mov	r9, r0
 800e3b2:	2b47      	cmp	r3, #71	; 0x47
 800e3b4:	d108      	bne.n	800e3c8 <_vfprintf_r+0x930>
 800e3b6:	f018 0f01 	tst.w	r8, #1
 800e3ba:	d105      	bne.n	800e3c8 <_vfprintf_r+0x930>
 800e3bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e3be:	eba3 0309 	sub.w	r3, r3, r9
 800e3c2:	e671      	b.n	800e0a8 <_vfprintf_r+0x610>
 800e3c4:	9d04      	ldr	r5, [sp, #16]
 800e3c6:	e7e1      	b.n	800e38c <_vfprintf_r+0x8f4>
 800e3c8:	9b08      	ldr	r3, [sp, #32]
 800e3ca:	eb09 0605 	add.w	r6, r9, r5
 800e3ce:	2b46      	cmp	r3, #70	; 0x46
 800e3d0:	d10f      	bne.n	800e3f2 <_vfprintf_r+0x95a>
 800e3d2:	f899 3000 	ldrb.w	r3, [r9]
 800e3d6:	2b30      	cmp	r3, #48	; 0x30
 800e3d8:	d109      	bne.n	800e3ee <_vfprintf_r+0x956>
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2300      	movs	r3, #0
 800e3de:	ec51 0b18 	vmov	r0, r1, d8
 800e3e2:	f7f2 fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3e6:	b910      	cbnz	r0, 800e3ee <_vfprintf_r+0x956>
 800e3e8:	f1c5 0501 	rsb	r5, r5, #1
 800e3ec:	951c      	str	r5, [sp, #112]	; 0x70
 800e3ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e3f0:	441e      	add	r6, r3
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	ec51 0b18 	vmov	r0, r1, d8
 800e3fa:	f7f2 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3fe:	b100      	cbz	r0, 800e402 <_vfprintf_r+0x96a>
 800e400:	9620      	str	r6, [sp, #128]	; 0x80
 800e402:	2230      	movs	r2, #48	; 0x30
 800e404:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e406:	429e      	cmp	r6, r3
 800e408:	d9d8      	bls.n	800e3bc <_vfprintf_r+0x924>
 800e40a:	1c59      	adds	r1, r3, #1
 800e40c:	9120      	str	r1, [sp, #128]	; 0x80
 800e40e:	701a      	strb	r2, [r3, #0]
 800e410:	e7f8      	b.n	800e404 <_vfprintf_r+0x96c>
 800e412:	9b08      	ldr	r3, [sp, #32]
 800e414:	2b46      	cmp	r3, #70	; 0x46
 800e416:	f47f ae56 	bne.w	800e0c6 <_vfprintf_r+0x62e>
 800e41a:	f008 0301 	and.w	r3, r8, #1
 800e41e:	9a04      	ldr	r2, [sp, #16]
 800e420:	2d00      	cmp	r5, #0
 800e422:	ea43 0302 	orr.w	r3, r3, r2
 800e426:	dd29      	ble.n	800e47c <_vfprintf_r+0x9e4>
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d034      	beq.n	800e496 <_vfprintf_r+0x9fe>
 800e42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e42e:	18eb      	adds	r3, r5, r3
 800e430:	441a      	add	r2, r3
 800e432:	9204      	str	r2, [sp, #16]
 800e434:	2366      	movs	r3, #102	; 0x66
 800e436:	9307      	str	r3, [sp, #28]
 800e438:	e033      	b.n	800e4a2 <_vfprintf_r+0xa0a>
 800e43a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e43e:	f805 6f01 	strb.w	r6, [r5, #1]!
 800e442:	e674      	b.n	800e12e <_vfprintf_r+0x696>
 800e444:	b941      	cbnz	r1, 800e458 <_vfprintf_r+0x9c0>
 800e446:	2230      	movs	r2, #48	; 0x30
 800e448:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800e44c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800e450:	3330      	adds	r3, #48	; 0x30
 800e452:	f802 3b01 	strb.w	r3, [r2], #1
 800e456:	e676      	b.n	800e146 <_vfprintf_r+0x6ae>
 800e458:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800e45c:	e7f8      	b.n	800e450 <_vfprintf_r+0x9b8>
 800e45e:	9b05      	ldr	r3, [sp, #20]
 800e460:	42ab      	cmp	r3, r5
 800e462:	dd10      	ble.n	800e486 <_vfprintf_r+0x9ee>
 800e464:	9b05      	ldr	r3, [sp, #20]
 800e466:	2d00      	cmp	r5, #0
 800e468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e46a:	4413      	add	r3, r2
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	dc10      	bgt.n	800e492 <_vfprintf_r+0x9fa>
 800e470:	9a04      	ldr	r2, [sp, #16]
 800e472:	f1c5 0301 	rsb	r3, r5, #1
 800e476:	441a      	add	r2, r3
 800e478:	9204      	str	r2, [sp, #16]
 800e47a:	e00a      	b.n	800e492 <_vfprintf_r+0x9fa>
 800e47c:	b16b      	cbz	r3, 800e49a <_vfprintf_r+0xa02>
 800e47e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e480:	9a04      	ldr	r2, [sp, #16]
 800e482:	3301      	adds	r3, #1
 800e484:	e7d4      	b.n	800e430 <_vfprintf_r+0x998>
 800e486:	f018 0f01 	tst.w	r8, #1
 800e48a:	d021      	beq.n	800e4d0 <_vfprintf_r+0xa38>
 800e48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e48e:	18eb      	adds	r3, r5, r3
 800e490:	9304      	str	r3, [sp, #16]
 800e492:	2367      	movs	r3, #103	; 0x67
 800e494:	e7cf      	b.n	800e436 <_vfprintf_r+0x99e>
 800e496:	9504      	str	r5, [sp, #16]
 800e498:	e7cc      	b.n	800e434 <_vfprintf_r+0x99c>
 800e49a:	2366      	movs	r3, #102	; 0x66
 800e49c:	9307      	str	r3, [sp, #28]
 800e49e:	2301      	movs	r3, #1
 800e4a0:	9304      	str	r3, [sp, #16]
 800e4a2:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800e4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a8:	d025      	beq.n	800e4f6 <_vfprintf_r+0xa5e>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2d00      	cmp	r5, #0
 800e4ae:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800e4b2:	f77f ae60 	ble.w	800e176 <_vfprintf_r+0x6de>
 800e4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2bff      	cmp	r3, #255	; 0xff
 800e4bc:	d10a      	bne.n	800e4d4 <_vfprintf_r+0xa3c>
 800e4be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e4c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e4c4:	4413      	add	r3, r2
 800e4c6:	9a04      	ldr	r2, [sp, #16]
 800e4c8:	fb01 2303 	mla	r3, r1, r3, r2
 800e4cc:	9304      	str	r3, [sp, #16]
 800e4ce:	e652      	b.n	800e176 <_vfprintf_r+0x6de>
 800e4d0:	9504      	str	r5, [sp, #16]
 800e4d2:	e7de      	b.n	800e492 <_vfprintf_r+0x9fa>
 800e4d4:	42ab      	cmp	r3, r5
 800e4d6:	daf2      	bge.n	800e4be <_vfprintf_r+0xa26>
 800e4d8:	1aed      	subs	r5, r5, r3
 800e4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4dc:	785b      	ldrb	r3, [r3, #1]
 800e4de:	b133      	cbz	r3, 800e4ee <_vfprintf_r+0xa56>
 800e4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e4ec:	e7e3      	b.n	800e4b6 <_vfprintf_r+0xa1e>
 800e4ee:	9b08      	ldr	r3, [sp, #32]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	9308      	str	r3, [sp, #32]
 800e4f4:	e7df      	b.n	800e4b6 <_vfprintf_r+0xa1e>
 800e4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f8:	9308      	str	r3, [sp, #32]
 800e4fa:	e63c      	b.n	800e176 <_vfprintf_r+0x6de>
 800e4fc:	1d2b      	adds	r3, r5, #4
 800e4fe:	f018 0f20 	tst.w	r8, #32
 800e502:	9306      	str	r3, [sp, #24]
 800e504:	d00a      	beq.n	800e51c <_vfprintf_r+0xa84>
 800e506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	17d2      	asrs	r2, r2, #31
 800e50c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e50e:	e9c3 1200 	strd	r1, r2, [r3]
 800e512:	9d06      	ldr	r5, [sp, #24]
 800e514:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e518:	f7ff bb44 	b.w	800dba4 <_vfprintf_r+0x10c>
 800e51c:	f018 0f10 	tst.w	r8, #16
 800e520:	d003      	beq.n	800e52a <_vfprintf_r+0xa92>
 800e522:	682b      	ldr	r3, [r5, #0]
 800e524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	e7f3      	b.n	800e512 <_vfprintf_r+0xa7a>
 800e52a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800e52e:	d003      	beq.n	800e538 <_vfprintf_r+0xaa0>
 800e530:	682b      	ldr	r3, [r5, #0]
 800e532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e534:	801a      	strh	r2, [r3, #0]
 800e536:	e7ec      	b.n	800e512 <_vfprintf_r+0xa7a>
 800e538:	f418 7f00 	tst.w	r8, #512	; 0x200
 800e53c:	d0f1      	beq.n	800e522 <_vfprintf_r+0xa8a>
 800e53e:	682b      	ldr	r3, [r5, #0]
 800e540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e542:	701a      	strb	r2, [r3, #0]
 800e544:	e7e5      	b.n	800e512 <_vfprintf_r+0xa7a>
 800e546:	f048 0810 	orr.w	r8, r8, #16
 800e54a:	f018 0320 	ands.w	r3, r8, #32
 800e54e:	d01f      	beq.n	800e590 <_vfprintf_r+0xaf8>
 800e550:	3507      	adds	r5, #7
 800e552:	f025 0307 	bic.w	r3, r5, #7
 800e556:	461a      	mov	r2, r3
 800e558:	685e      	ldr	r6, [r3, #4]
 800e55a:	f852 5b08 	ldr.w	r5, [r2], #8
 800e55e:	9206      	str	r2, [sp, #24]
 800e560:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800e564:	2300      	movs	r3, #0
 800e566:	2200      	movs	r2, #0
 800e568:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800e56c:	9a04      	ldr	r2, [sp, #16]
 800e56e:	3201      	adds	r2, #1
 800e570:	f000 848c 	beq.w	800ee8c <_vfprintf_r+0x13f4>
 800e574:	ea55 0206 	orrs.w	r2, r5, r6
 800e578:	f028 0780 	bic.w	r7, r8, #128	; 0x80
 800e57c:	f040 848b 	bne.w	800ee96 <_vfprintf_r+0x13fe>
 800e580:	9a04      	ldr	r2, [sp, #16]
 800e582:	2a00      	cmp	r2, #0
 800e584:	f000 80f4 	beq.w	800e770 <_vfprintf_r+0xcd8>
 800e588:	2b01      	cmp	r3, #1
 800e58a:	f040 8487 	bne.w	800ee9c <_vfprintf_r+0x1404>
 800e58e:	e09e      	b.n	800e6ce <_vfprintf_r+0xc36>
 800e590:	462a      	mov	r2, r5
 800e592:	f018 0610 	ands.w	r6, r8, #16
 800e596:	f852 5b04 	ldr.w	r5, [r2], #4
 800e59a:	9206      	str	r2, [sp, #24]
 800e59c:	d001      	beq.n	800e5a2 <_vfprintf_r+0xb0a>
 800e59e:	461e      	mov	r6, r3
 800e5a0:	e7de      	b.n	800e560 <_vfprintf_r+0xac8>
 800e5a2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800e5a6:	d001      	beq.n	800e5ac <_vfprintf_r+0xb14>
 800e5a8:	b2ad      	uxth	r5, r5
 800e5aa:	e7d9      	b.n	800e560 <_vfprintf_r+0xac8>
 800e5ac:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 800e5b0:	d0d6      	beq.n	800e560 <_vfprintf_r+0xac8>
 800e5b2:	b2ed      	uxtb	r5, r5
 800e5b4:	e7f3      	b.n	800e59e <_vfprintf_r+0xb06>
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	2278      	movs	r2, #120	; 0x78
 800e5ba:	2600      	movs	r6, #0
 800e5bc:	f048 0802 	orr.w	r8, r8, #2
 800e5c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5c4:	9207      	str	r2, [sp, #28]
 800e5c6:	9306      	str	r3, [sp, #24]
 800e5c8:	f647 0330 	movw	r3, #30768	; 0x7830
 800e5cc:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800e5d0:	4b9e      	ldr	r3, [pc, #632]	; (800e84c <_vfprintf_r+0xdb4>)
 800e5d2:	9316      	str	r3, [sp, #88]	; 0x58
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e7c6      	b.n	800e566 <_vfprintf_r+0xace>
 800e5d8:	462b      	mov	r3, r5
 800e5da:	2500      	movs	r5, #0
 800e5dc:	f853 9b04 	ldr.w	r9, [r3], #4
 800e5e0:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800e5e4:	9306      	str	r3, [sp, #24]
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	1c5e      	adds	r6, r3, #1
 800e5ea:	d010      	beq.n	800e60e <_vfprintf_r+0xb76>
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	4648      	mov	r0, r9
 800e5f2:	f001 fda5 	bl	8010140 <memchr>
 800e5f6:	9003      	str	r0, [sp, #12]
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	f000 80d0 	beq.w	800e79e <_vfprintf_r+0xd06>
 800e5fe:	eba0 0309 	sub.w	r3, r0, r9
 800e602:	462e      	mov	r6, r5
 800e604:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800e608:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800e60c:	e5bb      	b.n	800e186 <_vfprintf_r+0x6ee>
 800e60e:	4648      	mov	r0, r9
 800e610:	f7f1 fe36 	bl	8000280 <strlen>
 800e614:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800e618:	e458      	b.n	800decc <_vfprintf_r+0x434>
 800e61a:	f048 0810 	orr.w	r8, r8, #16
 800e61e:	f018 0320 	ands.w	r3, r8, #32
 800e622:	d009      	beq.n	800e638 <_vfprintf_r+0xba0>
 800e624:	3507      	adds	r5, #7
 800e626:	f025 0307 	bic.w	r3, r5, #7
 800e62a:	461a      	mov	r2, r3
 800e62c:	685e      	ldr	r6, [r3, #4]
 800e62e:	f852 5b08 	ldr.w	r5, [r2], #8
 800e632:	9206      	str	r2, [sp, #24]
 800e634:	2301      	movs	r3, #1
 800e636:	e796      	b.n	800e566 <_vfprintf_r+0xace>
 800e638:	462a      	mov	r2, r5
 800e63a:	f018 0610 	ands.w	r6, r8, #16
 800e63e:	f852 5b04 	ldr.w	r5, [r2], #4
 800e642:	9206      	str	r2, [sp, #24]
 800e644:	d001      	beq.n	800e64a <_vfprintf_r+0xbb2>
 800e646:	461e      	mov	r6, r3
 800e648:	e7f4      	b.n	800e634 <_vfprintf_r+0xb9c>
 800e64a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800e64e:	d001      	beq.n	800e654 <_vfprintf_r+0xbbc>
 800e650:	b2ad      	uxth	r5, r5
 800e652:	e7ef      	b.n	800e634 <_vfprintf_r+0xb9c>
 800e654:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 800e658:	d0ec      	beq.n	800e634 <_vfprintf_r+0xb9c>
 800e65a:	b2ed      	uxtb	r5, r5
 800e65c:	e7f3      	b.n	800e646 <_vfprintf_r+0xbae>
 800e65e:	4b7c      	ldr	r3, [pc, #496]	; (800e850 <_vfprintf_r+0xdb8>)
 800e660:	9316      	str	r3, [sp, #88]	; 0x58
 800e662:	f018 0320 	ands.w	r3, r8, #32
 800e666:	d01b      	beq.n	800e6a0 <_vfprintf_r+0xc08>
 800e668:	3507      	adds	r5, #7
 800e66a:	f025 0307 	bic.w	r3, r5, #7
 800e66e:	461a      	mov	r2, r3
 800e670:	685e      	ldr	r6, [r3, #4]
 800e672:	f852 5b08 	ldr.w	r5, [r2], #8
 800e676:	9206      	str	r2, [sp, #24]
 800e678:	f018 0f01 	tst.w	r8, #1
 800e67c:	d00a      	beq.n	800e694 <_vfprintf_r+0xbfc>
 800e67e:	ea55 0306 	orrs.w	r3, r5, r6
 800e682:	d007      	beq.n	800e694 <_vfprintf_r+0xbfc>
 800e684:	2330      	movs	r3, #48	; 0x30
 800e686:	f048 0802 	orr.w	r8, r8, #2
 800e68a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800e68e:	9b07      	ldr	r3, [sp, #28]
 800e690:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800e694:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800e698:	2302      	movs	r3, #2
 800e69a:	e764      	b.n	800e566 <_vfprintf_r+0xace>
 800e69c:	4b6b      	ldr	r3, [pc, #428]	; (800e84c <_vfprintf_r+0xdb4>)
 800e69e:	e7df      	b.n	800e660 <_vfprintf_r+0xbc8>
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	f018 0610 	ands.w	r6, r8, #16
 800e6a6:	f852 5b04 	ldr.w	r5, [r2], #4
 800e6aa:	9206      	str	r2, [sp, #24]
 800e6ac:	d001      	beq.n	800e6b2 <_vfprintf_r+0xc1a>
 800e6ae:	461e      	mov	r6, r3
 800e6b0:	e7e2      	b.n	800e678 <_vfprintf_r+0xbe0>
 800e6b2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800e6b6:	d001      	beq.n	800e6bc <_vfprintf_r+0xc24>
 800e6b8:	b2ad      	uxth	r5, r5
 800e6ba:	e7dd      	b.n	800e678 <_vfprintf_r+0xbe0>
 800e6bc:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 800e6c0:	d0da      	beq.n	800e678 <_vfprintf_r+0xbe0>
 800e6c2:	b2ed      	uxtb	r5, r5
 800e6c4:	e7f3      	b.n	800e6ae <_vfprintf_r+0xc16>
 800e6c6:	2d0a      	cmp	r5, #10
 800e6c8:	f176 0300 	sbcs.w	r3, r6, #0
 800e6cc:	d205      	bcs.n	800e6da <_vfprintf_r+0xc42>
 800e6ce:	3530      	adds	r5, #48	; 0x30
 800e6d0:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800e6d4:	f20d 1937 	addw	r9, sp, #311	; 0x137
 800e6d8:	e3fb      	b.n	800eed2 <_vfprintf_r+0x143a>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 800e6e0:	9305      	str	r3, [sp, #20]
 800e6e2:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800e6e6:	9303      	str	r3, [sp, #12]
 800e6e8:	220a      	movs	r2, #10
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	4631      	mov	r1, r6
 800e6f0:	f7f2 fa62 	bl	8000bb8 <__aeabi_uldivmod>
 800e6f4:	9b05      	ldr	r3, [sp, #20]
 800e6f6:	3230      	adds	r2, #48	; 0x30
 800e6f8:	f108 39ff 	add.w	r9, r8, #4294967295
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	f808 2c01 	strb.w	r2, [r8, #-1]
 800e702:	9305      	str	r3, [sp, #20]
 800e704:	9b03      	ldr	r3, [sp, #12]
 800e706:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e70a:	b1d3      	cbz	r3, 800e742 <_vfprintf_r+0xcaa>
 800e70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70e:	9a05      	ldr	r2, [sp, #20]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d115      	bne.n	800e742 <_vfprintf_r+0xcaa>
 800e716:	2aff      	cmp	r2, #255	; 0xff
 800e718:	d013      	beq.n	800e742 <_vfprintf_r+0xcaa>
 800e71a:	2d0a      	cmp	r5, #10
 800e71c:	f176 0300 	sbcs.w	r3, r6, #0
 800e720:	d30f      	bcc.n	800e742 <_vfprintf_r+0xcaa>
 800e722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e724:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e726:	eba9 0903 	sub.w	r9, r9, r3
 800e72a:	461a      	mov	r2, r3
 800e72c:	4648      	mov	r0, r9
 800e72e:	f001 fcd6 	bl	80100de <strncpy>
 800e732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e734:	785b      	ldrb	r3, [r3, #1]
 800e736:	b11b      	cbz	r3, 800e740 <_vfprintf_r+0xca8>
 800e738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e73a:	3301      	adds	r3, #1
 800e73c:	930a      	str	r3, [sp, #40]	; 0x28
 800e73e:	2300      	movs	r3, #0
 800e740:	9305      	str	r3, [sp, #20]
 800e742:	2d0a      	cmp	r5, #10
 800e744:	f176 0600 	sbcs.w	r6, r6, #0
 800e748:	f0c0 83c3 	bcc.w	800eed2 <_vfprintf_r+0x143a>
 800e74c:	46c8      	mov	r8, r9
 800e74e:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 800e752:	e7c9      	b.n	800e6e8 <_vfprintf_r+0xc50>
 800e754:	f005 030f 	and.w	r3, r5, #15
 800e758:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e75a:	092d      	lsrs	r5, r5, #4
 800e75c:	5cd3      	ldrb	r3, [r2, r3]
 800e75e:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800e762:	0936      	lsrs	r6, r6, #4
 800e764:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800e768:	ea55 0306 	orrs.w	r3, r5, r6
 800e76c:	d1f2      	bne.n	800e754 <_vfprintf_r+0xcbc>
 800e76e:	e3b0      	b.n	800eed2 <_vfprintf_r+0x143a>
 800e770:	b933      	cbnz	r3, 800e780 <_vfprintf_r+0xce8>
 800e772:	f018 0f01 	tst.w	r8, #1
 800e776:	d003      	beq.n	800e780 <_vfprintf_r+0xce8>
 800e778:	2330      	movs	r3, #48	; 0x30
 800e77a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800e77e:	e7a9      	b.n	800e6d4 <_vfprintf_r+0xc3c>
 800e780:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800e784:	e3a5      	b.n	800eed2 <_vfprintf_r+0x143a>
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 8370 	beq.w	800ee6e <_vfprintf_r+0x13d6>
 800e78e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800e792:	2300      	movs	r3, #0
 800e794:	9506      	str	r5, [sp, #24]
 800e796:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800e79a:	f7ff bb26 	b.w	800ddea <_vfprintf_r+0x352>
 800e79e:	9e03      	ldr	r6, [sp, #12]
 800e7a0:	f7ff bb95 	b.w	800dece <_vfprintf_r+0x436>
 800e7a4:	2010      	movs	r0, #16
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	4402      	add	r2, r0
 800e7aa:	6060      	str	r0, [r4, #4]
 800e7ac:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800e7b0:	dd08      	ble.n	800e7c4 <_vfprintf_r+0xd2c>
 800e7b2:	aa22      	add	r2, sp, #136	; 0x88
 800e7b4:	4659      	mov	r1, fp
 800e7b6:	4650      	mov	r0, sl
 800e7b8:	f000 fbdc 	bl	800ef74 <__sprint_r>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	f040 8334 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e7c2:	a925      	add	r1, sp, #148	; 0x94
 800e7c4:	3f10      	subs	r7, #16
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	e4f8      	b.n	800e1bc <_vfprintf_r+0x724>
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	e511      	b.n	800e1f2 <_vfprintf_r+0x75a>
 800e7ce:	aa22      	add	r2, sp, #136	; 0x88
 800e7d0:	4659      	mov	r1, fp
 800e7d2:	4650      	mov	r0, sl
 800e7d4:	f000 fbce 	bl	800ef74 <__sprint_r>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	f040 8326 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e7de:	ac25      	add	r4, sp, #148	; 0x94
 800e7e0:	e519      	b.n	800e216 <_vfprintf_r+0x77e>
 800e7e2:	aa22      	add	r2, sp, #136	; 0x88
 800e7e4:	4659      	mov	r1, fp
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	f000 fbc4 	bl	800ef74 <__sprint_r>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f040 831c 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e7f2:	ac25      	add	r4, sp, #148	; 0x94
 800e7f4:	e51f      	b.n	800e236 <_vfprintf_r+0x79e>
 800e7f6:	2010      	movs	r0, #16
 800e7f8:	2b07      	cmp	r3, #7
 800e7fa:	4402      	add	r2, r0
 800e7fc:	6060      	str	r0, [r4, #4]
 800e7fe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800e802:	dd08      	ble.n	800e816 <_vfprintf_r+0xd7e>
 800e804:	aa22      	add	r2, sp, #136	; 0x88
 800e806:	4659      	mov	r1, fp
 800e808:	4650      	mov	r0, sl
 800e80a:	f000 fbb3 	bl	800ef74 <__sprint_r>
 800e80e:	2800      	cmp	r0, #0
 800e810:	f040 830b 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e814:	a925      	add	r1, sp, #148	; 0x94
 800e816:	3f10      	subs	r7, #16
 800e818:	460c      	mov	r4, r1
 800e81a:	e514      	b.n	800e246 <_vfprintf_r+0x7ae>
 800e81c:	460c      	mov	r4, r1
 800e81e:	e52d      	b.n	800e27c <_vfprintf_r+0x7e4>
 800e820:	2010      	movs	r0, #16
 800e822:	2b07      	cmp	r3, #7
 800e824:	4402      	add	r2, r0
 800e826:	6060      	str	r0, [r4, #4]
 800e828:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800e82c:	dd08      	ble.n	800e840 <_vfprintf_r+0xda8>
 800e82e:	aa22      	add	r2, sp, #136	; 0x88
 800e830:	4659      	mov	r1, fp
 800e832:	4650      	mov	r0, sl
 800e834:	f000 fb9e 	bl	800ef74 <__sprint_r>
 800e838:	2800      	cmp	r0, #0
 800e83a:	f040 82f6 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e83e:	a925      	add	r1, sp, #148	; 0x94
 800e840:	3e10      	subs	r6, #16
 800e842:	460c      	mov	r4, r1
 800e844:	e52c      	b.n	800e2a0 <_vfprintf_r+0x808>
 800e846:	460c      	mov	r4, r1
 800e848:	e544      	b.n	800e2d4 <_vfprintf_r+0x83c>
 800e84a:	bf00      	nop
 800e84c:	08011f05 	.word	0x08011f05
 800e850:	08011f16 	.word	0x08011f16
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	2b65      	cmp	r3, #101	; 0x65
 800e858:	f340 8230 	ble.w	800ecbc <_vfprintf_r+0x1224>
 800e85c:	2200      	movs	r2, #0
 800e85e:	2300      	movs	r3, #0
 800e860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e864:	f7f2 f938 	bl	8000ad8 <__aeabi_dcmpeq>
 800e868:	2800      	cmp	r0, #0
 800e86a:	d068      	beq.n	800e93e <_vfprintf_r+0xea6>
 800e86c:	4b6d      	ldr	r3, [pc, #436]	; (800ea24 <_vfprintf_r+0xf8c>)
 800e86e:	6023      	str	r3, [r4, #0]
 800e870:	2301      	movs	r3, #1
 800e872:	441e      	add	r6, r3
 800e874:	6063      	str	r3, [r4, #4]
 800e876:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e878:	9624      	str	r6, [sp, #144]	; 0x90
 800e87a:	3301      	adds	r3, #1
 800e87c:	2b07      	cmp	r3, #7
 800e87e:	9323      	str	r3, [sp, #140]	; 0x8c
 800e880:	dc37      	bgt.n	800e8f2 <_vfprintf_r+0xe5a>
 800e882:	3408      	adds	r4, #8
 800e884:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e886:	9a05      	ldr	r2, [sp, #20]
 800e888:	4293      	cmp	r3, r2
 800e88a:	db03      	blt.n	800e894 <_vfprintf_r+0xdfc>
 800e88c:	f018 0f01 	tst.w	r8, #1
 800e890:	f43f ad32 	beq.w	800e2f8 <_vfprintf_r+0x860>
 800e894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e89c:	6063      	str	r3, [r4, #4]
 800e89e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e8a0:	4413      	add	r3, r2
 800e8a2:	9324      	str	r3, [sp, #144]	; 0x90
 800e8a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	2b07      	cmp	r3, #7
 800e8aa:	9323      	str	r3, [sp, #140]	; 0x8c
 800e8ac:	dc2b      	bgt.n	800e906 <_vfprintf_r+0xe6e>
 800e8ae:	3408      	adds	r4, #8
 800e8b0:	9b05      	ldr	r3, [sp, #20]
 800e8b2:	1e5d      	subs	r5, r3, #1
 800e8b4:	2d00      	cmp	r5, #0
 800e8b6:	f77f ad1f 	ble.w	800e2f8 <_vfprintf_r+0x860>
 800e8ba:	4e5b      	ldr	r6, [pc, #364]	; (800ea28 <_vfprintf_r+0xf90>)
 800e8bc:	2710      	movs	r7, #16
 800e8be:	2d10      	cmp	r5, #16
 800e8c0:	f104 0108 	add.w	r1, r4, #8
 800e8c4:	6026      	str	r6, [r4, #0]
 800e8c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800e8ca:	f103 0301 	add.w	r3, r3, #1
 800e8ce:	dc24      	bgt.n	800e91a <_vfprintf_r+0xe82>
 800e8d0:	6065      	str	r5, [r4, #4]
 800e8d2:	2b07      	cmp	r3, #7
 800e8d4:	4415      	add	r5, r2
 800e8d6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800e8da:	f340 8285 	ble.w	800ede8 <_vfprintf_r+0x1350>
 800e8de:	aa22      	add	r2, sp, #136	; 0x88
 800e8e0:	4659      	mov	r1, fp
 800e8e2:	4650      	mov	r0, sl
 800e8e4:	f000 fb46 	bl	800ef74 <__sprint_r>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	f040 829e 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e8ee:	ac25      	add	r4, sp, #148	; 0x94
 800e8f0:	e502      	b.n	800e2f8 <_vfprintf_r+0x860>
 800e8f2:	aa22      	add	r2, sp, #136	; 0x88
 800e8f4:	4659      	mov	r1, fp
 800e8f6:	4650      	mov	r0, sl
 800e8f8:	f000 fb3c 	bl	800ef74 <__sprint_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f040 8294 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e902:	ac25      	add	r4, sp, #148	; 0x94
 800e904:	e7be      	b.n	800e884 <_vfprintf_r+0xdec>
 800e906:	aa22      	add	r2, sp, #136	; 0x88
 800e908:	4659      	mov	r1, fp
 800e90a:	4650      	mov	r0, sl
 800e90c:	f000 fb32 	bl	800ef74 <__sprint_r>
 800e910:	2800      	cmp	r0, #0
 800e912:	f040 828a 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e916:	ac25      	add	r4, sp, #148	; 0x94
 800e918:	e7ca      	b.n	800e8b0 <_vfprintf_r+0xe18>
 800e91a:	3210      	adds	r2, #16
 800e91c:	2b07      	cmp	r3, #7
 800e91e:	6067      	str	r7, [r4, #4]
 800e920:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800e924:	dd08      	ble.n	800e938 <_vfprintf_r+0xea0>
 800e926:	aa22      	add	r2, sp, #136	; 0x88
 800e928:	4659      	mov	r1, fp
 800e92a:	4650      	mov	r0, sl
 800e92c:	f000 fb22 	bl	800ef74 <__sprint_r>
 800e930:	2800      	cmp	r0, #0
 800e932:	f040 827a 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e936:	a925      	add	r1, sp, #148	; 0x94
 800e938:	3d10      	subs	r5, #16
 800e93a:	460c      	mov	r4, r1
 800e93c:	e7bf      	b.n	800e8be <_vfprintf_r+0xe26>
 800e93e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e940:	2b00      	cmp	r3, #0
 800e942:	dc73      	bgt.n	800ea2c <_vfprintf_r+0xf94>
 800e944:	4b37      	ldr	r3, [pc, #220]	; (800ea24 <_vfprintf_r+0xf8c>)
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	2301      	movs	r3, #1
 800e94a:	441e      	add	r6, r3
 800e94c:	6063      	str	r3, [r4, #4]
 800e94e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e950:	9624      	str	r6, [sp, #144]	; 0x90
 800e952:	3301      	adds	r3, #1
 800e954:	2b07      	cmp	r3, #7
 800e956:	9323      	str	r3, [sp, #140]	; 0x8c
 800e958:	dc3d      	bgt.n	800e9d6 <_vfprintf_r+0xf3e>
 800e95a:	3408      	adds	r4, #8
 800e95c:	9905      	ldr	r1, [sp, #20]
 800e95e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e960:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e962:	430b      	orrs	r3, r1
 800e964:	f008 0101 	and.w	r1, r8, #1
 800e968:	430b      	orrs	r3, r1
 800e96a:	f43f acc5 	beq.w	800e2f8 <_vfprintf_r+0x860>
 800e96e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e970:	6023      	str	r3, [r4, #0]
 800e972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e974:	441a      	add	r2, r3
 800e976:	6063      	str	r3, [r4, #4]
 800e978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e97a:	9224      	str	r2, [sp, #144]	; 0x90
 800e97c:	3301      	adds	r3, #1
 800e97e:	2b07      	cmp	r3, #7
 800e980:	9323      	str	r3, [sp, #140]	; 0x8c
 800e982:	dc32      	bgt.n	800e9ea <_vfprintf_r+0xf52>
 800e984:	3408      	adds	r4, #8
 800e986:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800e988:	2d00      	cmp	r5, #0
 800e98a:	da1b      	bge.n	800e9c4 <_vfprintf_r+0xf2c>
 800e98c:	426d      	negs	r5, r5
 800e98e:	4623      	mov	r3, r4
 800e990:	4e25      	ldr	r6, [pc, #148]	; (800ea28 <_vfprintf_r+0xf90>)
 800e992:	2710      	movs	r7, #16
 800e994:	2d10      	cmp	r5, #16
 800e996:	f104 0408 	add.w	r4, r4, #8
 800e99a:	601e      	str	r6, [r3, #0]
 800e99c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800e9a0:	f102 0201 	add.w	r2, r2, #1
 800e9a4:	dc2b      	bgt.n	800e9fe <_vfprintf_r+0xf66>
 800e9a6:	605d      	str	r5, [r3, #4]
 800e9a8:	2a07      	cmp	r2, #7
 800e9aa:	440d      	add	r5, r1
 800e9ac:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800e9b0:	dd08      	ble.n	800e9c4 <_vfprintf_r+0xf2c>
 800e9b2:	aa22      	add	r2, sp, #136	; 0x88
 800e9b4:	4659      	mov	r1, fp
 800e9b6:	4650      	mov	r0, sl
 800e9b8:	f000 fadc 	bl	800ef74 <__sprint_r>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	f040 8234 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e9c2:	ac25      	add	r4, sp, #148	; 0x94
 800e9c4:	9b05      	ldr	r3, [sp, #20]
 800e9c6:	9a05      	ldr	r2, [sp, #20]
 800e9c8:	6063      	str	r3, [r4, #4]
 800e9ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e9cc:	f8c4 9000 	str.w	r9, [r4]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	9324      	str	r3, [sp, #144]	; 0x90
 800e9d4:	e489      	b.n	800e2ea <_vfprintf_r+0x852>
 800e9d6:	aa22      	add	r2, sp, #136	; 0x88
 800e9d8:	4659      	mov	r1, fp
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f000 faca 	bl	800ef74 <__sprint_r>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	f040 8222 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e9e6:	ac25      	add	r4, sp, #148	; 0x94
 800e9e8:	e7b8      	b.n	800e95c <_vfprintf_r+0xec4>
 800e9ea:	aa22      	add	r2, sp, #136	; 0x88
 800e9ec:	4659      	mov	r1, fp
 800e9ee:	4650      	mov	r0, sl
 800e9f0:	f000 fac0 	bl	800ef74 <__sprint_r>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	f040 8218 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800e9fa:	ac25      	add	r4, sp, #148	; 0x94
 800e9fc:	e7c3      	b.n	800e986 <_vfprintf_r+0xeee>
 800e9fe:	3110      	adds	r1, #16
 800ea00:	2a07      	cmp	r2, #7
 800ea02:	605f      	str	r7, [r3, #4]
 800ea04:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800ea08:	dd08      	ble.n	800ea1c <_vfprintf_r+0xf84>
 800ea0a:	aa22      	add	r2, sp, #136	; 0x88
 800ea0c:	4659      	mov	r1, fp
 800ea0e:	4650      	mov	r0, sl
 800ea10:	f000 fab0 	bl	800ef74 <__sprint_r>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	f040 8208 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ea1a:	ac25      	add	r4, sp, #148	; 0x94
 800ea1c:	3d10      	subs	r5, #16
 800ea1e:	4623      	mov	r3, r4
 800ea20:	e7b8      	b.n	800e994 <_vfprintf_r+0xefc>
 800ea22:	bf00      	nop
 800ea24:	08011f27 	.word	0x08011f27
 800ea28:	08011f39 	.word	0x08011f39
 800ea2c:	9f05      	ldr	r7, [sp, #20]
 800ea2e:	42af      	cmp	r7, r5
 800ea30:	bfa8      	it	ge
 800ea32:	462f      	movge	r7, r5
 800ea34:	2f00      	cmp	r7, #0
 800ea36:	dd0a      	ble.n	800ea4e <_vfprintf_r+0xfb6>
 800ea38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea3a:	443e      	add	r6, r7
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	9624      	str	r6, [sp, #144]	; 0x90
 800ea40:	2b07      	cmp	r3, #7
 800ea42:	9323      	str	r3, [sp, #140]	; 0x8c
 800ea44:	e9c4 9700 	strd	r9, r7, [r4]
 800ea48:	f300 8084 	bgt.w	800eb54 <_vfprintf_r+0x10bc>
 800ea4c:	3408      	adds	r4, #8
 800ea4e:	2f00      	cmp	r7, #0
 800ea50:	bfac      	ite	ge
 800ea52:	1bee      	subge	r6, r5, r7
 800ea54:	462e      	movlt	r6, r5
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	dd19      	ble.n	800ea8e <_vfprintf_r+0xff6>
 800ea5a:	4f97      	ldr	r7, [pc, #604]	; (800ecb8 <_vfprintf_r+0x1220>)
 800ea5c:	2e10      	cmp	r6, #16
 800ea5e:	f104 0108 	add.w	r1, r4, #8
 800ea62:	6027      	str	r7, [r4, #0]
 800ea64:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ea68:	f103 0301 	add.w	r3, r3, #1
 800ea6c:	dc7c      	bgt.n	800eb68 <_vfprintf_r+0x10d0>
 800ea6e:	6066      	str	r6, [r4, #4]
 800ea70:	2b07      	cmp	r3, #7
 800ea72:	4416      	add	r6, r2
 800ea74:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ea78:	f340 8089 	ble.w	800eb8e <_vfprintf_r+0x10f6>
 800ea7c:	aa22      	add	r2, sp, #136	; 0x88
 800ea7e:	4659      	mov	r1, fp
 800ea80:	4650      	mov	r0, sl
 800ea82:	f000 fa77 	bl	800ef74 <__sprint_r>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f040 81cf 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ea8c:	ac25      	add	r4, sp, #148	; 0x94
 800ea8e:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800ea92:	444d      	add	r5, r9
 800ea94:	d00a      	beq.n	800eaac <_vfprintf_r+0x1014>
 800ea96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d17a      	bne.n	800eb92 <_vfprintf_r+0x10fa>
 800ea9c:	9b08      	ldr	r3, [sp, #32]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d17a      	bne.n	800eb98 <_vfprintf_r+0x1100>
 800eaa2:	9b05      	ldr	r3, [sp, #20]
 800eaa4:	444b      	add	r3, r9
 800eaa6:	429d      	cmp	r5, r3
 800eaa8:	bf28      	it	cs
 800eaaa:	461d      	movcs	r5, r3
 800eaac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eaae:	9a05      	ldr	r2, [sp, #20]
 800eab0:	4293      	cmp	r3, r2
 800eab2:	db02      	blt.n	800eaba <_vfprintf_r+0x1022>
 800eab4:	f018 0f01 	tst.w	r8, #1
 800eab8:	d00e      	beq.n	800ead8 <_vfprintf_r+0x1040>
 800eaba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eabc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eabe:	6023      	str	r3, [r4, #0]
 800eac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eac2:	6063      	str	r3, [r4, #4]
 800eac4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800eac6:	4413      	add	r3, r2
 800eac8:	9324      	str	r3, [sp, #144]	; 0x90
 800eaca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eacc:	3301      	adds	r3, #1
 800eace:	2b07      	cmp	r3, #7
 800ead0:	9323      	str	r3, [sp, #140]	; 0x8c
 800ead2:	f300 80dc 	bgt.w	800ec8e <_vfprintf_r+0x11f6>
 800ead6:	3408      	adds	r4, #8
 800ead8:	9b05      	ldr	r3, [sp, #20]
 800eada:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800eadc:	1b9e      	subs	r6, r3, r6
 800eade:	444b      	add	r3, r9
 800eae0:	1b5b      	subs	r3, r3, r5
 800eae2:	429e      	cmp	r6, r3
 800eae4:	bfa8      	it	ge
 800eae6:	461e      	movge	r6, r3
 800eae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800eaea:	2e00      	cmp	r6, #0
 800eaec:	dd0a      	ble.n	800eb04 <_vfprintf_r+0x106c>
 800eaee:	4433      	add	r3, r6
 800eaf0:	9324      	str	r3, [sp, #144]	; 0x90
 800eaf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	2b07      	cmp	r3, #7
 800eaf8:	9323      	str	r3, [sp, #140]	; 0x8c
 800eafa:	e9c4 5600 	strd	r5, r6, [r4]
 800eafe:	f300 80d0 	bgt.w	800eca2 <_vfprintf_r+0x120a>
 800eb02:	3408      	adds	r4, #8
 800eb04:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800eb06:	2e00      	cmp	r6, #0
 800eb08:	9b05      	ldr	r3, [sp, #20]
 800eb0a:	eba3 0505 	sub.w	r5, r3, r5
 800eb0e:	bfa8      	it	ge
 800eb10:	1bad      	subge	r5, r5, r6
 800eb12:	2d00      	cmp	r5, #0
 800eb14:	f77f abf0 	ble.w	800e2f8 <_vfprintf_r+0x860>
 800eb18:	4e67      	ldr	r6, [pc, #412]	; (800ecb8 <_vfprintf_r+0x1220>)
 800eb1a:	2710      	movs	r7, #16
 800eb1c:	2d10      	cmp	r5, #16
 800eb1e:	f104 0108 	add.w	r1, r4, #8
 800eb22:	6026      	str	r6, [r4, #0]
 800eb24:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800eb28:	f103 0301 	add.w	r3, r3, #1
 800eb2c:	f77f aed0 	ble.w	800e8d0 <_vfprintf_r+0xe38>
 800eb30:	3210      	adds	r2, #16
 800eb32:	2b07      	cmp	r3, #7
 800eb34:	6067      	str	r7, [r4, #4]
 800eb36:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800eb3a:	dd08      	ble.n	800eb4e <_vfprintf_r+0x10b6>
 800eb3c:	aa22      	add	r2, sp, #136	; 0x88
 800eb3e:	4659      	mov	r1, fp
 800eb40:	4650      	mov	r0, sl
 800eb42:	f000 fa17 	bl	800ef74 <__sprint_r>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f040 816f 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800eb4c:	a925      	add	r1, sp, #148	; 0x94
 800eb4e:	3d10      	subs	r5, #16
 800eb50:	460c      	mov	r4, r1
 800eb52:	e7e3      	b.n	800eb1c <_vfprintf_r+0x1084>
 800eb54:	aa22      	add	r2, sp, #136	; 0x88
 800eb56:	4659      	mov	r1, fp
 800eb58:	4650      	mov	r0, sl
 800eb5a:	f000 fa0b 	bl	800ef74 <__sprint_r>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	f040 8163 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800eb64:	ac25      	add	r4, sp, #148	; 0x94
 800eb66:	e772      	b.n	800ea4e <_vfprintf_r+0xfb6>
 800eb68:	2010      	movs	r0, #16
 800eb6a:	2b07      	cmp	r3, #7
 800eb6c:	4402      	add	r2, r0
 800eb6e:	6060      	str	r0, [r4, #4]
 800eb70:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800eb74:	dd08      	ble.n	800eb88 <_vfprintf_r+0x10f0>
 800eb76:	aa22      	add	r2, sp, #136	; 0x88
 800eb78:	4659      	mov	r1, fp
 800eb7a:	4650      	mov	r0, sl
 800eb7c:	f000 f9fa 	bl	800ef74 <__sprint_r>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	f040 8152 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800eb86:	a925      	add	r1, sp, #148	; 0x94
 800eb88:	3e10      	subs	r6, #16
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	e766      	b.n	800ea5c <_vfprintf_r+0xfc4>
 800eb8e:	460c      	mov	r4, r1
 800eb90:	e77d      	b.n	800ea8e <_vfprintf_r+0xff6>
 800eb92:	9b08      	ldr	r3, [sp, #32]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d04a      	beq.n	800ec2e <_vfprintf_r+0x1196>
 800eb98:	9b08      	ldr	r3, [sp, #32]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	9308      	str	r3, [sp, #32]
 800eb9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eba2:	6023      	str	r3, [r4, #0]
 800eba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eba6:	6063      	str	r3, [r4, #4]
 800eba8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ebaa:	4413      	add	r3, r2
 800ebac:	9324      	str	r3, [sp, #144]	; 0x90
 800ebae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	2b07      	cmp	r3, #7
 800ebb4:	9323      	str	r3, [sp, #140]	; 0x8c
 800ebb6:	dc41      	bgt.n	800ec3c <_vfprintf_r+0x11a4>
 800ebb8:	3408      	adds	r4, #8
 800ebba:	9b05      	ldr	r3, [sp, #20]
 800ebbc:	eb09 0703 	add.w	r7, r9, r3
 800ebc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc2:	1b7f      	subs	r7, r7, r5
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	429f      	cmp	r7, r3
 800ebc8:	bfa8      	it	ge
 800ebca:	461f      	movge	r7, r3
 800ebcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ebce:	2f00      	cmp	r7, #0
 800ebd0:	dd09      	ble.n	800ebe6 <_vfprintf_r+0x114e>
 800ebd2:	443b      	add	r3, r7
 800ebd4:	9324      	str	r3, [sp, #144]	; 0x90
 800ebd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ebd8:	3301      	adds	r3, #1
 800ebda:	2b07      	cmp	r3, #7
 800ebdc:	9323      	str	r3, [sp, #140]	; 0x8c
 800ebde:	e9c4 5700 	strd	r5, r7, [r4]
 800ebe2:	dc35      	bgt.n	800ec50 <_vfprintf_r+0x11b8>
 800ebe4:	3408      	adds	r4, #8
 800ebe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe8:	2f00      	cmp	r7, #0
 800ebea:	781e      	ldrb	r6, [r3, #0]
 800ebec:	bfa8      	it	ge
 800ebee:	1bf6      	subge	r6, r6, r7
 800ebf0:	2e00      	cmp	r6, #0
 800ebf2:	dd18      	ble.n	800ec26 <_vfprintf_r+0x118e>
 800ebf4:	4830      	ldr	r0, [pc, #192]	; (800ecb8 <_vfprintf_r+0x1220>)
 800ebf6:	2e10      	cmp	r6, #16
 800ebf8:	f104 0108 	add.w	r1, r4, #8
 800ebfc:	6020      	str	r0, [r4, #0]
 800ebfe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ec02:	f103 0301 	add.w	r3, r3, #1
 800ec06:	dc2d      	bgt.n	800ec64 <_vfprintf_r+0x11cc>
 800ec08:	6066      	str	r6, [r4, #4]
 800ec0a:	2b07      	cmp	r3, #7
 800ec0c:	4416      	add	r6, r2
 800ec0e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ec12:	dd3a      	ble.n	800ec8a <_vfprintf_r+0x11f2>
 800ec14:	aa22      	add	r2, sp, #136	; 0x88
 800ec16:	4659      	mov	r1, fp
 800ec18:	4650      	mov	r0, sl
 800ec1a:	f000 f9ab 	bl	800ef74 <__sprint_r>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f040 8103 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ec24:	ac25      	add	r4, sp, #148	; 0x94
 800ec26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	441d      	add	r5, r3
 800ec2c:	e733      	b.n	800ea96 <_vfprintf_r+0xffe>
 800ec2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec30:	3b01      	subs	r3, #1
 800ec32:	930a      	str	r3, [sp, #40]	; 0x28
 800ec34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec36:	3b01      	subs	r3, #1
 800ec38:	9309      	str	r3, [sp, #36]	; 0x24
 800ec3a:	e7b0      	b.n	800eb9e <_vfprintf_r+0x1106>
 800ec3c:	aa22      	add	r2, sp, #136	; 0x88
 800ec3e:	4659      	mov	r1, fp
 800ec40:	4650      	mov	r0, sl
 800ec42:	f000 f997 	bl	800ef74 <__sprint_r>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	f040 80ef 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ec4c:	ac25      	add	r4, sp, #148	; 0x94
 800ec4e:	e7b4      	b.n	800ebba <_vfprintf_r+0x1122>
 800ec50:	aa22      	add	r2, sp, #136	; 0x88
 800ec52:	4659      	mov	r1, fp
 800ec54:	4650      	mov	r0, sl
 800ec56:	f000 f98d 	bl	800ef74 <__sprint_r>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	f040 80e5 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ec60:	ac25      	add	r4, sp, #148	; 0x94
 800ec62:	e7c0      	b.n	800ebe6 <_vfprintf_r+0x114e>
 800ec64:	2010      	movs	r0, #16
 800ec66:	2b07      	cmp	r3, #7
 800ec68:	4402      	add	r2, r0
 800ec6a:	6060      	str	r0, [r4, #4]
 800ec6c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ec70:	dd08      	ble.n	800ec84 <_vfprintf_r+0x11ec>
 800ec72:	aa22      	add	r2, sp, #136	; 0x88
 800ec74:	4659      	mov	r1, fp
 800ec76:	4650      	mov	r0, sl
 800ec78:	f000 f97c 	bl	800ef74 <__sprint_r>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	f040 80d4 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ec82:	a925      	add	r1, sp, #148	; 0x94
 800ec84:	3e10      	subs	r6, #16
 800ec86:	460c      	mov	r4, r1
 800ec88:	e7b4      	b.n	800ebf4 <_vfprintf_r+0x115c>
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	e7cb      	b.n	800ec26 <_vfprintf_r+0x118e>
 800ec8e:	aa22      	add	r2, sp, #136	; 0x88
 800ec90:	4659      	mov	r1, fp
 800ec92:	4650      	mov	r0, sl
 800ec94:	f000 f96e 	bl	800ef74 <__sprint_r>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	f040 80c6 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ec9e:	ac25      	add	r4, sp, #148	; 0x94
 800eca0:	e71a      	b.n	800ead8 <_vfprintf_r+0x1040>
 800eca2:	aa22      	add	r2, sp, #136	; 0x88
 800eca4:	4659      	mov	r1, fp
 800eca6:	4650      	mov	r0, sl
 800eca8:	f000 f964 	bl	800ef74 <__sprint_r>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	f040 80bc 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ecb2:	ac25      	add	r4, sp, #148	; 0x94
 800ecb4:	e726      	b.n	800eb04 <_vfprintf_r+0x106c>
 800ecb6:	bf00      	nop
 800ecb8:	08011f39 	.word	0x08011f39
 800ecbc:	9a05      	ldr	r2, [sp, #20]
 800ecbe:	3601      	adds	r6, #1
 800ecc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecc2:	f104 0508 	add.w	r5, r4, #8
 800ecc6:	2a01      	cmp	r2, #1
 800ecc8:	f103 0301 	add.w	r3, r3, #1
 800eccc:	dc02      	bgt.n	800ecd4 <_vfprintf_r+0x123c>
 800ecce:	f018 0f01 	tst.w	r8, #1
 800ecd2:	d07e      	beq.n	800edd2 <_vfprintf_r+0x133a>
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	2b07      	cmp	r3, #7
 800ecd8:	f8c4 9000 	str.w	r9, [r4]
 800ecdc:	6062      	str	r2, [r4, #4]
 800ecde:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ece2:	dd08      	ble.n	800ecf6 <_vfprintf_r+0x125e>
 800ece4:	aa22      	add	r2, sp, #136	; 0x88
 800ece6:	4659      	mov	r1, fp
 800ece8:	4650      	mov	r0, sl
 800ecea:	f000 f943 	bl	800ef74 <__sprint_r>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f040 809b 	bne.w	800ee2a <_vfprintf_r+0x1392>
 800ecf4:	ad25      	add	r5, sp, #148	; 0x94
 800ecf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecfa:	602b      	str	r3, [r5, #0]
 800ecfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecfe:	606b      	str	r3, [r5, #4]
 800ed00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ed02:	4413      	add	r3, r2
 800ed04:	9324      	str	r3, [sp, #144]	; 0x90
 800ed06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed08:	3301      	adds	r3, #1
 800ed0a:	2b07      	cmp	r3, #7
 800ed0c:	9323      	str	r3, [sp, #140]	; 0x8c
 800ed0e:	dc32      	bgt.n	800ed76 <_vfprintf_r+0x12de>
 800ed10:	3508      	adds	r5, #8
 800ed12:	9b05      	ldr	r3, [sp, #20]
 800ed14:	2200      	movs	r2, #0
 800ed16:	1e5c      	subs	r4, r3, #1
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed1e:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800ed22:	f7f1 fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d12e      	bne.n	800ed88 <_vfprintf_r+0x12f0>
 800ed2a:	f109 0301 	add.w	r3, r9, #1
 800ed2e:	3701      	adds	r7, #1
 800ed30:	3e01      	subs	r6, #1
 800ed32:	2f07      	cmp	r7, #7
 800ed34:	e9c5 3400 	strd	r3, r4, [r5]
 800ed38:	9b05      	ldr	r3, [sp, #20]
 800ed3a:	441e      	add	r6, r3
 800ed3c:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800ed40:	dd50      	ble.n	800ede4 <_vfprintf_r+0x134c>
 800ed42:	aa22      	add	r2, sp, #136	; 0x88
 800ed44:	4659      	mov	r1, fp
 800ed46:	4650      	mov	r0, sl
 800ed48:	f000 f914 	bl	800ef74 <__sprint_r>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d16c      	bne.n	800ee2a <_vfprintf_r+0x1392>
 800ed50:	ad25      	add	r5, sp, #148	; 0x94
 800ed52:	ab1e      	add	r3, sp, #120	; 0x78
 800ed54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed5a:	606b      	str	r3, [r5, #4]
 800ed5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ed5e:	4413      	add	r3, r2
 800ed60:	9324      	str	r3, [sp, #144]	; 0x90
 800ed62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed64:	3301      	adds	r3, #1
 800ed66:	2b07      	cmp	r3, #7
 800ed68:	9323      	str	r3, [sp, #140]	; 0x8c
 800ed6a:	f73f adb8 	bgt.w	800e8de <_vfprintf_r+0xe46>
 800ed6e:	f105 0408 	add.w	r4, r5, #8
 800ed72:	f7ff bac1 	b.w	800e2f8 <_vfprintf_r+0x860>
 800ed76:	aa22      	add	r2, sp, #136	; 0x88
 800ed78:	4659      	mov	r1, fp
 800ed7a:	4650      	mov	r0, sl
 800ed7c:	f000 f8fa 	bl	800ef74 <__sprint_r>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d152      	bne.n	800ee2a <_vfprintf_r+0x1392>
 800ed84:	ad25      	add	r5, sp, #148	; 0x94
 800ed86:	e7c4      	b.n	800ed12 <_vfprintf_r+0x127a>
 800ed88:	2c00      	cmp	r4, #0
 800ed8a:	dde2      	ble.n	800ed52 <_vfprintf_r+0x12ba>
 800ed8c:	4e57      	ldr	r6, [pc, #348]	; (800eeec <_vfprintf_r+0x1454>)
 800ed8e:	2710      	movs	r7, #16
 800ed90:	2c10      	cmp	r4, #16
 800ed92:	f105 0108 	add.w	r1, r5, #8
 800ed96:	602e      	str	r6, [r5, #0]
 800ed98:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ed9c:	f103 0301 	add.w	r3, r3, #1
 800eda0:	dc07      	bgt.n	800edb2 <_vfprintf_r+0x131a>
 800eda2:	606c      	str	r4, [r5, #4]
 800eda4:	2b07      	cmp	r3, #7
 800eda6:	4414      	add	r4, r2
 800eda8:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800edac:	dcc9      	bgt.n	800ed42 <_vfprintf_r+0x12aa>
 800edae:	460d      	mov	r5, r1
 800edb0:	e7cf      	b.n	800ed52 <_vfprintf_r+0x12ba>
 800edb2:	3210      	adds	r2, #16
 800edb4:	2b07      	cmp	r3, #7
 800edb6:	606f      	str	r7, [r5, #4]
 800edb8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800edbc:	dd06      	ble.n	800edcc <_vfprintf_r+0x1334>
 800edbe:	aa22      	add	r2, sp, #136	; 0x88
 800edc0:	4659      	mov	r1, fp
 800edc2:	4650      	mov	r0, sl
 800edc4:	f000 f8d6 	bl	800ef74 <__sprint_r>
 800edc8:	bb78      	cbnz	r0, 800ee2a <_vfprintf_r+0x1392>
 800edca:	a925      	add	r1, sp, #148	; 0x94
 800edcc:	3c10      	subs	r4, #16
 800edce:	460d      	mov	r5, r1
 800edd0:	e7de      	b.n	800ed90 <_vfprintf_r+0x12f8>
 800edd2:	2201      	movs	r2, #1
 800edd4:	2b07      	cmp	r3, #7
 800edd6:	f8c4 9000 	str.w	r9, [r4]
 800edda:	6062      	str	r2, [r4, #4]
 800eddc:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800ede0:	ddb7      	ble.n	800ed52 <_vfprintf_r+0x12ba>
 800ede2:	e7ae      	b.n	800ed42 <_vfprintf_r+0x12aa>
 800ede4:	3508      	adds	r5, #8
 800ede6:	e7b4      	b.n	800ed52 <_vfprintf_r+0x12ba>
 800ede8:	460c      	mov	r4, r1
 800edea:	f7ff ba85 	b.w	800e2f8 <_vfprintf_r+0x860>
 800edee:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800edf2:	1a9d      	subs	r5, r3, r2
 800edf4:	2d00      	cmp	r5, #0
 800edf6:	f77f aa83 	ble.w	800e300 <_vfprintf_r+0x868>
 800edfa:	4e3d      	ldr	r6, [pc, #244]	; (800eef0 <_vfprintf_r+0x1458>)
 800edfc:	2710      	movs	r7, #16
 800edfe:	2d10      	cmp	r5, #16
 800ee00:	6026      	str	r6, [r4, #0]
 800ee02:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ee06:	f103 0301 	add.w	r3, r3, #1
 800ee0a:	dc18      	bgt.n	800ee3e <_vfprintf_r+0x13a6>
 800ee0c:	6065      	str	r5, [r4, #4]
 800ee0e:	2b07      	cmp	r3, #7
 800ee10:	4415      	add	r5, r2
 800ee12:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800ee16:	f77f aa73 	ble.w	800e300 <_vfprintf_r+0x868>
 800ee1a:	aa22      	add	r2, sp, #136	; 0x88
 800ee1c:	4659      	mov	r1, fp
 800ee1e:	4650      	mov	r0, sl
 800ee20:	f000 f8a8 	bl	800ef74 <__sprint_r>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	f43f aa6b 	beq.w	800e300 <_vfprintf_r+0x868>
 800ee2a:	9b03      	ldr	r3, [sp, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f43f a884 	beq.w	800df3a <_vfprintf_r+0x4a2>
 800ee32:	4619      	mov	r1, r3
 800ee34:	4650      	mov	r0, sl
 800ee36:	f7fe fd6d 	bl	800d914 <_free_r>
 800ee3a:	f7ff b87e 	b.w	800df3a <_vfprintf_r+0x4a2>
 800ee3e:	3210      	adds	r2, #16
 800ee40:	2b07      	cmp	r3, #7
 800ee42:	6067      	str	r7, [r4, #4]
 800ee44:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ee48:	dc02      	bgt.n	800ee50 <_vfprintf_r+0x13b8>
 800ee4a:	3408      	adds	r4, #8
 800ee4c:	3d10      	subs	r5, #16
 800ee4e:	e7d6      	b.n	800edfe <_vfprintf_r+0x1366>
 800ee50:	aa22      	add	r2, sp, #136	; 0x88
 800ee52:	4659      	mov	r1, fp
 800ee54:	4650      	mov	r0, sl
 800ee56:	f000 f88d 	bl	800ef74 <__sprint_r>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	d1e5      	bne.n	800ee2a <_vfprintf_r+0x1392>
 800ee5e:	ac25      	add	r4, sp, #148	; 0x94
 800ee60:	e7f4      	b.n	800ee4c <_vfprintf_r+0x13b4>
 800ee62:	9903      	ldr	r1, [sp, #12]
 800ee64:	4650      	mov	r0, sl
 800ee66:	f7fe fd55 	bl	800d914 <_free_r>
 800ee6a:	f7ff ba61 	b.w	800e330 <_vfprintf_r+0x898>
 800ee6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ee70:	b91b      	cbnz	r3, 800ee7a <_vfprintf_r+0x13e2>
 800ee72:	2300      	movs	r3, #0
 800ee74:	9323      	str	r3, [sp, #140]	; 0x8c
 800ee76:	f7ff b860 	b.w	800df3a <_vfprintf_r+0x4a2>
 800ee7a:	aa22      	add	r2, sp, #136	; 0x88
 800ee7c:	4659      	mov	r1, fp
 800ee7e:	4650      	mov	r0, sl
 800ee80:	f000 f878 	bl	800ef74 <__sprint_r>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d0f4      	beq.n	800ee72 <_vfprintf_r+0x13da>
 800ee88:	f7ff b857 	b.w	800df3a <_vfprintf_r+0x4a2>
 800ee8c:	ea55 0206 	orrs.w	r2, r5, r6
 800ee90:	4647      	mov	r7, r8
 800ee92:	f43f ab79 	beq.w	800e588 <_vfprintf_r+0xaf0>
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	f43f ac15 	beq.w	800e6c6 <_vfprintf_r+0xc2e>
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800eea2:	f43f ac57 	beq.w	800e754 <_vfprintf_r+0xcbc>
 800eea6:	f005 0307 	and.w	r3, r5, #7
 800eeaa:	08ed      	lsrs	r5, r5, #3
 800eeac:	464a      	mov	r2, r9
 800eeae:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800eeb2:	3330      	adds	r3, #48	; 0x30
 800eeb4:	08f6      	lsrs	r6, r6, #3
 800eeb6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800eeba:	ea55 0106 	orrs.w	r1, r5, r6
 800eebe:	d1f2      	bne.n	800eea6 <_vfprintf_r+0x140e>
 800eec0:	07f8      	lsls	r0, r7, #31
 800eec2:	d506      	bpl.n	800eed2 <_vfprintf_r+0x143a>
 800eec4:	2b30      	cmp	r3, #48	; 0x30
 800eec6:	d004      	beq.n	800eed2 <_vfprintf_r+0x143a>
 800eec8:	2330      	movs	r3, #48	; 0x30
 800eeca:	f809 3c01 	strb.w	r3, [r9, #-1]
 800eece:	f1a2 0902 	sub.w	r9, r2, #2
 800eed2:	ab4e      	add	r3, sp, #312	; 0x138
 800eed4:	9e04      	ldr	r6, [sp, #16]
 800eed6:	46b8      	mov	r8, r7
 800eed8:	eba3 0309 	sub.w	r3, r3, r9
 800eedc:	9304      	str	r3, [sp, #16]
 800eede:	2300      	movs	r3, #0
 800eee0:	9303      	str	r3, [sp, #12]
 800eee2:	461d      	mov	r5, r3
 800eee4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800eee8:	f7ff b94d 	b.w	800e186 <_vfprintf_r+0x6ee>
 800eeec:	08011f39 	.word	0x08011f39
 800eef0:	08011f29 	.word	0x08011f29

0800eef4 <__sbprintf>:
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	460c      	mov	r4, r1
 800eef8:	8989      	ldrh	r1, [r1, #12]
 800eefa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800eefe:	4606      	mov	r6, r0
 800ef00:	f021 0102 	bic.w	r1, r1, #2
 800ef04:	a818      	add	r0, sp, #96	; 0x60
 800ef06:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ef0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ef0c:	911b      	str	r1, [sp, #108]	; 0x6c
 800ef0e:	89e1      	ldrh	r1, [r4, #14]
 800ef10:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ef14:	69e1      	ldr	r1, [r4, #28]
 800ef16:	9109      	str	r1, [sp, #36]	; 0x24
 800ef18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ef1a:	910b      	str	r1, [sp, #44]	; 0x2c
 800ef1c:	a91c      	add	r1, sp, #112	; 0x70
 800ef1e:	9102      	str	r1, [sp, #8]
 800ef20:	9106      	str	r1, [sp, #24]
 800ef22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ef26:	9104      	str	r1, [sp, #16]
 800ef28:	9107      	str	r1, [sp, #28]
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	e9cd 3200 	strd	r3, r2, [sp]
 800ef30:	9108      	str	r1, [sp, #32]
 800ef32:	f7f3 fc82 	bl	800283a <__retarget_lock_init_recursive>
 800ef36:	a902      	add	r1, sp, #8
 800ef38:	4630      	mov	r0, r6
 800ef3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ef3e:	f7fe fdab 	bl	800da98 <_vfprintf_r>
 800ef42:	1e05      	subs	r5, r0, #0
 800ef44:	db07      	blt.n	800ef56 <__sbprintf+0x62>
 800ef46:	a902      	add	r1, sp, #8
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 fdfd 	bl	800fb48 <_fflush_r>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	bf18      	it	ne
 800ef52:	f04f 35ff 	movne.w	r5, #4294967295
 800ef56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ef5a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ef5c:	065b      	lsls	r3, r3, #25
 800ef5e:	bf42      	ittt	mi
 800ef60:	89a3      	ldrhmi	r3, [r4, #12]
 800ef62:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800ef66:	81a3      	strhmi	r3, [r4, #12]
 800ef68:	f7f3 fc8d 	bl	8002886 <__retarget_lock_close_recursive>
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800ef72:	bd70      	pop	{r4, r5, r6, pc}

0800ef74 <__sprint_r>:
 800ef74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef78:	6893      	ldr	r3, [r2, #8]
 800ef7a:	4680      	mov	r8, r0
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	4614      	mov	r4, r2
 800ef80:	b343      	cbz	r3, 800efd4 <__sprint_r+0x60>
 800ef82:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ef84:	049d      	lsls	r5, r3, #18
 800ef86:	d522      	bpl.n	800efce <__sprint_r+0x5a>
 800ef88:	6815      	ldr	r5, [r2, #0]
 800ef8a:	3508      	adds	r5, #8
 800ef8c:	f04f 0900 	mov.w	r9, #0
 800ef90:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800ef94:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800ef98:	45ca      	cmp	sl, r9
 800ef9a:	dc0d      	bgt.n	800efb8 <__sprint_r+0x44>
 800ef9c:	68a3      	ldr	r3, [r4, #8]
 800ef9e:	f026 0603 	bic.w	r6, r6, #3
 800efa2:	3508      	adds	r5, #8
 800efa4:	1b98      	subs	r0, r3, r6
 800efa6:	60a0      	str	r0, [r4, #8]
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d1ef      	bne.n	800ef8c <__sprint_r+0x18>
 800efac:	2300      	movs	r3, #0
 800efae:	60a3      	str	r3, [r4, #8]
 800efb0:	2300      	movs	r3, #0
 800efb2:	6063      	str	r3, [r4, #4]
 800efb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb8:	463a      	mov	r2, r7
 800efba:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800efbe:	4640      	mov	r0, r8
 800efc0:	f001 f849 	bl	8010056 <_fputwc_r>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d0f1      	beq.n	800efac <__sprint_r+0x38>
 800efc8:	f109 0901 	add.w	r9, r9, #1
 800efcc:	e7e4      	b.n	800ef98 <__sprint_r+0x24>
 800efce:	f000 fde1 	bl	800fb94 <__sfvwrite_r>
 800efd2:	e7eb      	b.n	800efac <__sprint_r+0x38>
 800efd4:	4618      	mov	r0, r3
 800efd6:	e7eb      	b.n	800efb0 <__sprint_r+0x3c>

0800efd8 <_vfiprintf_r>:
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	ed2d 8b02 	vpush	{d8}
 800efe0:	b0bb      	sub	sp, #236	; 0xec
 800efe2:	460f      	mov	r7, r1
 800efe4:	461d      	mov	r5, r3
 800efe6:	461c      	mov	r4, r3
 800efe8:	4681      	mov	r9, r0
 800efea:	9201      	str	r2, [sp, #4]
 800efec:	b118      	cbz	r0, 800eff6 <_vfiprintf_r+0x1e>
 800efee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eff0:	b90b      	cbnz	r3, 800eff6 <_vfiprintf_r+0x1e>
 800eff2:	f7fe fa8b 	bl	800d50c <__sinit>
 800eff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eff8:	07d8      	lsls	r0, r3, #31
 800effa:	d405      	bmi.n	800f008 <_vfiprintf_r+0x30>
 800effc:	89bb      	ldrh	r3, [r7, #12]
 800effe:	0599      	lsls	r1, r3, #22
 800f000:	d402      	bmi.n	800f008 <_vfiprintf_r+0x30>
 800f002:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f004:	f7f3 fc4a 	bl	800289c <__retarget_lock_acquire_recursive>
 800f008:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f00c:	049a      	lsls	r2, r3, #18
 800f00e:	d406      	bmi.n	800f01e <_vfiprintf_r+0x46>
 800f010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f014:	81bb      	strh	r3, [r7, #12]
 800f016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f01c:	667b      	str	r3, [r7, #100]	; 0x64
 800f01e:	89bb      	ldrh	r3, [r7, #12]
 800f020:	071e      	lsls	r6, r3, #28
 800f022:	d501      	bpl.n	800f028 <_vfiprintf_r+0x50>
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	b9bb      	cbnz	r3, 800f058 <_vfiprintf_r+0x80>
 800f028:	4639      	mov	r1, r7
 800f02a:	4648      	mov	r0, r9
 800f02c:	f000 ff7a 	bl	800ff24 <__swsetup_r>
 800f030:	b190      	cbz	r0, 800f058 <_vfiprintf_r+0x80>
 800f032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f034:	07d8      	lsls	r0, r3, #31
 800f036:	d508      	bpl.n	800f04a <_vfiprintf_r+0x72>
 800f038:	f04f 33ff 	mov.w	r3, #4294967295
 800f03c:	9302      	str	r3, [sp, #8]
 800f03e:	9802      	ldr	r0, [sp, #8]
 800f040:	b03b      	add	sp, #236	; 0xec
 800f042:	ecbd 8b02 	vpop	{d8}
 800f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04a:	89bb      	ldrh	r3, [r7, #12]
 800f04c:	0599      	lsls	r1, r3, #22
 800f04e:	d4f3      	bmi.n	800f038 <_vfiprintf_r+0x60>
 800f050:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f052:	f7f3 fc37 	bl	80028c4 <__retarget_lock_release_recursive>
 800f056:	e7ef      	b.n	800f038 <_vfiprintf_r+0x60>
 800f058:	89bb      	ldrh	r3, [r7, #12]
 800f05a:	f003 021a 	and.w	r2, r3, #26
 800f05e:	2a0a      	cmp	r2, #10
 800f060:	d116      	bne.n	800f090 <_vfiprintf_r+0xb8>
 800f062:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f066:	2a00      	cmp	r2, #0
 800f068:	db12      	blt.n	800f090 <_vfiprintf_r+0xb8>
 800f06a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f06c:	07d2      	lsls	r2, r2, #31
 800f06e:	d404      	bmi.n	800f07a <_vfiprintf_r+0xa2>
 800f070:	059e      	lsls	r6, r3, #22
 800f072:	d402      	bmi.n	800f07a <_vfiprintf_r+0xa2>
 800f074:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f076:	f7f3 fc25 	bl	80028c4 <__retarget_lock_release_recursive>
 800f07a:	462b      	mov	r3, r5
 800f07c:	9a01      	ldr	r2, [sp, #4]
 800f07e:	4639      	mov	r1, r7
 800f080:	4648      	mov	r0, r9
 800f082:	b03b      	add	sp, #236	; 0xec
 800f084:	ecbd 8b02 	vpop	{d8}
 800f088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	f000 bc36 	b.w	800f8fc <__sbprintf>
 800f090:	2300      	movs	r3, #0
 800f092:	ae11      	add	r6, sp, #68	; 0x44
 800f094:	ee08 3a10 	vmov	s16, r3
 800f098:	960e      	str	r6, [sp, #56]	; 0x38
 800f09a:	9307      	str	r3, [sp, #28]
 800f09c:	9302      	str	r3, [sp, #8]
 800f09e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800f0a2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f0a6:	9b01      	ldr	r3, [sp, #4]
 800f0a8:	461d      	mov	r5, r3
 800f0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0ae:	b10a      	cbz	r2, 800f0b4 <_vfiprintf_r+0xdc>
 800f0b0:	2a25      	cmp	r2, #37	; 0x25
 800f0b2:	d1f9      	bne.n	800f0a8 <_vfiprintf_r+0xd0>
 800f0b4:	9b01      	ldr	r3, [sp, #4]
 800f0b6:	ebb5 0803 	subs.w	r8, r5, r3
 800f0ba:	d00d      	beq.n	800f0d8 <_vfiprintf_r+0x100>
 800f0bc:	e9c6 3800 	strd	r3, r8, [r6]
 800f0c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0c2:	4443      	add	r3, r8
 800f0c4:	9310      	str	r3, [sp, #64]	; 0x40
 800f0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	2b07      	cmp	r3, #7
 800f0cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0ce:	dc76      	bgt.n	800f1be <_vfiprintf_r+0x1e6>
 800f0d0:	3608      	adds	r6, #8
 800f0d2:	9b02      	ldr	r3, [sp, #8]
 800f0d4:	4443      	add	r3, r8
 800f0d6:	9302      	str	r3, [sp, #8]
 800f0d8:	782b      	ldrb	r3, [r5, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f000 83d0 	beq.w	800f880 <_vfiprintf_r+0x8a8>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e6:	3501      	adds	r5, #1
 800f0e8:	469a      	mov	sl, r3
 800f0ea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f0ee:	9200      	str	r2, [sp, #0]
 800f0f0:	9303      	str	r3, [sp, #12]
 800f0f2:	462a      	mov	r2, r5
 800f0f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f0f8:	9201      	str	r2, [sp, #4]
 800f0fa:	f1a3 0220 	sub.w	r2, r3, #32
 800f0fe:	2a5a      	cmp	r2, #90	; 0x5a
 800f100:	f200 831c 	bhi.w	800f73c <_vfiprintf_r+0x764>
 800f104:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f108:	031a007e 	.word	0x031a007e
 800f10c:	0086031a 	.word	0x0086031a
 800f110:	031a031a 	.word	0x031a031a
 800f114:	0065031a 	.word	0x0065031a
 800f118:	031a031a 	.word	0x031a031a
 800f11c:	00930089 	.word	0x00930089
 800f120:	0090031a 	.word	0x0090031a
 800f124:	031a0095 	.word	0x031a0095
 800f128:	00b300b0 	.word	0x00b300b0
 800f12c:	00b300b3 	.word	0x00b300b3
 800f130:	00b300b3 	.word	0x00b300b3
 800f134:	00b300b3 	.word	0x00b300b3
 800f138:	00b300b3 	.word	0x00b300b3
 800f13c:	031a031a 	.word	0x031a031a
 800f140:	031a031a 	.word	0x031a031a
 800f144:	031a031a 	.word	0x031a031a
 800f148:	031a031a 	.word	0x031a031a
 800f14c:	00dd031a 	.word	0x00dd031a
 800f150:	031a00eb 	.word	0x031a00eb
 800f154:	031a031a 	.word	0x031a031a
 800f158:	031a031a 	.word	0x031a031a
 800f15c:	031a031a 	.word	0x031a031a
 800f160:	031a031a 	.word	0x031a031a
 800f164:	013b031a 	.word	0x013b031a
 800f168:	031a031a 	.word	0x031a031a
 800f16c:	0180031a 	.word	0x0180031a
 800f170:	025e031a 	.word	0x025e031a
 800f174:	031a031a 	.word	0x031a031a
 800f178:	031a027e 	.word	0x031a027e
 800f17c:	031a031a 	.word	0x031a031a
 800f180:	031a031a 	.word	0x031a031a
 800f184:	031a031a 	.word	0x031a031a
 800f188:	031a031a 	.word	0x031a031a
 800f18c:	00dd031a 	.word	0x00dd031a
 800f190:	031a00ed 	.word	0x031a00ed
 800f194:	031a031a 	.word	0x031a031a
 800f198:	00ed00c3 	.word	0x00ed00c3
 800f19c:	031a00d7 	.word	0x031a00d7
 800f1a0:	031a00d0 	.word	0x031a00d0
 800f1a4:	013d0119 	.word	0x013d0119
 800f1a8:	00d70172 	.word	0x00d70172
 800f1ac:	0180031a 	.word	0x0180031a
 800f1b0:	0260007c 	.word	0x0260007c
 800f1b4:	031a031a 	.word	0x031a031a
 800f1b8:	031a029a 	.word	0x031a029a
 800f1bc:	007c      	.short	0x007c
 800f1be:	aa0e      	add	r2, sp, #56	; 0x38
 800f1c0:	4639      	mov	r1, r7
 800f1c2:	4648      	mov	r0, r9
 800f1c4:	f7ff fed6 	bl	800ef74 <__sprint_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f040 8338 	bne.w	800f83e <_vfiprintf_r+0x866>
 800f1ce:	ae11      	add	r6, sp, #68	; 0x44
 800f1d0:	e77f      	b.n	800f0d2 <_vfiprintf_r+0xfa>
 800f1d2:	4648      	mov	r0, r9
 800f1d4:	f000 ff9c 	bl	8010110 <_localeconv_r>
 800f1d8:	6843      	ldr	r3, [r0, #4]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	ee08 3a10 	vmov	s16, r3
 800f1e0:	f7f1 f84e 	bl	8000280 <strlen>
 800f1e4:	9007      	str	r0, [sp, #28]
 800f1e6:	4648      	mov	r0, r9
 800f1e8:	f000 ff92 	bl	8010110 <_localeconv_r>
 800f1ec:	6883      	ldr	r3, [r0, #8]
 800f1ee:	9306      	str	r3, [sp, #24]
 800f1f0:	9b07      	ldr	r3, [sp, #28]
 800f1f2:	b12b      	cbz	r3, 800f200 <_vfiprintf_r+0x228>
 800f1f4:	9b06      	ldr	r3, [sp, #24]
 800f1f6:	b11b      	cbz	r3, 800f200 <_vfiprintf_r+0x228>
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	b10b      	cbz	r3, 800f200 <_vfiprintf_r+0x228>
 800f1fc:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800f200:	9d01      	ldr	r5, [sp, #4]
 800f202:	e776      	b.n	800f0f2 <_vfiprintf_r+0x11a>
 800f204:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1f9      	bne.n	800f200 <_vfiprintf_r+0x228>
 800f20c:	2320      	movs	r3, #32
 800f20e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f212:	e7f5      	b.n	800f200 <_vfiprintf_r+0x228>
 800f214:	f04a 0a01 	orr.w	sl, sl, #1
 800f218:	e7f2      	b.n	800f200 <_vfiprintf_r+0x228>
 800f21a:	f854 3b04 	ldr.w	r3, [r4], #4
 800f21e:	2b00      	cmp	r3, #0
 800f220:	9303      	str	r3, [sp, #12]
 800f222:	daed      	bge.n	800f200 <_vfiprintf_r+0x228>
 800f224:	425b      	negs	r3, r3
 800f226:	9303      	str	r3, [sp, #12]
 800f228:	f04a 0a04 	orr.w	sl, sl, #4
 800f22c:	e7e8      	b.n	800f200 <_vfiprintf_r+0x228>
 800f22e:	232b      	movs	r3, #43	; 0x2b
 800f230:	e7ed      	b.n	800f20e <_vfiprintf_r+0x236>
 800f232:	9a01      	ldr	r2, [sp, #4]
 800f234:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f238:	2b2a      	cmp	r3, #42	; 0x2a
 800f23a:	d112      	bne.n	800f262 <_vfiprintf_r+0x28a>
 800f23c:	f854 3b04 	ldr.w	r3, [r4], #4
 800f240:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f244:	e9cd 3200 	strd	r3, r2, [sp]
 800f248:	e7da      	b.n	800f200 <_vfiprintf_r+0x228>
 800f24a:	9b00      	ldr	r3, [sp, #0]
 800f24c:	200a      	movs	r0, #10
 800f24e:	fb00 1303 	mla	r3, r0, r3, r1
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f258:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f25c:	2909      	cmp	r1, #9
 800f25e:	d9f4      	bls.n	800f24a <_vfiprintf_r+0x272>
 800f260:	e74a      	b.n	800f0f8 <_vfiprintf_r+0x120>
 800f262:	2100      	movs	r1, #0
 800f264:	9100      	str	r1, [sp, #0]
 800f266:	e7f7      	b.n	800f258 <_vfiprintf_r+0x280>
 800f268:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800f26c:	e7c8      	b.n	800f200 <_vfiprintf_r+0x228>
 800f26e:	2100      	movs	r1, #0
 800f270:	9a01      	ldr	r2, [sp, #4]
 800f272:	9103      	str	r1, [sp, #12]
 800f274:	9903      	ldr	r1, [sp, #12]
 800f276:	3b30      	subs	r3, #48	; 0x30
 800f278:	200a      	movs	r0, #10
 800f27a:	fb00 3301 	mla	r3, r0, r1, r3
 800f27e:	9303      	str	r3, [sp, #12]
 800f280:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f284:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f288:	2909      	cmp	r1, #9
 800f28a:	d9f3      	bls.n	800f274 <_vfiprintf_r+0x29c>
 800f28c:	e734      	b.n	800f0f8 <_vfiprintf_r+0x120>
 800f28e:	9b01      	ldr	r3, [sp, #4]
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	2b68      	cmp	r3, #104	; 0x68
 800f294:	bf05      	ittet	eq
 800f296:	9b01      	ldreq	r3, [sp, #4]
 800f298:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800f29c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800f2a0:	3301      	addeq	r3, #1
 800f2a2:	bf08      	it	eq
 800f2a4:	9301      	streq	r3, [sp, #4]
 800f2a6:	e7ab      	b.n	800f200 <_vfiprintf_r+0x228>
 800f2a8:	9b01      	ldr	r3, [sp, #4]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	2b6c      	cmp	r3, #108	; 0x6c
 800f2ae:	d105      	bne.n	800f2bc <_vfiprintf_r+0x2e4>
 800f2b0:	9b01      	ldr	r3, [sp, #4]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	9301      	str	r3, [sp, #4]
 800f2b6:	f04a 0a20 	orr.w	sl, sl, #32
 800f2ba:	e7a1      	b.n	800f200 <_vfiprintf_r+0x228>
 800f2bc:	f04a 0a10 	orr.w	sl, sl, #16
 800f2c0:	e79e      	b.n	800f200 <_vfiprintf_r+0x228>
 800f2c2:	46a0      	mov	r8, r4
 800f2c4:	f858 3b04 	ldr.w	r3, [r8], #4
 800f2c8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	461d      	mov	r5, r3
 800f2d6:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800f2da:	9200      	str	r2, [sp, #0]
 800f2dc:	e0a9      	b.n	800f432 <_vfiprintf_r+0x45a>
 800f2de:	f04a 0a10 	orr.w	sl, sl, #16
 800f2e2:	f01a 0f20 	tst.w	sl, #32
 800f2e6:	d011      	beq.n	800f30c <_vfiprintf_r+0x334>
 800f2e8:	3407      	adds	r4, #7
 800f2ea:	f024 0307 	bic.w	r3, r4, #7
 800f2ee:	4698      	mov	r8, r3
 800f2f0:	685d      	ldr	r5, [r3, #4]
 800f2f2:	f858 4b08 	ldr.w	r4, [r8], #8
 800f2f6:	2d00      	cmp	r5, #0
 800f2f8:	da06      	bge.n	800f308 <_vfiprintf_r+0x330>
 800f2fa:	4264      	negs	r4, r4
 800f2fc:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800f300:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f304:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f308:	2301      	movs	r3, #1
 800f30a:	e04a      	b.n	800f3a2 <_vfiprintf_r+0x3ca>
 800f30c:	46a0      	mov	r8, r4
 800f30e:	f01a 0f10 	tst.w	sl, #16
 800f312:	f858 5b04 	ldr.w	r5, [r8], #4
 800f316:	d002      	beq.n	800f31e <_vfiprintf_r+0x346>
 800f318:	462c      	mov	r4, r5
 800f31a:	17ed      	asrs	r5, r5, #31
 800f31c:	e7eb      	b.n	800f2f6 <_vfiprintf_r+0x31e>
 800f31e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f322:	d003      	beq.n	800f32c <_vfiprintf_r+0x354>
 800f324:	b22c      	sxth	r4, r5
 800f326:	f345 35c0 	sbfx	r5, r5, #15, #1
 800f32a:	e7e4      	b.n	800f2f6 <_vfiprintf_r+0x31e>
 800f32c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f330:	d0f2      	beq.n	800f318 <_vfiprintf_r+0x340>
 800f332:	b26c      	sxtb	r4, r5
 800f334:	f345 15c0 	sbfx	r5, r5, #7, #1
 800f338:	e7dd      	b.n	800f2f6 <_vfiprintf_r+0x31e>
 800f33a:	f01a 0f20 	tst.w	sl, #32
 800f33e:	f104 0804 	add.w	r8, r4, #4
 800f342:	d007      	beq.n	800f354 <_vfiprintf_r+0x37c>
 800f344:	9a02      	ldr	r2, [sp, #8]
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	17d2      	asrs	r2, r2, #31
 800f34a:	9902      	ldr	r1, [sp, #8]
 800f34c:	e9c3 1200 	strd	r1, r2, [r3]
 800f350:	4644      	mov	r4, r8
 800f352:	e6a8      	b.n	800f0a6 <_vfiprintf_r+0xce>
 800f354:	f01a 0f10 	tst.w	sl, #16
 800f358:	d003      	beq.n	800f362 <_vfiprintf_r+0x38a>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	9a02      	ldr	r2, [sp, #8]
 800f35e:	601a      	str	r2, [r3, #0]
 800f360:	e7f6      	b.n	800f350 <_vfiprintf_r+0x378>
 800f362:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f366:	d003      	beq.n	800f370 <_vfiprintf_r+0x398>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	9a02      	ldr	r2, [sp, #8]
 800f36c:	801a      	strh	r2, [r3, #0]
 800f36e:	e7ef      	b.n	800f350 <_vfiprintf_r+0x378>
 800f370:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f374:	d0f1      	beq.n	800f35a <_vfiprintf_r+0x382>
 800f376:	6823      	ldr	r3, [r4, #0]
 800f378:	9a02      	ldr	r2, [sp, #8]
 800f37a:	701a      	strb	r2, [r3, #0]
 800f37c:	e7e8      	b.n	800f350 <_vfiprintf_r+0x378>
 800f37e:	f04a 0a10 	orr.w	sl, sl, #16
 800f382:	f01a 0320 	ands.w	r3, sl, #32
 800f386:	d01f      	beq.n	800f3c8 <_vfiprintf_r+0x3f0>
 800f388:	3407      	adds	r4, #7
 800f38a:	f024 0307 	bic.w	r3, r4, #7
 800f38e:	4698      	mov	r8, r3
 800f390:	685d      	ldr	r5, [r3, #4]
 800f392:	f858 4b08 	ldr.w	r4, [r8], #8
 800f396:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f39a:	2300      	movs	r3, #0
 800f39c:	2200      	movs	r2, #0
 800f39e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800f3a2:	9a00      	ldr	r2, [sp, #0]
 800f3a4:	3201      	adds	r2, #1
 800f3a6:	f000 8278 	beq.w	800f89a <_vfiprintf_r+0x8c2>
 800f3aa:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800f3ae:	9204      	str	r2, [sp, #16]
 800f3b0:	ea54 0205 	orrs.w	r2, r4, r5
 800f3b4:	f040 8277 	bne.w	800f8a6 <_vfiprintf_r+0x8ce>
 800f3b8:	9a00      	ldr	r2, [sp, #0]
 800f3ba:	2a00      	cmp	r2, #0
 800f3bc:	f000 81b3 	beq.w	800f726 <_vfiprintf_r+0x74e>
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	f040 8273 	bne.w	800f8ac <_vfiprintf_r+0x8d4>
 800f3c6:	e151      	b.n	800f66c <_vfiprintf_r+0x694>
 800f3c8:	46a0      	mov	r8, r4
 800f3ca:	f01a 0510 	ands.w	r5, sl, #16
 800f3ce:	f858 4b04 	ldr.w	r4, [r8], #4
 800f3d2:	d001      	beq.n	800f3d8 <_vfiprintf_r+0x400>
 800f3d4:	461d      	mov	r5, r3
 800f3d6:	e7de      	b.n	800f396 <_vfiprintf_r+0x3be>
 800f3d8:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f3dc:	d001      	beq.n	800f3e2 <_vfiprintf_r+0x40a>
 800f3de:	b2a4      	uxth	r4, r4
 800f3e0:	e7d9      	b.n	800f396 <_vfiprintf_r+0x3be>
 800f3e2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f3e6:	d0d6      	beq.n	800f396 <_vfiprintf_r+0x3be>
 800f3e8:	b2e4      	uxtb	r4, r4
 800f3ea:	e7f3      	b.n	800f3d4 <_vfiprintf_r+0x3fc>
 800f3ec:	f647 0330 	movw	r3, #30768	; 0x7830
 800f3f0:	46a0      	mov	r8, r4
 800f3f2:	2500      	movs	r5, #0
 800f3f4:	f04a 0a02 	orr.w	sl, sl, #2
 800f3f8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f3fc:	f858 4b04 	ldr.w	r4, [r8], #4
 800f400:	4b9d      	ldr	r3, [pc, #628]	; (800f678 <_vfiprintf_r+0x6a0>)
 800f402:	9305      	str	r3, [sp, #20]
 800f404:	2302      	movs	r3, #2
 800f406:	e7c9      	b.n	800f39c <_vfiprintf_r+0x3c4>
 800f408:	9b00      	ldr	r3, [sp, #0]
 800f40a:	46a0      	mov	r8, r4
 800f40c:	2500      	movs	r5, #0
 800f40e:	1c5c      	adds	r4, r3, #1
 800f410:	f858 bb04 	ldr.w	fp, [r8], #4
 800f414:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800f418:	f000 80cf 	beq.w	800f5ba <_vfiprintf_r+0x5e2>
 800f41c:	461a      	mov	r2, r3
 800f41e:	4629      	mov	r1, r5
 800f420:	4658      	mov	r0, fp
 800f422:	f000 fe8d 	bl	8010140 <memchr>
 800f426:	2800      	cmp	r0, #0
 800f428:	f000 8192 	beq.w	800f750 <_vfiprintf_r+0x778>
 800f42c:	eba0 030b 	sub.w	r3, r0, fp
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	9b00      	ldr	r3, [sp, #0]
 800f434:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800f438:	42ab      	cmp	r3, r5
 800f43a:	bfb8      	it	lt
 800f43c:	462b      	movlt	r3, r5
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	b10a      	cbz	r2, 800f446 <_vfiprintf_r+0x46e>
 800f442:	3301      	adds	r3, #1
 800f444:	9304      	str	r3, [sp, #16]
 800f446:	f01a 0302 	ands.w	r3, sl, #2
 800f44a:	9308      	str	r3, [sp, #32]
 800f44c:	bf1e      	ittt	ne
 800f44e:	9b04      	ldrne	r3, [sp, #16]
 800f450:	3302      	addne	r3, #2
 800f452:	9304      	strne	r3, [sp, #16]
 800f454:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f458:	9309      	str	r3, [sp, #36]	; 0x24
 800f45a:	d11f      	bne.n	800f49c <_vfiprintf_r+0x4c4>
 800f45c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f460:	1a9c      	subs	r4, r3, r2
 800f462:	2c00      	cmp	r4, #0
 800f464:	dd1a      	ble.n	800f49c <_vfiprintf_r+0x4c4>
 800f466:	4b85      	ldr	r3, [pc, #532]	; (800f67c <_vfiprintf_r+0x6a4>)
 800f468:	2c10      	cmp	r4, #16
 800f46a:	f106 0008 	add.w	r0, r6, #8
 800f46e:	6033      	str	r3, [r6, #0]
 800f470:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800f474:	f102 0201 	add.w	r2, r2, #1
 800f478:	f300 816c 	bgt.w	800f754 <_vfiprintf_r+0x77c>
 800f47c:	6074      	str	r4, [r6, #4]
 800f47e:	2a07      	cmp	r2, #7
 800f480:	4464      	add	r4, ip
 800f482:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f486:	f340 8178 	ble.w	800f77a <_vfiprintf_r+0x7a2>
 800f48a:	aa0e      	add	r2, sp, #56	; 0x38
 800f48c:	4639      	mov	r1, r7
 800f48e:	4648      	mov	r0, r9
 800f490:	f7ff fd70 	bl	800ef74 <__sprint_r>
 800f494:	2800      	cmp	r0, #0
 800f496:	f040 81d2 	bne.w	800f83e <_vfiprintf_r+0x866>
 800f49a:	ae11      	add	r6, sp, #68	; 0x44
 800f49c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800f4a0:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f4a4:	b160      	cbz	r0, 800f4c0 <_vfiprintf_r+0x4e8>
 800f4a6:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800f4aa:	3201      	adds	r2, #1
 800f4ac:	6030      	str	r0, [r6, #0]
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	2a07      	cmp	r2, #7
 800f4b2:	4401      	add	r1, r0
 800f4b4:	6070      	str	r0, [r6, #4]
 800f4b6:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f4ba:	f300 8160 	bgt.w	800f77e <_vfiprintf_r+0x7a6>
 800f4be:	3608      	adds	r6, #8
 800f4c0:	9b08      	ldr	r3, [sp, #32]
 800f4c2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f4c6:	b15b      	cbz	r3, 800f4e0 <_vfiprintf_r+0x508>
 800f4c8:	a80d      	add	r0, sp, #52	; 0x34
 800f4ca:	3201      	adds	r2, #1
 800f4cc:	6030      	str	r0, [r6, #0]
 800f4ce:	2002      	movs	r0, #2
 800f4d0:	2a07      	cmp	r2, #7
 800f4d2:	4401      	add	r1, r0
 800f4d4:	6070      	str	r0, [r6, #4]
 800f4d6:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f4da:	f300 8159 	bgt.w	800f790 <_vfiprintf_r+0x7b8>
 800f4de:	3608      	adds	r6, #8
 800f4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e2:	2b80      	cmp	r3, #128	; 0x80
 800f4e4:	d11f      	bne.n	800f526 <_vfiprintf_r+0x54e>
 800f4e6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f4ea:	1a9c      	subs	r4, r3, r2
 800f4ec:	2c00      	cmp	r4, #0
 800f4ee:	dd1a      	ble.n	800f526 <_vfiprintf_r+0x54e>
 800f4f0:	4b63      	ldr	r3, [pc, #396]	; (800f680 <_vfiprintf_r+0x6a8>)
 800f4f2:	2c10      	cmp	r4, #16
 800f4f4:	f106 0008 	add.w	r0, r6, #8
 800f4f8:	6033      	str	r3, [r6, #0]
 800f4fa:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800f4fe:	f102 0201 	add.w	r2, r2, #1
 800f502:	f300 814e 	bgt.w	800f7a2 <_vfiprintf_r+0x7ca>
 800f506:	6074      	str	r4, [r6, #4]
 800f508:	2a07      	cmp	r2, #7
 800f50a:	4464      	add	r4, ip
 800f50c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f510:	f340 815a 	ble.w	800f7c8 <_vfiprintf_r+0x7f0>
 800f514:	aa0e      	add	r2, sp, #56	; 0x38
 800f516:	4639      	mov	r1, r7
 800f518:	4648      	mov	r0, r9
 800f51a:	f7ff fd2b 	bl	800ef74 <__sprint_r>
 800f51e:	2800      	cmp	r0, #0
 800f520:	f040 818d 	bne.w	800f83e <_vfiprintf_r+0x866>
 800f524:	ae11      	add	r6, sp, #68	; 0x44
 800f526:	9b00      	ldr	r3, [sp, #0]
 800f528:	1aec      	subs	r4, r5, r3
 800f52a:	2c00      	cmp	r4, #0
 800f52c:	dd1b      	ble.n	800f566 <_vfiprintf_r+0x58e>
 800f52e:	4d54      	ldr	r5, [pc, #336]	; (800f680 <_vfiprintf_r+0x6a8>)
 800f530:	2310      	movs	r3, #16
 800f532:	2c10      	cmp	r4, #16
 800f534:	f106 0008 	add.w	r0, r6, #8
 800f538:	6035      	str	r5, [r6, #0]
 800f53a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f53e:	f102 0201 	add.w	r2, r2, #1
 800f542:	f300 8143 	bgt.w	800f7cc <_vfiprintf_r+0x7f4>
 800f546:	6074      	str	r4, [r6, #4]
 800f548:	2a07      	cmp	r2, #7
 800f54a:	440c      	add	r4, r1
 800f54c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f550:	f340 814d 	ble.w	800f7ee <_vfiprintf_r+0x816>
 800f554:	aa0e      	add	r2, sp, #56	; 0x38
 800f556:	4639      	mov	r1, r7
 800f558:	4648      	mov	r0, r9
 800f55a:	f7ff fd0b 	bl	800ef74 <__sprint_r>
 800f55e:	2800      	cmp	r0, #0
 800f560:	f040 816d 	bne.w	800f83e <_vfiprintf_r+0x866>
 800f564:	ae11      	add	r6, sp, #68	; 0x44
 800f566:	9b00      	ldr	r3, [sp, #0]
 800f568:	9a00      	ldr	r2, [sp, #0]
 800f56a:	6073      	str	r3, [r6, #4]
 800f56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f56e:	f8c6 b000 	str.w	fp, [r6]
 800f572:	4413      	add	r3, r2
 800f574:	9310      	str	r3, [sp, #64]	; 0x40
 800f576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f578:	3301      	adds	r3, #1
 800f57a:	2b07      	cmp	r3, #7
 800f57c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f57e:	f300 8138 	bgt.w	800f7f2 <_vfiprintf_r+0x81a>
 800f582:	f106 0308 	add.w	r3, r6, #8
 800f586:	f01a 0f04 	tst.w	sl, #4
 800f58a:	f040 813a 	bne.w	800f802 <_vfiprintf_r+0x82a>
 800f58e:	9904      	ldr	r1, [sp, #16]
 800f590:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f594:	428a      	cmp	r2, r1
 800f596:	bfac      	ite	ge
 800f598:	189b      	addge	r3, r3, r2
 800f59a:	185b      	addlt	r3, r3, r1
 800f59c:	9302      	str	r3, [sp, #8]
 800f59e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f5a0:	b13b      	cbz	r3, 800f5b2 <_vfiprintf_r+0x5da>
 800f5a2:	aa0e      	add	r2, sp, #56	; 0x38
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	4648      	mov	r0, r9
 800f5a8:	f7ff fce4 	bl	800ef74 <__sprint_r>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	f040 8146 	bne.w	800f83e <_vfiprintf_r+0x866>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	ae11      	add	r6, sp, #68	; 0x44
 800f5b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5b8:	e6ca      	b.n	800f350 <_vfiprintf_r+0x378>
 800f5ba:	4658      	mov	r0, fp
 800f5bc:	f7f0 fe60 	bl	8000280 <strlen>
 800f5c0:	9000      	str	r0, [sp, #0]
 800f5c2:	e736      	b.n	800f432 <_vfiprintf_r+0x45a>
 800f5c4:	f04a 0a10 	orr.w	sl, sl, #16
 800f5c8:	f01a 0320 	ands.w	r3, sl, #32
 800f5cc:	d008      	beq.n	800f5e0 <_vfiprintf_r+0x608>
 800f5ce:	3407      	adds	r4, #7
 800f5d0:	f024 0307 	bic.w	r3, r4, #7
 800f5d4:	4698      	mov	r8, r3
 800f5d6:	685d      	ldr	r5, [r3, #4]
 800f5d8:	f858 4b08 	ldr.w	r4, [r8], #8
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e6dd      	b.n	800f39c <_vfiprintf_r+0x3c4>
 800f5e0:	46a0      	mov	r8, r4
 800f5e2:	f01a 0510 	ands.w	r5, sl, #16
 800f5e6:	f858 4b04 	ldr.w	r4, [r8], #4
 800f5ea:	d001      	beq.n	800f5f0 <_vfiprintf_r+0x618>
 800f5ec:	461d      	mov	r5, r3
 800f5ee:	e7f5      	b.n	800f5dc <_vfiprintf_r+0x604>
 800f5f0:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f5f4:	d001      	beq.n	800f5fa <_vfiprintf_r+0x622>
 800f5f6:	b2a4      	uxth	r4, r4
 800f5f8:	e7f0      	b.n	800f5dc <_vfiprintf_r+0x604>
 800f5fa:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f5fe:	d0ed      	beq.n	800f5dc <_vfiprintf_r+0x604>
 800f600:	b2e4      	uxtb	r4, r4
 800f602:	e7f3      	b.n	800f5ec <_vfiprintf_r+0x614>
 800f604:	4a1f      	ldr	r2, [pc, #124]	; (800f684 <_vfiprintf_r+0x6ac>)
 800f606:	9205      	str	r2, [sp, #20]
 800f608:	f01a 0220 	ands.w	r2, sl, #32
 800f60c:	d018      	beq.n	800f640 <_vfiprintf_r+0x668>
 800f60e:	3407      	adds	r4, #7
 800f610:	f024 0207 	bic.w	r2, r4, #7
 800f614:	4690      	mov	r8, r2
 800f616:	6855      	ldr	r5, [r2, #4]
 800f618:	f858 4b08 	ldr.w	r4, [r8], #8
 800f61c:	f01a 0f01 	tst.w	sl, #1
 800f620:	d009      	beq.n	800f636 <_vfiprintf_r+0x65e>
 800f622:	ea54 0205 	orrs.w	r2, r4, r5
 800f626:	bf1f      	itttt	ne
 800f628:	2230      	movne	r2, #48	; 0x30
 800f62a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f62e:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800f632:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800f636:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f63a:	e6e3      	b.n	800f404 <_vfiprintf_r+0x42c>
 800f63c:	4a0e      	ldr	r2, [pc, #56]	; (800f678 <_vfiprintf_r+0x6a0>)
 800f63e:	e7e2      	b.n	800f606 <_vfiprintf_r+0x62e>
 800f640:	46a0      	mov	r8, r4
 800f642:	f01a 0510 	ands.w	r5, sl, #16
 800f646:	f858 4b04 	ldr.w	r4, [r8], #4
 800f64a:	d001      	beq.n	800f650 <_vfiprintf_r+0x678>
 800f64c:	4615      	mov	r5, r2
 800f64e:	e7e5      	b.n	800f61c <_vfiprintf_r+0x644>
 800f650:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f654:	d001      	beq.n	800f65a <_vfiprintf_r+0x682>
 800f656:	b2a4      	uxth	r4, r4
 800f658:	e7e0      	b.n	800f61c <_vfiprintf_r+0x644>
 800f65a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f65e:	d0dd      	beq.n	800f61c <_vfiprintf_r+0x644>
 800f660:	b2e4      	uxtb	r4, r4
 800f662:	e7f3      	b.n	800f64c <_vfiprintf_r+0x674>
 800f664:	2c0a      	cmp	r4, #10
 800f666:	f175 0300 	sbcs.w	r3, r5, #0
 800f66a:	d20d      	bcs.n	800f688 <_vfiprintf_r+0x6b0>
 800f66c:	3430      	adds	r4, #48	; 0x30
 800f66e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800f672:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800f676:	e135      	b.n	800f8e4 <_vfiprintf_r+0x90c>
 800f678:	08011f05 	.word	0x08011f05
 800f67c:	08011f49 	.word	0x08011f49
 800f680:	08011f59 	.word	0x08011f59
 800f684:	08011f16 	.word	0x08011f16
 800f688:	ab3a      	add	r3, sp, #232	; 0xe8
 800f68a:	f04f 0a00 	mov.w	sl, #0
 800f68e:	9308      	str	r3, [sp, #32]
 800f690:	9b04      	ldr	r3, [sp, #16]
 800f692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f696:	9309      	str	r3, [sp, #36]	; 0x24
 800f698:	220a      	movs	r2, #10
 800f69a:	2300      	movs	r3, #0
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f7f1 fa8a 	bl	8000bb8 <__aeabi_uldivmod>
 800f6a4:	9b08      	ldr	r3, [sp, #32]
 800f6a6:	3230      	adds	r2, #48	; 0x30
 800f6a8:	f10a 0a01 	add.w	sl, sl, #1
 800f6ac:	f103 3bff 	add.w	fp, r3, #4294967295
 800f6b0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f6ba:	b1d3      	cbz	r3, 800f6f2 <_vfiprintf_r+0x71a>
 800f6bc:	9b06      	ldr	r3, [sp, #24]
 800f6be:	781a      	ldrb	r2, [r3, #0]
 800f6c0:	4552      	cmp	r2, sl
 800f6c2:	d116      	bne.n	800f6f2 <_vfiprintf_r+0x71a>
 800f6c4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f6c8:	d013      	beq.n	800f6f2 <_vfiprintf_r+0x71a>
 800f6ca:	2c0a      	cmp	r4, #10
 800f6cc:	f175 0200 	sbcs.w	r2, r5, #0
 800f6d0:	d30f      	bcc.n	800f6f2 <_vfiprintf_r+0x71a>
 800f6d2:	9b07      	ldr	r3, [sp, #28]
 800f6d4:	ee18 1a10 	vmov	r1, s16
 800f6d8:	ebab 0b03 	sub.w	fp, fp, r3
 800f6dc:	461a      	mov	r2, r3
 800f6de:	4658      	mov	r0, fp
 800f6e0:	f000 fcfd 	bl	80100de <strncpy>
 800f6e4:	9b06      	ldr	r3, [sp, #24]
 800f6e6:	785a      	ldrb	r2, [r3, #1]
 800f6e8:	b16a      	cbz	r2, 800f706 <_vfiprintf_r+0x72e>
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	f04f 0a00 	mov.w	sl, #0
 800f6f0:	9306      	str	r3, [sp, #24]
 800f6f2:	2c0a      	cmp	r4, #10
 800f6f4:	f175 0500 	sbcs.w	r5, r5, #0
 800f6f8:	f0c0 80f4 	bcc.w	800f8e4 <_vfiprintf_r+0x90c>
 800f6fc:	f8cd b020 	str.w	fp, [sp, #32]
 800f700:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800f704:	e7c8      	b.n	800f698 <_vfiprintf_r+0x6c0>
 800f706:	4692      	mov	sl, r2
 800f708:	e7f3      	b.n	800f6f2 <_vfiprintf_r+0x71a>
 800f70a:	f004 020f 	and.w	r2, r4, #15
 800f70e:	9b05      	ldr	r3, [sp, #20]
 800f710:	0924      	lsrs	r4, r4, #4
 800f712:	5c9a      	ldrb	r2, [r3, r2]
 800f714:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f718:	092d      	lsrs	r5, r5, #4
 800f71a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800f71e:	ea54 0205 	orrs.w	r2, r4, r5
 800f722:	d1f2      	bne.n	800f70a <_vfiprintf_r+0x732>
 800f724:	e0de      	b.n	800f8e4 <_vfiprintf_r+0x90c>
 800f726:	b933      	cbnz	r3, 800f736 <_vfiprintf_r+0x75e>
 800f728:	f01a 0f01 	tst.w	sl, #1
 800f72c:	d003      	beq.n	800f736 <_vfiprintf_r+0x75e>
 800f72e:	2330      	movs	r3, #48	; 0x30
 800f730:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800f734:	e79d      	b.n	800f672 <_vfiprintf_r+0x69a>
 800f736:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800f73a:	e0d3      	b.n	800f8e4 <_vfiprintf_r+0x90c>
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f000 809f 	beq.w	800f880 <_vfiprintf_r+0x8a8>
 800f742:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f746:	2300      	movs	r3, #0
 800f748:	46a0      	mov	r8, r4
 800f74a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f74e:	e5c0      	b.n	800f2d2 <_vfiprintf_r+0x2fa>
 800f750:	4605      	mov	r5, r0
 800f752:	e66e      	b.n	800f432 <_vfiprintf_r+0x45a>
 800f754:	2110      	movs	r1, #16
 800f756:	2a07      	cmp	r2, #7
 800f758:	6071      	str	r1, [r6, #4]
 800f75a:	4461      	add	r1, ip
 800f75c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f760:	dd08      	ble.n	800f774 <_vfiprintf_r+0x79c>
 800f762:	aa0e      	add	r2, sp, #56	; 0x38
 800f764:	4639      	mov	r1, r7
 800f766:	4648      	mov	r0, r9
 800f768:	f7ff fc04 	bl	800ef74 <__sprint_r>
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d166      	bne.n	800f83e <_vfiprintf_r+0x866>
 800f770:	a811      	add	r0, sp, #68	; 0x44
 800f772:	4b60      	ldr	r3, [pc, #384]	; (800f8f4 <_vfiprintf_r+0x91c>)
 800f774:	3c10      	subs	r4, #16
 800f776:	4606      	mov	r6, r0
 800f778:	e676      	b.n	800f468 <_vfiprintf_r+0x490>
 800f77a:	4606      	mov	r6, r0
 800f77c:	e68e      	b.n	800f49c <_vfiprintf_r+0x4c4>
 800f77e:	aa0e      	add	r2, sp, #56	; 0x38
 800f780:	4639      	mov	r1, r7
 800f782:	4648      	mov	r0, r9
 800f784:	f7ff fbf6 	bl	800ef74 <__sprint_r>
 800f788:	2800      	cmp	r0, #0
 800f78a:	d158      	bne.n	800f83e <_vfiprintf_r+0x866>
 800f78c:	ae11      	add	r6, sp, #68	; 0x44
 800f78e:	e697      	b.n	800f4c0 <_vfiprintf_r+0x4e8>
 800f790:	aa0e      	add	r2, sp, #56	; 0x38
 800f792:	4639      	mov	r1, r7
 800f794:	4648      	mov	r0, r9
 800f796:	f7ff fbed 	bl	800ef74 <__sprint_r>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	d14f      	bne.n	800f83e <_vfiprintf_r+0x866>
 800f79e:	ae11      	add	r6, sp, #68	; 0x44
 800f7a0:	e69e      	b.n	800f4e0 <_vfiprintf_r+0x508>
 800f7a2:	2110      	movs	r1, #16
 800f7a4:	2a07      	cmp	r2, #7
 800f7a6:	6071      	str	r1, [r6, #4]
 800f7a8:	4461      	add	r1, ip
 800f7aa:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f7ae:	dd08      	ble.n	800f7c2 <_vfiprintf_r+0x7ea>
 800f7b0:	aa0e      	add	r2, sp, #56	; 0x38
 800f7b2:	4639      	mov	r1, r7
 800f7b4:	4648      	mov	r0, r9
 800f7b6:	f7ff fbdd 	bl	800ef74 <__sprint_r>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d13f      	bne.n	800f83e <_vfiprintf_r+0x866>
 800f7be:	a811      	add	r0, sp, #68	; 0x44
 800f7c0:	4b4d      	ldr	r3, [pc, #308]	; (800f8f8 <_vfiprintf_r+0x920>)
 800f7c2:	3c10      	subs	r4, #16
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	e694      	b.n	800f4f2 <_vfiprintf_r+0x51a>
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	e6ac      	b.n	800f526 <_vfiprintf_r+0x54e>
 800f7cc:	3110      	adds	r1, #16
 800f7ce:	2a07      	cmp	r2, #7
 800f7d0:	6073      	str	r3, [r6, #4]
 800f7d2:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f7d6:	dd07      	ble.n	800f7e8 <_vfiprintf_r+0x810>
 800f7d8:	aa0e      	add	r2, sp, #56	; 0x38
 800f7da:	4639      	mov	r1, r7
 800f7dc:	4648      	mov	r0, r9
 800f7de:	f7ff fbc9 	bl	800ef74 <__sprint_r>
 800f7e2:	bb60      	cbnz	r0, 800f83e <_vfiprintf_r+0x866>
 800f7e4:	a811      	add	r0, sp, #68	; 0x44
 800f7e6:	2310      	movs	r3, #16
 800f7e8:	3c10      	subs	r4, #16
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	e6a1      	b.n	800f532 <_vfiprintf_r+0x55a>
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	e6b9      	b.n	800f566 <_vfiprintf_r+0x58e>
 800f7f2:	aa0e      	add	r2, sp, #56	; 0x38
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	4648      	mov	r0, r9
 800f7f8:	f7ff fbbc 	bl	800ef74 <__sprint_r>
 800f7fc:	b9f8      	cbnz	r0, 800f83e <_vfiprintf_r+0x866>
 800f7fe:	ab11      	add	r3, sp, #68	; 0x44
 800f800:	e6c1      	b.n	800f586 <_vfiprintf_r+0x5ae>
 800f802:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f806:	1a54      	subs	r4, r2, r1
 800f808:	2c00      	cmp	r4, #0
 800f80a:	f77f aec0 	ble.w	800f58e <_vfiprintf_r+0x5b6>
 800f80e:	4d39      	ldr	r5, [pc, #228]	; (800f8f4 <_vfiprintf_r+0x91c>)
 800f810:	2610      	movs	r6, #16
 800f812:	2c10      	cmp	r4, #16
 800f814:	601d      	str	r5, [r3, #0]
 800f816:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f81a:	f102 0201 	add.w	r2, r2, #1
 800f81e:	dc1d      	bgt.n	800f85c <_vfiprintf_r+0x884>
 800f820:	605c      	str	r4, [r3, #4]
 800f822:	2a07      	cmp	r2, #7
 800f824:	440c      	add	r4, r1
 800f826:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f82a:	f77f aeb0 	ble.w	800f58e <_vfiprintf_r+0x5b6>
 800f82e:	aa0e      	add	r2, sp, #56	; 0x38
 800f830:	4639      	mov	r1, r7
 800f832:	4648      	mov	r0, r9
 800f834:	f7ff fb9e 	bl	800ef74 <__sprint_r>
 800f838:	2800      	cmp	r0, #0
 800f83a:	f43f aea8 	beq.w	800f58e <_vfiprintf_r+0x5b6>
 800f83e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f840:	07d9      	lsls	r1, r3, #31
 800f842:	d405      	bmi.n	800f850 <_vfiprintf_r+0x878>
 800f844:	89bb      	ldrh	r3, [r7, #12]
 800f846:	059a      	lsls	r2, r3, #22
 800f848:	d402      	bmi.n	800f850 <_vfiprintf_r+0x878>
 800f84a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f84c:	f7f3 f83a 	bl	80028c4 <__retarget_lock_release_recursive>
 800f850:	89bb      	ldrh	r3, [r7, #12]
 800f852:	065b      	lsls	r3, r3, #25
 800f854:	f57f abf3 	bpl.w	800f03e <_vfiprintf_r+0x66>
 800f858:	f7ff bbee 	b.w	800f038 <_vfiprintf_r+0x60>
 800f85c:	3110      	adds	r1, #16
 800f85e:	2a07      	cmp	r2, #7
 800f860:	605e      	str	r6, [r3, #4]
 800f862:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f866:	dc02      	bgt.n	800f86e <_vfiprintf_r+0x896>
 800f868:	3308      	adds	r3, #8
 800f86a:	3c10      	subs	r4, #16
 800f86c:	e7d1      	b.n	800f812 <_vfiprintf_r+0x83a>
 800f86e:	aa0e      	add	r2, sp, #56	; 0x38
 800f870:	4639      	mov	r1, r7
 800f872:	4648      	mov	r0, r9
 800f874:	f7ff fb7e 	bl	800ef74 <__sprint_r>
 800f878:	2800      	cmp	r0, #0
 800f87a:	d1e0      	bne.n	800f83e <_vfiprintf_r+0x866>
 800f87c:	ab11      	add	r3, sp, #68	; 0x44
 800f87e:	e7f4      	b.n	800f86a <_vfiprintf_r+0x892>
 800f880:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f882:	b913      	cbnz	r3, 800f88a <_vfiprintf_r+0x8b2>
 800f884:	2300      	movs	r3, #0
 800f886:	930f      	str	r3, [sp, #60]	; 0x3c
 800f888:	e7d9      	b.n	800f83e <_vfiprintf_r+0x866>
 800f88a:	aa0e      	add	r2, sp, #56	; 0x38
 800f88c:	4639      	mov	r1, r7
 800f88e:	4648      	mov	r0, r9
 800f890:	f7ff fb70 	bl	800ef74 <__sprint_r>
 800f894:	2800      	cmp	r0, #0
 800f896:	d0f5      	beq.n	800f884 <_vfiprintf_r+0x8ac>
 800f898:	e7d1      	b.n	800f83e <_vfiprintf_r+0x866>
 800f89a:	ea54 0205 	orrs.w	r2, r4, r5
 800f89e:	f8cd a010 	str.w	sl, [sp, #16]
 800f8a2:	f43f ad8d 	beq.w	800f3c0 <_vfiprintf_r+0x3e8>
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	f43f aedc 	beq.w	800f664 <_vfiprintf_r+0x68c>
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800f8b2:	f43f af2a 	beq.w	800f70a <_vfiprintf_r+0x732>
 800f8b6:	f004 0207 	and.w	r2, r4, #7
 800f8ba:	08e4      	lsrs	r4, r4, #3
 800f8bc:	4659      	mov	r1, fp
 800f8be:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f8c2:	3230      	adds	r2, #48	; 0x30
 800f8c4:	08ed      	lsrs	r5, r5, #3
 800f8c6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800f8ca:	ea54 0005 	orrs.w	r0, r4, r5
 800f8ce:	d1f2      	bne.n	800f8b6 <_vfiprintf_r+0x8de>
 800f8d0:	9b04      	ldr	r3, [sp, #16]
 800f8d2:	07d8      	lsls	r0, r3, #31
 800f8d4:	d506      	bpl.n	800f8e4 <_vfiprintf_r+0x90c>
 800f8d6:	2a30      	cmp	r2, #48	; 0x30
 800f8d8:	d004      	beq.n	800f8e4 <_vfiprintf_r+0x90c>
 800f8da:	2230      	movs	r2, #48	; 0x30
 800f8dc:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800f8e0:	f1a1 0b02 	sub.w	fp, r1, #2
 800f8e4:	ab3a      	add	r3, sp, #232	; 0xe8
 800f8e6:	9d00      	ldr	r5, [sp, #0]
 800f8e8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f8ec:	eba3 030b 	sub.w	r3, r3, fp
 800f8f0:	9300      	str	r3, [sp, #0]
 800f8f2:	e59e      	b.n	800f432 <_vfiprintf_r+0x45a>
 800f8f4:	08011f49 	.word	0x08011f49
 800f8f8:	08011f59 	.word	0x08011f59

0800f8fc <__sbprintf>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	460c      	mov	r4, r1
 800f900:	8989      	ldrh	r1, [r1, #12]
 800f902:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f906:	4606      	mov	r6, r0
 800f908:	f021 0102 	bic.w	r1, r1, #2
 800f90c:	a818      	add	r0, sp, #96	; 0x60
 800f90e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f912:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f914:	911b      	str	r1, [sp, #108]	; 0x6c
 800f916:	89e1      	ldrh	r1, [r4, #14]
 800f918:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f91c:	69e1      	ldr	r1, [r4, #28]
 800f91e:	9109      	str	r1, [sp, #36]	; 0x24
 800f920:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f922:	910b      	str	r1, [sp, #44]	; 0x2c
 800f924:	a91c      	add	r1, sp, #112	; 0x70
 800f926:	9102      	str	r1, [sp, #8]
 800f928:	9106      	str	r1, [sp, #24]
 800f92a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f92e:	9104      	str	r1, [sp, #16]
 800f930:	9107      	str	r1, [sp, #28]
 800f932:	2100      	movs	r1, #0
 800f934:	e9cd 3200 	strd	r3, r2, [sp]
 800f938:	9108      	str	r1, [sp, #32]
 800f93a:	f7f2 ff7e 	bl	800283a <__retarget_lock_init_recursive>
 800f93e:	a902      	add	r1, sp, #8
 800f940:	4630      	mov	r0, r6
 800f942:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f946:	f7ff fb47 	bl	800efd8 <_vfiprintf_r>
 800f94a:	1e05      	subs	r5, r0, #0
 800f94c:	db07      	blt.n	800f95e <__sbprintf+0x62>
 800f94e:	a902      	add	r1, sp, #8
 800f950:	4630      	mov	r0, r6
 800f952:	f000 f8f9 	bl	800fb48 <_fflush_r>
 800f956:	2800      	cmp	r0, #0
 800f958:	bf18      	it	ne
 800f95a:	f04f 35ff 	movne.w	r5, #4294967295
 800f95e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f962:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f964:	065b      	lsls	r3, r3, #25
 800f966:	bf42      	ittt	mi
 800f968:	89a3      	ldrhmi	r3, [r4, #12]
 800f96a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f96e:	81a3      	strhmi	r3, [r4, #12]
 800f970:	f7f2 ff89 	bl	8002886 <__retarget_lock_close_recursive>
 800f974:	4628      	mov	r0, r5
 800f976:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f97a:	bd70      	pop	{r4, r5, r6, pc}

0800f97c <_fclose_r>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	4606      	mov	r6, r0
 800f980:	460c      	mov	r4, r1
 800f982:	b911      	cbnz	r1, 800f98a <_fclose_r+0xe>
 800f984:	2500      	movs	r5, #0
 800f986:	4628      	mov	r0, r5
 800f988:	bd70      	pop	{r4, r5, r6, pc}
 800f98a:	b118      	cbz	r0, 800f994 <_fclose_r+0x18>
 800f98c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f98e:	b90b      	cbnz	r3, 800f994 <_fclose_r+0x18>
 800f990:	f7fd fdbc 	bl	800d50c <__sinit>
 800f994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f996:	07d8      	lsls	r0, r3, #31
 800f998:	d405      	bmi.n	800f9a6 <_fclose_r+0x2a>
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	0599      	lsls	r1, r3, #22
 800f99e:	d402      	bmi.n	800f9a6 <_fclose_r+0x2a>
 800f9a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9a2:	f7f2 ff7b 	bl	800289c <__retarget_lock_acquire_recursive>
 800f9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9aa:	b93b      	cbnz	r3, 800f9bc <_fclose_r+0x40>
 800f9ac:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f9ae:	f015 0501 	ands.w	r5, r5, #1
 800f9b2:	d1e7      	bne.n	800f984 <_fclose_r+0x8>
 800f9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9b6:	f7f2 ff85 	bl	80028c4 <__retarget_lock_release_recursive>
 800f9ba:	e7e4      	b.n	800f986 <_fclose_r+0xa>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f000 f834 	bl	800fa2c <__sflush_r>
 800f9c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	b133      	cbz	r3, 800f9d8 <_fclose_r+0x5c>
 800f9ca:	69e1      	ldr	r1, [r4, #28]
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4798      	blx	r3
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	bfb8      	it	lt
 800f9d4:	f04f 35ff 	movlt.w	r5, #4294967295
 800f9d8:	89a3      	ldrh	r3, [r4, #12]
 800f9da:	061a      	lsls	r2, r3, #24
 800f9dc:	d503      	bpl.n	800f9e6 <_fclose_r+0x6a>
 800f9de:	6921      	ldr	r1, [r4, #16]
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	f7fd ff97 	bl	800d914 <_free_r>
 800f9e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f9e8:	b141      	cbz	r1, 800f9fc <_fclose_r+0x80>
 800f9ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f9ee:	4299      	cmp	r1, r3
 800f9f0:	d002      	beq.n	800f9f8 <_fclose_r+0x7c>
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f7fd ff8e 	bl	800d914 <_free_r>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	6323      	str	r3, [r4, #48]	; 0x30
 800f9fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f9fe:	b121      	cbz	r1, 800fa0a <_fclose_r+0x8e>
 800fa00:	4630      	mov	r0, r6
 800fa02:	f7fd ff87 	bl	800d914 <_free_r>
 800fa06:	2300      	movs	r3, #0
 800fa08:	6463      	str	r3, [r4, #68]	; 0x44
 800fa0a:	f7fd fd73 	bl	800d4f4 <__sfp_lock_acquire>
 800fa0e:	2300      	movs	r3, #0
 800fa10:	81a3      	strh	r3, [r4, #12]
 800fa12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa14:	07db      	lsls	r3, r3, #31
 800fa16:	d402      	bmi.n	800fa1e <_fclose_r+0xa2>
 800fa18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa1a:	f7f2 ff53 	bl	80028c4 <__retarget_lock_release_recursive>
 800fa1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa20:	f7f2 ff31 	bl	8002886 <__retarget_lock_close_recursive>
 800fa24:	f7fd fd6c 	bl	800d500 <__sfp_lock_release>
 800fa28:	e7ad      	b.n	800f986 <_fclose_r+0xa>
	...

0800fa2c <__sflush_r>:
 800fa2c:	898b      	ldrh	r3, [r1, #12]
 800fa2e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa36:	4605      	mov	r5, r0
 800fa38:	0718      	lsls	r0, r3, #28
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	d45f      	bmi.n	800fafe <__sflush_r+0xd2>
 800fa3e:	684b      	ldr	r3, [r1, #4]
 800fa40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	818a      	strh	r2, [r1, #12]
 800fa48:	dc05      	bgt.n	800fa56 <__sflush_r+0x2a>
 800fa4a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	dc02      	bgt.n	800fa56 <__sflush_r+0x2a>
 800fa50:	2000      	movs	r0, #0
 800fa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa58:	2e00      	cmp	r6, #0
 800fa5a:	d0f9      	beq.n	800fa50 <__sflush_r+0x24>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa62:	682f      	ldr	r7, [r5, #0]
 800fa64:	69e1      	ldr	r1, [r4, #28]
 800fa66:	602b      	str	r3, [r5, #0]
 800fa68:	d036      	beq.n	800fad8 <__sflush_r+0xac>
 800fa6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fa6c:	89a3      	ldrh	r3, [r4, #12]
 800fa6e:	075a      	lsls	r2, r3, #29
 800fa70:	d505      	bpl.n	800fa7e <__sflush_r+0x52>
 800fa72:	6863      	ldr	r3, [r4, #4]
 800fa74:	1ac0      	subs	r0, r0, r3
 800fa76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fa78:	b10b      	cbz	r3, 800fa7e <__sflush_r+0x52>
 800fa7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fa7c:	1ac0      	subs	r0, r0, r3
 800fa7e:	2300      	movs	r3, #0
 800fa80:	4602      	mov	r2, r0
 800fa82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa84:	4628      	mov	r0, r5
 800fa86:	69e1      	ldr	r1, [r4, #28]
 800fa88:	47b0      	blx	r6
 800fa8a:	1c43      	adds	r3, r0, #1
 800fa8c:	89a3      	ldrh	r3, [r4, #12]
 800fa8e:	d106      	bne.n	800fa9e <__sflush_r+0x72>
 800fa90:	6829      	ldr	r1, [r5, #0]
 800fa92:	291d      	cmp	r1, #29
 800fa94:	d82f      	bhi.n	800faf6 <__sflush_r+0xca>
 800fa96:	4a2b      	ldr	r2, [pc, #172]	; (800fb44 <__sflush_r+0x118>)
 800fa98:	410a      	asrs	r2, r1
 800fa9a:	07d6      	lsls	r6, r2, #31
 800fa9c:	d42b      	bmi.n	800faf6 <__sflush_r+0xca>
 800fa9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800faa2:	2200      	movs	r2, #0
 800faa4:	b21b      	sxth	r3, r3
 800faa6:	6062      	str	r2, [r4, #4]
 800faa8:	6922      	ldr	r2, [r4, #16]
 800faaa:	04d9      	lsls	r1, r3, #19
 800faac:	81a3      	strh	r3, [r4, #12]
 800faae:	6022      	str	r2, [r4, #0]
 800fab0:	d504      	bpl.n	800fabc <__sflush_r+0x90>
 800fab2:	1c42      	adds	r2, r0, #1
 800fab4:	d101      	bne.n	800faba <__sflush_r+0x8e>
 800fab6:	682b      	ldr	r3, [r5, #0]
 800fab8:	b903      	cbnz	r3, 800fabc <__sflush_r+0x90>
 800faba:	6520      	str	r0, [r4, #80]	; 0x50
 800fabc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fabe:	602f      	str	r7, [r5, #0]
 800fac0:	2900      	cmp	r1, #0
 800fac2:	d0c5      	beq.n	800fa50 <__sflush_r+0x24>
 800fac4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800fac8:	4299      	cmp	r1, r3
 800faca:	d002      	beq.n	800fad2 <__sflush_r+0xa6>
 800facc:	4628      	mov	r0, r5
 800face:	f7fd ff21 	bl	800d914 <_free_r>
 800fad2:	2000      	movs	r0, #0
 800fad4:	6320      	str	r0, [r4, #48]	; 0x30
 800fad6:	e7bc      	b.n	800fa52 <__sflush_r+0x26>
 800fad8:	2301      	movs	r3, #1
 800fada:	4628      	mov	r0, r5
 800fadc:	47b0      	blx	r6
 800fade:	1c41      	adds	r1, r0, #1
 800fae0:	d1c4      	bne.n	800fa6c <__sflush_r+0x40>
 800fae2:	682b      	ldr	r3, [r5, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d0c1      	beq.n	800fa6c <__sflush_r+0x40>
 800fae8:	2b1d      	cmp	r3, #29
 800faea:	d001      	beq.n	800faf0 <__sflush_r+0xc4>
 800faec:	2b16      	cmp	r3, #22
 800faee:	d101      	bne.n	800faf4 <__sflush_r+0xc8>
 800faf0:	602f      	str	r7, [r5, #0]
 800faf2:	e7ad      	b.n	800fa50 <__sflush_r+0x24>
 800faf4:	89a3      	ldrh	r3, [r4, #12]
 800faf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	e7a9      	b.n	800fa52 <__sflush_r+0x26>
 800fafe:	690f      	ldr	r7, [r1, #16]
 800fb00:	2f00      	cmp	r7, #0
 800fb02:	d0a5      	beq.n	800fa50 <__sflush_r+0x24>
 800fb04:	079b      	lsls	r3, r3, #30
 800fb06:	680e      	ldr	r6, [r1, #0]
 800fb08:	600f      	str	r7, [r1, #0]
 800fb0a:	bf0c      	ite	eq
 800fb0c:	694b      	ldreq	r3, [r1, #20]
 800fb0e:	2300      	movne	r3, #0
 800fb10:	eba6 0807 	sub.w	r8, r6, r7
 800fb14:	608b      	str	r3, [r1, #8]
 800fb16:	f1b8 0f00 	cmp.w	r8, #0
 800fb1a:	dd99      	ble.n	800fa50 <__sflush_r+0x24>
 800fb1c:	4643      	mov	r3, r8
 800fb1e:	463a      	mov	r2, r7
 800fb20:	69e1      	ldr	r1, [r4, #28]
 800fb22:	4628      	mov	r0, r5
 800fb24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fb26:	47b0      	blx	r6
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	dc06      	bgt.n	800fb3a <__sflush_r+0x10e>
 800fb2c:	89a3      	ldrh	r3, [r4, #12]
 800fb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb36:	81a3      	strh	r3, [r4, #12]
 800fb38:	e78b      	b.n	800fa52 <__sflush_r+0x26>
 800fb3a:	4407      	add	r7, r0
 800fb3c:	eba8 0800 	sub.w	r8, r8, r0
 800fb40:	e7e9      	b.n	800fb16 <__sflush_r+0xea>
 800fb42:	bf00      	nop
 800fb44:	dfbffffe 	.word	0xdfbffffe

0800fb48 <_fflush_r>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	b118      	cbz	r0, 800fb58 <_fflush_r+0x10>
 800fb50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fb52:	b90b      	cbnz	r3, 800fb58 <_fflush_r+0x10>
 800fb54:	f7fd fcda 	bl	800d50c <__sinit>
 800fb58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb5c:	b1bb      	cbz	r3, 800fb8e <_fflush_r+0x46>
 800fb5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb60:	07d0      	lsls	r0, r2, #31
 800fb62:	d404      	bmi.n	800fb6e <_fflush_r+0x26>
 800fb64:	0599      	lsls	r1, r3, #22
 800fb66:	d402      	bmi.n	800fb6e <_fflush_r+0x26>
 800fb68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb6a:	f7f2 fe97 	bl	800289c <__retarget_lock_acquire_recursive>
 800fb6e:	4628      	mov	r0, r5
 800fb70:	4621      	mov	r1, r4
 800fb72:	f7ff ff5b 	bl	800fa2c <__sflush_r>
 800fb76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb78:	4605      	mov	r5, r0
 800fb7a:	07da      	lsls	r2, r3, #31
 800fb7c:	d405      	bmi.n	800fb8a <_fflush_r+0x42>
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	059b      	lsls	r3, r3, #22
 800fb82:	d402      	bmi.n	800fb8a <_fflush_r+0x42>
 800fb84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb86:	f7f2 fe9d 	bl	80028c4 <__retarget_lock_release_recursive>
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	bd38      	pop	{r3, r4, r5, pc}
 800fb8e:	461d      	mov	r5, r3
 800fb90:	e7fb      	b.n	800fb8a <_fflush_r+0x42>
	...

0800fb94 <__sfvwrite_r>:
 800fb94:	6893      	ldr	r3, [r2, #8]
 800fb96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9a:	4606      	mov	r6, r0
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	4691      	mov	r9, r2
 800fba0:	b91b      	cbnz	r3, 800fbaa <__sfvwrite_r+0x16>
 800fba2:	2000      	movs	r0, #0
 800fba4:	b003      	add	sp, #12
 800fba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbaa:	898b      	ldrh	r3, [r1, #12]
 800fbac:	0718      	lsls	r0, r3, #28
 800fbae:	d54f      	bpl.n	800fc50 <__sfvwrite_r+0xbc>
 800fbb0:	690b      	ldr	r3, [r1, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d04c      	beq.n	800fc50 <__sfvwrite_r+0xbc>
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f8d9 8000 	ldr.w	r8, [r9]
 800fbbc:	f013 0702 	ands.w	r7, r3, #2
 800fbc0:	d16b      	bne.n	800fc9a <__sfvwrite_r+0x106>
 800fbc2:	f013 0301 	ands.w	r3, r3, #1
 800fbc6:	f000 809b 	beq.w	800fd00 <__sfvwrite_r+0x16c>
 800fbca:	4638      	mov	r0, r7
 800fbcc:	46ba      	mov	sl, r7
 800fbce:	46bb      	mov	fp, r7
 800fbd0:	f1bb 0f00 	cmp.w	fp, #0
 800fbd4:	f000 8102 	beq.w	800fddc <__sfvwrite_r+0x248>
 800fbd8:	b950      	cbnz	r0, 800fbf0 <__sfvwrite_r+0x5c>
 800fbda:	465a      	mov	r2, fp
 800fbdc:	210a      	movs	r1, #10
 800fbde:	4650      	mov	r0, sl
 800fbe0:	f000 faae 	bl	8010140 <memchr>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	f000 80ff 	beq.w	800fde8 <__sfvwrite_r+0x254>
 800fbea:	3001      	adds	r0, #1
 800fbec:	eba0 070a 	sub.w	r7, r0, sl
 800fbf0:	455f      	cmp	r7, fp
 800fbf2:	6820      	ldr	r0, [r4, #0]
 800fbf4:	6921      	ldr	r1, [r4, #16]
 800fbf6:	463a      	mov	r2, r7
 800fbf8:	bf28      	it	cs
 800fbfa:	465a      	movcs	r2, fp
 800fbfc:	68a5      	ldr	r5, [r4, #8]
 800fbfe:	4288      	cmp	r0, r1
 800fc00:	6963      	ldr	r3, [r4, #20]
 800fc02:	f240 80f4 	bls.w	800fdee <__sfvwrite_r+0x25a>
 800fc06:	441d      	add	r5, r3
 800fc08:	42aa      	cmp	r2, r5
 800fc0a:	f340 80f0 	ble.w	800fdee <__sfvwrite_r+0x25a>
 800fc0e:	4651      	mov	r1, sl
 800fc10:	462a      	mov	r2, r5
 800fc12:	f000 fa4a 	bl	80100aa <memmove>
 800fc16:	6823      	ldr	r3, [r4, #0]
 800fc18:	4621      	mov	r1, r4
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	442b      	add	r3, r5
 800fc1e:	6023      	str	r3, [r4, #0]
 800fc20:	f7ff ff92 	bl	800fb48 <_fflush_r>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d166      	bne.n	800fcf6 <__sfvwrite_r+0x162>
 800fc28:	1b7f      	subs	r7, r7, r5
 800fc2a:	f040 80f8 	bne.w	800fe1e <__sfvwrite_r+0x28a>
 800fc2e:	4621      	mov	r1, r4
 800fc30:	4630      	mov	r0, r6
 800fc32:	f7ff ff89 	bl	800fb48 <_fflush_r>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d15d      	bne.n	800fcf6 <__sfvwrite_r+0x162>
 800fc3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fc3e:	44aa      	add	sl, r5
 800fc40:	ebab 0b05 	sub.w	fp, fp, r5
 800fc44:	1b5b      	subs	r3, r3, r5
 800fc46:	f8c9 3008 	str.w	r3, [r9, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1c0      	bne.n	800fbd0 <__sfvwrite_r+0x3c>
 800fc4e:	e7a8      	b.n	800fba2 <__sfvwrite_r+0xe>
 800fc50:	4621      	mov	r1, r4
 800fc52:	4630      	mov	r0, r6
 800fc54:	f000 f966 	bl	800ff24 <__swsetup_r>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d0ac      	beq.n	800fbb6 <__sfvwrite_r+0x22>
 800fc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc60:	e7a0      	b.n	800fba4 <__sfvwrite_r+0x10>
 800fc62:	e9d8 a500 	ldrd	sl, r5, [r8]
 800fc66:	f108 0808 	add.w	r8, r8, #8
 800fc6a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800fc6e:	69e1      	ldr	r1, [r4, #28]
 800fc70:	2d00      	cmp	r5, #0
 800fc72:	d0f6      	beq.n	800fc62 <__sfvwrite_r+0xce>
 800fc74:	42bd      	cmp	r5, r7
 800fc76:	462b      	mov	r3, r5
 800fc78:	4652      	mov	r2, sl
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	bf28      	it	cs
 800fc7e:	463b      	movcs	r3, r7
 800fc80:	47d8      	blx	fp
 800fc82:	2800      	cmp	r0, #0
 800fc84:	dd37      	ble.n	800fcf6 <__sfvwrite_r+0x162>
 800fc86:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fc8a:	4482      	add	sl, r0
 800fc8c:	1a2d      	subs	r5, r5, r0
 800fc8e:	1a1b      	subs	r3, r3, r0
 800fc90:	f8c9 3008 	str.w	r3, [r9, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e8      	bne.n	800fc6a <__sfvwrite_r+0xd6>
 800fc98:	e783      	b.n	800fba2 <__sfvwrite_r+0xe>
 800fc9a:	f04f 0a00 	mov.w	sl, #0
 800fc9e:	4f61      	ldr	r7, [pc, #388]	; (800fe24 <__sfvwrite_r+0x290>)
 800fca0:	4655      	mov	r5, sl
 800fca2:	e7e2      	b.n	800fc6a <__sfvwrite_r+0xd6>
 800fca4:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800fca8:	f108 0808 	add.w	r8, r8, #8
 800fcac:	6820      	ldr	r0, [r4, #0]
 800fcae:	68a2      	ldr	r2, [r4, #8]
 800fcb0:	f1ba 0f00 	cmp.w	sl, #0
 800fcb4:	d0f6      	beq.n	800fca4 <__sfvwrite_r+0x110>
 800fcb6:	89a3      	ldrh	r3, [r4, #12]
 800fcb8:	0599      	lsls	r1, r3, #22
 800fcba:	d563      	bpl.n	800fd84 <__sfvwrite_r+0x1f0>
 800fcbc:	4552      	cmp	r2, sl
 800fcbe:	d836      	bhi.n	800fd2e <__sfvwrite_r+0x19a>
 800fcc0:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800fcc4:	d033      	beq.n	800fd2e <__sfvwrite_r+0x19a>
 800fcc6:	6921      	ldr	r1, [r4, #16]
 800fcc8:	6965      	ldr	r5, [r4, #20]
 800fcca:	eba0 0b01 	sub.w	fp, r0, r1
 800fcce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcd2:	f10b 0201 	add.w	r2, fp, #1
 800fcd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fcda:	4452      	add	r2, sl
 800fcdc:	106d      	asrs	r5, r5, #1
 800fcde:	4295      	cmp	r5, r2
 800fce0:	bf38      	it	cc
 800fce2:	4615      	movcc	r5, r2
 800fce4:	055b      	lsls	r3, r3, #21
 800fce6:	d53d      	bpl.n	800fd64 <__sfvwrite_r+0x1d0>
 800fce8:	4629      	mov	r1, r5
 800fcea:	4630      	mov	r0, r6
 800fcec:	f7fd f93c 	bl	800cf68 <_malloc_r>
 800fcf0:	b948      	cbnz	r0, 800fd06 <__sfvwrite_r+0x172>
 800fcf2:	230c      	movs	r3, #12
 800fcf4:	6033      	str	r3, [r6, #0]
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	e7ad      	b.n	800fc5c <__sfvwrite_r+0xc8>
 800fd00:	461f      	mov	r7, r3
 800fd02:	469a      	mov	sl, r3
 800fd04:	e7d2      	b.n	800fcac <__sfvwrite_r+0x118>
 800fd06:	465a      	mov	r2, fp
 800fd08:	6921      	ldr	r1, [r4, #16]
 800fd0a:	9001      	str	r0, [sp, #4]
 800fd0c:	f7fd fd90 	bl	800d830 <memcpy>
 800fd10:	89a2      	ldrh	r2, [r4, #12]
 800fd12:	9b01      	ldr	r3, [sp, #4]
 800fd14:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800fd18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fd1c:	81a2      	strh	r2, [r4, #12]
 800fd1e:	6123      	str	r3, [r4, #16]
 800fd20:	4652      	mov	r2, sl
 800fd22:	445b      	add	r3, fp
 800fd24:	6165      	str	r5, [r4, #20]
 800fd26:	eba5 050b 	sub.w	r5, r5, fp
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	60a5      	str	r5, [r4, #8]
 800fd2e:	4552      	cmp	r2, sl
 800fd30:	4639      	mov	r1, r7
 800fd32:	6820      	ldr	r0, [r4, #0]
 800fd34:	4655      	mov	r5, sl
 800fd36:	bf28      	it	cs
 800fd38:	4652      	movcs	r2, sl
 800fd3a:	9201      	str	r2, [sp, #4]
 800fd3c:	f000 f9b5 	bl	80100aa <memmove>
 800fd40:	68a3      	ldr	r3, [r4, #8]
 800fd42:	9a01      	ldr	r2, [sp, #4]
 800fd44:	1a9b      	subs	r3, r3, r2
 800fd46:	60a3      	str	r3, [r4, #8]
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	6023      	str	r3, [r4, #0]
 800fd4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fd52:	442f      	add	r7, r5
 800fd54:	ebaa 0a05 	sub.w	sl, sl, r5
 800fd58:	1b5b      	subs	r3, r3, r5
 800fd5a:	f8c9 3008 	str.w	r3, [r9, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1a4      	bne.n	800fcac <__sfvwrite_r+0x118>
 800fd62:	e71e      	b.n	800fba2 <__sfvwrite_r+0xe>
 800fd64:	462a      	mov	r2, r5
 800fd66:	4630      	mov	r0, r6
 800fd68:	f001 fc20 	bl	80115ac <_realloc_r>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d1d5      	bne.n	800fd1e <__sfvwrite_r+0x18a>
 800fd72:	6921      	ldr	r1, [r4, #16]
 800fd74:	4630      	mov	r0, r6
 800fd76:	f7fd fdcd 	bl	800d914 <_free_r>
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd80:	81a3      	strh	r3, [r4, #12]
 800fd82:	e7b6      	b.n	800fcf2 <__sfvwrite_r+0x15e>
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	4283      	cmp	r3, r0
 800fd88:	d302      	bcc.n	800fd90 <__sfvwrite_r+0x1fc>
 800fd8a:	6961      	ldr	r1, [r4, #20]
 800fd8c:	4551      	cmp	r1, sl
 800fd8e:	d915      	bls.n	800fdbc <__sfvwrite_r+0x228>
 800fd90:	4552      	cmp	r2, sl
 800fd92:	4639      	mov	r1, r7
 800fd94:	bf28      	it	cs
 800fd96:	4652      	movcs	r2, sl
 800fd98:	4615      	mov	r5, r2
 800fd9a:	f000 f986 	bl	80100aa <memmove>
 800fd9e:	68a3      	ldr	r3, [r4, #8]
 800fda0:	6822      	ldr	r2, [r4, #0]
 800fda2:	1b5b      	subs	r3, r3, r5
 800fda4:	442a      	add	r2, r5
 800fda6:	60a3      	str	r3, [r4, #8]
 800fda8:	6022      	str	r2, [r4, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1cf      	bne.n	800fd4e <__sfvwrite_r+0x1ba>
 800fdae:	4621      	mov	r1, r4
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7ff fec9 	bl	800fb48 <_fflush_r>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d0c9      	beq.n	800fd4e <__sfvwrite_r+0x1ba>
 800fdba:	e79c      	b.n	800fcf6 <__sfvwrite_r+0x162>
 800fdbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fdc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fdc2:	463a      	mov	r2, r7
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	459a      	cmp	sl, r3
 800fdc8:	bf38      	it	cc
 800fdca:	4653      	movcc	r3, sl
 800fdcc:	fb93 f3f1 	sdiv	r3, r3, r1
 800fdd0:	434b      	muls	r3, r1
 800fdd2:	69e1      	ldr	r1, [r4, #28]
 800fdd4:	47a8      	blx	r5
 800fdd6:	1e05      	subs	r5, r0, #0
 800fdd8:	dcb9      	bgt.n	800fd4e <__sfvwrite_r+0x1ba>
 800fdda:	e78c      	b.n	800fcf6 <__sfvwrite_r+0x162>
 800fddc:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800fde0:	2000      	movs	r0, #0
 800fde2:	f108 0808 	add.w	r8, r8, #8
 800fde6:	e6f3      	b.n	800fbd0 <__sfvwrite_r+0x3c>
 800fde8:	f10b 0701 	add.w	r7, fp, #1
 800fdec:	e700      	b.n	800fbf0 <__sfvwrite_r+0x5c>
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	dc08      	bgt.n	800fe04 <__sfvwrite_r+0x270>
 800fdf2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fdf4:	4652      	mov	r2, sl
 800fdf6:	69e1      	ldr	r1, [r4, #28]
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	47a8      	blx	r5
 800fdfc:	1e05      	subs	r5, r0, #0
 800fdfe:	f73f af13 	bgt.w	800fc28 <__sfvwrite_r+0x94>
 800fe02:	e778      	b.n	800fcf6 <__sfvwrite_r+0x162>
 800fe04:	4651      	mov	r1, sl
 800fe06:	9201      	str	r2, [sp, #4]
 800fe08:	f000 f94f 	bl	80100aa <memmove>
 800fe0c:	9a01      	ldr	r2, [sp, #4]
 800fe0e:	68a3      	ldr	r3, [r4, #8]
 800fe10:	4615      	mov	r5, r2
 800fe12:	1a9b      	subs	r3, r3, r2
 800fe14:	60a3      	str	r3, [r4, #8]
 800fe16:	6823      	ldr	r3, [r4, #0]
 800fe18:	4413      	add	r3, r2
 800fe1a:	6023      	str	r3, [r4, #0]
 800fe1c:	e704      	b.n	800fc28 <__sfvwrite_r+0x94>
 800fe1e:	2001      	movs	r0, #1
 800fe20:	e70b      	b.n	800fc3a <__sfvwrite_r+0xa6>
 800fe22:	bf00      	nop
 800fe24:	7ffffc00 	.word	0x7ffffc00

0800fe28 <_putc_r>:
 800fe28:	b570      	push	{r4, r5, r6, lr}
 800fe2a:	460d      	mov	r5, r1
 800fe2c:	4614      	mov	r4, r2
 800fe2e:	4606      	mov	r6, r0
 800fe30:	b118      	cbz	r0, 800fe3a <_putc_r+0x12>
 800fe32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fe34:	b90b      	cbnz	r3, 800fe3a <_putc_r+0x12>
 800fe36:	f7fd fb69 	bl	800d50c <__sinit>
 800fe3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe3c:	07d8      	lsls	r0, r3, #31
 800fe3e:	d405      	bmi.n	800fe4c <_putc_r+0x24>
 800fe40:	89a3      	ldrh	r3, [r4, #12]
 800fe42:	0599      	lsls	r1, r3, #22
 800fe44:	d402      	bmi.n	800fe4c <_putc_r+0x24>
 800fe46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe48:	f7f2 fd28 	bl	800289c <__retarget_lock_acquire_recursive>
 800fe4c:	68a3      	ldr	r3, [r4, #8]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	60a3      	str	r3, [r4, #8]
 800fe54:	da05      	bge.n	800fe62 <_putc_r+0x3a>
 800fe56:	69a2      	ldr	r2, [r4, #24]
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	db12      	blt.n	800fe82 <_putc_r+0x5a>
 800fe5c:	b2eb      	uxtb	r3, r5
 800fe5e:	2b0a      	cmp	r3, #10
 800fe60:	d00f      	beq.n	800fe82 <_putc_r+0x5a>
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	6022      	str	r2, [r4, #0]
 800fe68:	701d      	strb	r5, [r3, #0]
 800fe6a:	b2ed      	uxtb	r5, r5
 800fe6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe6e:	07da      	lsls	r2, r3, #31
 800fe70:	d405      	bmi.n	800fe7e <_putc_r+0x56>
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	059b      	lsls	r3, r3, #22
 800fe76:	d402      	bmi.n	800fe7e <_putc_r+0x56>
 800fe78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe7a:	f7f2 fd23 	bl	80028c4 <__retarget_lock_release_recursive>
 800fe7e:	4628      	mov	r0, r5
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	4629      	mov	r1, r5
 800fe84:	4622      	mov	r2, r4
 800fe86:	4630      	mov	r0, r6
 800fe88:	f000 f802 	bl	800fe90 <__swbuf_r>
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	e7ed      	b.n	800fe6c <_putc_r+0x44>

0800fe90 <__swbuf_r>:
 800fe90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe92:	460e      	mov	r6, r1
 800fe94:	4614      	mov	r4, r2
 800fe96:	4605      	mov	r5, r0
 800fe98:	b118      	cbz	r0, 800fea2 <__swbuf_r+0x12>
 800fe9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fe9c:	b90b      	cbnz	r3, 800fea2 <__swbuf_r+0x12>
 800fe9e:	f7fd fb35 	bl	800d50c <__sinit>
 800fea2:	69a3      	ldr	r3, [r4, #24]
 800fea4:	60a3      	str	r3, [r4, #8]
 800fea6:	89a3      	ldrh	r3, [r4, #12]
 800fea8:	0719      	lsls	r1, r3, #28
 800feaa:	d529      	bpl.n	800ff00 <__swbuf_r+0x70>
 800feac:	6923      	ldr	r3, [r4, #16]
 800feae:	b33b      	cbz	r3, 800ff00 <__swbuf_r+0x70>
 800feb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feb4:	b2f6      	uxtb	r6, r6
 800feb6:	049a      	lsls	r2, r3, #18
 800feb8:	4637      	mov	r7, r6
 800feba:	d52a      	bpl.n	800ff12 <__swbuf_r+0x82>
 800febc:	6823      	ldr	r3, [r4, #0]
 800febe:	6922      	ldr	r2, [r4, #16]
 800fec0:	1a98      	subs	r0, r3, r2
 800fec2:	6963      	ldr	r3, [r4, #20]
 800fec4:	4283      	cmp	r3, r0
 800fec6:	dc04      	bgt.n	800fed2 <__swbuf_r+0x42>
 800fec8:	4621      	mov	r1, r4
 800feca:	4628      	mov	r0, r5
 800fecc:	f7ff fe3c 	bl	800fb48 <_fflush_r>
 800fed0:	b9e0      	cbnz	r0, 800ff0c <__swbuf_r+0x7c>
 800fed2:	68a3      	ldr	r3, [r4, #8]
 800fed4:	3b01      	subs	r3, #1
 800fed6:	60a3      	str	r3, [r4, #8]
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	1c5a      	adds	r2, r3, #1
 800fedc:	6022      	str	r2, [r4, #0]
 800fede:	701e      	strb	r6, [r3, #0]
 800fee0:	1c43      	adds	r3, r0, #1
 800fee2:	6962      	ldr	r2, [r4, #20]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d004      	beq.n	800fef2 <__swbuf_r+0x62>
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	07db      	lsls	r3, r3, #31
 800feec:	d506      	bpl.n	800fefc <__swbuf_r+0x6c>
 800feee:	2e0a      	cmp	r6, #10
 800fef0:	d104      	bne.n	800fefc <__swbuf_r+0x6c>
 800fef2:	4621      	mov	r1, r4
 800fef4:	4628      	mov	r0, r5
 800fef6:	f7ff fe27 	bl	800fb48 <_fflush_r>
 800fefa:	b938      	cbnz	r0, 800ff0c <__swbuf_r+0x7c>
 800fefc:	4638      	mov	r0, r7
 800fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff00:	4621      	mov	r1, r4
 800ff02:	4628      	mov	r0, r5
 800ff04:	f000 f80e 	bl	800ff24 <__swsetup_r>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d0d1      	beq.n	800feb0 <__swbuf_r+0x20>
 800ff0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff10:	e7f4      	b.n	800fefc <__swbuf_r+0x6c>
 800ff12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ff16:	81a3      	strh	r3, [r4, #12]
 800ff18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff1e:	6663      	str	r3, [r4, #100]	; 0x64
 800ff20:	e7cc      	b.n	800febc <__swbuf_r+0x2c>
	...

0800ff24 <__swsetup_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4b2a      	ldr	r3, [pc, #168]	; (800ffd0 <__swsetup_r+0xac>)
 800ff28:	4605      	mov	r5, r0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	6818      	ldr	r0, [r3, #0]
 800ff2e:	b118      	cbz	r0, 800ff38 <__swsetup_r+0x14>
 800ff30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ff32:	b90b      	cbnz	r3, 800ff38 <__swsetup_r+0x14>
 800ff34:	f7fd faea 	bl	800d50c <__sinit>
 800ff38:	89a3      	ldrh	r3, [r4, #12]
 800ff3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff3e:	0718      	lsls	r0, r3, #28
 800ff40:	d422      	bmi.n	800ff88 <__swsetup_r+0x64>
 800ff42:	06d9      	lsls	r1, r3, #27
 800ff44:	d407      	bmi.n	800ff56 <__swsetup_r+0x32>
 800ff46:	2309      	movs	r3, #9
 800ff48:	602b      	str	r3, [r5, #0]
 800ff4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff52:	81a3      	strh	r3, [r4, #12]
 800ff54:	e034      	b.n	800ffc0 <__swsetup_r+0x9c>
 800ff56:	0758      	lsls	r0, r3, #29
 800ff58:	d512      	bpl.n	800ff80 <__swsetup_r+0x5c>
 800ff5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ff5c:	b141      	cbz	r1, 800ff70 <__swsetup_r+0x4c>
 800ff5e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ff62:	4299      	cmp	r1, r3
 800ff64:	d002      	beq.n	800ff6c <__swsetup_r+0x48>
 800ff66:	4628      	mov	r0, r5
 800ff68:	f7fd fcd4 	bl	800d914 <_free_r>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ff70:	89a3      	ldrh	r3, [r4, #12]
 800ff72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff76:	81a3      	strh	r3, [r4, #12]
 800ff78:	2300      	movs	r3, #0
 800ff7a:	6063      	str	r3, [r4, #4]
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	6023      	str	r3, [r4, #0]
 800ff80:	89a3      	ldrh	r3, [r4, #12]
 800ff82:	f043 0308 	orr.w	r3, r3, #8
 800ff86:	81a3      	strh	r3, [r4, #12]
 800ff88:	6923      	ldr	r3, [r4, #16]
 800ff8a:	b94b      	cbnz	r3, 800ffa0 <__swsetup_r+0x7c>
 800ff8c:	89a3      	ldrh	r3, [r4, #12]
 800ff8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff96:	d003      	beq.n	800ffa0 <__swsetup_r+0x7c>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f001 fd02 	bl	80119a4 <__smakebuf_r>
 800ffa0:	89a0      	ldrh	r0, [r4, #12]
 800ffa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffa6:	f010 0301 	ands.w	r3, r0, #1
 800ffaa:	d00a      	beq.n	800ffc2 <__swsetup_r+0x9e>
 800ffac:	2300      	movs	r3, #0
 800ffae:	60a3      	str	r3, [r4, #8]
 800ffb0:	6963      	ldr	r3, [r4, #20]
 800ffb2:	425b      	negs	r3, r3
 800ffb4:	61a3      	str	r3, [r4, #24]
 800ffb6:	6923      	ldr	r3, [r4, #16]
 800ffb8:	b943      	cbnz	r3, 800ffcc <__swsetup_r+0xa8>
 800ffba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ffbe:	d1c4      	bne.n	800ff4a <__swsetup_r+0x26>
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
 800ffc2:	0781      	lsls	r1, r0, #30
 800ffc4:	bf58      	it	pl
 800ffc6:	6963      	ldrpl	r3, [r4, #20]
 800ffc8:	60a3      	str	r3, [r4, #8]
 800ffca:	e7f4      	b.n	800ffb6 <__swsetup_r+0x92>
 800ffcc:	2000      	movs	r0, #0
 800ffce:	e7f7      	b.n	800ffc0 <__swsetup_r+0x9c>
 800ffd0:	20000558 	.word	0x20000558

0800ffd4 <__fputwc>:
 800ffd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffd8:	4680      	mov	r8, r0
 800ffda:	460e      	mov	r6, r1
 800ffdc:	4615      	mov	r5, r2
 800ffde:	f000 f891 	bl	8010104 <__locale_mb_cur_max>
 800ffe2:	2801      	cmp	r0, #1
 800ffe4:	d11c      	bne.n	8010020 <__fputwc+0x4c>
 800ffe6:	1e73      	subs	r3, r6, #1
 800ffe8:	2bfe      	cmp	r3, #254	; 0xfe
 800ffea:	d819      	bhi.n	8010020 <__fputwc+0x4c>
 800ffec:	4604      	mov	r4, r0
 800ffee:	f88d 6004 	strb.w	r6, [sp, #4]
 800fff2:	2700      	movs	r7, #0
 800fff4:	f10d 0904 	add.w	r9, sp, #4
 800fff8:	42a7      	cmp	r7, r4
 800fffa:	d020      	beq.n	801003e <__fputwc+0x6a>
 800fffc:	68ab      	ldr	r3, [r5, #8]
 800fffe:	f817 1009 	ldrb.w	r1, [r7, r9]
 8010002:	3b01      	subs	r3, #1
 8010004:	2b00      	cmp	r3, #0
 8010006:	60ab      	str	r3, [r5, #8]
 8010008:	da04      	bge.n	8010014 <__fputwc+0x40>
 801000a:	69aa      	ldr	r2, [r5, #24]
 801000c:	4293      	cmp	r3, r2
 801000e:	db1a      	blt.n	8010046 <__fputwc+0x72>
 8010010:	290a      	cmp	r1, #10
 8010012:	d018      	beq.n	8010046 <__fputwc+0x72>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	1c5a      	adds	r2, r3, #1
 8010018:	602a      	str	r2, [r5, #0]
 801001a:	7019      	strb	r1, [r3, #0]
 801001c:	3701      	adds	r7, #1
 801001e:	e7eb      	b.n	800fff8 <__fputwc+0x24>
 8010020:	a901      	add	r1, sp, #4
 8010022:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8010026:	4632      	mov	r2, r6
 8010028:	4640      	mov	r0, r8
 801002a:	f001 fc7d 	bl	8011928 <_wcrtomb_r>
 801002e:	1c41      	adds	r1, r0, #1
 8010030:	4604      	mov	r4, r0
 8010032:	d1de      	bne.n	800fff2 <__fputwc+0x1e>
 8010034:	89ab      	ldrh	r3, [r5, #12]
 8010036:	4606      	mov	r6, r0
 8010038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801003c:	81ab      	strh	r3, [r5, #12]
 801003e:	4630      	mov	r0, r6
 8010040:	b003      	add	sp, #12
 8010042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010046:	462a      	mov	r2, r5
 8010048:	4640      	mov	r0, r8
 801004a:	f7ff ff21 	bl	800fe90 <__swbuf_r>
 801004e:	1c42      	adds	r2, r0, #1
 8010050:	d1e4      	bne.n	801001c <__fputwc+0x48>
 8010052:	4606      	mov	r6, r0
 8010054:	e7f3      	b.n	801003e <__fputwc+0x6a>

08010056 <_fputwc_r>:
 8010056:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801005a:	4614      	mov	r4, r2
 801005c:	07da      	lsls	r2, r3, #31
 801005e:	4605      	mov	r5, r0
 8010060:	d407      	bmi.n	8010072 <_fputwc_r+0x1c>
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	059b      	lsls	r3, r3, #22
 8010066:	d404      	bmi.n	8010072 <_fputwc_r+0x1c>
 8010068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801006a:	9101      	str	r1, [sp, #4]
 801006c:	f7f2 fc16 	bl	800289c <__retarget_lock_acquire_recursive>
 8010070:	9901      	ldr	r1, [sp, #4]
 8010072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010076:	0498      	lsls	r0, r3, #18
 8010078:	d406      	bmi.n	8010088 <_fputwc_r+0x32>
 801007a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801007e:	81a3      	strh	r3, [r4, #12]
 8010080:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010086:	6663      	str	r3, [r4, #100]	; 0x64
 8010088:	4622      	mov	r2, r4
 801008a:	4628      	mov	r0, r5
 801008c:	f7ff ffa2 	bl	800ffd4 <__fputwc>
 8010090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010092:	4605      	mov	r5, r0
 8010094:	07da      	lsls	r2, r3, #31
 8010096:	d405      	bmi.n	80100a4 <_fputwc_r+0x4e>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	059b      	lsls	r3, r3, #22
 801009c:	d402      	bmi.n	80100a4 <_fputwc_r+0x4e>
 801009e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100a0:	f7f2 fc10 	bl	80028c4 <__retarget_lock_release_recursive>
 80100a4:	4628      	mov	r0, r5
 80100a6:	b003      	add	sp, #12
 80100a8:	bd30      	pop	{r4, r5, pc}

080100aa <memmove>:
 80100aa:	4288      	cmp	r0, r1
 80100ac:	b510      	push	{r4, lr}
 80100ae:	eb01 0402 	add.w	r4, r1, r2
 80100b2:	d902      	bls.n	80100ba <memmove+0x10>
 80100b4:	4284      	cmp	r4, r0
 80100b6:	4623      	mov	r3, r4
 80100b8:	d807      	bhi.n	80100ca <memmove+0x20>
 80100ba:	1e43      	subs	r3, r0, #1
 80100bc:	42a1      	cmp	r1, r4
 80100be:	d008      	beq.n	80100d2 <memmove+0x28>
 80100c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100c8:	e7f8      	b.n	80100bc <memmove+0x12>
 80100ca:	4402      	add	r2, r0
 80100cc:	4601      	mov	r1, r0
 80100ce:	428a      	cmp	r2, r1
 80100d0:	d100      	bne.n	80100d4 <memmove+0x2a>
 80100d2:	bd10      	pop	{r4, pc}
 80100d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100dc:	e7f7      	b.n	80100ce <memmove+0x24>

080100de <strncpy>:
 80100de:	3901      	subs	r1, #1
 80100e0:	4603      	mov	r3, r0
 80100e2:	b510      	push	{r4, lr}
 80100e4:	b132      	cbz	r2, 80100f4 <strncpy+0x16>
 80100e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80100ea:	3a01      	subs	r2, #1
 80100ec:	f803 4b01 	strb.w	r4, [r3], #1
 80100f0:	2c00      	cmp	r4, #0
 80100f2:	d1f7      	bne.n	80100e4 <strncpy+0x6>
 80100f4:	441a      	add	r2, r3
 80100f6:	2100      	movs	r1, #0
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d100      	bne.n	80100fe <strncpy+0x20>
 80100fc:	bd10      	pop	{r4, pc}
 80100fe:	f803 1b01 	strb.w	r1, [r3], #1
 8010102:	e7f9      	b.n	80100f8 <strncpy+0x1a>

08010104 <__locale_mb_cur_max>:
 8010104:	4b01      	ldr	r3, [pc, #4]	; (801010c <__locale_mb_cur_max+0x8>)
 8010106:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801010a:	4770      	bx	lr
 801010c:	20000560 	.word	0x20000560

08010110 <_localeconv_r>:
 8010110:	4800      	ldr	r0, [pc, #0]	; (8010114 <_localeconv_r+0x4>)
 8010112:	4770      	bx	lr
 8010114:	20000650 	.word	0x20000650

08010118 <__libc_fini_array>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4d07      	ldr	r5, [pc, #28]	; (8010138 <__libc_fini_array+0x20>)
 801011c:	4c07      	ldr	r4, [pc, #28]	; (801013c <__libc_fini_array+0x24>)
 801011e:	1b64      	subs	r4, r4, r5
 8010120:	10a4      	asrs	r4, r4, #2
 8010122:	b91c      	cbnz	r4, 801012c <__libc_fini_array+0x14>
 8010124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010128:	f001 bd1c 	b.w	8011b64 <_fini>
 801012c:	3c01      	subs	r4, #1
 801012e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8010132:	4798      	blx	r3
 8010134:	e7f5      	b.n	8010122 <__libc_fini_array+0xa>
 8010136:	bf00      	nop
 8010138:	08012190 	.word	0x08012190
 801013c:	08012194 	.word	0x08012194

08010140 <memchr>:
 8010140:	b2c9      	uxtb	r1, r1
 8010142:	4402      	add	r2, r0
 8010144:	b510      	push	{r4, lr}
 8010146:	4290      	cmp	r0, r2
 8010148:	4603      	mov	r3, r0
 801014a:	d101      	bne.n	8010150 <memchr+0x10>
 801014c:	2300      	movs	r3, #0
 801014e:	e003      	b.n	8010158 <memchr+0x18>
 8010150:	781c      	ldrb	r4, [r3, #0]
 8010152:	3001      	adds	r0, #1
 8010154:	428c      	cmp	r4, r1
 8010156:	d1f6      	bne.n	8010146 <memchr+0x6>
 8010158:	4618      	mov	r0, r3
 801015a:	bd10      	pop	{r4, pc}

0801015c <frexp>:
 801015c:	2100      	movs	r1, #0
 801015e:	b570      	push	{r4, r5, r6, lr}
 8010160:	ec55 4b10 	vmov	r4, r5, d0
 8010164:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8010168:	6001      	str	r1, [r0, #0]
 801016a:	4915      	ldr	r1, [pc, #84]	; (80101c0 <frexp+0x64>)
 801016c:	4606      	mov	r6, r0
 801016e:	462b      	mov	r3, r5
 8010170:	428a      	cmp	r2, r1
 8010172:	dc22      	bgt.n	80101ba <frexp+0x5e>
 8010174:	ee10 1a10 	vmov	r1, s0
 8010178:	4311      	orrs	r1, r2
 801017a:	d01e      	beq.n	80101ba <frexp+0x5e>
 801017c:	4911      	ldr	r1, [pc, #68]	; (80101c4 <frexp+0x68>)
 801017e:	4029      	ands	r1, r5
 8010180:	b969      	cbnz	r1, 801019e <frexp+0x42>
 8010182:	2200      	movs	r2, #0
 8010184:	4b10      	ldr	r3, [pc, #64]	; (80101c8 <frexp+0x6c>)
 8010186:	ee10 0a10 	vmov	r0, s0
 801018a:	4629      	mov	r1, r5
 801018c:	f7f0 fa3c 	bl	8000608 <__aeabi_dmul>
 8010190:	460b      	mov	r3, r1
 8010192:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010196:	4604      	mov	r4, r0
 8010198:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801019c:	6031      	str	r1, [r6, #0]
 801019e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80101a2:	1512      	asrs	r2, r2, #20
 80101a4:	6831      	ldr	r1, [r6, #0]
 80101a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80101aa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80101ae:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80101b2:	4411      	add	r1, r2
 80101b4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80101b8:	6031      	str	r1, [r6, #0]
 80101ba:	ec45 4b10 	vmov	d0, r4, r5
 80101be:	bd70      	pop	{r4, r5, r6, pc}
 80101c0:	7fefffff 	.word	0x7fefffff
 80101c4:	7ff00000 	.word	0x7ff00000
 80101c8:	43500000 	.word	0x43500000

080101cc <__register_exitproc>:
 80101cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d0:	f8df a078 	ldr.w	sl, [pc, #120]	; 801024c <__register_exitproc+0x80>
 80101d4:	4606      	mov	r6, r0
 80101d6:	4698      	mov	r8, r3
 80101d8:	460f      	mov	r7, r1
 80101da:	f8da 0000 	ldr.w	r0, [sl]
 80101de:	4691      	mov	r9, r2
 80101e0:	f7f2 fb5c 	bl	800289c <__retarget_lock_acquire_recursive>
 80101e4:	4b17      	ldr	r3, [pc, #92]	; (8010244 <__register_exitproc+0x78>)
 80101e6:	681c      	ldr	r4, [r3, #0]
 80101e8:	b90c      	cbnz	r4, 80101ee <__register_exitproc+0x22>
 80101ea:	4c17      	ldr	r4, [pc, #92]	; (8010248 <__register_exitproc+0x7c>)
 80101ec:	601c      	str	r4, [r3, #0]
 80101ee:	6865      	ldr	r5, [r4, #4]
 80101f0:	f8da 0000 	ldr.w	r0, [sl]
 80101f4:	2d1f      	cmp	r5, #31
 80101f6:	dd05      	ble.n	8010204 <__register_exitproc+0x38>
 80101f8:	f7f2 fb64 	bl	80028c4 <__retarget_lock_release_recursive>
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010204:	b1ae      	cbz	r6, 8010232 <__register_exitproc+0x66>
 8010206:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801020a:	2201      	movs	r2, #1
 801020c:	2e02      	cmp	r6, #2
 801020e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8010212:	fa02 f205 	lsl.w	r2, r2, r5
 8010216:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801021a:	ea43 0302 	orr.w	r3, r3, r2
 801021e:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8010222:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8010226:	bf02      	ittt	eq
 8010228:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801022c:	4313      	orreq	r3, r2
 801022e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8010232:	1c6b      	adds	r3, r5, #1
 8010234:	3502      	adds	r5, #2
 8010236:	6063      	str	r3, [r4, #4]
 8010238:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801023c:	f7f2 fb42 	bl	80028c4 <__retarget_lock_release_recursive>
 8010240:	2000      	movs	r0, #0
 8010242:	e7dd      	b.n	8010200 <__register_exitproc+0x34>
 8010244:	200818a8 	.word	0x200818a8
 8010248:	200818ac 	.word	0x200818ac
 801024c:	2000055c 	.word	0x2000055c

08010250 <quorem>:
 8010250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	6903      	ldr	r3, [r0, #16]
 8010256:	4607      	mov	r7, r0
 8010258:	690c      	ldr	r4, [r1, #16]
 801025a:	42a3      	cmp	r3, r4
 801025c:	f2c0 8086 	blt.w	801036c <quorem+0x11c>
 8010260:	3c01      	subs	r4, #1
 8010262:	f100 0514 	add.w	r5, r0, #20
 8010266:	f101 0814 	add.w	r8, r1, #20
 801026a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801026e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010272:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801027c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010280:	3301      	adds	r3, #1
 8010282:	429a      	cmp	r2, r3
 8010284:	fbb2 f6f3 	udiv	r6, r2, r3
 8010288:	d335      	bcc.n	80102f6 <quorem+0xa6>
 801028a:	f04f 0e00 	mov.w	lr, #0
 801028e:	4640      	mov	r0, r8
 8010290:	46ac      	mov	ip, r5
 8010292:	46f2      	mov	sl, lr
 8010294:	f850 2b04 	ldr.w	r2, [r0], #4
 8010298:	b293      	uxth	r3, r2
 801029a:	4581      	cmp	r9, r0
 801029c:	fb06 e303 	mla	r3, r6, r3, lr
 80102a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80102a4:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	fb06 220e 	mla	r2, r6, lr, r2
 80102ae:	ebaa 0303 	sub.w	r3, sl, r3
 80102b2:	f8dc a000 	ldr.w	sl, [ip]
 80102b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80102ba:	fa1f fa8a 	uxth.w	sl, sl
 80102be:	b292      	uxth	r2, r2
 80102c0:	4453      	add	r3, sl
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	f8dc 3000 	ldr.w	r3, [ip]
 80102c8:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 80102cc:	9b00      	ldr	r3, [sp, #0]
 80102ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80102d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80102de:	f84c 3b04 	str.w	r3, [ip], #4
 80102e2:	d2d7      	bcs.n	8010294 <quorem+0x44>
 80102e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80102e8:	b92b      	cbnz	r3, 80102f6 <quorem+0xa6>
 80102ea:	9b01      	ldr	r3, [sp, #4]
 80102ec:	3b04      	subs	r3, #4
 80102ee:	429d      	cmp	r5, r3
 80102f0:	461a      	mov	r2, r3
 80102f2:	d32f      	bcc.n	8010354 <quorem+0x104>
 80102f4:	613c      	str	r4, [r7, #16]
 80102f6:	4638      	mov	r0, r7
 80102f8:	f001 f852 	bl	80113a0 <__mcmp>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	db25      	blt.n	801034c <quorem+0xfc>
 8010300:	3601      	adds	r6, #1
 8010302:	4629      	mov	r1, r5
 8010304:	2000      	movs	r0, #0
 8010306:	f858 2b04 	ldr.w	r2, [r8], #4
 801030a:	f8d1 c000 	ldr.w	ip, [r1]
 801030e:	b293      	uxth	r3, r2
 8010310:	45c1      	cmp	r9, r8
 8010312:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010316:	eba0 0303 	sub.w	r3, r0, r3
 801031a:	fa1f f08c 	uxth.w	r0, ip
 801031e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010322:	4403      	add	r3, r0
 8010324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010328:	b29b      	uxth	r3, r3
 801032a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010332:	f841 3b04 	str.w	r3, [r1], #4
 8010336:	d2e6      	bcs.n	8010306 <quorem+0xb6>
 8010338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801033c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010340:	b922      	cbnz	r2, 801034c <quorem+0xfc>
 8010342:	3b04      	subs	r3, #4
 8010344:	429d      	cmp	r5, r3
 8010346:	461a      	mov	r2, r3
 8010348:	d30a      	bcc.n	8010360 <quorem+0x110>
 801034a:	613c      	str	r4, [r7, #16]
 801034c:	4630      	mov	r0, r6
 801034e:	b003      	add	sp, #12
 8010350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010354:	6812      	ldr	r2, [r2, #0]
 8010356:	3b04      	subs	r3, #4
 8010358:	2a00      	cmp	r2, #0
 801035a:	d1cb      	bne.n	80102f4 <quorem+0xa4>
 801035c:	3c01      	subs	r4, #1
 801035e:	e7c6      	b.n	80102ee <quorem+0x9e>
 8010360:	6812      	ldr	r2, [r2, #0]
 8010362:	3b04      	subs	r3, #4
 8010364:	2a00      	cmp	r2, #0
 8010366:	d1f0      	bne.n	801034a <quorem+0xfa>
 8010368:	3c01      	subs	r4, #1
 801036a:	e7eb      	b.n	8010344 <quorem+0xf4>
 801036c:	2000      	movs	r0, #0
 801036e:	e7ee      	b.n	801034e <quorem+0xfe>

08010370 <_dtoa_r>:
 8010370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	ed2d 8b04 	vpush	{d8-d9}
 8010378:	b093      	sub	sp, #76	; 0x4c
 801037a:	4604      	mov	r4, r0
 801037c:	9107      	str	r1, [sp, #28]
 801037e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010380:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8010382:	920a      	str	r2, [sp, #40]	; 0x28
 8010384:	930d      	str	r3, [sp, #52]	; 0x34
 8010386:	ec57 6b10 	vmov	r6, r7, d0
 801038a:	ed8d 0b02 	vstr	d0, [sp, #8]
 801038e:	b141      	cbz	r1, 80103a2 <_dtoa_r+0x32>
 8010390:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010392:	2301      	movs	r3, #1
 8010394:	4093      	lsls	r3, r2
 8010396:	604a      	str	r2, [r1, #4]
 8010398:	608b      	str	r3, [r1, #8]
 801039a:	f000 fdf6 	bl	8010f8a <_Bfree>
 801039e:	2300      	movs	r3, #0
 80103a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80103a2:	1e3b      	subs	r3, r7, #0
 80103a4:	bfb7      	itett	lt
 80103a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80103aa:	2300      	movge	r3, #0
 80103ac:	2201      	movlt	r2, #1
 80103ae:	9303      	strlt	r3, [sp, #12]
 80103b0:	bfa8      	it	ge
 80103b2:	602b      	strge	r3, [r5, #0]
 80103b4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80103b8:	4ba1      	ldr	r3, [pc, #644]	; (8010640 <_dtoa_r+0x2d0>)
 80103ba:	bfb8      	it	lt
 80103bc:	602a      	strlt	r2, [r5, #0]
 80103be:	ea33 0308 	bics.w	r3, r3, r8
 80103c2:	d11b      	bne.n	80103fc <_dtoa_r+0x8c>
 80103c4:	f242 730f 	movw	r3, #9999	; 0x270f
 80103c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80103d0:	4333      	orrs	r3, r6
 80103d2:	f000 858d 	beq.w	8010ef0 <_dtoa_r+0xb80>
 80103d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103d8:	b90b      	cbnz	r3, 80103de <_dtoa_r+0x6e>
 80103da:	4b9a      	ldr	r3, [pc, #616]	; (8010644 <_dtoa_r+0x2d4>)
 80103dc:	e027      	b.n	801042e <_dtoa_r+0xbe>
 80103de:	4b99      	ldr	r3, [pc, #612]	; (8010644 <_dtoa_r+0x2d4>)
 80103e0:	9300      	str	r3, [sp, #0]
 80103e2:	3303      	adds	r3, #3
 80103e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80103e6:	6013      	str	r3, [r2, #0]
 80103e8:	9800      	ldr	r0, [sp, #0]
 80103ea:	b013      	add	sp, #76	; 0x4c
 80103ec:	ecbd 8b04 	vpop	{d8-d9}
 80103f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f4:	4b94      	ldr	r3, [pc, #592]	; (8010648 <_dtoa_r+0x2d8>)
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	3308      	adds	r3, #8
 80103fa:	e7f3      	b.n	80103e4 <_dtoa_r+0x74>
 80103fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010400:	2200      	movs	r2, #0
 8010402:	2300      	movs	r3, #0
 8010404:	ec51 0b17 	vmov	r0, r1, d7
 8010408:	eeb0 8a47 	vmov.f32	s16, s14
 801040c:	eef0 8a67 	vmov.f32	s17, s15
 8010410:	f7f0 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8010414:	4681      	mov	r9, r0
 8010416:	b160      	cbz	r0, 8010432 <_dtoa_r+0xc2>
 8010418:	2301      	movs	r3, #1
 801041a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801041c:	6013      	str	r3, [r2, #0]
 801041e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 8562 	beq.w	8010eea <_dtoa_r+0xb7a>
 8010426:	4b89      	ldr	r3, [pc, #548]	; (801064c <_dtoa_r+0x2dc>)
 8010428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801042a:	6013      	str	r3, [r2, #0]
 801042c:	3b01      	subs	r3, #1
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	e7da      	b.n	80103e8 <_dtoa_r+0x78>
 8010432:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010436:	eeb0 0a48 	vmov.f32	s0, s16
 801043a:	eef0 0a68 	vmov.f32	s1, s17
 801043e:	aa10      	add	r2, sp, #64	; 0x40
 8010440:	a911      	add	r1, sp, #68	; 0x44
 8010442:	4620      	mov	r0, r4
 8010444:	f001 f858 	bl	80114f8 <__d2b>
 8010448:	4682      	mov	sl, r0
 801044a:	2d00      	cmp	r5, #0
 801044c:	d07c      	beq.n	8010548 <_dtoa_r+0x1d8>
 801044e:	ee18 3a90 	vmov	r3, s17
 8010452:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010456:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801045a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801045e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010466:	ec51 0b18 	vmov	r0, r1, d8
 801046a:	4619      	mov	r1, r3
 801046c:	2200      	movs	r2, #0
 801046e:	4b78      	ldr	r3, [pc, #480]	; (8010650 <_dtoa_r+0x2e0>)
 8010470:	f7ef ff12 	bl	8000298 <__aeabi_dsub>
 8010474:	a36c      	add	r3, pc, #432	; (adr r3, 8010628 <_dtoa_r+0x2b8>)
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	f7f0 f8c5 	bl	8000608 <__aeabi_dmul>
 801047e:	a36c      	add	r3, pc, #432	; (adr r3, 8010630 <_dtoa_r+0x2c0>)
 8010480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010484:	f7ef ff0a 	bl	800029c <__adddf3>
 8010488:	4606      	mov	r6, r0
 801048a:	460f      	mov	r7, r1
 801048c:	4628      	mov	r0, r5
 801048e:	f7f0 f851 	bl	8000534 <__aeabi_i2d>
 8010492:	a369      	add	r3, pc, #420	; (adr r3, 8010638 <_dtoa_r+0x2c8>)
 8010494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010498:	f7f0 f8b6 	bl	8000608 <__aeabi_dmul>
 801049c:	4602      	mov	r2, r0
 801049e:	460b      	mov	r3, r1
 80104a0:	4630      	mov	r0, r6
 80104a2:	4639      	mov	r1, r7
 80104a4:	f7ef fefa 	bl	800029c <__adddf3>
 80104a8:	4606      	mov	r6, r0
 80104aa:	460f      	mov	r7, r1
 80104ac:	f7f0 fb5c 	bl	8000b68 <__aeabi_d2iz>
 80104b0:	2200      	movs	r2, #0
 80104b2:	4683      	mov	fp, r0
 80104b4:	2300      	movs	r3, #0
 80104b6:	4630      	mov	r0, r6
 80104b8:	4639      	mov	r1, r7
 80104ba:	f7f0 fb17 	bl	8000aec <__aeabi_dcmplt>
 80104be:	b148      	cbz	r0, 80104d4 <_dtoa_r+0x164>
 80104c0:	4658      	mov	r0, fp
 80104c2:	f7f0 f837 	bl	8000534 <__aeabi_i2d>
 80104c6:	4632      	mov	r2, r6
 80104c8:	463b      	mov	r3, r7
 80104ca:	f7f0 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80104ce:	b908      	cbnz	r0, 80104d4 <_dtoa_r+0x164>
 80104d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104d4:	f1bb 0f16 	cmp.w	fp, #22
 80104d8:	d856      	bhi.n	8010588 <_dtoa_r+0x218>
 80104da:	4b5e      	ldr	r3, [pc, #376]	; (8010654 <_dtoa_r+0x2e4>)
 80104dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80104e0:	ec51 0b18 	vmov	r0, r1, d8
 80104e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e8:	f7f0 fb00 	bl	8000aec <__aeabi_dcmplt>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d04d      	beq.n	801058c <_dtoa_r+0x21c>
 80104f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104f4:	2300      	movs	r3, #0
 80104f6:	930c      	str	r3, [sp, #48]	; 0x30
 80104f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104fa:	1b5b      	subs	r3, r3, r5
 80104fc:	1e5a      	subs	r2, r3, #1
 80104fe:	bf4c      	ite	mi
 8010500:	f1c3 0301 	rsbmi	r3, r3, #1
 8010504:	2300      	movpl	r3, #0
 8010506:	9206      	str	r2, [sp, #24]
 8010508:	bf45      	ittet	mi
 801050a:	9305      	strmi	r3, [sp, #20]
 801050c:	2300      	movmi	r3, #0
 801050e:	9305      	strpl	r3, [sp, #20]
 8010510:	9306      	strmi	r3, [sp, #24]
 8010512:	f1bb 0f00 	cmp.w	fp, #0
 8010516:	db3b      	blt.n	8010590 <_dtoa_r+0x220>
 8010518:	9b06      	ldr	r3, [sp, #24]
 801051a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801051e:	445b      	add	r3, fp
 8010520:	9306      	str	r3, [sp, #24]
 8010522:	2300      	movs	r3, #0
 8010524:	9308      	str	r3, [sp, #32]
 8010526:	9b07      	ldr	r3, [sp, #28]
 8010528:	2b09      	cmp	r3, #9
 801052a:	d868      	bhi.n	80105fe <_dtoa_r+0x28e>
 801052c:	2b05      	cmp	r3, #5
 801052e:	bfc5      	ittet	gt
 8010530:	3b04      	subgt	r3, #4
 8010532:	2500      	movgt	r5, #0
 8010534:	2501      	movle	r5, #1
 8010536:	9307      	strgt	r3, [sp, #28]
 8010538:	9b07      	ldr	r3, [sp, #28]
 801053a:	3b02      	subs	r3, #2
 801053c:	2b03      	cmp	r3, #3
 801053e:	d869      	bhi.n	8010614 <_dtoa_r+0x2a4>
 8010540:	e8df f003 	tbb	[pc, r3]
 8010544:	5b3b3d30 	.word	0x5b3b3d30
 8010548:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801054c:	441d      	add	r5, r3
 801054e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010552:	2b20      	cmp	r3, #32
 8010554:	bfc9      	itett	gt
 8010556:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801055a:	f1c3 0320 	rsble	r3, r3, #32
 801055e:	fa08 f803 	lslgt.w	r8, r8, r3
 8010562:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010566:	bfd8      	it	le
 8010568:	fa06 f003 	lslle.w	r0, r6, r3
 801056c:	f105 35ff 	add.w	r5, r5, #4294967295
 8010570:	bfc4      	itt	gt
 8010572:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010576:	ea48 0003 	orrgt.w	r0, r8, r3
 801057a:	f7ef ffcb 	bl	8000514 <__aeabi_ui2d>
 801057e:	2201      	movs	r2, #1
 8010580:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010584:	920e      	str	r2, [sp, #56]	; 0x38
 8010586:	e770      	b.n	801046a <_dtoa_r+0xfa>
 8010588:	2301      	movs	r3, #1
 801058a:	e7b4      	b.n	80104f6 <_dtoa_r+0x186>
 801058c:	900c      	str	r0, [sp, #48]	; 0x30
 801058e:	e7b3      	b.n	80104f8 <_dtoa_r+0x188>
 8010590:	9b05      	ldr	r3, [sp, #20]
 8010592:	eba3 030b 	sub.w	r3, r3, fp
 8010596:	9305      	str	r3, [sp, #20]
 8010598:	f1cb 0300 	rsb	r3, fp, #0
 801059c:	9308      	str	r3, [sp, #32]
 801059e:	2300      	movs	r3, #0
 80105a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80105a2:	e7c0      	b.n	8010526 <_dtoa_r+0x1b6>
 80105a4:	2300      	movs	r3, #0
 80105a6:	9309      	str	r3, [sp, #36]	; 0x24
 80105a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	dc35      	bgt.n	801061a <_dtoa_r+0x2aa>
 80105ae:	2301      	movs	r3, #1
 80105b0:	461a      	mov	r2, r3
 80105b2:	9301      	str	r3, [sp, #4]
 80105b4:	9304      	str	r3, [sp, #16]
 80105b6:	920a      	str	r2, [sp, #40]	; 0x28
 80105b8:	e00b      	b.n	80105d2 <_dtoa_r+0x262>
 80105ba:	2301      	movs	r3, #1
 80105bc:	e7f3      	b.n	80105a6 <_dtoa_r+0x236>
 80105be:	2300      	movs	r3, #0
 80105c0:	9309      	str	r3, [sp, #36]	; 0x24
 80105c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c4:	445b      	add	r3, fp
 80105c6:	9301      	str	r3, [sp, #4]
 80105c8:	3301      	adds	r3, #1
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	9304      	str	r3, [sp, #16]
 80105ce:	bfb8      	it	lt
 80105d0:	2301      	movlt	r3, #1
 80105d2:	2100      	movs	r1, #0
 80105d4:	2204      	movs	r2, #4
 80105d6:	f102 0014 	add.w	r0, r2, #20
 80105da:	4298      	cmp	r0, r3
 80105dc:	d921      	bls.n	8010622 <_dtoa_r+0x2b2>
 80105de:	4620      	mov	r0, r4
 80105e0:	63e1      	str	r1, [r4, #60]	; 0x3c
 80105e2:	f000 fcad 	bl	8010f40 <_Balloc>
 80105e6:	9000      	str	r0, [sp, #0]
 80105e8:	2800      	cmp	r0, #0
 80105ea:	d139      	bne.n	8010660 <_dtoa_r+0x2f0>
 80105ec:	4b1a      	ldr	r3, [pc, #104]	; (8010658 <_dtoa_r+0x2e8>)
 80105ee:	4602      	mov	r2, r0
 80105f0:	f240 11af 	movw	r1, #431	; 0x1af
 80105f4:	4819      	ldr	r0, [pc, #100]	; (801065c <_dtoa_r+0x2ec>)
 80105f6:	f001 fa33 	bl	8011a60 <__assert_func>
 80105fa:	2301      	movs	r3, #1
 80105fc:	e7e0      	b.n	80105c0 <_dtoa_r+0x250>
 80105fe:	2501      	movs	r5, #1
 8010600:	2300      	movs	r3, #0
 8010602:	9509      	str	r5, [sp, #36]	; 0x24
 8010604:	9307      	str	r3, [sp, #28]
 8010606:	f04f 33ff 	mov.w	r3, #4294967295
 801060a:	2200      	movs	r2, #0
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	9304      	str	r3, [sp, #16]
 8010610:	2312      	movs	r3, #18
 8010612:	e7d0      	b.n	80105b6 <_dtoa_r+0x246>
 8010614:	2301      	movs	r3, #1
 8010616:	9309      	str	r3, [sp, #36]	; 0x24
 8010618:	e7f5      	b.n	8010606 <_dtoa_r+0x296>
 801061a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801061c:	9301      	str	r3, [sp, #4]
 801061e:	9304      	str	r3, [sp, #16]
 8010620:	e7d7      	b.n	80105d2 <_dtoa_r+0x262>
 8010622:	3101      	adds	r1, #1
 8010624:	0052      	lsls	r2, r2, #1
 8010626:	e7d6      	b.n	80105d6 <_dtoa_r+0x266>
 8010628:	636f4361 	.word	0x636f4361
 801062c:	3fd287a7 	.word	0x3fd287a7
 8010630:	8b60c8b3 	.word	0x8b60c8b3
 8010634:	3fc68a28 	.word	0x3fc68a28
 8010638:	509f79fb 	.word	0x509f79fb
 801063c:	3fd34413 	.word	0x3fd34413
 8010640:	7ff00000 	.word	0x7ff00000
 8010644:	08011f7c 	.word	0x08011f7c
 8010648:	08011f73 	.word	0x08011f73
 801064c:	08011f28 	.word	0x08011f28
 8010650:	3ff80000 	.word	0x3ff80000
 8010654:	08012070 	.word	0x08012070
 8010658:	08011f80 	.word	0x08011f80
 801065c:	08011f91 	.word	0x08011f91
 8010660:	9b00      	ldr	r3, [sp, #0]
 8010662:	63a3      	str	r3, [r4, #56]	; 0x38
 8010664:	9b04      	ldr	r3, [sp, #16]
 8010666:	2b0e      	cmp	r3, #14
 8010668:	f200 80a8 	bhi.w	80107bc <_dtoa_r+0x44c>
 801066c:	2d00      	cmp	r5, #0
 801066e:	f000 80a5 	beq.w	80107bc <_dtoa_r+0x44c>
 8010672:	f1bb 0f00 	cmp.w	fp, #0
 8010676:	dd38      	ble.n	80106ea <_dtoa_r+0x37a>
 8010678:	f00b 020f 	and.w	r2, fp, #15
 801067c:	4bbe      	ldr	r3, [pc, #760]	; (8010978 <_dtoa_r+0x608>)
 801067e:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010682:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801068a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801068e:	d019      	beq.n	80106c4 <_dtoa_r+0x354>
 8010690:	4bba      	ldr	r3, [pc, #744]	; (801097c <_dtoa_r+0x60c>)
 8010692:	f008 080f 	and.w	r8, r8, #15
 8010696:	2503      	movs	r5, #3
 8010698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801069c:	ec51 0b18 	vmov	r0, r1, d8
 80106a0:	f7f0 f8dc 	bl	800085c <__aeabi_ddiv>
 80106a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801097c <_dtoa_r+0x60c>
 80106ac:	f1b8 0f00 	cmp.w	r8, #0
 80106b0:	d10a      	bne.n	80106c8 <_dtoa_r+0x358>
 80106b2:	4632      	mov	r2, r6
 80106b4:	463b      	mov	r3, r7
 80106b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ba:	f7f0 f8cf 	bl	800085c <__aeabi_ddiv>
 80106be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106c2:	e02b      	b.n	801071c <_dtoa_r+0x3ac>
 80106c4:	2502      	movs	r5, #2
 80106c6:	e7ef      	b.n	80106a8 <_dtoa_r+0x338>
 80106c8:	f018 0f01 	tst.w	r8, #1
 80106cc:	d008      	beq.n	80106e0 <_dtoa_r+0x370>
 80106ce:	4630      	mov	r0, r6
 80106d0:	4639      	mov	r1, r7
 80106d2:	3501      	adds	r5, #1
 80106d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80106d8:	f7ef ff96 	bl	8000608 <__aeabi_dmul>
 80106dc:	4606      	mov	r6, r0
 80106de:	460f      	mov	r7, r1
 80106e0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80106e4:	f109 0908 	add.w	r9, r9, #8
 80106e8:	e7e0      	b.n	80106ac <_dtoa_r+0x33c>
 80106ea:	f000 809f 	beq.w	801082c <_dtoa_r+0x4bc>
 80106ee:	f1cb 0600 	rsb	r6, fp, #0
 80106f2:	4ba1      	ldr	r3, [pc, #644]	; (8010978 <_dtoa_r+0x608>)
 80106f4:	4fa1      	ldr	r7, [pc, #644]	; (801097c <_dtoa_r+0x60c>)
 80106f6:	2502      	movs	r5, #2
 80106f8:	f006 020f 	and.w	r2, r6, #15
 80106fc:	1136      	asrs	r6, r6, #4
 80106fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010702:	ec51 0b18 	vmov	r0, r1, d8
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	f7ef ff7d 	bl	8000608 <__aeabi_dmul>
 801070e:	2300      	movs	r3, #0
 8010710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010714:	2e00      	cmp	r6, #0
 8010716:	d17e      	bne.n	8010816 <_dtoa_r+0x4a6>
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1d0      	bne.n	80106be <_dtoa_r+0x34e>
 801071c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801071e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010722:	2b00      	cmp	r3, #0
 8010724:	f000 8084 	beq.w	8010830 <_dtoa_r+0x4c0>
 8010728:	2200      	movs	r2, #0
 801072a:	4b95      	ldr	r3, [pc, #596]	; (8010980 <_dtoa_r+0x610>)
 801072c:	4640      	mov	r0, r8
 801072e:	4649      	mov	r1, r9
 8010730:	f7f0 f9dc 	bl	8000aec <__aeabi_dcmplt>
 8010734:	2800      	cmp	r0, #0
 8010736:	d07b      	beq.n	8010830 <_dtoa_r+0x4c0>
 8010738:	9b04      	ldr	r3, [sp, #16]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d078      	beq.n	8010830 <_dtoa_r+0x4c0>
 801073e:	9b01      	ldr	r3, [sp, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	dd39      	ble.n	80107b8 <_dtoa_r+0x448>
 8010744:	2200      	movs	r2, #0
 8010746:	4b8f      	ldr	r3, [pc, #572]	; (8010984 <_dtoa_r+0x614>)
 8010748:	4640      	mov	r0, r8
 801074a:	4649      	mov	r1, r9
 801074c:	f7ef ff5c 	bl	8000608 <__aeabi_dmul>
 8010750:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010754:	3501      	adds	r5, #1
 8010756:	9e01      	ldr	r6, [sp, #4]
 8010758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801075c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010760:	4628      	mov	r0, r5
 8010762:	f7ef fee7 	bl	8000534 <__aeabi_i2d>
 8010766:	4642      	mov	r2, r8
 8010768:	464b      	mov	r3, r9
 801076a:	f7ef ff4d 	bl	8000608 <__aeabi_dmul>
 801076e:	4b86      	ldr	r3, [pc, #536]	; (8010988 <_dtoa_r+0x618>)
 8010770:	2200      	movs	r2, #0
 8010772:	f7ef fd93 	bl	800029c <__adddf3>
 8010776:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801077a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801077e:	9303      	str	r3, [sp, #12]
 8010780:	2e00      	cmp	r6, #0
 8010782:	d158      	bne.n	8010836 <_dtoa_r+0x4c6>
 8010784:	2200      	movs	r2, #0
 8010786:	4b81      	ldr	r3, [pc, #516]	; (801098c <_dtoa_r+0x61c>)
 8010788:	4640      	mov	r0, r8
 801078a:	4649      	mov	r1, r9
 801078c:	f7ef fd84 	bl	8000298 <__aeabi_dsub>
 8010790:	4680      	mov	r8, r0
 8010792:	4689      	mov	r9, r1
 8010794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010798:	f7f0 f9c6 	bl	8000b28 <__aeabi_dcmpgt>
 801079c:	2800      	cmp	r0, #0
 801079e:	f040 8295 	bne.w	8010ccc <_dtoa_r+0x95c>
 80107a2:	4640      	mov	r0, r8
 80107a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80107a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107ac:	4649      	mov	r1, r9
 80107ae:	f7f0 f99d 	bl	8000aec <__aeabi_dcmplt>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	f040 8288 	bne.w	8010cc8 <_dtoa_r+0x958>
 80107b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80107bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f2c0 814d 	blt.w	8010a5e <_dtoa_r+0x6ee>
 80107c4:	f1bb 0f0e 	cmp.w	fp, #14
 80107c8:	f300 8149 	bgt.w	8010a5e <_dtoa_r+0x6ee>
 80107cc:	4b6a      	ldr	r3, [pc, #424]	; (8010978 <_dtoa_r+0x608>)
 80107ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80107d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f280 80db 	bge.w	8010994 <_dtoa_r+0x624>
 80107de:	9b04      	ldr	r3, [sp, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f300 80d7 	bgt.w	8010994 <_dtoa_r+0x624>
 80107e6:	f040 826e 	bne.w	8010cc6 <_dtoa_r+0x956>
 80107ea:	2200      	movs	r2, #0
 80107ec:	4b67      	ldr	r3, [pc, #412]	; (801098c <_dtoa_r+0x61c>)
 80107ee:	4640      	mov	r0, r8
 80107f0:	4649      	mov	r1, r9
 80107f2:	f7ef ff09 	bl	8000608 <__aeabi_dmul>
 80107f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107fa:	f7f0 f98b 	bl	8000b14 <__aeabi_dcmpge>
 80107fe:	9e04      	ldr	r6, [sp, #16]
 8010800:	4637      	mov	r7, r6
 8010802:	2800      	cmp	r0, #0
 8010804:	f040 8244 	bne.w	8010c90 <_dtoa_r+0x920>
 8010808:	9d00      	ldr	r5, [sp, #0]
 801080a:	2331      	movs	r3, #49	; 0x31
 801080c:	f10b 0b01 	add.w	fp, fp, #1
 8010810:	f805 3b01 	strb.w	r3, [r5], #1
 8010814:	e240      	b.n	8010c98 <_dtoa_r+0x928>
 8010816:	07f2      	lsls	r2, r6, #31
 8010818:	d505      	bpl.n	8010826 <_dtoa_r+0x4b6>
 801081a:	3501      	adds	r5, #1
 801081c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010820:	f7ef fef2 	bl	8000608 <__aeabi_dmul>
 8010824:	2301      	movs	r3, #1
 8010826:	1076      	asrs	r6, r6, #1
 8010828:	3708      	adds	r7, #8
 801082a:	e773      	b.n	8010714 <_dtoa_r+0x3a4>
 801082c:	2502      	movs	r5, #2
 801082e:	e775      	b.n	801071c <_dtoa_r+0x3ac>
 8010830:	465f      	mov	r7, fp
 8010832:	9e04      	ldr	r6, [sp, #16]
 8010834:	e792      	b.n	801075c <_dtoa_r+0x3ec>
 8010836:	9900      	ldr	r1, [sp, #0]
 8010838:	4b4f      	ldr	r3, [pc, #316]	; (8010978 <_dtoa_r+0x608>)
 801083a:	4431      	add	r1, r6
 801083c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010844:	9102      	str	r1, [sp, #8]
 8010846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010848:	eeb0 9a47 	vmov.f32	s18, s14
 801084c:	eef0 9a67 	vmov.f32	s19, s15
 8010850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010854:	2900      	cmp	r1, #0
 8010856:	d044      	beq.n	80108e2 <_dtoa_r+0x572>
 8010858:	2000      	movs	r0, #0
 801085a:	494d      	ldr	r1, [pc, #308]	; (8010990 <_dtoa_r+0x620>)
 801085c:	f7ef fffe 	bl	800085c <__aeabi_ddiv>
 8010860:	ec53 2b19 	vmov	r2, r3, d9
 8010864:	f7ef fd18 	bl	8000298 <__aeabi_dsub>
 8010868:	9d00      	ldr	r5, [sp, #0]
 801086a:	ec41 0b19 	vmov	d9, r0, r1
 801086e:	4649      	mov	r1, r9
 8010870:	4640      	mov	r0, r8
 8010872:	f7f0 f979 	bl	8000b68 <__aeabi_d2iz>
 8010876:	4606      	mov	r6, r0
 8010878:	f7ef fe5c 	bl	8000534 <__aeabi_i2d>
 801087c:	4602      	mov	r2, r0
 801087e:	3630      	adds	r6, #48	; 0x30
 8010880:	460b      	mov	r3, r1
 8010882:	4640      	mov	r0, r8
 8010884:	4649      	mov	r1, r9
 8010886:	f7ef fd07 	bl	8000298 <__aeabi_dsub>
 801088a:	f805 6b01 	strb.w	r6, [r5], #1
 801088e:	4680      	mov	r8, r0
 8010890:	4689      	mov	r9, r1
 8010892:	ec53 2b19 	vmov	r2, r3, d9
 8010896:	f7f0 f929 	bl	8000aec <__aeabi_dcmplt>
 801089a:	2800      	cmp	r0, #0
 801089c:	d164      	bne.n	8010968 <_dtoa_r+0x5f8>
 801089e:	4642      	mov	r2, r8
 80108a0:	464b      	mov	r3, r9
 80108a2:	2000      	movs	r0, #0
 80108a4:	4936      	ldr	r1, [pc, #216]	; (8010980 <_dtoa_r+0x610>)
 80108a6:	f7ef fcf7 	bl	8000298 <__aeabi_dsub>
 80108aa:	ec53 2b19 	vmov	r2, r3, d9
 80108ae:	f7f0 f91d 	bl	8000aec <__aeabi_dcmplt>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	f040 80b5 	bne.w	8010a22 <_dtoa_r+0x6b2>
 80108b8:	9b02      	ldr	r3, [sp, #8]
 80108ba:	429d      	cmp	r5, r3
 80108bc:	f43f af7c 	beq.w	80107b8 <_dtoa_r+0x448>
 80108c0:	2200      	movs	r2, #0
 80108c2:	4b30      	ldr	r3, [pc, #192]	; (8010984 <_dtoa_r+0x614>)
 80108c4:	ec51 0b19 	vmov	r0, r1, d9
 80108c8:	f7ef fe9e 	bl	8000608 <__aeabi_dmul>
 80108cc:	2200      	movs	r2, #0
 80108ce:	4b2d      	ldr	r3, [pc, #180]	; (8010984 <_dtoa_r+0x614>)
 80108d0:	ec41 0b19 	vmov	d9, r0, r1
 80108d4:	4640      	mov	r0, r8
 80108d6:	4649      	mov	r1, r9
 80108d8:	f7ef fe96 	bl	8000608 <__aeabi_dmul>
 80108dc:	4680      	mov	r8, r0
 80108de:	4689      	mov	r9, r1
 80108e0:	e7c5      	b.n	801086e <_dtoa_r+0x4fe>
 80108e2:	ec51 0b17 	vmov	r0, r1, d7
 80108e6:	f7ef fe8f 	bl	8000608 <__aeabi_dmul>
 80108ea:	9b02      	ldr	r3, [sp, #8]
 80108ec:	9d00      	ldr	r5, [sp, #0]
 80108ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80108f0:	ec41 0b19 	vmov	d9, r0, r1
 80108f4:	4649      	mov	r1, r9
 80108f6:	4640      	mov	r0, r8
 80108f8:	f7f0 f936 	bl	8000b68 <__aeabi_d2iz>
 80108fc:	4606      	mov	r6, r0
 80108fe:	f7ef fe19 	bl	8000534 <__aeabi_i2d>
 8010902:	4602      	mov	r2, r0
 8010904:	460b      	mov	r3, r1
 8010906:	4640      	mov	r0, r8
 8010908:	4649      	mov	r1, r9
 801090a:	3630      	adds	r6, #48	; 0x30
 801090c:	f7ef fcc4 	bl	8000298 <__aeabi_dsub>
 8010910:	9b02      	ldr	r3, [sp, #8]
 8010912:	f805 6b01 	strb.w	r6, [r5], #1
 8010916:	4680      	mov	r8, r0
 8010918:	429d      	cmp	r5, r3
 801091a:	4689      	mov	r9, r1
 801091c:	f04f 0200 	mov.w	r2, #0
 8010920:	d124      	bne.n	801096c <_dtoa_r+0x5fc>
 8010922:	4b1b      	ldr	r3, [pc, #108]	; (8010990 <_dtoa_r+0x620>)
 8010924:	ec51 0b19 	vmov	r0, r1, d9
 8010928:	f7ef fcb8 	bl	800029c <__adddf3>
 801092c:	4602      	mov	r2, r0
 801092e:	460b      	mov	r3, r1
 8010930:	4640      	mov	r0, r8
 8010932:	4649      	mov	r1, r9
 8010934:	f7f0 f8f8 	bl	8000b28 <__aeabi_dcmpgt>
 8010938:	2800      	cmp	r0, #0
 801093a:	d172      	bne.n	8010a22 <_dtoa_r+0x6b2>
 801093c:	2000      	movs	r0, #0
 801093e:	4914      	ldr	r1, [pc, #80]	; (8010990 <_dtoa_r+0x620>)
 8010940:	ec53 2b19 	vmov	r2, r3, d9
 8010944:	f7ef fca8 	bl	8000298 <__aeabi_dsub>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4640      	mov	r0, r8
 801094e:	4649      	mov	r1, r9
 8010950:	f7f0 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8010954:	2800      	cmp	r0, #0
 8010956:	f43f af2f 	beq.w	80107b8 <_dtoa_r+0x448>
 801095a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801095c:	1e6b      	subs	r3, r5, #1
 801095e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010960:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010964:	2b30      	cmp	r3, #48	; 0x30
 8010966:	d0f8      	beq.n	801095a <_dtoa_r+0x5ea>
 8010968:	46bb      	mov	fp, r7
 801096a:	e049      	b.n	8010a00 <_dtoa_r+0x690>
 801096c:	4b05      	ldr	r3, [pc, #20]	; (8010984 <_dtoa_r+0x614>)
 801096e:	f7ef fe4b 	bl	8000608 <__aeabi_dmul>
 8010972:	4680      	mov	r8, r0
 8010974:	4689      	mov	r9, r1
 8010976:	e7bd      	b.n	80108f4 <_dtoa_r+0x584>
 8010978:	08012070 	.word	0x08012070
 801097c:	08012048 	.word	0x08012048
 8010980:	3ff00000 	.word	0x3ff00000
 8010984:	40240000 	.word	0x40240000
 8010988:	401c0000 	.word	0x401c0000
 801098c:	40140000 	.word	0x40140000
 8010990:	3fe00000 	.word	0x3fe00000
 8010994:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010998:	9d00      	ldr	r5, [sp, #0]
 801099a:	4642      	mov	r2, r8
 801099c:	464b      	mov	r3, r9
 801099e:	4630      	mov	r0, r6
 80109a0:	4639      	mov	r1, r7
 80109a2:	f7ef ff5b 	bl	800085c <__aeabi_ddiv>
 80109a6:	f7f0 f8df 	bl	8000b68 <__aeabi_d2iz>
 80109aa:	9001      	str	r0, [sp, #4]
 80109ac:	f7ef fdc2 	bl	8000534 <__aeabi_i2d>
 80109b0:	4642      	mov	r2, r8
 80109b2:	464b      	mov	r3, r9
 80109b4:	f7ef fe28 	bl	8000608 <__aeabi_dmul>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4630      	mov	r0, r6
 80109be:	4639      	mov	r1, r7
 80109c0:	f7ef fc6a 	bl	8000298 <__aeabi_dsub>
 80109c4:	9e01      	ldr	r6, [sp, #4]
 80109c6:	9f04      	ldr	r7, [sp, #16]
 80109c8:	4602      	mov	r2, r0
 80109ca:	3630      	adds	r6, #48	; 0x30
 80109cc:	460b      	mov	r3, r1
 80109ce:	f805 6b01 	strb.w	r6, [r5], #1
 80109d2:	9e00      	ldr	r6, [sp, #0]
 80109d4:	1bae      	subs	r6, r5, r6
 80109d6:	42b7      	cmp	r7, r6
 80109d8:	d134      	bne.n	8010a44 <_dtoa_r+0x6d4>
 80109da:	f7ef fc5f 	bl	800029c <__adddf3>
 80109de:	4642      	mov	r2, r8
 80109e0:	464b      	mov	r3, r9
 80109e2:	4606      	mov	r6, r0
 80109e4:	460f      	mov	r7, r1
 80109e6:	f7f0 f89f 	bl	8000b28 <__aeabi_dcmpgt>
 80109ea:	b9c8      	cbnz	r0, 8010a20 <_dtoa_r+0x6b0>
 80109ec:	4642      	mov	r2, r8
 80109ee:	464b      	mov	r3, r9
 80109f0:	4630      	mov	r0, r6
 80109f2:	4639      	mov	r1, r7
 80109f4:	f7f0 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80109f8:	b110      	cbz	r0, 8010a00 <_dtoa_r+0x690>
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	07db      	lsls	r3, r3, #31
 80109fe:	d40f      	bmi.n	8010a20 <_dtoa_r+0x6b0>
 8010a00:	4651      	mov	r1, sl
 8010a02:	4620      	mov	r0, r4
 8010a04:	f000 fac1 	bl	8010f8a <_Bfree>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a0c:	702b      	strb	r3, [r5, #0]
 8010a0e:	f10b 0301 	add.w	r3, fp, #1
 8010a12:	6013      	str	r3, [r2, #0]
 8010a14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	f43f ace6 	beq.w	80103e8 <_dtoa_r+0x78>
 8010a1c:	601d      	str	r5, [r3, #0]
 8010a1e:	e4e3      	b.n	80103e8 <_dtoa_r+0x78>
 8010a20:	465f      	mov	r7, fp
 8010a22:	462b      	mov	r3, r5
 8010a24:	461d      	mov	r5, r3
 8010a26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a2a:	2a39      	cmp	r2, #57	; 0x39
 8010a2c:	d106      	bne.n	8010a3c <_dtoa_r+0x6cc>
 8010a2e:	9a00      	ldr	r2, [sp, #0]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d1f7      	bne.n	8010a24 <_dtoa_r+0x6b4>
 8010a34:	2230      	movs	r2, #48	; 0x30
 8010a36:	9900      	ldr	r1, [sp, #0]
 8010a38:	3701      	adds	r7, #1
 8010a3a:	700a      	strb	r2, [r1, #0]
 8010a3c:	781a      	ldrb	r2, [r3, #0]
 8010a3e:	3201      	adds	r2, #1
 8010a40:	701a      	strb	r2, [r3, #0]
 8010a42:	e791      	b.n	8010968 <_dtoa_r+0x5f8>
 8010a44:	2200      	movs	r2, #0
 8010a46:	4ba3      	ldr	r3, [pc, #652]	; (8010cd4 <_dtoa_r+0x964>)
 8010a48:	f7ef fdde 	bl	8000608 <__aeabi_dmul>
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2300      	movs	r3, #0
 8010a50:	4606      	mov	r6, r0
 8010a52:	460f      	mov	r7, r1
 8010a54:	f7f0 f840 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d09e      	beq.n	801099a <_dtoa_r+0x62a>
 8010a5c:	e7d0      	b.n	8010a00 <_dtoa_r+0x690>
 8010a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a60:	2a00      	cmp	r2, #0
 8010a62:	f000 80ca 	beq.w	8010bfa <_dtoa_r+0x88a>
 8010a66:	9a07      	ldr	r2, [sp, #28]
 8010a68:	2a01      	cmp	r2, #1
 8010a6a:	f300 80ad 	bgt.w	8010bc8 <_dtoa_r+0x858>
 8010a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a70:	2a00      	cmp	r2, #0
 8010a72:	f000 80a5 	beq.w	8010bc0 <_dtoa_r+0x850>
 8010a76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010a7a:	9e08      	ldr	r6, [sp, #32]
 8010a7c:	9d05      	ldr	r5, [sp, #20]
 8010a7e:	9a05      	ldr	r2, [sp, #20]
 8010a80:	2101      	movs	r1, #1
 8010a82:	4620      	mov	r0, r4
 8010a84:	441a      	add	r2, r3
 8010a86:	9205      	str	r2, [sp, #20]
 8010a88:	9a06      	ldr	r2, [sp, #24]
 8010a8a:	441a      	add	r2, r3
 8010a8c:	9206      	str	r2, [sp, #24]
 8010a8e:	f000 fb1b 	bl	80110c8 <__i2b>
 8010a92:	4607      	mov	r7, r0
 8010a94:	b165      	cbz	r5, 8010ab0 <_dtoa_r+0x740>
 8010a96:	9b06      	ldr	r3, [sp, #24]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	dd09      	ble.n	8010ab0 <_dtoa_r+0x740>
 8010a9c:	42ab      	cmp	r3, r5
 8010a9e:	9a05      	ldr	r2, [sp, #20]
 8010aa0:	bfa8      	it	ge
 8010aa2:	462b      	movge	r3, r5
 8010aa4:	1ad2      	subs	r2, r2, r3
 8010aa6:	1aed      	subs	r5, r5, r3
 8010aa8:	9205      	str	r2, [sp, #20]
 8010aaa:	9a06      	ldr	r2, [sp, #24]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	9306      	str	r3, [sp, #24]
 8010ab0:	9b08      	ldr	r3, [sp, #32]
 8010ab2:	b1f3      	cbz	r3, 8010af2 <_dtoa_r+0x782>
 8010ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	f000 80a3 	beq.w	8010c02 <_dtoa_r+0x892>
 8010abc:	2e00      	cmp	r6, #0
 8010abe:	dd10      	ble.n	8010ae2 <_dtoa_r+0x772>
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	4632      	mov	r2, r6
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f000 fbbf 	bl	8011248 <__pow5mult>
 8010aca:	4652      	mov	r2, sl
 8010acc:	4601      	mov	r1, r0
 8010ace:	4607      	mov	r7, r0
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f000 fb0f 	bl	80110f4 <__multiply>
 8010ad6:	4680      	mov	r8, r0
 8010ad8:	4651      	mov	r1, sl
 8010ada:	4620      	mov	r0, r4
 8010adc:	46c2      	mov	sl, r8
 8010ade:	f000 fa54 	bl	8010f8a <_Bfree>
 8010ae2:	9b08      	ldr	r3, [sp, #32]
 8010ae4:	1b9a      	subs	r2, r3, r6
 8010ae6:	d004      	beq.n	8010af2 <_dtoa_r+0x782>
 8010ae8:	4651      	mov	r1, sl
 8010aea:	4620      	mov	r0, r4
 8010aec:	f000 fbac 	bl	8011248 <__pow5mult>
 8010af0:	4682      	mov	sl, r0
 8010af2:	2101      	movs	r1, #1
 8010af4:	4620      	mov	r0, r4
 8010af6:	f000 fae7 	bl	80110c8 <__i2b>
 8010afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010afc:	4606      	mov	r6, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f340 8081 	ble.w	8010c06 <_dtoa_r+0x896>
 8010b04:	461a      	mov	r2, r3
 8010b06:	4601      	mov	r1, r0
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 fb9d 	bl	8011248 <__pow5mult>
 8010b0e:	9b07      	ldr	r3, [sp, #28]
 8010b10:	4606      	mov	r6, r0
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	dd7a      	ble.n	8010c0c <_dtoa_r+0x89c>
 8010b16:	f04f 0800 	mov.w	r8, #0
 8010b1a:	6933      	ldr	r3, [r6, #16]
 8010b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010b20:	6918      	ldr	r0, [r3, #16]
 8010b22:	f000 fa83 	bl	801102c <__hi0bits>
 8010b26:	f1c0 0020 	rsb	r0, r0, #32
 8010b2a:	9b06      	ldr	r3, [sp, #24]
 8010b2c:	4418      	add	r0, r3
 8010b2e:	f010 001f 	ands.w	r0, r0, #31
 8010b32:	f000 8094 	beq.w	8010c5e <_dtoa_r+0x8ee>
 8010b36:	f1c0 0320 	rsb	r3, r0, #32
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	f340 8085 	ble.w	8010c4a <_dtoa_r+0x8da>
 8010b40:	f1c0 001c 	rsb	r0, r0, #28
 8010b44:	9b05      	ldr	r3, [sp, #20]
 8010b46:	4403      	add	r3, r0
 8010b48:	4405      	add	r5, r0
 8010b4a:	9305      	str	r3, [sp, #20]
 8010b4c:	9b06      	ldr	r3, [sp, #24]
 8010b4e:	4403      	add	r3, r0
 8010b50:	9306      	str	r3, [sp, #24]
 8010b52:	9b05      	ldr	r3, [sp, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dd05      	ble.n	8010b64 <_dtoa_r+0x7f4>
 8010b58:	4651      	mov	r1, sl
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f000 fbb3 	bl	80112c8 <__lshift>
 8010b62:	4682      	mov	sl, r0
 8010b64:	9b06      	ldr	r3, [sp, #24]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	dd05      	ble.n	8010b76 <_dtoa_r+0x806>
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f000 fbaa 	bl	80112c8 <__lshift>
 8010b74:	4606      	mov	r6, r0
 8010b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d072      	beq.n	8010c62 <_dtoa_r+0x8f2>
 8010b7c:	4631      	mov	r1, r6
 8010b7e:	4650      	mov	r0, sl
 8010b80:	f000 fc0e 	bl	80113a0 <__mcmp>
 8010b84:	2800      	cmp	r0, #0
 8010b86:	da6c      	bge.n	8010c62 <_dtoa_r+0x8f2>
 8010b88:	2300      	movs	r3, #0
 8010b8a:	4651      	mov	r1, sl
 8010b8c:	220a      	movs	r2, #10
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f000 fa04 	bl	8010f9c <__multadd>
 8010b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b9a:	4682      	mov	sl, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 81ae 	beq.w	8010efe <_dtoa_r+0xb8e>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	4639      	mov	r1, r7
 8010ba6:	220a      	movs	r2, #10
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f000 f9f7 	bl	8010f9c <__multadd>
 8010bae:	9b01      	ldr	r3, [sp, #4]
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f300 8096 	bgt.w	8010ce4 <_dtoa_r+0x974>
 8010bb8:	9b07      	ldr	r3, [sp, #28]
 8010bba:	2b02      	cmp	r3, #2
 8010bbc:	dc59      	bgt.n	8010c72 <_dtoa_r+0x902>
 8010bbe:	e091      	b.n	8010ce4 <_dtoa_r+0x974>
 8010bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010bc6:	e758      	b.n	8010a7a <_dtoa_r+0x70a>
 8010bc8:	9b04      	ldr	r3, [sp, #16]
 8010bca:	1e5e      	subs	r6, r3, #1
 8010bcc:	9b08      	ldr	r3, [sp, #32]
 8010bce:	42b3      	cmp	r3, r6
 8010bd0:	bfb7      	itett	lt
 8010bd2:	9b08      	ldrlt	r3, [sp, #32]
 8010bd4:	1b9e      	subge	r6, r3, r6
 8010bd6:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010bd8:	1af3      	sublt	r3, r6, r3
 8010bda:	bfbe      	ittt	lt
 8010bdc:	9608      	strlt	r6, [sp, #32]
 8010bde:	2600      	movlt	r6, #0
 8010be0:	18d2      	addlt	r2, r2, r3
 8010be2:	9b04      	ldr	r3, [sp, #16]
 8010be4:	bfb8      	it	lt
 8010be6:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	bfb7      	itett	lt
 8010bec:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010bf0:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010bf4:	1a9d      	sublt	r5, r3, r2
 8010bf6:	2300      	movlt	r3, #0
 8010bf8:	e741      	b.n	8010a7e <_dtoa_r+0x70e>
 8010bfa:	9e08      	ldr	r6, [sp, #32]
 8010bfc:	9d05      	ldr	r5, [sp, #20]
 8010bfe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010c00:	e748      	b.n	8010a94 <_dtoa_r+0x724>
 8010c02:	9a08      	ldr	r2, [sp, #32]
 8010c04:	e770      	b.n	8010ae8 <_dtoa_r+0x778>
 8010c06:	9b07      	ldr	r3, [sp, #28]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	dc19      	bgt.n	8010c40 <_dtoa_r+0x8d0>
 8010c0c:	9b02      	ldr	r3, [sp, #8]
 8010c0e:	b9bb      	cbnz	r3, 8010c40 <_dtoa_r+0x8d0>
 8010c10:	9b03      	ldr	r3, [sp, #12]
 8010c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c16:	b99b      	cbnz	r3, 8010c40 <_dtoa_r+0x8d0>
 8010c18:	9b03      	ldr	r3, [sp, #12]
 8010c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c1e:	0d1b      	lsrs	r3, r3, #20
 8010c20:	051b      	lsls	r3, r3, #20
 8010c22:	b183      	cbz	r3, 8010c46 <_dtoa_r+0x8d6>
 8010c24:	9b05      	ldr	r3, [sp, #20]
 8010c26:	f04f 0801 	mov.w	r8, #1
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	9305      	str	r3, [sp, #20]
 8010c2e:	9b06      	ldr	r3, [sp, #24]
 8010c30:	3301      	adds	r3, #1
 8010c32:	9306      	str	r3, [sp, #24]
 8010c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f47f af6f 	bne.w	8010b1a <_dtoa_r+0x7aa>
 8010c3c:	2001      	movs	r0, #1
 8010c3e:	e774      	b.n	8010b2a <_dtoa_r+0x7ba>
 8010c40:	f04f 0800 	mov.w	r8, #0
 8010c44:	e7f6      	b.n	8010c34 <_dtoa_r+0x8c4>
 8010c46:	4698      	mov	r8, r3
 8010c48:	e7f4      	b.n	8010c34 <_dtoa_r+0x8c4>
 8010c4a:	d082      	beq.n	8010b52 <_dtoa_r+0x7e2>
 8010c4c:	331c      	adds	r3, #28
 8010c4e:	9a05      	ldr	r2, [sp, #20]
 8010c50:	441a      	add	r2, r3
 8010c52:	441d      	add	r5, r3
 8010c54:	9205      	str	r2, [sp, #20]
 8010c56:	9a06      	ldr	r2, [sp, #24]
 8010c58:	441a      	add	r2, r3
 8010c5a:	9206      	str	r2, [sp, #24]
 8010c5c:	e779      	b.n	8010b52 <_dtoa_r+0x7e2>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	e7f4      	b.n	8010c4c <_dtoa_r+0x8dc>
 8010c62:	9b04      	ldr	r3, [sp, #16]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	dc37      	bgt.n	8010cd8 <_dtoa_r+0x968>
 8010c68:	9b07      	ldr	r3, [sp, #28]
 8010c6a:	2b02      	cmp	r3, #2
 8010c6c:	dd34      	ble.n	8010cd8 <_dtoa_r+0x968>
 8010c6e:	9b04      	ldr	r3, [sp, #16]
 8010c70:	9301      	str	r3, [sp, #4]
 8010c72:	9b01      	ldr	r3, [sp, #4]
 8010c74:	b963      	cbnz	r3, 8010c90 <_dtoa_r+0x920>
 8010c76:	4631      	mov	r1, r6
 8010c78:	2205      	movs	r2, #5
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f000 f98e 	bl	8010f9c <__multadd>
 8010c80:	4601      	mov	r1, r0
 8010c82:	4606      	mov	r6, r0
 8010c84:	4650      	mov	r0, sl
 8010c86:	f000 fb8b 	bl	80113a0 <__mcmp>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	f73f adbc 	bgt.w	8010808 <_dtoa_r+0x498>
 8010c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c92:	9d00      	ldr	r5, [sp, #0]
 8010c94:	ea6f 0b03 	mvn.w	fp, r3
 8010c98:	f04f 0800 	mov.w	r8, #0
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f000 f973 	bl	8010f8a <_Bfree>
 8010ca4:	2f00      	cmp	r7, #0
 8010ca6:	f43f aeab 	beq.w	8010a00 <_dtoa_r+0x690>
 8010caa:	f1b8 0f00 	cmp.w	r8, #0
 8010cae:	d005      	beq.n	8010cbc <_dtoa_r+0x94c>
 8010cb0:	45b8      	cmp	r8, r7
 8010cb2:	d003      	beq.n	8010cbc <_dtoa_r+0x94c>
 8010cb4:	4641      	mov	r1, r8
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f000 f967 	bl	8010f8a <_Bfree>
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f000 f963 	bl	8010f8a <_Bfree>
 8010cc4:	e69c      	b.n	8010a00 <_dtoa_r+0x690>
 8010cc6:	2600      	movs	r6, #0
 8010cc8:	4637      	mov	r7, r6
 8010cca:	e7e1      	b.n	8010c90 <_dtoa_r+0x920>
 8010ccc:	46bb      	mov	fp, r7
 8010cce:	4637      	mov	r7, r6
 8010cd0:	e59a      	b.n	8010808 <_dtoa_r+0x498>
 8010cd2:	bf00      	nop
 8010cd4:	40240000 	.word	0x40240000
 8010cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f000 80c7 	beq.w	8010e6e <_dtoa_r+0xafe>
 8010ce0:	9b04      	ldr	r3, [sp, #16]
 8010ce2:	9301      	str	r3, [sp, #4]
 8010ce4:	2d00      	cmp	r5, #0
 8010ce6:	dd05      	ble.n	8010cf4 <_dtoa_r+0x984>
 8010ce8:	4639      	mov	r1, r7
 8010cea:	462a      	mov	r2, r5
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 faeb 	bl	80112c8 <__lshift>
 8010cf2:	4607      	mov	r7, r0
 8010cf4:	f1b8 0f00 	cmp.w	r8, #0
 8010cf8:	d05a      	beq.n	8010db0 <_dtoa_r+0xa40>
 8010cfa:	6879      	ldr	r1, [r7, #4]
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f000 f91f 	bl	8010f40 <_Balloc>
 8010d02:	4605      	mov	r5, r0
 8010d04:	b920      	cbnz	r0, 8010d10 <_dtoa_r+0x9a0>
 8010d06:	4b82      	ldr	r3, [pc, #520]	; (8010f10 <_dtoa_r+0xba0>)
 8010d08:	4602      	mov	r2, r0
 8010d0a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010d0e:	e471      	b.n	80105f4 <_dtoa_r+0x284>
 8010d10:	693a      	ldr	r2, [r7, #16]
 8010d12:	f107 010c 	add.w	r1, r7, #12
 8010d16:	300c      	adds	r0, #12
 8010d18:	3202      	adds	r2, #2
 8010d1a:	0092      	lsls	r2, r2, #2
 8010d1c:	f7fc fd88 	bl	800d830 <memcpy>
 8010d20:	2201      	movs	r2, #1
 8010d22:	4629      	mov	r1, r5
 8010d24:	4620      	mov	r0, r4
 8010d26:	f000 facf 	bl	80112c8 <__lshift>
 8010d2a:	9b00      	ldr	r3, [sp, #0]
 8010d2c:	46b8      	mov	r8, r7
 8010d2e:	4607      	mov	r7, r0
 8010d30:	3301      	adds	r3, #1
 8010d32:	9304      	str	r3, [sp, #16]
 8010d34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d38:	4413      	add	r3, r2
 8010d3a:	9308      	str	r3, [sp, #32]
 8010d3c:	9b02      	ldr	r3, [sp, #8]
 8010d3e:	f003 0301 	and.w	r3, r3, #1
 8010d42:	9306      	str	r3, [sp, #24]
 8010d44:	9b04      	ldr	r3, [sp, #16]
 8010d46:	4631      	mov	r1, r6
 8010d48:	4650      	mov	r0, sl
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	f7ff fa7f 	bl	8010250 <quorem>
 8010d52:	4641      	mov	r1, r8
 8010d54:	9002      	str	r0, [sp, #8]
 8010d56:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010d5a:	4650      	mov	r0, sl
 8010d5c:	f000 fb20 	bl	80113a0 <__mcmp>
 8010d60:	463a      	mov	r2, r7
 8010d62:	9005      	str	r0, [sp, #20]
 8010d64:	4631      	mov	r1, r6
 8010d66:	4620      	mov	r0, r4
 8010d68:	f000 fb36 	bl	80113d8 <__mdiff>
 8010d6c:	68c2      	ldr	r2, [r0, #12]
 8010d6e:	4605      	mov	r5, r0
 8010d70:	bb02      	cbnz	r2, 8010db4 <_dtoa_r+0xa44>
 8010d72:	4601      	mov	r1, r0
 8010d74:	4650      	mov	r0, sl
 8010d76:	f000 fb13 	bl	80113a0 <__mcmp>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	4620      	mov	r0, r4
 8010d80:	9209      	str	r2, [sp, #36]	; 0x24
 8010d82:	f000 f902 	bl	8010f8a <_Bfree>
 8010d86:	9b07      	ldr	r3, [sp, #28]
 8010d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d8a:	9d04      	ldr	r5, [sp, #16]
 8010d8c:	ea43 0102 	orr.w	r1, r3, r2
 8010d90:	9b06      	ldr	r3, [sp, #24]
 8010d92:	4319      	orrs	r1, r3
 8010d94:	d110      	bne.n	8010db8 <_dtoa_r+0xa48>
 8010d96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010d9a:	d029      	beq.n	8010df0 <_dtoa_r+0xa80>
 8010d9c:	9b05      	ldr	r3, [sp, #20]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	dd02      	ble.n	8010da8 <_dtoa_r+0xa38>
 8010da2:	9b02      	ldr	r3, [sp, #8]
 8010da4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010da8:	9b01      	ldr	r3, [sp, #4]
 8010daa:	f883 9000 	strb.w	r9, [r3]
 8010dae:	e775      	b.n	8010c9c <_dtoa_r+0x92c>
 8010db0:	4638      	mov	r0, r7
 8010db2:	e7ba      	b.n	8010d2a <_dtoa_r+0x9ba>
 8010db4:	2201      	movs	r2, #1
 8010db6:	e7e1      	b.n	8010d7c <_dtoa_r+0xa0c>
 8010db8:	9b05      	ldr	r3, [sp, #20]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	db04      	blt.n	8010dc8 <_dtoa_r+0xa58>
 8010dbe:	9907      	ldr	r1, [sp, #28]
 8010dc0:	430b      	orrs	r3, r1
 8010dc2:	9906      	ldr	r1, [sp, #24]
 8010dc4:	430b      	orrs	r3, r1
 8010dc6:	d120      	bne.n	8010e0a <_dtoa_r+0xa9a>
 8010dc8:	2a00      	cmp	r2, #0
 8010dca:	dded      	ble.n	8010da8 <_dtoa_r+0xa38>
 8010dcc:	4651      	mov	r1, sl
 8010dce:	2201      	movs	r2, #1
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f000 fa79 	bl	80112c8 <__lshift>
 8010dd6:	4631      	mov	r1, r6
 8010dd8:	4682      	mov	sl, r0
 8010dda:	f000 fae1 	bl	80113a0 <__mcmp>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	dc03      	bgt.n	8010dea <_dtoa_r+0xa7a>
 8010de2:	d1e1      	bne.n	8010da8 <_dtoa_r+0xa38>
 8010de4:	f019 0f01 	tst.w	r9, #1
 8010de8:	d0de      	beq.n	8010da8 <_dtoa_r+0xa38>
 8010dea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010dee:	d1d8      	bne.n	8010da2 <_dtoa_r+0xa32>
 8010df0:	2339      	movs	r3, #57	; 0x39
 8010df2:	9a01      	ldr	r2, [sp, #4]
 8010df4:	7013      	strb	r3, [r2, #0]
 8010df6:	462b      	mov	r3, r5
 8010df8:	461d      	mov	r5, r3
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e00:	2a39      	cmp	r2, #57	; 0x39
 8010e02:	d06b      	beq.n	8010edc <_dtoa_r+0xb6c>
 8010e04:	3201      	adds	r2, #1
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	e748      	b.n	8010c9c <_dtoa_r+0x92c>
 8010e0a:	2a00      	cmp	r2, #0
 8010e0c:	dd07      	ble.n	8010e1e <_dtoa_r+0xaae>
 8010e0e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010e12:	d0ed      	beq.n	8010df0 <_dtoa_r+0xa80>
 8010e14:	f109 0301 	add.w	r3, r9, #1
 8010e18:	9a01      	ldr	r2, [sp, #4]
 8010e1a:	7013      	strb	r3, [r2, #0]
 8010e1c:	e73e      	b.n	8010c9c <_dtoa_r+0x92c>
 8010e1e:	9b04      	ldr	r3, [sp, #16]
 8010e20:	9a08      	ldr	r2, [sp, #32]
 8010e22:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d042      	beq.n	8010eb0 <_dtoa_r+0xb40>
 8010e2a:	4651      	mov	r1, sl
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	220a      	movs	r2, #10
 8010e30:	4620      	mov	r0, r4
 8010e32:	f000 f8b3 	bl	8010f9c <__multadd>
 8010e36:	45b8      	cmp	r8, r7
 8010e38:	4682      	mov	sl, r0
 8010e3a:	f04f 0300 	mov.w	r3, #0
 8010e3e:	f04f 020a 	mov.w	r2, #10
 8010e42:	4641      	mov	r1, r8
 8010e44:	4620      	mov	r0, r4
 8010e46:	d107      	bne.n	8010e58 <_dtoa_r+0xae8>
 8010e48:	f000 f8a8 	bl	8010f9c <__multadd>
 8010e4c:	4680      	mov	r8, r0
 8010e4e:	4607      	mov	r7, r0
 8010e50:	9b04      	ldr	r3, [sp, #16]
 8010e52:	3301      	adds	r3, #1
 8010e54:	9304      	str	r3, [sp, #16]
 8010e56:	e775      	b.n	8010d44 <_dtoa_r+0x9d4>
 8010e58:	f000 f8a0 	bl	8010f9c <__multadd>
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	4680      	mov	r8, r0
 8010e60:	2300      	movs	r3, #0
 8010e62:	220a      	movs	r2, #10
 8010e64:	4620      	mov	r0, r4
 8010e66:	f000 f899 	bl	8010f9c <__multadd>
 8010e6a:	4607      	mov	r7, r0
 8010e6c:	e7f0      	b.n	8010e50 <_dtoa_r+0xae0>
 8010e6e:	9b04      	ldr	r3, [sp, #16]
 8010e70:	9301      	str	r3, [sp, #4]
 8010e72:	9d00      	ldr	r5, [sp, #0]
 8010e74:	4631      	mov	r1, r6
 8010e76:	4650      	mov	r0, sl
 8010e78:	f7ff f9ea 	bl	8010250 <quorem>
 8010e7c:	9b00      	ldr	r3, [sp, #0]
 8010e7e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010e82:	f805 9b01 	strb.w	r9, [r5], #1
 8010e86:	1aea      	subs	r2, r5, r3
 8010e88:	9b01      	ldr	r3, [sp, #4]
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	dd07      	ble.n	8010e9e <_dtoa_r+0xb2e>
 8010e8e:	4651      	mov	r1, sl
 8010e90:	2300      	movs	r3, #0
 8010e92:	220a      	movs	r2, #10
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 f881 	bl	8010f9c <__multadd>
 8010e9a:	4682      	mov	sl, r0
 8010e9c:	e7ea      	b.n	8010e74 <_dtoa_r+0xb04>
 8010e9e:	9b01      	ldr	r3, [sp, #4]
 8010ea0:	f04f 0800 	mov.w	r8, #0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	bfcc      	ite	gt
 8010ea8:	461d      	movgt	r5, r3
 8010eaa:	2501      	movle	r5, #1
 8010eac:	9b00      	ldr	r3, [sp, #0]
 8010eae:	441d      	add	r5, r3
 8010eb0:	4651      	mov	r1, sl
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f000 fa07 	bl	80112c8 <__lshift>
 8010eba:	4631      	mov	r1, r6
 8010ebc:	4682      	mov	sl, r0
 8010ebe:	f000 fa6f 	bl	80113a0 <__mcmp>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	dc97      	bgt.n	8010df6 <_dtoa_r+0xa86>
 8010ec6:	d102      	bne.n	8010ece <_dtoa_r+0xb5e>
 8010ec8:	f019 0f01 	tst.w	r9, #1
 8010ecc:	d193      	bne.n	8010df6 <_dtoa_r+0xa86>
 8010ece:	462b      	mov	r3, r5
 8010ed0:	461d      	mov	r5, r3
 8010ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ed6:	2a30      	cmp	r2, #48	; 0x30
 8010ed8:	d0fa      	beq.n	8010ed0 <_dtoa_r+0xb60>
 8010eda:	e6df      	b.n	8010c9c <_dtoa_r+0x92c>
 8010edc:	9a00      	ldr	r2, [sp, #0]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d18a      	bne.n	8010df8 <_dtoa_r+0xa88>
 8010ee2:	f10b 0b01 	add.w	fp, fp, #1
 8010ee6:	2331      	movs	r3, #49	; 0x31
 8010ee8:	e797      	b.n	8010e1a <_dtoa_r+0xaaa>
 8010eea:	4b0a      	ldr	r3, [pc, #40]	; (8010f14 <_dtoa_r+0xba4>)
 8010eec:	f7ff ba9f 	b.w	801042e <_dtoa_r+0xbe>
 8010ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f47f aa7e 	bne.w	80103f4 <_dtoa_r+0x84>
 8010ef8:	4b07      	ldr	r3, [pc, #28]	; (8010f18 <_dtoa_r+0xba8>)
 8010efa:	f7ff ba98 	b.w	801042e <_dtoa_r+0xbe>
 8010efe:	9b01      	ldr	r3, [sp, #4]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	dcb6      	bgt.n	8010e72 <_dtoa_r+0xb02>
 8010f04:	9b07      	ldr	r3, [sp, #28]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	f73f aeb3 	bgt.w	8010c72 <_dtoa_r+0x902>
 8010f0c:	e7b1      	b.n	8010e72 <_dtoa_r+0xb02>
 8010f0e:	bf00      	nop
 8010f10:	08011f80 	.word	0x08011f80
 8010f14:	08011f27 	.word	0x08011f27
 8010f18:	08011f73 	.word	0x08011f73

08010f1c <__ascii_mbtowc>:
 8010f1c:	b082      	sub	sp, #8
 8010f1e:	b901      	cbnz	r1, 8010f22 <__ascii_mbtowc+0x6>
 8010f20:	a901      	add	r1, sp, #4
 8010f22:	b142      	cbz	r2, 8010f36 <__ascii_mbtowc+0x1a>
 8010f24:	b14b      	cbz	r3, 8010f3a <__ascii_mbtowc+0x1e>
 8010f26:	7813      	ldrb	r3, [r2, #0]
 8010f28:	600b      	str	r3, [r1, #0]
 8010f2a:	7812      	ldrb	r2, [r2, #0]
 8010f2c:	1e10      	subs	r0, r2, #0
 8010f2e:	bf18      	it	ne
 8010f30:	2001      	movne	r0, #1
 8010f32:	b002      	add	sp, #8
 8010f34:	4770      	bx	lr
 8010f36:	4610      	mov	r0, r2
 8010f38:	e7fb      	b.n	8010f32 <__ascii_mbtowc+0x16>
 8010f3a:	f06f 0001 	mvn.w	r0, #1
 8010f3e:	e7f8      	b.n	8010f32 <__ascii_mbtowc+0x16>

08010f40 <_Balloc>:
 8010f40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010f42:	b570      	push	{r4, r5, r6, lr}
 8010f44:	4605      	mov	r5, r0
 8010f46:	460c      	mov	r4, r1
 8010f48:	b17b      	cbz	r3, 8010f6a <_Balloc+0x2a>
 8010f4a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8010f4c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010f50:	b9a0      	cbnz	r0, 8010f7c <_Balloc+0x3c>
 8010f52:	2101      	movs	r1, #1
 8010f54:	4628      	mov	r0, r5
 8010f56:	fa01 f604 	lsl.w	r6, r1, r4
 8010f5a:	1d72      	adds	r2, r6, #5
 8010f5c:	0092      	lsls	r2, r2, #2
 8010f5e:	f7fb ffbd 	bl	800cedc <_calloc_r>
 8010f62:	b148      	cbz	r0, 8010f78 <_Balloc+0x38>
 8010f64:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8010f68:	e00b      	b.n	8010f82 <_Balloc+0x42>
 8010f6a:	2221      	movs	r2, #33	; 0x21
 8010f6c:	2104      	movs	r1, #4
 8010f6e:	f7fb ffb5 	bl	800cedc <_calloc_r>
 8010f72:	6468      	str	r0, [r5, #68]	; 0x44
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d1e8      	bne.n	8010f4a <_Balloc+0xa>
 8010f78:	2000      	movs	r0, #0
 8010f7a:	bd70      	pop	{r4, r5, r6, pc}
 8010f7c:	6802      	ldr	r2, [r0, #0]
 8010f7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8010f82:	2300      	movs	r3, #0
 8010f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010f88:	e7f7      	b.n	8010f7a <_Balloc+0x3a>

08010f8a <_Bfree>:
 8010f8a:	b131      	cbz	r1, 8010f9a <_Bfree+0x10>
 8010f8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010f8e:	684a      	ldr	r2, [r1, #4]
 8010f90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010f94:	6008      	str	r0, [r1, #0]
 8010f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010f9a:	4770      	bx	lr

08010f9c <__multadd>:
 8010f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa0:	f101 0c14 	add.w	ip, r1, #20
 8010fa4:	4607      	mov	r7, r0
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	461e      	mov	r6, r3
 8010faa:	690d      	ldr	r5, [r1, #16]
 8010fac:	2000      	movs	r0, #0
 8010fae:	f8dc 3000 	ldr.w	r3, [ip]
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	b299      	uxth	r1, r3
 8010fb6:	4285      	cmp	r5, r0
 8010fb8:	fb02 6101 	mla	r1, r2, r1, r6
 8010fbc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010fc0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8010fc4:	b289      	uxth	r1, r1
 8010fc6:	fb02 3306 	mla	r3, r2, r6, r3
 8010fca:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010fce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010fd2:	f84c 1b04 	str.w	r1, [ip], #4
 8010fd6:	dcea      	bgt.n	8010fae <__multadd+0x12>
 8010fd8:	b30e      	cbz	r6, 801101e <__multadd+0x82>
 8010fda:	68a3      	ldr	r3, [r4, #8]
 8010fdc:	42ab      	cmp	r3, r5
 8010fde:	dc19      	bgt.n	8011014 <__multadd+0x78>
 8010fe0:	6861      	ldr	r1, [r4, #4]
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	3101      	adds	r1, #1
 8010fe6:	f7ff ffab 	bl	8010f40 <_Balloc>
 8010fea:	4680      	mov	r8, r0
 8010fec:	b928      	cbnz	r0, 8010ffa <__multadd+0x5e>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <__multadd+0x88>)
 8010ff2:	21ba      	movs	r1, #186	; 0xba
 8010ff4:	480c      	ldr	r0, [pc, #48]	; (8011028 <__multadd+0x8c>)
 8010ff6:	f000 fd33 	bl	8011a60 <__assert_func>
 8010ffa:	6922      	ldr	r2, [r4, #16]
 8010ffc:	f104 010c 	add.w	r1, r4, #12
 8011000:	300c      	adds	r0, #12
 8011002:	3202      	adds	r2, #2
 8011004:	0092      	lsls	r2, r2, #2
 8011006:	f7fc fc13 	bl	800d830 <memcpy>
 801100a:	4621      	mov	r1, r4
 801100c:	4644      	mov	r4, r8
 801100e:	4638      	mov	r0, r7
 8011010:	f7ff ffbb 	bl	8010f8a <_Bfree>
 8011014:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011018:	3501      	adds	r5, #1
 801101a:	615e      	str	r6, [r3, #20]
 801101c:	6125      	str	r5, [r4, #16]
 801101e:	4620      	mov	r0, r4
 8011020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011024:	08011f80 	.word	0x08011f80
 8011028:	08011fe9 	.word	0x08011fe9

0801102c <__hi0bits>:
 801102c:	0c03      	lsrs	r3, r0, #16
 801102e:	041b      	lsls	r3, r3, #16
 8011030:	b9d3      	cbnz	r3, 8011068 <__hi0bits+0x3c>
 8011032:	0400      	lsls	r0, r0, #16
 8011034:	2310      	movs	r3, #16
 8011036:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801103a:	bf04      	itt	eq
 801103c:	0200      	lsleq	r0, r0, #8
 801103e:	3308      	addeq	r3, #8
 8011040:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011044:	bf04      	itt	eq
 8011046:	0100      	lsleq	r0, r0, #4
 8011048:	3304      	addeq	r3, #4
 801104a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801104e:	bf04      	itt	eq
 8011050:	0080      	lsleq	r0, r0, #2
 8011052:	3302      	addeq	r3, #2
 8011054:	2800      	cmp	r0, #0
 8011056:	db05      	blt.n	8011064 <__hi0bits+0x38>
 8011058:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801105c:	f103 0301 	add.w	r3, r3, #1
 8011060:	bf08      	it	eq
 8011062:	2320      	moveq	r3, #32
 8011064:	4618      	mov	r0, r3
 8011066:	4770      	bx	lr
 8011068:	2300      	movs	r3, #0
 801106a:	e7e4      	b.n	8011036 <__hi0bits+0xa>

0801106c <__lo0bits>:
 801106c:	6803      	ldr	r3, [r0, #0]
 801106e:	f013 0207 	ands.w	r2, r3, #7
 8011072:	d00c      	beq.n	801108e <__lo0bits+0x22>
 8011074:	07d9      	lsls	r1, r3, #31
 8011076:	d422      	bmi.n	80110be <__lo0bits+0x52>
 8011078:	079a      	lsls	r2, r3, #30
 801107a:	bf47      	ittee	mi
 801107c:	085b      	lsrmi	r3, r3, #1
 801107e:	2201      	movmi	r2, #1
 8011080:	089b      	lsrpl	r3, r3, #2
 8011082:	2202      	movpl	r2, #2
 8011084:	bf4c      	ite	mi
 8011086:	6003      	strmi	r3, [r0, #0]
 8011088:	6003      	strpl	r3, [r0, #0]
 801108a:	4610      	mov	r0, r2
 801108c:	4770      	bx	lr
 801108e:	b299      	uxth	r1, r3
 8011090:	b909      	cbnz	r1, 8011096 <__lo0bits+0x2a>
 8011092:	0c1b      	lsrs	r3, r3, #16
 8011094:	2210      	movs	r2, #16
 8011096:	b2d9      	uxtb	r1, r3
 8011098:	b909      	cbnz	r1, 801109e <__lo0bits+0x32>
 801109a:	3208      	adds	r2, #8
 801109c:	0a1b      	lsrs	r3, r3, #8
 801109e:	0719      	lsls	r1, r3, #28
 80110a0:	bf04      	itt	eq
 80110a2:	091b      	lsreq	r3, r3, #4
 80110a4:	3204      	addeq	r2, #4
 80110a6:	0799      	lsls	r1, r3, #30
 80110a8:	bf04      	itt	eq
 80110aa:	089b      	lsreq	r3, r3, #2
 80110ac:	3202      	addeq	r2, #2
 80110ae:	07d9      	lsls	r1, r3, #31
 80110b0:	d403      	bmi.n	80110ba <__lo0bits+0x4e>
 80110b2:	085b      	lsrs	r3, r3, #1
 80110b4:	f102 0201 	add.w	r2, r2, #1
 80110b8:	d003      	beq.n	80110c2 <__lo0bits+0x56>
 80110ba:	6003      	str	r3, [r0, #0]
 80110bc:	e7e5      	b.n	801108a <__lo0bits+0x1e>
 80110be:	2200      	movs	r2, #0
 80110c0:	e7e3      	b.n	801108a <__lo0bits+0x1e>
 80110c2:	2220      	movs	r2, #32
 80110c4:	e7e1      	b.n	801108a <__lo0bits+0x1e>
	...

080110c8 <__i2b>:
 80110c8:	b510      	push	{r4, lr}
 80110ca:	460c      	mov	r4, r1
 80110cc:	2101      	movs	r1, #1
 80110ce:	f7ff ff37 	bl	8010f40 <_Balloc>
 80110d2:	4602      	mov	r2, r0
 80110d4:	b928      	cbnz	r0, 80110e2 <__i2b+0x1a>
 80110d6:	4b05      	ldr	r3, [pc, #20]	; (80110ec <__i2b+0x24>)
 80110d8:	f240 1145 	movw	r1, #325	; 0x145
 80110dc:	4804      	ldr	r0, [pc, #16]	; (80110f0 <__i2b+0x28>)
 80110de:	f000 fcbf 	bl	8011a60 <__assert_func>
 80110e2:	2301      	movs	r3, #1
 80110e4:	6144      	str	r4, [r0, #20]
 80110e6:	6103      	str	r3, [r0, #16]
 80110e8:	bd10      	pop	{r4, pc}
 80110ea:	bf00      	nop
 80110ec:	08011f80 	.word	0x08011f80
 80110f0:	08011fe9 	.word	0x08011fe9

080110f4 <__multiply>:
 80110f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f8:	4691      	mov	r9, r2
 80110fa:	690a      	ldr	r2, [r1, #16]
 80110fc:	460c      	mov	r4, r1
 80110fe:	b085      	sub	sp, #20
 8011100:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011104:	429a      	cmp	r2, r3
 8011106:	bfbe      	ittt	lt
 8011108:	460b      	movlt	r3, r1
 801110a:	464c      	movlt	r4, r9
 801110c:	4699      	movlt	r9, r3
 801110e:	6927      	ldr	r7, [r4, #16]
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011116:	6861      	ldr	r1, [r4, #4]
 8011118:	eb07 060a 	add.w	r6, r7, sl
 801111c:	42b3      	cmp	r3, r6
 801111e:	bfb8      	it	lt
 8011120:	3101      	addlt	r1, #1
 8011122:	f7ff ff0d 	bl	8010f40 <_Balloc>
 8011126:	b930      	cbnz	r0, 8011136 <__multiply+0x42>
 8011128:	4602      	mov	r2, r0
 801112a:	4b45      	ldr	r3, [pc, #276]	; (8011240 <__multiply+0x14c>)
 801112c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011130:	4844      	ldr	r0, [pc, #272]	; (8011244 <__multiply+0x150>)
 8011132:	f000 fc95 	bl	8011a60 <__assert_func>
 8011136:	f100 0514 	add.w	r5, r0, #20
 801113a:	2200      	movs	r2, #0
 801113c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011140:	462b      	mov	r3, r5
 8011142:	4543      	cmp	r3, r8
 8011144:	d321      	bcc.n	801118a <__multiply+0x96>
 8011146:	f104 0314 	add.w	r3, r4, #20
 801114a:	f104 0115 	add.w	r1, r4, #21
 801114e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011152:	f109 0314 	add.w	r3, r9, #20
 8011156:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801115a:	9202      	str	r2, [sp, #8]
 801115c:	1b3a      	subs	r2, r7, r4
 801115e:	3a15      	subs	r2, #21
 8011160:	f022 0203 	bic.w	r2, r2, #3
 8011164:	3204      	adds	r2, #4
 8011166:	428f      	cmp	r7, r1
 8011168:	bf38      	it	cc
 801116a:	2204      	movcc	r2, #4
 801116c:	9201      	str	r2, [sp, #4]
 801116e:	9a02      	ldr	r2, [sp, #8]
 8011170:	9303      	str	r3, [sp, #12]
 8011172:	429a      	cmp	r2, r3
 8011174:	d80c      	bhi.n	8011190 <__multiply+0x9c>
 8011176:	2e00      	cmp	r6, #0
 8011178:	dd03      	ble.n	8011182 <__multiply+0x8e>
 801117a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801117e:	2b00      	cmp	r3, #0
 8011180:	d05b      	beq.n	801123a <__multiply+0x146>
 8011182:	6106      	str	r6, [r0, #16]
 8011184:	b005      	add	sp, #20
 8011186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118a:	f843 2b04 	str.w	r2, [r3], #4
 801118e:	e7d8      	b.n	8011142 <__multiply+0x4e>
 8011190:	f8b3 a000 	ldrh.w	sl, [r3]
 8011194:	f1ba 0f00 	cmp.w	sl, #0
 8011198:	d024      	beq.n	80111e4 <__multiply+0xf0>
 801119a:	f104 0e14 	add.w	lr, r4, #20
 801119e:	46a9      	mov	r9, r5
 80111a0:	f04f 0c00 	mov.w	ip, #0
 80111a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80111a8:	f8d9 1000 	ldr.w	r1, [r9]
 80111ac:	fa1f fb82 	uxth.w	fp, r2
 80111b0:	4577      	cmp	r7, lr
 80111b2:	b289      	uxth	r1, r1
 80111b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80111b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80111bc:	f8d9 2000 	ldr.w	r2, [r9]
 80111c0:	4461      	add	r1, ip
 80111c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80111ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80111ce:	b289      	uxth	r1, r1
 80111d0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80111d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80111d8:	f849 1b04 	str.w	r1, [r9], #4
 80111dc:	d8e2      	bhi.n	80111a4 <__multiply+0xb0>
 80111de:	9a01      	ldr	r2, [sp, #4]
 80111e0:	f845 c002 	str.w	ip, [r5, r2]
 80111e4:	9a03      	ldr	r2, [sp, #12]
 80111e6:	3304      	adds	r3, #4
 80111e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80111ec:	f1b9 0f00 	cmp.w	r9, #0
 80111f0:	d021      	beq.n	8011236 <__multiply+0x142>
 80111f2:	6829      	ldr	r1, [r5, #0]
 80111f4:	f104 0c14 	add.w	ip, r4, #20
 80111f8:	46ae      	mov	lr, r5
 80111fa:	f04f 0a00 	mov.w	sl, #0
 80111fe:	f8bc b000 	ldrh.w	fp, [ip]
 8011202:	b289      	uxth	r1, r1
 8011204:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011208:	fb09 220b 	mla	r2, r9, fp, r2
 801120c:	4452      	add	r2, sl
 801120e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011212:	f84e 1b04 	str.w	r1, [lr], #4
 8011216:	f85c 1b04 	ldr.w	r1, [ip], #4
 801121a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801121e:	f8be 1000 	ldrh.w	r1, [lr]
 8011222:	4567      	cmp	r7, ip
 8011224:	fb09 110a 	mla	r1, r9, sl, r1
 8011228:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801122c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011230:	d8e5      	bhi.n	80111fe <__multiply+0x10a>
 8011232:	9a01      	ldr	r2, [sp, #4]
 8011234:	50a9      	str	r1, [r5, r2]
 8011236:	3504      	adds	r5, #4
 8011238:	e799      	b.n	801116e <__multiply+0x7a>
 801123a:	3e01      	subs	r6, #1
 801123c:	e79b      	b.n	8011176 <__multiply+0x82>
 801123e:	bf00      	nop
 8011240:	08011f80 	.word	0x08011f80
 8011244:	08011fe9 	.word	0x08011fe9

08011248 <__pow5mult>:
 8011248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801124c:	4615      	mov	r5, r2
 801124e:	f012 0203 	ands.w	r2, r2, #3
 8011252:	4606      	mov	r6, r0
 8011254:	460f      	mov	r7, r1
 8011256:	d007      	beq.n	8011268 <__pow5mult+0x20>
 8011258:	3a01      	subs	r2, #1
 801125a:	4c1a      	ldr	r4, [pc, #104]	; (80112c4 <__pow5mult+0x7c>)
 801125c:	2300      	movs	r3, #0
 801125e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011262:	f7ff fe9b 	bl	8010f9c <__multadd>
 8011266:	4607      	mov	r7, r0
 8011268:	10ad      	asrs	r5, r5, #2
 801126a:	d027      	beq.n	80112bc <__pow5mult+0x74>
 801126c:	6c34      	ldr	r4, [r6, #64]	; 0x40
 801126e:	b944      	cbnz	r4, 8011282 <__pow5mult+0x3a>
 8011270:	f240 2171 	movw	r1, #625	; 0x271
 8011274:	4630      	mov	r0, r6
 8011276:	f7ff ff27 	bl	80110c8 <__i2b>
 801127a:	2300      	movs	r3, #0
 801127c:	4604      	mov	r4, r0
 801127e:	6430      	str	r0, [r6, #64]	; 0x40
 8011280:	6003      	str	r3, [r0, #0]
 8011282:	f04f 0900 	mov.w	r9, #0
 8011286:	07eb      	lsls	r3, r5, #31
 8011288:	d50a      	bpl.n	80112a0 <__pow5mult+0x58>
 801128a:	4639      	mov	r1, r7
 801128c:	4622      	mov	r2, r4
 801128e:	4630      	mov	r0, r6
 8011290:	f7ff ff30 	bl	80110f4 <__multiply>
 8011294:	4680      	mov	r8, r0
 8011296:	4639      	mov	r1, r7
 8011298:	4630      	mov	r0, r6
 801129a:	4647      	mov	r7, r8
 801129c:	f7ff fe75 	bl	8010f8a <_Bfree>
 80112a0:	106d      	asrs	r5, r5, #1
 80112a2:	d00b      	beq.n	80112bc <__pow5mult+0x74>
 80112a4:	6820      	ldr	r0, [r4, #0]
 80112a6:	b938      	cbnz	r0, 80112b8 <__pow5mult+0x70>
 80112a8:	4622      	mov	r2, r4
 80112aa:	4621      	mov	r1, r4
 80112ac:	4630      	mov	r0, r6
 80112ae:	f7ff ff21 	bl	80110f4 <__multiply>
 80112b2:	6020      	str	r0, [r4, #0]
 80112b4:	f8c0 9000 	str.w	r9, [r0]
 80112b8:	4604      	mov	r4, r0
 80112ba:	e7e4      	b.n	8011286 <__pow5mult+0x3e>
 80112bc:	4638      	mov	r0, r7
 80112be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112c2:	bf00      	nop
 80112c4:	08012138 	.word	0x08012138

080112c8 <__lshift>:
 80112c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112cc:	460c      	mov	r4, r1
 80112ce:	4607      	mov	r7, r0
 80112d0:	4691      	mov	r9, r2
 80112d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112d6:	6923      	ldr	r3, [r4, #16]
 80112d8:	6849      	ldr	r1, [r1, #4]
 80112da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80112de:	68a3      	ldr	r3, [r4, #8]
 80112e0:	f108 0601 	add.w	r6, r8, #1
 80112e4:	42b3      	cmp	r3, r6
 80112e6:	db0b      	blt.n	8011300 <__lshift+0x38>
 80112e8:	4638      	mov	r0, r7
 80112ea:	f7ff fe29 	bl	8010f40 <_Balloc>
 80112ee:	4605      	mov	r5, r0
 80112f0:	b948      	cbnz	r0, 8011306 <__lshift+0x3e>
 80112f2:	4602      	mov	r2, r0
 80112f4:	4b28      	ldr	r3, [pc, #160]	; (8011398 <__lshift+0xd0>)
 80112f6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80112fa:	4828      	ldr	r0, [pc, #160]	; (801139c <__lshift+0xd4>)
 80112fc:	f000 fbb0 	bl	8011a60 <__assert_func>
 8011300:	3101      	adds	r1, #1
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	e7ee      	b.n	80112e4 <__lshift+0x1c>
 8011306:	2300      	movs	r3, #0
 8011308:	f100 0114 	add.w	r1, r0, #20
 801130c:	f100 0210 	add.w	r2, r0, #16
 8011310:	4618      	mov	r0, r3
 8011312:	4553      	cmp	r3, sl
 8011314:	db33      	blt.n	801137e <__lshift+0xb6>
 8011316:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801131a:	f104 0314 	add.w	r3, r4, #20
 801131e:	6920      	ldr	r0, [r4, #16]
 8011320:	f019 091f 	ands.w	r9, r9, #31
 8011324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801132c:	d02b      	beq.n	8011386 <__lshift+0xbe>
 801132e:	f1c9 0e20 	rsb	lr, r9, #32
 8011332:	468a      	mov	sl, r1
 8011334:	2200      	movs	r2, #0
 8011336:	6818      	ldr	r0, [r3, #0]
 8011338:	fa00 f009 	lsl.w	r0, r0, r9
 801133c:	4310      	orrs	r0, r2
 801133e:	f84a 0b04 	str.w	r0, [sl], #4
 8011342:	f853 2b04 	ldr.w	r2, [r3], #4
 8011346:	459c      	cmp	ip, r3
 8011348:	fa22 f20e 	lsr.w	r2, r2, lr
 801134c:	d8f3      	bhi.n	8011336 <__lshift+0x6e>
 801134e:	ebac 0304 	sub.w	r3, ip, r4
 8011352:	f104 0015 	add.w	r0, r4, #21
 8011356:	3b15      	subs	r3, #21
 8011358:	f023 0303 	bic.w	r3, r3, #3
 801135c:	3304      	adds	r3, #4
 801135e:	4584      	cmp	ip, r0
 8011360:	bf38      	it	cc
 8011362:	2304      	movcc	r3, #4
 8011364:	50ca      	str	r2, [r1, r3]
 8011366:	b10a      	cbz	r2, 801136c <__lshift+0xa4>
 8011368:	f108 0602 	add.w	r6, r8, #2
 801136c:	3e01      	subs	r6, #1
 801136e:	4638      	mov	r0, r7
 8011370:	4621      	mov	r1, r4
 8011372:	612e      	str	r6, [r5, #16]
 8011374:	f7ff fe09 	bl	8010f8a <_Bfree>
 8011378:	4628      	mov	r0, r5
 801137a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137e:	3301      	adds	r3, #1
 8011380:	f842 0f04 	str.w	r0, [r2, #4]!
 8011384:	e7c5      	b.n	8011312 <__lshift+0x4a>
 8011386:	3904      	subs	r1, #4
 8011388:	f853 2b04 	ldr.w	r2, [r3], #4
 801138c:	459c      	cmp	ip, r3
 801138e:	f841 2f04 	str.w	r2, [r1, #4]!
 8011392:	d8f9      	bhi.n	8011388 <__lshift+0xc0>
 8011394:	e7ea      	b.n	801136c <__lshift+0xa4>
 8011396:	bf00      	nop
 8011398:	08011f80 	.word	0x08011f80
 801139c:	08011fe9 	.word	0x08011fe9

080113a0 <__mcmp>:
 80113a0:	6902      	ldr	r2, [r0, #16]
 80113a2:	b530      	push	{r4, r5, lr}
 80113a4:	690c      	ldr	r4, [r1, #16]
 80113a6:	1b12      	subs	r2, r2, r4
 80113a8:	d10e      	bne.n	80113c8 <__mcmp+0x28>
 80113aa:	f100 0314 	add.w	r3, r0, #20
 80113ae:	3114      	adds	r1, #20
 80113b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80113b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80113b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80113bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80113c0:	42a5      	cmp	r5, r4
 80113c2:	d003      	beq.n	80113cc <__mcmp+0x2c>
 80113c4:	d305      	bcc.n	80113d2 <__mcmp+0x32>
 80113c6:	2201      	movs	r2, #1
 80113c8:	4610      	mov	r0, r2
 80113ca:	bd30      	pop	{r4, r5, pc}
 80113cc:	4283      	cmp	r3, r0
 80113ce:	d3f3      	bcc.n	80113b8 <__mcmp+0x18>
 80113d0:	e7fa      	b.n	80113c8 <__mcmp+0x28>
 80113d2:	f04f 32ff 	mov.w	r2, #4294967295
 80113d6:	e7f7      	b.n	80113c8 <__mcmp+0x28>

080113d8 <__mdiff>:
 80113d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	460c      	mov	r4, r1
 80113de:	4606      	mov	r6, r0
 80113e0:	4611      	mov	r1, r2
 80113e2:	4692      	mov	sl, r2
 80113e4:	4620      	mov	r0, r4
 80113e6:	f7ff ffdb 	bl	80113a0 <__mcmp>
 80113ea:	1e05      	subs	r5, r0, #0
 80113ec:	d110      	bne.n	8011410 <__mdiff+0x38>
 80113ee:	4629      	mov	r1, r5
 80113f0:	4630      	mov	r0, r6
 80113f2:	f7ff fda5 	bl	8010f40 <_Balloc>
 80113f6:	b930      	cbnz	r0, 8011406 <__mdiff+0x2e>
 80113f8:	4b3d      	ldr	r3, [pc, #244]	; (80114f0 <__mdiff+0x118>)
 80113fa:	4602      	mov	r2, r0
 80113fc:	f240 2137 	movw	r1, #567	; 0x237
 8011400:	483c      	ldr	r0, [pc, #240]	; (80114f4 <__mdiff+0x11c>)
 8011402:	f000 fb2d 	bl	8011a60 <__assert_func>
 8011406:	2301      	movs	r3, #1
 8011408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801140c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011410:	bfa4      	itt	ge
 8011412:	4653      	movge	r3, sl
 8011414:	46a2      	movge	sl, r4
 8011416:	4630      	mov	r0, r6
 8011418:	bfa8      	it	ge
 801141a:	2500      	movge	r5, #0
 801141c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8011420:	bfac      	ite	ge
 8011422:	461c      	movge	r4, r3
 8011424:	2501      	movlt	r5, #1
 8011426:	f7ff fd8b 	bl	8010f40 <_Balloc>
 801142a:	b920      	cbnz	r0, 8011436 <__mdiff+0x5e>
 801142c:	4b30      	ldr	r3, [pc, #192]	; (80114f0 <__mdiff+0x118>)
 801142e:	4602      	mov	r2, r0
 8011430:	f240 2145 	movw	r1, #581	; 0x245
 8011434:	e7e4      	b.n	8011400 <__mdiff+0x28>
 8011436:	f8da 7010 	ldr.w	r7, [sl, #16]
 801143a:	f104 0914 	add.w	r9, r4, #20
 801143e:	6926      	ldr	r6, [r4, #16]
 8011440:	f100 0814 	add.w	r8, r0, #20
 8011444:	60c5      	str	r5, [r0, #12]
 8011446:	f10a 0514 	add.w	r5, sl, #20
 801144a:	f10a 0210 	add.w	r2, sl, #16
 801144e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011452:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8011456:	46c2      	mov	sl, r8
 8011458:	f04f 0c00 	mov.w	ip, #0
 801145c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011460:	f859 3b04 	ldr.w	r3, [r9], #4
 8011464:	fa1f f18b 	uxth.w	r1, fp
 8011468:	454e      	cmp	r6, r9
 801146a:	4461      	add	r1, ip
 801146c:	fa1f fc83 	uxth.w	ip, r3
 8011470:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8011474:	eba1 010c 	sub.w	r1, r1, ip
 8011478:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801147c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011480:	b289      	uxth	r1, r1
 8011482:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8011486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801148a:	f84a 1b04 	str.w	r1, [sl], #4
 801148e:	d8e5      	bhi.n	801145c <__mdiff+0x84>
 8011490:	1b33      	subs	r3, r6, r4
 8011492:	3415      	adds	r4, #21
 8011494:	3b15      	subs	r3, #21
 8011496:	f023 0303 	bic.w	r3, r3, #3
 801149a:	3304      	adds	r3, #4
 801149c:	42a6      	cmp	r6, r4
 801149e:	bf38      	it	cc
 80114a0:	2304      	movcc	r3, #4
 80114a2:	441d      	add	r5, r3
 80114a4:	4443      	add	r3, r8
 80114a6:	462c      	mov	r4, r5
 80114a8:	461e      	mov	r6, r3
 80114aa:	4574      	cmp	r4, lr
 80114ac:	d30e      	bcc.n	80114cc <__mdiff+0xf4>
 80114ae:	f10e 0203 	add.w	r2, lr, #3
 80114b2:	1b52      	subs	r2, r2, r5
 80114b4:	3d03      	subs	r5, #3
 80114b6:	f022 0203 	bic.w	r2, r2, #3
 80114ba:	45ae      	cmp	lr, r5
 80114bc:	bf38      	it	cc
 80114be:	2200      	movcc	r2, #0
 80114c0:	4413      	add	r3, r2
 80114c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80114c6:	b18a      	cbz	r2, 80114ec <__mdiff+0x114>
 80114c8:	6107      	str	r7, [r0, #16]
 80114ca:	e79f      	b.n	801140c <__mdiff+0x34>
 80114cc:	f854 8b04 	ldr.w	r8, [r4], #4
 80114d0:	fa1f f288 	uxth.w	r2, r8
 80114d4:	4462      	add	r2, ip
 80114d6:	1411      	asrs	r1, r2, #16
 80114d8:	b292      	uxth	r2, r2
 80114da:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 80114de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80114e2:	ea4f 4c21 	mov.w	ip, r1, asr #16
 80114e6:	f846 2b04 	str.w	r2, [r6], #4
 80114ea:	e7de      	b.n	80114aa <__mdiff+0xd2>
 80114ec:	3f01      	subs	r7, #1
 80114ee:	e7e8      	b.n	80114c2 <__mdiff+0xea>
 80114f0:	08011f80 	.word	0x08011f80
 80114f4:	08011fe9 	.word	0x08011fe9

080114f8 <__d2b>:
 80114f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114fc:	460f      	mov	r7, r1
 80114fe:	2101      	movs	r1, #1
 8011500:	4616      	mov	r6, r2
 8011502:	ec59 8b10 	vmov	r8, r9, d0
 8011506:	f7ff fd1b 	bl	8010f40 <_Balloc>
 801150a:	4604      	mov	r4, r0
 801150c:	b930      	cbnz	r0, 801151c <__d2b+0x24>
 801150e:	4602      	mov	r2, r0
 8011510:	4b24      	ldr	r3, [pc, #144]	; (80115a4 <__d2b+0xac>)
 8011512:	f240 310f 	movw	r1, #783	; 0x30f
 8011516:	4824      	ldr	r0, [pc, #144]	; (80115a8 <__d2b+0xb0>)
 8011518:	f000 faa2 	bl	8011a60 <__assert_func>
 801151c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011524:	bb2d      	cbnz	r5, 8011572 <__d2b+0x7a>
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	f1b8 0300 	subs.w	r3, r8, #0
 801152c:	d026      	beq.n	801157c <__d2b+0x84>
 801152e:	4668      	mov	r0, sp
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	f7ff fd9b 	bl	801106c <__lo0bits>
 8011536:	e9dd 1200 	ldrd	r1, r2, [sp]
 801153a:	b1e8      	cbz	r0, 8011578 <__d2b+0x80>
 801153c:	f1c0 0320 	rsb	r3, r0, #32
 8011540:	fa02 f303 	lsl.w	r3, r2, r3
 8011544:	40c2      	lsrs	r2, r0
 8011546:	430b      	orrs	r3, r1
 8011548:	9201      	str	r2, [sp, #4]
 801154a:	6163      	str	r3, [r4, #20]
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	61a3      	str	r3, [r4, #24]
 8011552:	bf14      	ite	ne
 8011554:	2202      	movne	r2, #2
 8011556:	2201      	moveq	r2, #1
 8011558:	6122      	str	r2, [r4, #16]
 801155a:	b1bd      	cbz	r5, 801158c <__d2b+0x94>
 801155c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011560:	4405      	add	r5, r0
 8011562:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011566:	603d      	str	r5, [r7, #0]
 8011568:	6030      	str	r0, [r6, #0]
 801156a:	4620      	mov	r0, r4
 801156c:	b003      	add	sp, #12
 801156e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011576:	e7d6      	b.n	8011526 <__d2b+0x2e>
 8011578:	6161      	str	r1, [r4, #20]
 801157a:	e7e7      	b.n	801154c <__d2b+0x54>
 801157c:	a801      	add	r0, sp, #4
 801157e:	f7ff fd75 	bl	801106c <__lo0bits>
 8011582:	9b01      	ldr	r3, [sp, #4]
 8011584:	3020      	adds	r0, #32
 8011586:	2201      	movs	r2, #1
 8011588:	6163      	str	r3, [r4, #20]
 801158a:	e7e5      	b.n	8011558 <__d2b+0x60>
 801158c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011590:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011594:	6038      	str	r0, [r7, #0]
 8011596:	6918      	ldr	r0, [r3, #16]
 8011598:	f7ff fd48 	bl	801102c <__hi0bits>
 801159c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80115a0:	e7e2      	b.n	8011568 <__d2b+0x70>
 80115a2:	bf00      	nop
 80115a4:	08011f80 	.word	0x08011f80
 80115a8:	08011fe9 	.word	0x08011fe9

080115ac <_realloc_r>:
 80115ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b0:	4682      	mov	sl, r0
 80115b2:	460c      	mov	r4, r1
 80115b4:	b929      	cbnz	r1, 80115c2 <_realloc_r+0x16>
 80115b6:	4611      	mov	r1, r2
 80115b8:	b003      	add	sp, #12
 80115ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115be:	f7fb bcd3 	b.w	800cf68 <_malloc_r>
 80115c2:	9201      	str	r2, [sp, #4]
 80115c4:	f7fb ff0a 	bl	800d3dc <__malloc_lock>
 80115c8:	9a01      	ldr	r2, [sp, #4]
 80115ca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80115ce:	f102 080b 	add.w	r8, r2, #11
 80115d2:	f1b8 0f16 	cmp.w	r8, #22
 80115d6:	d90b      	bls.n	80115f0 <_realloc_r+0x44>
 80115d8:	f038 0807 	bics.w	r8, r8, #7
 80115dc:	d50a      	bpl.n	80115f4 <_realloc_r+0x48>
 80115de:	230c      	movs	r3, #12
 80115e0:	f04f 0b00 	mov.w	fp, #0
 80115e4:	f8ca 3000 	str.w	r3, [sl]
 80115e8:	4658      	mov	r0, fp
 80115ea:	b003      	add	sp, #12
 80115ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f0:	f04f 0810 	mov.w	r8, #16
 80115f4:	4590      	cmp	r8, r2
 80115f6:	d3f2      	bcc.n	80115de <_realloc_r+0x32>
 80115f8:	f025 0603 	bic.w	r6, r5, #3
 80115fc:	f1a4 0908 	sub.w	r9, r4, #8
 8011600:	45b0      	cmp	r8, r6
 8011602:	f340 8178 	ble.w	80118f6 <_realloc_r+0x34a>
 8011606:	499f      	ldr	r1, [pc, #636]	; (8011884 <_realloc_r+0x2d8>)
 8011608:	eb09 0306 	add.w	r3, r9, r6
 801160c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8011610:	6859      	ldr	r1, [r3, #4]
 8011612:	459c      	cmp	ip, r3
 8011614:	d005      	beq.n	8011622 <_realloc_r+0x76>
 8011616:	f021 0001 	bic.w	r0, r1, #1
 801161a:	4418      	add	r0, r3
 801161c:	6840      	ldr	r0, [r0, #4]
 801161e:	07c7      	lsls	r7, r0, #31
 8011620:	d448      	bmi.n	80116b4 <_realloc_r+0x108>
 8011622:	f021 0103 	bic.w	r1, r1, #3
 8011626:	459c      	cmp	ip, r3
 8011628:	eb06 0701 	add.w	r7, r6, r1
 801162c:	d119      	bne.n	8011662 <_realloc_r+0xb6>
 801162e:	f108 0010 	add.w	r0, r8, #16
 8011632:	42b8      	cmp	r0, r7
 8011634:	dc40      	bgt.n	80116b8 <_realloc_r+0x10c>
 8011636:	eba7 0708 	sub.w	r7, r7, r8
 801163a:	eb09 0308 	add.w	r3, r9, r8
 801163e:	4a91      	ldr	r2, [pc, #580]	; (8011884 <_realloc_r+0x2d8>)
 8011640:	4650      	mov	r0, sl
 8011642:	f047 0701 	orr.w	r7, r7, #1
 8011646:	46a3      	mov	fp, r4
 8011648:	6093      	str	r3, [r2, #8]
 801164a:	605f      	str	r7, [r3, #4]
 801164c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011650:	f003 0301 	and.w	r3, r3, #1
 8011654:	ea43 0308 	orr.w	r3, r3, r8
 8011658:	f844 3c04 	str.w	r3, [r4, #-4]
 801165c:	f7fb fec4 	bl	800d3e8 <__malloc_unlock>
 8011660:	e7c2      	b.n	80115e8 <_realloc_r+0x3c>
 8011662:	45b8      	cmp	r8, r7
 8011664:	dc28      	bgt.n	80116b8 <_realloc_r+0x10c>
 8011666:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801166a:	60da      	str	r2, [r3, #12]
 801166c:	6093      	str	r3, [r2, #8]
 801166e:	eba7 0008 	sub.w	r0, r7, r8
 8011672:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011676:	eb09 0207 	add.w	r2, r9, r7
 801167a:	280f      	cmp	r0, #15
 801167c:	f003 0301 	and.w	r3, r3, #1
 8011680:	f240 813b 	bls.w	80118fa <_realloc_r+0x34e>
 8011684:	eb09 0108 	add.w	r1, r9, r8
 8011688:	ea48 0303 	orr.w	r3, r8, r3
 801168c:	f040 0001 	orr.w	r0, r0, #1
 8011690:	f8c9 3004 	str.w	r3, [r9, #4]
 8011694:	3108      	adds	r1, #8
 8011696:	f841 0c04 	str.w	r0, [r1, #-4]
 801169a:	4650      	mov	r0, sl
 801169c:	6853      	ldr	r3, [r2, #4]
 801169e:	f043 0301 	orr.w	r3, r3, #1
 80116a2:	6053      	str	r3, [r2, #4]
 80116a4:	f7fc f936 	bl	800d914 <_free_r>
 80116a8:	4650      	mov	r0, sl
 80116aa:	f109 0b08 	add.w	fp, r9, #8
 80116ae:	f7fb fe9b 	bl	800d3e8 <__malloc_unlock>
 80116b2:	e799      	b.n	80115e8 <_realloc_r+0x3c>
 80116b4:	2100      	movs	r1, #0
 80116b6:	460b      	mov	r3, r1
 80116b8:	07e8      	lsls	r0, r5, #31
 80116ba:	f100 80cc 	bmi.w	8011856 <_realloc_r+0x2aa>
 80116be:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80116c2:	eba9 0505 	sub.w	r5, r9, r5
 80116c6:	6868      	ldr	r0, [r5, #4]
 80116c8:	f020 0003 	bic.w	r0, r0, #3
 80116cc:	eb00 0b06 	add.w	fp, r0, r6
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f000 808a 	beq.w	80117ea <_realloc_r+0x23e>
 80116d6:	459c      	cmp	ip, r3
 80116d8:	eb01 070b 	add.w	r7, r1, fp
 80116dc:	d14b      	bne.n	8011776 <_realloc_r+0x1ca>
 80116de:	f108 0310 	add.w	r3, r8, #16
 80116e2:	42bb      	cmp	r3, r7
 80116e4:	f300 8081 	bgt.w	80117ea <_realloc_r+0x23e>
 80116e8:	46ab      	mov	fp, r5
 80116ea:	68eb      	ldr	r3, [r5, #12]
 80116ec:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80116f0:	60d3      	str	r3, [r2, #12]
 80116f2:	609a      	str	r2, [r3, #8]
 80116f4:	1f32      	subs	r2, r6, #4
 80116f6:	2a24      	cmp	r2, #36	; 0x24
 80116f8:	d838      	bhi.n	801176c <_realloc_r+0x1c0>
 80116fa:	2a13      	cmp	r2, #19
 80116fc:	d934      	bls.n	8011768 <_realloc_r+0x1bc>
 80116fe:	6823      	ldr	r3, [r4, #0]
 8011700:	2a1b      	cmp	r2, #27
 8011702:	60ab      	str	r3, [r5, #8]
 8011704:	6863      	ldr	r3, [r4, #4]
 8011706:	60eb      	str	r3, [r5, #12]
 8011708:	d81b      	bhi.n	8011742 <_realloc_r+0x196>
 801170a:	3408      	adds	r4, #8
 801170c:	f105 0310 	add.w	r3, r5, #16
 8011710:	6822      	ldr	r2, [r4, #0]
 8011712:	601a      	str	r2, [r3, #0]
 8011714:	6862      	ldr	r2, [r4, #4]
 8011716:	605a      	str	r2, [r3, #4]
 8011718:	68a2      	ldr	r2, [r4, #8]
 801171a:	609a      	str	r2, [r3, #8]
 801171c:	eba7 0708 	sub.w	r7, r7, r8
 8011720:	eb05 0308 	add.w	r3, r5, r8
 8011724:	4a57      	ldr	r2, [pc, #348]	; (8011884 <_realloc_r+0x2d8>)
 8011726:	f047 0701 	orr.w	r7, r7, #1
 801172a:	6093      	str	r3, [r2, #8]
 801172c:	605f      	str	r7, [r3, #4]
 801172e:	686b      	ldr	r3, [r5, #4]
 8011730:	f003 0301 	and.w	r3, r3, #1
 8011734:	ea43 0308 	orr.w	r3, r3, r8
 8011738:	606b      	str	r3, [r5, #4]
 801173a:	4650      	mov	r0, sl
 801173c:	f7fb fe54 	bl	800d3e8 <__malloc_unlock>
 8011740:	e752      	b.n	80115e8 <_realloc_r+0x3c>
 8011742:	68a3      	ldr	r3, [r4, #8]
 8011744:	2a24      	cmp	r2, #36	; 0x24
 8011746:	612b      	str	r3, [r5, #16]
 8011748:	68e3      	ldr	r3, [r4, #12]
 801174a:	bf18      	it	ne
 801174c:	3410      	addne	r4, #16
 801174e:	616b      	str	r3, [r5, #20]
 8011750:	bf11      	iteee	ne
 8011752:	f105 0318 	addne.w	r3, r5, #24
 8011756:	6923      	ldreq	r3, [r4, #16]
 8011758:	61ab      	streq	r3, [r5, #24]
 801175a:	f105 0320 	addeq.w	r3, r5, #32
 801175e:	bf02      	ittt	eq
 8011760:	6962      	ldreq	r2, [r4, #20]
 8011762:	3418      	addeq	r4, #24
 8011764:	61ea      	streq	r2, [r5, #28]
 8011766:	e7d3      	b.n	8011710 <_realloc_r+0x164>
 8011768:	465b      	mov	r3, fp
 801176a:	e7d1      	b.n	8011710 <_realloc_r+0x164>
 801176c:	4621      	mov	r1, r4
 801176e:	4658      	mov	r0, fp
 8011770:	f7fe fc9b 	bl	80100aa <memmove>
 8011774:	e7d2      	b.n	801171c <_realloc_r+0x170>
 8011776:	45b8      	cmp	r8, r7
 8011778:	dc37      	bgt.n	80117ea <_realloc_r+0x23e>
 801177a:	4628      	mov	r0, r5
 801177c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8011780:	60da      	str	r2, [r3, #12]
 8011782:	6093      	str	r3, [r2, #8]
 8011784:	68eb      	ldr	r3, [r5, #12]
 8011786:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801178a:	60d3      	str	r3, [r2, #12]
 801178c:	609a      	str	r2, [r3, #8]
 801178e:	1f32      	subs	r2, r6, #4
 8011790:	2a24      	cmp	r2, #36	; 0x24
 8011792:	d826      	bhi.n	80117e2 <_realloc_r+0x236>
 8011794:	2a13      	cmp	r2, #19
 8011796:	d908      	bls.n	80117aa <_realloc_r+0x1fe>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	2a1b      	cmp	r2, #27
 801179c:	60ab      	str	r3, [r5, #8]
 801179e:	6863      	ldr	r3, [r4, #4]
 80117a0:	60eb      	str	r3, [r5, #12]
 80117a2:	d80a      	bhi.n	80117ba <_realloc_r+0x20e>
 80117a4:	3408      	adds	r4, #8
 80117a6:	f105 0010 	add.w	r0, r5, #16
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	6003      	str	r3, [r0, #0]
 80117ae:	6863      	ldr	r3, [r4, #4]
 80117b0:	6043      	str	r3, [r0, #4]
 80117b2:	68a3      	ldr	r3, [r4, #8]
 80117b4:	6083      	str	r3, [r0, #8]
 80117b6:	46a9      	mov	r9, r5
 80117b8:	e759      	b.n	801166e <_realloc_r+0xc2>
 80117ba:	68a3      	ldr	r3, [r4, #8]
 80117bc:	2a24      	cmp	r2, #36	; 0x24
 80117be:	612b      	str	r3, [r5, #16]
 80117c0:	bf18      	it	ne
 80117c2:	f105 0018 	addne.w	r0, r5, #24
 80117c6:	68e3      	ldr	r3, [r4, #12]
 80117c8:	bf0c      	ite	eq
 80117ca:	f105 0020 	addeq.w	r0, r5, #32
 80117ce:	3410      	addne	r4, #16
 80117d0:	616b      	str	r3, [r5, #20]
 80117d2:	bf01      	itttt	eq
 80117d4:	6923      	ldreq	r3, [r4, #16]
 80117d6:	61ab      	streq	r3, [r5, #24]
 80117d8:	6963      	ldreq	r3, [r4, #20]
 80117da:	3418      	addeq	r4, #24
 80117dc:	bf08      	it	eq
 80117de:	61eb      	streq	r3, [r5, #28]
 80117e0:	e7e3      	b.n	80117aa <_realloc_r+0x1fe>
 80117e2:	4621      	mov	r1, r4
 80117e4:	f7fe fc61 	bl	80100aa <memmove>
 80117e8:	e7e5      	b.n	80117b6 <_realloc_r+0x20a>
 80117ea:	45d8      	cmp	r8, fp
 80117ec:	dc33      	bgt.n	8011856 <_realloc_r+0x2aa>
 80117ee:	4628      	mov	r0, r5
 80117f0:	68eb      	ldr	r3, [r5, #12]
 80117f2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80117f6:	60d3      	str	r3, [r2, #12]
 80117f8:	609a      	str	r2, [r3, #8]
 80117fa:	1f32      	subs	r2, r6, #4
 80117fc:	2a24      	cmp	r2, #36	; 0x24
 80117fe:	d826      	bhi.n	801184e <_realloc_r+0x2a2>
 8011800:	2a13      	cmp	r2, #19
 8011802:	d908      	bls.n	8011816 <_realloc_r+0x26a>
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	2a1b      	cmp	r2, #27
 8011808:	60ab      	str	r3, [r5, #8]
 801180a:	6863      	ldr	r3, [r4, #4]
 801180c:	60eb      	str	r3, [r5, #12]
 801180e:	d80a      	bhi.n	8011826 <_realloc_r+0x27a>
 8011810:	3408      	adds	r4, #8
 8011812:	f105 0010 	add.w	r0, r5, #16
 8011816:	6823      	ldr	r3, [r4, #0]
 8011818:	6003      	str	r3, [r0, #0]
 801181a:	6863      	ldr	r3, [r4, #4]
 801181c:	6043      	str	r3, [r0, #4]
 801181e:	68a3      	ldr	r3, [r4, #8]
 8011820:	6083      	str	r3, [r0, #8]
 8011822:	465f      	mov	r7, fp
 8011824:	e7c7      	b.n	80117b6 <_realloc_r+0x20a>
 8011826:	68a3      	ldr	r3, [r4, #8]
 8011828:	2a24      	cmp	r2, #36	; 0x24
 801182a:	612b      	str	r3, [r5, #16]
 801182c:	bf18      	it	ne
 801182e:	f105 0018 	addne.w	r0, r5, #24
 8011832:	68e3      	ldr	r3, [r4, #12]
 8011834:	bf0c      	ite	eq
 8011836:	f105 0020 	addeq.w	r0, r5, #32
 801183a:	3410      	addne	r4, #16
 801183c:	616b      	str	r3, [r5, #20]
 801183e:	bf01      	itttt	eq
 8011840:	6923      	ldreq	r3, [r4, #16]
 8011842:	61ab      	streq	r3, [r5, #24]
 8011844:	6963      	ldreq	r3, [r4, #20]
 8011846:	3418      	addeq	r4, #24
 8011848:	bf08      	it	eq
 801184a:	61eb      	streq	r3, [r5, #28]
 801184c:	e7e3      	b.n	8011816 <_realloc_r+0x26a>
 801184e:	4621      	mov	r1, r4
 8011850:	f7fe fc2b 	bl	80100aa <memmove>
 8011854:	e7e5      	b.n	8011822 <_realloc_r+0x276>
 8011856:	4611      	mov	r1, r2
 8011858:	4650      	mov	r0, sl
 801185a:	f7fb fb85 	bl	800cf68 <_malloc_r>
 801185e:	4683      	mov	fp, r0
 8011860:	2800      	cmp	r0, #0
 8011862:	f43f af6a 	beq.w	801173a <_realloc_r+0x18e>
 8011866:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801186a:	f1a0 0208 	sub.w	r2, r0, #8
 801186e:	f023 0301 	bic.w	r3, r3, #1
 8011872:	444b      	add	r3, r9
 8011874:	4293      	cmp	r3, r2
 8011876:	d107      	bne.n	8011888 <_realloc_r+0x2dc>
 8011878:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801187c:	f027 0703 	bic.w	r7, r7, #3
 8011880:	4437      	add	r7, r6
 8011882:	e6f4      	b.n	801166e <_realloc_r+0xc2>
 8011884:	20000018 	.word	0x20000018
 8011888:	1f32      	subs	r2, r6, #4
 801188a:	2a24      	cmp	r2, #36	; 0x24
 801188c:	d82f      	bhi.n	80118ee <_realloc_r+0x342>
 801188e:	2a13      	cmp	r2, #19
 8011890:	d92a      	bls.n	80118e8 <_realloc_r+0x33c>
 8011892:	6823      	ldr	r3, [r4, #0]
 8011894:	2a1b      	cmp	r2, #27
 8011896:	6003      	str	r3, [r0, #0]
 8011898:	6863      	ldr	r3, [r4, #4]
 801189a:	6043      	str	r3, [r0, #4]
 801189c:	d80e      	bhi.n	80118bc <_realloc_r+0x310>
 801189e:	f104 0208 	add.w	r2, r4, #8
 80118a2:	f100 0308 	add.w	r3, r0, #8
 80118a6:	6811      	ldr	r1, [r2, #0]
 80118a8:	6019      	str	r1, [r3, #0]
 80118aa:	6851      	ldr	r1, [r2, #4]
 80118ac:	6059      	str	r1, [r3, #4]
 80118ae:	6892      	ldr	r2, [r2, #8]
 80118b0:	609a      	str	r2, [r3, #8]
 80118b2:	4621      	mov	r1, r4
 80118b4:	4650      	mov	r0, sl
 80118b6:	f7fc f82d 	bl	800d914 <_free_r>
 80118ba:	e73e      	b.n	801173a <_realloc_r+0x18e>
 80118bc:	68a3      	ldr	r3, [r4, #8]
 80118be:	2a24      	cmp	r2, #36	; 0x24
 80118c0:	6083      	str	r3, [r0, #8]
 80118c2:	bf18      	it	ne
 80118c4:	f104 0210 	addne.w	r2, r4, #16
 80118c8:	68e3      	ldr	r3, [r4, #12]
 80118ca:	bf08      	it	eq
 80118cc:	f104 0218 	addeq.w	r2, r4, #24
 80118d0:	60c3      	str	r3, [r0, #12]
 80118d2:	bf11      	iteee	ne
 80118d4:	f100 0310 	addne.w	r3, r0, #16
 80118d8:	6923      	ldreq	r3, [r4, #16]
 80118da:	6103      	streq	r3, [r0, #16]
 80118dc:	f100 0318 	addeq.w	r3, r0, #24
 80118e0:	bf04      	itt	eq
 80118e2:	6961      	ldreq	r1, [r4, #20]
 80118e4:	6141      	streq	r1, [r0, #20]
 80118e6:	e7de      	b.n	80118a6 <_realloc_r+0x2fa>
 80118e8:	4603      	mov	r3, r0
 80118ea:	4622      	mov	r2, r4
 80118ec:	e7db      	b.n	80118a6 <_realloc_r+0x2fa>
 80118ee:	4621      	mov	r1, r4
 80118f0:	f7fe fbdb 	bl	80100aa <memmove>
 80118f4:	e7dd      	b.n	80118b2 <_realloc_r+0x306>
 80118f6:	4637      	mov	r7, r6
 80118f8:	e6b9      	b.n	801166e <_realloc_r+0xc2>
 80118fa:	431f      	orrs	r7, r3
 80118fc:	f8c9 7004 	str.w	r7, [r9, #4]
 8011900:	6853      	ldr	r3, [r2, #4]
 8011902:	f043 0301 	orr.w	r3, r3, #1
 8011906:	6053      	str	r3, [r2, #4]
 8011908:	e6ce      	b.n	80116a8 <_realloc_r+0xfc>
 801190a:	bf00      	nop

0801190c <__ascii_wctomb>:
 801190c:	b149      	cbz	r1, 8011922 <__ascii_wctomb+0x16>
 801190e:	2aff      	cmp	r2, #255	; 0xff
 8011910:	bf8d      	iteet	hi
 8011912:	238a      	movhi	r3, #138	; 0x8a
 8011914:	2001      	movls	r0, #1
 8011916:	700a      	strbls	r2, [r1, #0]
 8011918:	6003      	strhi	r3, [r0, #0]
 801191a:	bf88      	it	hi
 801191c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011920:	4770      	bx	lr
 8011922:	4608      	mov	r0, r1
 8011924:	4770      	bx	lr
	...

08011928 <_wcrtomb_r>:
 8011928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801192a:	4c09      	ldr	r4, [pc, #36]	; (8011950 <_wcrtomb_r+0x28>)
 801192c:	b085      	sub	sp, #20
 801192e:	4605      	mov	r5, r0
 8011930:	461e      	mov	r6, r3
 8011932:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8011936:	b909      	cbnz	r1, 801193c <_wcrtomb_r+0x14>
 8011938:	460a      	mov	r2, r1
 801193a:	a901      	add	r1, sp, #4
 801193c:	47b8      	blx	r7
 801193e:	1c43      	adds	r3, r0, #1
 8011940:	bf01      	itttt	eq
 8011942:	2300      	moveq	r3, #0
 8011944:	6033      	streq	r3, [r6, #0]
 8011946:	238a      	moveq	r3, #138	; 0x8a
 8011948:	602b      	streq	r3, [r5, #0]
 801194a:	b005      	add	sp, #20
 801194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801194e:	bf00      	nop
 8011950:	20000560 	.word	0x20000560

08011954 <__swhatbuf_r>:
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	460c      	mov	r4, r1
 8011958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801195c:	b096      	sub	sp, #88	; 0x58
 801195e:	4615      	mov	r5, r2
 8011960:	2900      	cmp	r1, #0
 8011962:	461e      	mov	r6, r3
 8011964:	da07      	bge.n	8011976 <__swhatbuf_r+0x22>
 8011966:	89a1      	ldrh	r1, [r4, #12]
 8011968:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 801196c:	d017      	beq.n	801199e <__swhatbuf_r+0x4a>
 801196e:	2100      	movs	r1, #0
 8011970:	2340      	movs	r3, #64	; 0x40
 8011972:	4608      	mov	r0, r1
 8011974:	e00f      	b.n	8011996 <__swhatbuf_r+0x42>
 8011976:	466a      	mov	r2, sp
 8011978:	f000 f850 	bl	8011a1c <_fstat_r>
 801197c:	2800      	cmp	r0, #0
 801197e:	dbf2      	blt.n	8011966 <__swhatbuf_r+0x12>
 8011980:	9901      	ldr	r1, [sp, #4]
 8011982:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011986:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801198a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801198e:	4259      	negs	r1, r3
 8011990:	4159      	adcs	r1, r3
 8011992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011996:	6031      	str	r1, [r6, #0]
 8011998:	602b      	str	r3, [r5, #0]
 801199a:	b016      	add	sp, #88	; 0x58
 801199c:	bd70      	pop	{r4, r5, r6, pc}
 801199e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119a2:	e7e6      	b.n	8011972 <__swhatbuf_r+0x1e>

080119a4 <__smakebuf_r>:
 80119a4:	898b      	ldrh	r3, [r1, #12]
 80119a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119a8:	079d      	lsls	r5, r3, #30
 80119aa:	4606      	mov	r6, r0
 80119ac:	460c      	mov	r4, r1
 80119ae:	d507      	bpl.n	80119c0 <__smakebuf_r+0x1c>
 80119b0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80119b4:	6023      	str	r3, [r4, #0]
 80119b6:	6123      	str	r3, [r4, #16]
 80119b8:	2301      	movs	r3, #1
 80119ba:	6163      	str	r3, [r4, #20]
 80119bc:	b002      	add	sp, #8
 80119be:	bd70      	pop	{r4, r5, r6, pc}
 80119c0:	ab01      	add	r3, sp, #4
 80119c2:	466a      	mov	r2, sp
 80119c4:	f7ff ffc6 	bl	8011954 <__swhatbuf_r>
 80119c8:	9900      	ldr	r1, [sp, #0]
 80119ca:	4605      	mov	r5, r0
 80119cc:	4630      	mov	r0, r6
 80119ce:	f7fb facb 	bl	800cf68 <_malloc_r>
 80119d2:	b948      	cbnz	r0, 80119e8 <__smakebuf_r+0x44>
 80119d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119d8:	059a      	lsls	r2, r3, #22
 80119da:	d4ef      	bmi.n	80119bc <__smakebuf_r+0x18>
 80119dc:	f023 0303 	bic.w	r3, r3, #3
 80119e0:	f043 0302 	orr.w	r3, r3, #2
 80119e4:	81a3      	strh	r3, [r4, #12]
 80119e6:	e7e3      	b.n	80119b0 <__smakebuf_r+0xc>
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	6020      	str	r0, [r4, #0]
 80119ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119f0:	6120      	str	r0, [r4, #16]
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	9b00      	ldr	r3, [sp, #0]
 80119f6:	6163      	str	r3, [r4, #20]
 80119f8:	9b01      	ldr	r3, [sp, #4]
 80119fa:	b15b      	cbz	r3, 8011a14 <__smakebuf_r+0x70>
 80119fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a00:	4630      	mov	r0, r6
 8011a02:	f000 f81d 	bl	8011a40 <_isatty_r>
 8011a06:	b128      	cbz	r0, 8011a14 <__smakebuf_r+0x70>
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	f023 0303 	bic.w	r3, r3, #3
 8011a0e:	f043 0301 	orr.w	r3, r3, #1
 8011a12:	81a3      	strh	r3, [r4, #12]
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	431d      	orrs	r5, r3
 8011a18:	81a5      	strh	r5, [r4, #12]
 8011a1a:	e7cf      	b.n	80119bc <__smakebuf_r+0x18>

08011a1c <_fstat_r>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	2300      	movs	r3, #0
 8011a20:	4d06      	ldr	r5, [pc, #24]	; (8011a3c <_fstat_r+0x20>)
 8011a22:	4604      	mov	r4, r0
 8011a24:	4608      	mov	r0, r1
 8011a26:	4611      	mov	r1, r2
 8011a28:	602b      	str	r3, [r5, #0]
 8011a2a:	f7f0 fd36 	bl	800249a <_fstat>
 8011a2e:	1c43      	adds	r3, r0, #1
 8011a30:	d102      	bne.n	8011a38 <_fstat_r+0x1c>
 8011a32:	682b      	ldr	r3, [r5, #0]
 8011a34:	b103      	cbz	r3, 8011a38 <_fstat_r+0x1c>
 8011a36:	6023      	str	r3, [r4, #0]
 8011a38:	bd38      	pop	{r3, r4, r5, pc}
 8011a3a:	bf00      	nop
 8011a3c:	200818a4 	.word	0x200818a4

08011a40 <_isatty_r>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	2300      	movs	r3, #0
 8011a44:	4d05      	ldr	r5, [pc, #20]	; (8011a5c <_isatty_r+0x1c>)
 8011a46:	4604      	mov	r4, r0
 8011a48:	4608      	mov	r0, r1
 8011a4a:	602b      	str	r3, [r5, #0]
 8011a4c:	f7f0 fd35 	bl	80024ba <_isatty>
 8011a50:	1c43      	adds	r3, r0, #1
 8011a52:	d102      	bne.n	8011a5a <_isatty_r+0x1a>
 8011a54:	682b      	ldr	r3, [r5, #0]
 8011a56:	b103      	cbz	r3, 8011a5a <_isatty_r+0x1a>
 8011a58:	6023      	str	r3, [r4, #0]
 8011a5a:	bd38      	pop	{r3, r4, r5, pc}
 8011a5c:	200818a4 	.word	0x200818a4

08011a60 <__assert_func>:
 8011a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a62:	4614      	mov	r4, r2
 8011a64:	461a      	mov	r2, r3
 8011a66:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <__assert_func+0x2c>)
 8011a68:	4605      	mov	r5, r0
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68d8      	ldr	r0, [r3, #12]
 8011a6e:	b14c      	cbz	r4, 8011a84 <__assert_func+0x24>
 8011a70:	4b07      	ldr	r3, [pc, #28]	; (8011a90 <__assert_func+0x30>)
 8011a72:	9100      	str	r1, [sp, #0]
 8011a74:	4907      	ldr	r1, [pc, #28]	; (8011a94 <__assert_func+0x34>)
 8011a76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a7a:	462b      	mov	r3, r5
 8011a7c:	f000 f80e 	bl	8011a9c <fiprintf>
 8011a80:	f000 f81e 	bl	8011ac0 <abort>
 8011a84:	4b04      	ldr	r3, [pc, #16]	; (8011a98 <__assert_func+0x38>)
 8011a86:	461c      	mov	r4, r3
 8011a88:	e7f3      	b.n	8011a72 <__assert_func+0x12>
 8011a8a:	bf00      	nop
 8011a8c:	20000558 	.word	0x20000558
 8011a90:	08012144 	.word	0x08012144
 8011a94:	08012151 	.word	0x08012151
 8011a98:	0801217f 	.word	0x0801217f

08011a9c <fiprintf>:
 8011a9c:	b40e      	push	{r1, r2, r3}
 8011a9e:	b503      	push	{r0, r1, lr}
 8011aa0:	ab03      	add	r3, sp, #12
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	4805      	ldr	r0, [pc, #20]	; (8011abc <fiprintf+0x20>)
 8011aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aaa:	6800      	ldr	r0, [r0, #0]
 8011aac:	9301      	str	r3, [sp, #4]
 8011aae:	f7fd fa93 	bl	800efd8 <_vfiprintf_r>
 8011ab2:	b002      	add	sp, #8
 8011ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ab8:	b003      	add	sp, #12
 8011aba:	4770      	bx	lr
 8011abc:	20000558 	.word	0x20000558

08011ac0 <abort>:
 8011ac0:	2006      	movs	r0, #6
 8011ac2:	b508      	push	{r3, lr}
 8011ac4:	f000 f82c 	bl	8011b20 <raise>
 8011ac8:	2001      	movs	r0, #1
 8011aca:	f7f0 fc97 	bl	80023fc <_exit>

08011ace <_raise_r>:
 8011ace:	291f      	cmp	r1, #31
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	460d      	mov	r5, r1
 8011ad6:	d904      	bls.n	8011ae2 <_raise_r+0x14>
 8011ad8:	2316      	movs	r3, #22
 8011ada:	6003      	str	r3, [r0, #0]
 8011adc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
 8011ae2:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8011ae6:	b112      	cbz	r2, 8011aee <_raise_r+0x20>
 8011ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011aec:	b94b      	cbnz	r3, 8011b02 <_raise_r+0x34>
 8011aee:	4620      	mov	r0, r4
 8011af0:	f000 f830 	bl	8011b54 <_getpid_r>
 8011af4:	462a      	mov	r2, r5
 8011af6:	4601      	mov	r1, r0
 8011af8:	4620      	mov	r0, r4
 8011afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011afe:	f000 b817 	b.w	8011b30 <_kill_r>
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d00a      	beq.n	8011b1c <_raise_r+0x4e>
 8011b06:	1c59      	adds	r1, r3, #1
 8011b08:	d103      	bne.n	8011b12 <_raise_r+0x44>
 8011b0a:	2316      	movs	r3, #22
 8011b0c:	6003      	str	r3, [r0, #0]
 8011b0e:	2001      	movs	r0, #1
 8011b10:	e7e6      	b.n	8011ae0 <_raise_r+0x12>
 8011b12:	2400      	movs	r4, #0
 8011b14:	4628      	mov	r0, r5
 8011b16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b1a:	4798      	blx	r3
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	e7df      	b.n	8011ae0 <_raise_r+0x12>

08011b20 <raise>:
 8011b20:	4b02      	ldr	r3, [pc, #8]	; (8011b2c <raise+0xc>)
 8011b22:	4601      	mov	r1, r0
 8011b24:	6818      	ldr	r0, [r3, #0]
 8011b26:	f7ff bfd2 	b.w	8011ace <_raise_r>
 8011b2a:	bf00      	nop
 8011b2c:	20000558 	.word	0x20000558

08011b30 <_kill_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	2300      	movs	r3, #0
 8011b34:	4d06      	ldr	r5, [pc, #24]	; (8011b50 <_kill_r+0x20>)
 8011b36:	4604      	mov	r4, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	4611      	mov	r1, r2
 8011b3c:	602b      	str	r3, [r5, #0]
 8011b3e:	f7f0 fc4d 	bl	80023dc <_kill>
 8011b42:	1c43      	adds	r3, r0, #1
 8011b44:	d102      	bne.n	8011b4c <_kill_r+0x1c>
 8011b46:	682b      	ldr	r3, [r5, #0]
 8011b48:	b103      	cbz	r3, 8011b4c <_kill_r+0x1c>
 8011b4a:	6023      	str	r3, [r4, #0]
 8011b4c:	bd38      	pop	{r3, r4, r5, pc}
 8011b4e:	bf00      	nop
 8011b50:	200818a4 	.word	0x200818a4

08011b54 <_getpid_r>:
 8011b54:	f7f0 bc3a 	b.w	80023cc <_getpid>

08011b58 <_init>:
 8011b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5a:	bf00      	nop
 8011b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b5e:	bc08      	pop	{r3}
 8011b60:	469e      	mov	lr, r3
 8011b62:	4770      	bx	lr

08011b64 <_fini>:
 8011b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b66:	bf00      	nop
 8011b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6a:	bc08      	pop	{r3}
 8011b6c:	469e      	mov	lr, r3
 8011b6e:	4770      	bx	lr
