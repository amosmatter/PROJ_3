
PROJ_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4ec  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800b72c  0800b72c  0001b72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bafc  0800bafc  0001bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb00  0800bb00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800bb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003192  20000070  0800bb74  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  20003202  0800bb74  00023202  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00029084  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000512e  00000000  00000000  0004916d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002270  00000000  00000000  0004e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001b65  00000000  00000000  00050510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000823d  00000000  00000000  00052075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002adb6  00000000  00000000  0005a2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015af26  00000000  00000000  00085068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009ad8  00000000  00000000  001dff90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001e9a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000070 	.word	0x20000070
 800025c:	00000000 	.word	0x00000000
 8000260:	0800b714 	.word	0x0800b714

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000074 	.word	0x20000074
 800027c:	0800b714 	.word	0x0800b714

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b982 	b.w	80005b0 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ca:	460d      	mov	r5, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	460f      	mov	r7, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d146      	bne.n	8000362 <__udivmoddi4+0x9e>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4694      	mov	ip, r2
 80002d8:	d95e      	bls.n	8000398 <__udivmoddi4+0xd4>
 80002da:	fab2 f382 	clz	r3, r2
 80002de:	b143      	cbz	r3, 80002f2 <__udivmoddi4+0x2e>
 80002e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e4:	f1c3 0220 	rsb	r2, r3, #32
 80002e8:	409f      	lsls	r7, r3
 80002ea:	409c      	lsls	r4, r3
 80002ec:	fa20 f202 	lsr.w	r2, r0, r2
 80002f0:	4317      	orrs	r7, r2
 80002f2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f6:	fa1f f58c 	uxth.w	r5, ip
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fbb7 f1fe 	udiv	r1, r7, lr
 8000300:	fb0e 7711 	mls	r7, lr, r1, r7
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x5e>
 8000310:	eb1c 0202 	adds.w	r2, ip, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x5c>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 8134 	bhi.w	8000588 <__udivmoddi4+0x2c4>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	fb00 f505 	mul.w	r5, r0, r5
 8000332:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000336:	42a5      	cmp	r5, r4
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x88>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x86>
 8000344:	42a5      	cmp	r5, r4
 8000346:	f200 8119 	bhi.w	800057c <__udivmoddi4+0x2b8>
 800034a:	4610      	mov	r0, r2
 800034c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	2100      	movs	r1, #0
 8000354:	b11e      	cbz	r6, 800035e <__udivmoddi4+0x9a>
 8000356:	40dc      	lsrs	r4, r3
 8000358:	2300      	movs	r3, #0
 800035a:	e9c6 4300 	strd	r4, r3, [r6]
 800035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0xb4>
 8000366:	2e00      	cmp	r6, #0
 8000368:	f000 80fc 	beq.w	8000564 <__udivmoddi4+0x2a0>
 800036c:	2100      	movs	r1, #0
 800036e:	e9c6 0500 	strd	r0, r5, [r6]
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14c      	bne.n	800041a <__udivmoddi4+0x156>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2a6>
 8000386:	4282      	cmp	r2, r0
 8000388:	f240 80ef 	bls.w	800056a <__udivmoddi4+0x2a6>
 800038c:	4608      	mov	r0, r1
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e5      	beq.n	800035e <__udivmoddi4+0x9a>
 8000392:	e9c6 4700 	strd	r4, r7, [r6]
 8000396:	e7e2      	b.n	800035e <__udivmoddi4+0x9a>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xd8>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f382 	clz	r3, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	f040 809f 	bne.w	80004e4 <__udivmoddi4+0x220>
 80003a6:	1a8a      	subs	r2, r1, r2
 80003a8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003b6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c0:	fb07 f005 	mul.w	r0, r7, r5
 80003c4:	4290      	cmp	r0, r2
 80003c6:	d90f      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003c8:	eb1c 0202 	adds.w	r2, ip, r2
 80003cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d0:	bf2c      	ite	cs
 80003d2:	f04f 0901 	movcs.w	r9, #1
 80003d6:	f04f 0900 	movcc.w	r9, #0
 80003da:	4290      	cmp	r0, r2
 80003dc:	d903      	bls.n	80003e6 <__udivmoddi4+0x122>
 80003de:	f1b9 0f00 	cmp.w	r9, #0
 80003e2:	f000 80ce 	beq.w	8000582 <__udivmoddi4+0x2be>
 80003e6:	4645      	mov	r5, r8
 80003e8:	1a12      	subs	r2, r2, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f0:	fb0e 2210 	mls	r2, lr, r0, r2
 80003f4:	fb00 f707 	mul.w	r7, r0, r7
 80003f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003fc:	42a7      	cmp	r7, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x14e>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x14c>
 800040a:	42a7      	cmp	r7, r4
 800040c:	f200 80b3 	bhi.w	8000576 <__udivmoddi4+0x2b2>
 8000410:	4610      	mov	r0, r2
 8000412:	1be4      	subs	r4, r4, r7
 8000414:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000418:	e79c      	b.n	8000354 <__udivmoddi4+0x90>
 800041a:	f1c1 0420 	rsb	r4, r1, #32
 800041e:	408b      	lsls	r3, r1
 8000420:	fa05 fc01 	lsl.w	ip, r5, r1
 8000424:	fa22 f704 	lsr.w	r7, r2, r4
 8000428:	40e5      	lsrs	r5, r4
 800042a:	408a      	lsls	r2, r1
 800042c:	431f      	orrs	r7, r3
 800042e:	fa20 f304 	lsr.w	r3, r0, r4
 8000432:	4088      	lsls	r0, r1
 8000434:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	fa1f fc87 	uxth.w	ip, r7
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb5 fef8 	udiv	lr, r5, r8
 8000448:	fb08 551e 	mls	r5, r8, lr, r5
 800044c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000450:	fb0e f90c 	mul.w	r9, lr, ip
 8000454:	45a9      	cmp	r9, r5
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1b2>
 8000458:	197d      	adds	r5, r7, r5
 800045a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a9      	cmp	r9, r5
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b0>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 808d 	beq.w	800058e <__udivmoddi4+0x2ca>
 8000474:	46d6      	mov	lr, sl
 8000476:	eba5 0509 	sub.w	r5, r5, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000482:	fb08 5513 	mls	r5, r8, r3, r5
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800048e:	45ac      	cmp	ip, r5
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1dc>
 8000492:	197d      	adds	r5, r7, r5
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1da>
 800049a:	45ac      	cmp	ip, r5
 800049c:	d87e      	bhi.n	800059c <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004a4:	eba5 050c 	sub.w	r5, r5, ip
 80004a8:	fba3 9802 	umull	r9, r8, r3, r2
 80004ac:	4545      	cmp	r5, r8
 80004ae:	46ce      	mov	lr, r9
 80004b0:	46c4      	mov	ip, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1f6>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x200>
 80004b6:	4548      	cmp	r0, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x200>
 80004ba:	3b01      	subs	r3, #1
 80004bc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004c4:	2e00      	cmp	r6, #0
 80004c6:	d06f      	beq.n	80005a8 <__udivmoddi4+0x2e4>
 80004c8:	ebb0 020e 	subs.w	r2, r0, lr
 80004cc:	eb65 050c 	sbc.w	r5, r5, ip
 80004d0:	40ca      	lsrs	r2, r1
 80004d2:	fa05 f404 	lsl.w	r4, r5, r4
 80004d6:	40cd      	lsrs	r5, r1
 80004d8:	4618      	mov	r0, r3
 80004da:	4314      	orrs	r4, r2
 80004dc:	2100      	movs	r1, #0
 80004de:	e9c6 4500 	strd	r4, r5, [r6]
 80004e2:	e73c      	b.n	800035e <__udivmoddi4+0x9a>
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	f1c3 0220 	rsb	r2, r3, #32
 80004ec:	4099      	lsls	r1, r3
 80004ee:	409c      	lsls	r4, r3
 80004f0:	40d5      	lsrs	r5, r2
 80004f2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004f6:	fa20 f202 	lsr.w	r2, r0, r2
 80004fa:	fa1f f78c 	uxth.w	r7, ip
 80004fe:	fbb5 f0fe 	udiv	r0, r5, lr
 8000502:	430a      	orrs	r2, r1
 8000504:	fb0e 5510 	mls	r5, lr, r0, r5
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f507 	mul.w	r5, r0, r7
 8000512:	428d      	cmp	r5, r1
 8000514:	d90e      	bls.n	8000534 <__udivmoddi4+0x270>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	bf2c      	ite	cs
 8000520:	f04f 0901 	movcs.w	r9, #1
 8000524:	f04f 0900 	movcc.w	r9, #0
 8000528:	428d      	cmp	r5, r1
 800052a:	d902      	bls.n	8000532 <__udivmoddi4+0x26e>
 800052c:	f1b9 0f00 	cmp.w	r9, #0
 8000530:	d031      	beq.n	8000596 <__udivmoddi4+0x2d2>
 8000532:	4640      	mov	r0, r8
 8000534:	1b49      	subs	r1, r1, r5
 8000536:	b292      	uxth	r2, r2
 8000538:	fbb1 f5fe 	udiv	r5, r1, lr
 800053c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000540:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000544:	fb05 f107 	mul.w	r1, r5, r7
 8000548:	4291      	cmp	r1, r2
 800054a:	d907      	bls.n	800055c <__udivmoddi4+0x298>
 800054c:	eb1c 0202 	adds.w	r2, ip, r2
 8000550:	f105 38ff 	add.w	r8, r5, #4294967295
 8000554:	d201      	bcs.n	800055a <__udivmoddi4+0x296>
 8000556:	4291      	cmp	r1, r2
 8000558:	d823      	bhi.n	80005a2 <__udivmoddi4+0x2de>
 800055a:	4645      	mov	r5, r8
 800055c:	1a52      	subs	r2, r2, r1
 800055e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000562:	e726      	b.n	80003b2 <__udivmoddi4+0xee>
 8000564:	4631      	mov	r1, r6
 8000566:	4630      	mov	r0, r6
 8000568:	e6f9      	b.n	800035e <__udivmoddi4+0x9a>
 800056a:	1a84      	subs	r4, r0, r2
 800056c:	eb65 0203 	sbc.w	r2, r5, r3
 8000570:	2001      	movs	r0, #1
 8000572:	4617      	mov	r7, r2
 8000574:	e70b      	b.n	800038e <__udivmoddi4+0xca>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74a      	b.n	8000412 <__udivmoddi4+0x14e>
 800057c:	4464      	add	r4, ip
 800057e:	3802      	subs	r0, #2
 8000580:	e6e4      	b.n	800034c <__udivmoddi4+0x88>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	e72f      	b.n	80003e8 <__udivmoddi4+0x124>
 8000588:	3902      	subs	r1, #2
 800058a:	4462      	add	r2, ip
 800058c:	e6c9      	b.n	8000322 <__udivmoddi4+0x5e>
 800058e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000592:	443d      	add	r5, r7
 8000594:	e76f      	b.n	8000476 <__udivmoddi4+0x1b2>
 8000596:	3802      	subs	r0, #2
 8000598:	4461      	add	r1, ip
 800059a:	e7cb      	b.n	8000534 <__udivmoddi4+0x270>
 800059c:	3b02      	subs	r3, #2
 800059e:	443d      	add	r5, r7
 80005a0:	e77e      	b.n	80004a0 <__udivmoddi4+0x1dc>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e7d9      	b.n	800055c <__udivmoddi4+0x298>
 80005a8:	4618      	mov	r0, r3
 80005aa:	4631      	mov	r1, r6
 80005ac:	e6d7      	b.n	800035e <__udivmoddi4+0x9a>
 80005ae:	bf00      	nop

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <MX_FREERTOS_Init+0x28>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <MX_FREERTOS_Init+0x2c>)
 80005be:	f007 ff9b 	bl	80084f8 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <MX_FREERTOS_Init+0x30>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // PTH_TaskHandle = osThreadNew(PTH_task, NULL, &PTH_TaskAttributes);
  // IMU_TaskHandle = osThreadNew(IMU_task, NULL, &IMU_TaskAttributes);
  GPS_TaskHandle = osThreadNew(GPS_task, NULL, &GPS_TaskAttributes);
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <MX_FREERTOS_Init+0x34>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <MX_FREERTOS_Init+0x38>)
 80005ce:	f007 ff93 	bl	80084f8 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <MX_FREERTOS_Init+0x3c>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	0800b89c 	.word	0x0800b89c
 80005e0:	080005f5 	.word	0x080005f5
 80005e4:	20000090 	.word	0x20000090
 80005e8:	0800b878 	.word	0x0800b878
 80005ec:	080015f5 	.word	0x080015f5
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <StartDefaultTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for (;;)
  {

    osDelay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f008 f80b 	bl	800861a <osDelay>
 8000604:	e7fa      	b.n	80005fc <StartDefaultTask+0x8>
	...

08000608 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	2201      	movs	r2, #1
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <__io_putchar+0x20>)
 800061a:	f006 fbdf 	bl	8006ddc <HAL_UART_Transmit>
  return ch;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000178 	.word	0x20000178

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f001 f8a6 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f817 	bl	8000666 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000638:	f000 f871 	bl	800071e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fa38 	bl	8000ab0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000640:	f000 f952 	bl	80008e8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000644:	f000 f88c 	bl	8000760 <MX_I2C2_Init>
  MX_SPI3_Init();
 8000648:	f000 f8de 	bl	8000808 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f998 	bl	8000980 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000650:	f000 f9e2 	bl	8000a18 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000654:	f000 f8c4 	bl	80007e0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000658:	f007 fefe 	bl	8008458 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800065c:	f7ff ffaa 	bl	80005b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000660:	f007 ff20 	bl	80084a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x38>

08000666 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b09e      	sub	sp, #120	; 0x78
 800066a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	2260      	movs	r2, #96	; 0x60
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f00a fb0f 	bl	800ac98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800068a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800068e:	f001 fdb1 	bl	80021f4 <HAL_PWREx_ControlVoltageScaling>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000698:	f000 fb4a 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800069c:	2310      	movs	r3, #16
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b2:	2301      	movs	r3, #1
 80006b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006be:	2350      	movs	r3, #80	; 0x50
 80006c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0318 	add.w	r3, r7, #24
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fe86 	bl	80023ec <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e6:	f000 fb23 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	231f      	movs	r3, #31
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fd4c 	bl	80031a4 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000712:	f000 fb0d 	bl	8000d30 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3778      	adds	r7, #120	; 0x78
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000724:	f001 fe42 	bl	80023ac <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000738:	463b      	mov	r3, r7
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fcdc 	bl	80020f8 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000740:	f001 fd48 	bl	80021d4 <HAL_PWR_EnablePVD>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000744:	f001 fe42 	bl	80023cc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000748:	2002      	movs	r0, #2
 800074a:	f001 fddf 	bl	800230c <HAL_PWREx_ConfigSupply>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemPower_Config+0x3a>
  {
    Error_Handler();
 8000754:	f000 faec 	bl	8000d30 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_I2C2_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_I2C2_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_I2C2_Init+0x74>)
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_I2C2_Init+0x7c>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_I2C2_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_I2C2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <MX_I2C2_Init+0x74>)
 800079c:	f001 fb4a 	bl	8001e34 <HAL_I2C_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 fac3 	bl	8000d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <MX_I2C2_Init+0x74>)
 80007ae:	f001 fbdc 	bl	8001f6a <HAL_I2CEx_ConfigAnalogFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 faba 	bl	8000d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2C2_Init+0x74>)
 80007c0:	f001 fc1e 	bl	8002000 <HAL_I2CEx_ConfigDigitalFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 fab1 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000094 	.word	0x20000094
 80007d8:	40005800 	.word	0x40005800
 80007dc:	30909dec 	.word	0x30909dec

080007e0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 fc57 	bl	8002098 <HAL_ICACHE_ConfigAssociativityMode>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007f0:	f000 fa9e 	bl	8000d30 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007f4:	f001 fc70 	bl	80020d8 <HAL_ICACHE_Enable>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007fe:	f000 fa97 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000818:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800081a:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <MX_SPI3_Init+0xdc>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000820:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000824:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800082e:	2207      	movs	r2, #7
 8000830:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000840:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000844:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000870:	2200      	movs	r2, #0
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000876:	2200      	movs	r2, #0
 8000878:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800087c:	2200      	movs	r2, #0
 800087e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000882:	2200      	movs	r2, #0
 8000884:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000888:	2200      	movs	r2, #0
 800088a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800088e:	2200      	movs	r2, #0
 8000890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_SPI3_Init+0xd8>)
 8000894:	2200      	movs	r2, #0
 8000896:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI3_Init+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_SPI3_Init+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008a4:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_SPI3_Init+0xd8>)
 80008a6:	f005 fd1d 	bl	80062e4 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 80008b0:	f000 fa3e 	bl	8000d30 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80008b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008bc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_SPI3_Init+0xd8>)
 80008c8:	f005 fe3d 	bl	8006546 <HAL_SPIEx_SetConfigAutonomousMode>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 80008d2:	f000 fa2d 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000e8 	.word	0x200000e8
 80008e4:	46002000 	.word	0x46002000

080008e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_USART1_UART_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <MX_USART1_UART_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_USART1_UART_Init+0x90>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_USART1_UART_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_USART1_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000932:	f006 fa03 	bl	8006d3c <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 f9f8 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000944:	f006 ffef 	bl	8007926 <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f9ef 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000956:	f007 f824 	bl	80079a2 <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 f9e6 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_USART1_UART_Init+0x90>)
 8000966:	f006 ffa5 	bl	80078b4 <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f9de 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000178 	.word	0x20000178
 800097c:	40013800 	.word	0x40013800

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART2_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 800098c:	f242 32f0 	movw	r2, #9200	; 0x23f0
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009ca:	f006 f9b7 	bl	8006d3c <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f9ac 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009dc:	f006 ffa3 	bl	8007926 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f9a3 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009ee:	f006 ffd8 	bl	80079a2 <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f99a 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART2_UART_Init+0x90>)
 80009fe:	f006 ff1e 	bl	800783e <HAL_UARTEx_EnableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f992 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000020c 	.word	0x2000020c
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <MX_USART3_UART_Init+0x94>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a62:	f006 f96b 	bl	8006d3c <HAL_UART_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a6c:	f000 f960 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a74:	f006 ff57 	bl	8007926 <HAL_UARTEx_SetTxFifoThreshold>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7e:	f000 f957 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a86:	f006 ff8c 	bl	80079a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f000 f94e 	bl	8000d30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_USART3_UART_Init+0x90>)
 8000a96:	f006 ff0d 	bl	80078b4 <HAL_UARTEx_DisableFifoMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f000 f946 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200002a0 	.word	0x200002a0
 8000aac:	40004800 	.word	0x40004800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b88      	ldr	r3, [pc, #544]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000acc:	4a86      	ldr	r2, [pc, #536]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ad6:	4b84      	ldr	r3, [pc, #528]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae4:	4b80      	ldr	r3, [pc, #512]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aea:	4a7f      	ldr	r2, [pc, #508]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000af4:	4b7c      	ldr	r3, [pc, #496]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b79      	ldr	r3, [pc, #484]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b08:	4a77      	ldr	r2, [pc, #476]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b12:	4b75      	ldr	r3, [pc, #468]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b20:	4b71      	ldr	r3, [pc, #452]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b26:	4a70      	ldr	r2, [pc, #448]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b30:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b44:	4a68      	ldr	r2, [pc, #416]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b4e:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5c:	4b62      	ldr	r3, [pc, #392]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b62:	4a61      	ldr	r2, [pc, #388]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b6c:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b80:	4a59      	ldr	r2, [pc, #356]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b8a:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <MX_GPIO_Init+0x238>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_FSYNC_GPIO_Port, IMU_FSYNC_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	4853      	ldr	r0, [pc, #332]	; (8000cec <MX_GPIO_Init+0x23c>)
 8000b9e:	f001 f8f5 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_nCS_Pin|RPI_nCS_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ba8:	4850      	ldr	r0, [pc, #320]	; (8000cec <MX_GPIO_Init+0x23c>)
 8000baa:	f001 f8ef 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTH_nCS_GPIO_Port, PTH_nCS_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb4:	484e      	ldr	r0, [pc, #312]	; (8000cf0 <MX_GPIO_Init+0x240>)
 8000bb6:	f001 f8e9 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	484d      	ldr	r0, [pc, #308]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000bc0:	f001 f8e4 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	484b      	ldr	r0, [pc, #300]	; (8000cf8 <MX_GPIO_Init+0x248>)
 8000bca:	f001 f8df 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	484a      	ldr	r0, [pc, #296]	; (8000cfc <MX_GPIO_Init+0x24c>)
 8000bd4:	f001 f8da 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	4848      	ldr	r0, [pc, #288]	; (8000d00 <MX_GPIO_Init+0x250>)
 8000bde:	f001 f8d5 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT_REF_INT_Pin */
  GPIO_InitStruct.Pin = BUT_REF_INT_Pin;
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <MX_GPIO_Init+0x254>)
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUT_REF_INT_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x248>)
 8000bf8:	f000 fef0 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_FSYNC_Pin SD_nCS_Pin RPI_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_FSYNC_Pin|SD_nCS_Pin|RPI_nCS_Pin;
 8000bfc:	f246 0308 	movw	r3, #24584	; 0x6008
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4835      	ldr	r0, [pc, #212]	; (8000cec <MX_GPIO_Init+0x23c>)
 8000c16:	f000 fee1 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <MX_GPIO_Init+0x258>)
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	482f      	ldr	r0, [pc, #188]	; (8000cec <MX_GPIO_Init+0x23c>)
 8000c2e:	f000 fed5 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PTH_nCS_Pin */
  GPIO_InitStruct.Pin = PTH_nCS_Pin;
 8000c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PTH_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <MX_GPIO_Init+0x240>)
 8000c4c:	f000 fec6 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c50:	2304      	movs	r3, #4
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000c68:	f000 feb8 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	481d      	ldr	r0, [pc, #116]	; (8000cf8 <MX_GPIO_Init+0x248>)
 8000c84:	f000 feaa 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <MX_GPIO_Init+0x24c>)
 8000ca0:	f000 fe9c 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_READY_Pin */
  GPIO_InitStruct.Pin = LED_READY_Pin;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_READY_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_GPIO_Init+0x250>)
 8000cbc:	f000 fe8e 	bl	80019dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 5, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2105      	movs	r1, #5
 8000cc4:	2010      	movs	r0, #16
 8000cc6:	f000 fe61 	bl	800198c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000cca:	2010      	movs	r0, #16
 8000ccc:	f000 fe78 	bl	80019c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	2018      	movs	r0, #24
 8000cd6:	f000 fe59 	bl	800198c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000cda:	2018      	movs	r0, #24
 8000cdc:	f000 fe70 	bl	80019c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	46020c00 	.word	0x46020c00
 8000cec:	42021400 	.word	0x42021400
 8000cf0:	42021000 	.word	0x42021000
 8000cf4:	42021800 	.word	0x42021800
 8000cf8:	42020800 	.word	0x42020800
 8000cfc:	42020c00 	.word	0x42020c00
 8000d00:	42020400 	.word	0x42020400
 8000d04:	10210000 	.word	0x10210000
 8000d08:	10110000 	.word	0x10110000

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f000 fd5d 	bl	80017dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012c00 	.word	0x40012c00

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>

08000d3a <delay_ms>:

#include "cmsis_os2.h"
#include <string.h>

void delay_ms(uint32_t period)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	osDelay(period);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f007 fc69 	bl	800861a <osDelay>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x38>)
 8000d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_MspInit+0x38>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x38>)
 8000d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	210f      	movs	r1, #15
 8000d78:	f06f 0001 	mvn.w	r0, #1
 8000d7c:	f000 fe06 	bl	800198c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	46020c00 	.word	0x46020c00

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ba      	sub	sp, #232	; 0xe8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	22c0      	movs	r2, #192	; 0xc0
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f009 ff73 	bl	800ac98 <memset>
  if(hi2c->Instance==I2C2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <HAL_I2C_MspInit+0xc4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d144      	bne.n	8000e46 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dbc:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fdef 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000ddc:	f7ff ffa8 	bl	8000d30 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_I2C_MspInit+0xc8>)
 8000de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de6:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_I2C_MspInit+0xc8>)
 8000de8:	f043 0320 	orr.w	r3, r3, #32
 8000dec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_I2C_MspInit+0xc8>)
 8000df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000df6:	f003 0320 	and.w	r3, r3, #32
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e16:	2304      	movs	r3, #4
 8000e18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <HAL_I2C_MspInit+0xcc>)
 8000e24:	f000 fdda 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_I2C_MspInit+0xc8>)
 8000e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_I2C_MspInit+0xc8>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_I2C_MspInit+0xc8>)
 8000e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	37e8      	adds	r7, #232	; 0xe8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40005800 	.word	0x40005800
 8000e54:	46020c00 	.word	0x46020c00
 8000e58:	42021400 	.word	0x42021400

08000e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ba      	sub	sp, #232	; 0xe8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	22c0      	movs	r2, #192	; 0xc0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f009 ff0b 	bl	800ac98 <memset>
  if(hspi->Instance==SPI3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_SPI_MspInit+0xc8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d146      	bne.n	8000f1a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fd86 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000eae:	f7ff ff3f 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_SPI_MspInit+0xcc>)
 8000eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_SPI_MspInit+0xcc>)
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0xcc>)
 8000ec4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_SPI_MspInit+0xcc>)
 8000ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_SPI_MspInit+0xcc>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_SPI_MspInit+0xcc>)
 8000ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000eee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_SPI_MspInit+0xd0>)
 8000f16:	f000 fd61 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	37e8      	adds	r7, #232	; 0xe8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	46002000 	.word	0x46002000
 8000f28:	46020c00 	.word	0x46020c00
 8000f2c:	42020800 	.word	0x42020800

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0be      	sub	sp, #248	; 0xf8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	22c0      	movs	r2, #192	; 0xc0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 fea1 	bl	800ac98 <memset>
  if(huart->Instance==USART1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a72      	ldr	r2, [pc, #456]	; (8001124 <HAL_UART_MspInit+0x1f4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d146      	bne.n	8000fee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f60:	f04f 0201 	mov.w	r2, #1
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fd1d 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f80:	f7ff fed6 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f8a:	4a67      	ldr	r2, [pc, #412]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000f94:	4b64      	ldr	r3, [pc, #400]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b61      	ldr	r3, [pc, #388]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa8:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8000fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000fc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4851      	ldr	r0, [pc, #324]	; (800112c <HAL_UART_MspInit+0x1fc>)
 8000fe8:	f000 fcf8 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fec:	e095      	b.n	800111a <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a4f      	ldr	r2, [pc, #316]	; (8001130 <HAL_UART_MspInit+0x200>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d145      	bne.n	8001084 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff8:	f04f 0202 	mov.w	r2, #2
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fcd1 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001018:	f7ff fe8a 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800101c:	4b42      	ldr	r3, [pc, #264]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 800101e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800102c:	4b3e      	ldr	r3, [pc, #248]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 800102e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 800103c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001040:	4a39      	ldr	r2, [pc, #228]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 800104c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001058:	230c      	movs	r3, #12
 800105a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001070:	2307      	movs	r3, #7
 8001072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800107a:	4619      	mov	r1, r3
 800107c:	482b      	ldr	r0, [pc, #172]	; (800112c <HAL_UART_MspInit+0x1fc>)
 800107e:	f000 fcad 	bl	80019dc <HAL_GPIO_Init>
}
 8001082:	e04a      	b.n	800111a <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a2a      	ldr	r2, [pc, #168]	; (8001134 <HAL_UART_MspInit+0x204>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d145      	bne.n	800111a <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800108e:	f04f 0204 	mov.w	r2, #4
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800109a:	2300      	movs	r3, #0
 800109c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fc86 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_UART_MspInit+0x182>
      Error_Handler();
 80010ae:	f7ff fe3f 	bl	8000d30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 80010b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 80010ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 80010c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 80010d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_UART_MspInit+0x1f8>)
 80010e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001108:	2307      	movs	r3, #7
 800110a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001112:	4619      	mov	r1, r3
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <HAL_UART_MspInit+0x208>)
 8001116:	f000 fc61 	bl	80019dc <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	37f8      	adds	r7, #248	; 0xf8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013800 	.word	0x40013800
 8001128:	46020c00 	.word	0x46020c00
 800112c:	42020000 	.word	0x42020000
 8001130:	40004400 	.word	0x40004400
 8001134:	40004800 	.word	0x40004800
 8001138:	42020400 	.word	0x42020400

0800113c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_InitTick+0xcc>)
 800114e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_InitTick+0xcc>)
 8001154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001158:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_InitTick+0xcc>)
 800115e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116a:	f107 0210 	add.w	r2, r7, #16
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fb5f 	bl	8003838 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800117a:	f002 fb35 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 800117e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_InitTick+0xd0>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	0c9b      	lsrs	r3, r3, #18
 800118a:	3b01      	subs	r3, #1
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_InitTick+0xd4>)
 8001190:	4a20      	ldr	r2, [pc, #128]	; (8001214 <HAL_InitTick+0xd8>)
 8001192:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_InitTick+0xd4>)
 8001196:	f240 32e7 	movw	r2, #999	; 0x3e7
 800119a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_InitTick+0xd4>)
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_InitTick+0xd4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_InitTick+0xd4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <HAL_InitTick+0xd4>)
 80011b0:	f005 fa0a 	bl	80065c8 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80011ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011c2:	4813      	ldr	r0, [pc, #76]	; (8001210 <HAL_InitTick+0xd4>)
 80011c4:	f005 fa62 	bl	800668c <HAL_TIM_Base_Start_IT>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80011ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d808      	bhi.n	80011ee <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	202a      	movs	r0, #42	; 0x2a
 80011e2:	f000 fbd3 	bl	800198c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <HAL_InitTick+0xdc>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e002      	b.n	80011f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011f4:	202a      	movs	r0, #42	; 0x2a
 80011f6:	f000 fbe3 	bl	80019c0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80011fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	46020c00 	.word	0x46020c00
 800120c:	431bde83 	.word	0x431bde83
 8001210:	20000334 	.word	0x20000334
 8001214:	40012c00 	.word	0x40012c00
 8001218:	20000004 	.word	0x20000004

0800121c <print_binary_section>:
/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim1;

/* USER CODE BEGIN EV */
void print_binary_section(unsigned int number, int start_bit, int end_bit)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  if (start_bit < 0 || end_bit < 0 || start_bit > 31 || end_bit > 31 || start_bit > end_bit)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0c      	blt.n	8001248 <print_binary_section+0x2c>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db09      	blt.n	8001248 <print_binary_section+0x2c>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b1f      	cmp	r3, #31
 8001238:	dc06      	bgt.n	8001248 <print_binary_section+0x2c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b1f      	cmp	r3, #31
 800123e:	dc03      	bgt.n	8001248 <print_binary_section+0x2c>
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dd03      	ble.n	8001250 <print_binary_section+0x34>
  {
    printf("Invalid bit positions\n");
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <print_binary_section+0xa4>)
 800124a:	f009 fc45 	bl	800aad8 <puts>
    return;
 800124e:	e033      	b.n	80012b8 <print_binary_section+0x9c>
  }

  unsigned int mask = (1u << (end_bit - start_bit + 1)) - 1;
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	3301      	adds	r3, #1
 8001258:	2201      	movs	r2, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	3b01      	subs	r3, #1
 8001260:	61bb      	str	r3, [r7, #24]
  mask <<= start_bit;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	61bb      	str	r3, [r7, #24]

  unsigned int section = (number & mask) >> start_bit;
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	401a      	ands	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]

  for (int i = end_bit; i >= start_bit; --i)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e014      	b.n	80012aa <print_binary_section+0x8e>
  {

    printf("%d", (section >> i) & 1);
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	4619      	mov	r1, r3
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <print_binary_section+0xa8>)
 8001290:	f009 fbb4 	bl	800a9fc <iprintf>
    if (i % 8 == 0)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <print_binary_section+0x88>
    {
      printf("'");
 800129e:	2027      	movs	r0, #39	; 0x27
 80012a0:	f009 fbbe 	bl	800aa20 <putchar>
  for (int i = end_bit; i >= start_bit; --i)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dae6      	bge.n	8001280 <print_binary_section+0x64>
    }
  }
  printf("\n");
 80012b2:	200a      	movs	r0, #10
 80012b4:	f009 fbb4 	bl	800aa20 <putchar>
}
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800b750 	.word	0x0800b750
 80012c4:	0800b768 	.word	0x0800b768

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>
	...

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HFSR:");
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <HardFault_Handler+0x94>)
 80012d6:	f009 fb91 	bl	800a9fc <iprintf>
  print_binary_section(SCB->HFSR, 0, 31);
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HardFault_Handler+0x98>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	221f      	movs	r2, #31
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff9a 	bl	800121c <print_binary_section>
  printf("\n\r");
 80012e8:	4820      	ldr	r0, [pc, #128]	; (800136c <HardFault_Handler+0x9c>)
 80012ea:	f009 fb87 	bl	800a9fc <iprintf>

  if (SCB->HFSR & (1 << 30))
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HardFault_Handler+0x98>)
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d033      	beq.n	8001362 <HardFault_Handler+0x92>
  {
    printf("BFAR:");
 80012fa:	481d      	ldr	r0, [pc, #116]	; (8001370 <HardFault_Handler+0xa0>)
 80012fc:	f009 fb7e 	bl	800a9fc <iprintf>
    print_binary_section(SCB->BFAR, 0, 31);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HardFault_Handler+0x98>)
 8001302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001304:	221f      	movs	r2, #31
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff87 	bl	800121c <print_binary_section>
    printf("\n\r");
 800130e:	4817      	ldr	r0, [pc, #92]	; (800136c <HardFault_Handler+0x9c>)
 8001310:	f009 fb74 	bl	800a9fc <iprintf>

    printf("CFSR:");
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <HardFault_Handler+0xa4>)
 8001316:	f009 fb71 	bl	800a9fc <iprintf>
    print_binary_section(SCB->CFSR, 0, 31);
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HardFault_Handler+0x98>)
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	221f      	movs	r2, #31
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff7a 	bl	800121c <print_binary_section>
    printf("\n\r");
 8001328:	4810      	ldr	r0, [pc, #64]	; (800136c <HardFault_Handler+0x9c>)
 800132a:	f009 fb67 	bl	800a9fc <iprintf>

    printf("DFSR:");
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <HardFault_Handler+0xa8>)
 8001330:	f009 fb64 	bl	800a9fc <iprintf>
    print_binary_section(SCB->DFSR, 0, 31);
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HardFault_Handler+0x98>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	221f      	movs	r2, #31
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff6d 	bl	800121c <print_binary_section>
    printf("\n\r");
 8001342:	480a      	ldr	r0, [pc, #40]	; (800136c <HardFault_Handler+0x9c>)
 8001344:	f009 fb5a 	bl	800a9fc <iprintf>

    printf("AFSR:");
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <HardFault_Handler+0xac>)
 800134a:	f009 fb57 	bl	800a9fc <iprintf>
    print_binary_section(SCB->AFSR, 0, 31);
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HardFault_Handler+0x98>)
 8001350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001352:	221f      	movs	r2, #31
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff60 	bl	800121c <print_binary_section>
    printf("\n\r");
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <HardFault_Handler+0x9c>)
 800135e:	f009 fb4d 	bl	800a9fc <iprintf>
  // printf("HFSR:);
  // binary_printf("DFSR = 0x%b\r\n", SCB->DFSR);
  // binary_printf("AFSR = 0x%b\r\n", SCB->AFSR);

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x92>
 8001364:	0800b76c 	.word	0x0800b76c
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	0800b774 	.word	0x0800b774
 8001370:	0800b778 	.word	0x0800b778
 8001374:	0800b780 	.word	0x0800b780
 8001378:	0800b788 	.word	0x0800b788
 800137c:	0800b790 	.word	0x0800b790

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80013a4:	2020      	movs	r0, #32
 80013a6:	f000 fd09 	bl	8001dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}

080013ae <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_REF_INT_Pin);
 80013b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013b6:	f000 fd01 	bl	8001dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <TIM1_UP_IRQHandler+0x10>)
 80013c6:	f005 fa01 	bl	80067cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000334 	.word	0x20000334

080013d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e00a      	b.n	80013fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e6:	f3af 8000 	nop.w
 80013ea:	4601      	mov	r1, r0
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	b2ca      	uxtb	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf0      	blt.n	80013e6 <_read+0x12>
  }

  return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e009      	b.n	8001434 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f8ed 	bl	8000608 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf1      	blt.n	8001420 <_write+0x12>
  }
  return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_close>:

int _close(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146e:	605a      	str	r2, [r3, #4]
  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_isatty>:

int _isatty(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f009 fc4a 	bl	800ad78 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200c0000 	.word	0x200c0000
 8001510:	00000400 	.word	0x00000400
 8001514:	20000380 	.word	0x20000380
 8001518:	20003208 	.word	0x20003208

0800151c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <SystemInit+0x68>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <SystemInit+0x68>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <SystemInit+0x6c>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <SystemInit+0x6c>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <SystemInit+0x6c>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <SystemInit+0x6c>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <SystemInit+0x6c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <SystemInit+0x6c>)
 800154e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001552:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001556:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <SystemInit+0x6c>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <SystemInit+0x6c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <SystemInit+0x6c>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <SystemInit+0x6c>)
 800156c:	2200      	movs	r2, #0
 800156e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SystemInit+0x68>)
 8001572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001576:	609a      	str	r2, [r3, #8]
  #endif
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	46020c00 	.word	0x46020c00

0800158c <rcv_str>:
#include <string.h>

extern UART_HandleTypeDef GPS_UART;

HAL_StatusTypeDef rcv_str(uint8_t *buffer, uint16_t length)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
    size_t i = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef ret;

    for (i = 0; i < length; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e016      	b.n	80015d0 <rcv_str+0x44>
    {
        ret = HAL_UART_Receive(&GPS_UART, (uint8_t *)&buffer[i], 1, HAL_MAX_DELAY);
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	18d1      	adds	r1, r2, r3
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	2201      	movs	r2, #1
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <rcv_str+0x64>)
 80015b0:	f005 fcb2 	bl	8006f18 <HAL_UART_Receive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	72fb      	strb	r3, [r7, #11]

        if (buffer[i] == '\n' || ret != HAL_OK)
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b0a      	cmp	r3, #10
 80015c2:	d009      	beq.n	80015d8 <rcv_str+0x4c>
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <rcv_str+0x4c>
    for (i = 0; i < length; i++)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3e4      	bcc.n	80015a2 <rcv_str+0x16>
        {
            break;
        }
    }
    buffer[i + 1] = '\0';
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
    return ret;
 80015e4:	7afb      	ldrb	r3, [r7, #11]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000020c 	.word	0x2000020c

080015f4 <GPS_task>:

void GPS_task(void *pvParameters)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001600:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8001604:	6018      	str	r0, [r3, #0]
    uint8_t line[500] = {};
 8001606:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800160a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	3304      	adds	r3, #4
 8001614:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f009 fb3c 	bl	800ac98 <memset>

    while (1)
    {

        delay_ms(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff fb8a 	bl	8000d3a <delay_ms>
        size_t i = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
        HAL_StatusTypeDef ret;

        ret = rcv_str(line, sizeof(line));
 800162c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001630:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ffa9 	bl	800158c <rcv_str>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

        while (ret != HAL_OK)
 8001640:	e009      	b.n	8001656 <GPS_task+0x62>
        {
            ret = rcv_str(line, sizeof(line));
 8001642:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001646:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff9e 	bl	800158c <rcv_str>
 8001650:	4603      	mov	r3, r0
 8001652:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
        while (ret != HAL_OK)
 8001656:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f1      	bne.n	8001642 <GPS_task+0x4e>
        }
        if (strncmp((char *)line + 3, "GGA", 3) == 0)
 800165e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001662:	3303      	adds	r3, #3
 8001664:	2203      	movs	r2, #3
 8001666:	492b      	ldr	r1, [pc, #172]	; (8001714 <GPS_task+0x120>)
 8001668:	4618      	mov	r0, r3
 800166a:	f009 fb1d 	bl	800aca8 <strncmp>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <GPS_task+0x86>
        {
            printf("\n\n");
 8001674:	4828      	ldr	r0, [pc, #160]	; (8001718 <GPS_task+0x124>)
 8001676:	f009 fa2f 	bl	800aad8 <puts>
        }


        if (strncmp((char *)line + 3, "GSV", 3) == 0)
 800167a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800167e:	3303      	adds	r3, #3
 8001680:	2203      	movs	r2, #3
 8001682:	4926      	ldr	r1, [pc, #152]	; (800171c <GPS_task+0x128>)
 8001684:	4618      	mov	r0, r3
 8001686:	f009 fb0f 	bl	800aca8 <strncmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d039      	beq.n	8001704 <GPS_task+0x110>
        {
            continue;
        }
        if (strncmp((char *)line + 1, "GPTXT", 5) == 0)
 8001690:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001694:	3301      	adds	r3, #1
 8001696:	2205      	movs	r2, #5
 8001698:	4921      	ldr	r1, [pc, #132]	; (8001720 <GPS_task+0x12c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f009 fb04 	bl	800aca8 <strncmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d030      	beq.n	8001708 <GPS_task+0x114>
        {
            continue;
        }
        if (strncmp((char *)line + 3, "GLL", 3) == 0)
 80016a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016aa:	3303      	adds	r3, #3
 80016ac:	2203      	movs	r2, #3
 80016ae:	491d      	ldr	r1, [pc, #116]	; (8001724 <GPS_task+0x130>)
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 faf9 	bl	800aca8 <strncmp>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d027      	beq.n	800170c <GPS_task+0x118>
        {
            continue;
        }
                if (strncmp((char *)line + 3, "RMC", 3) == 0)
 80016bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016c0:	3303      	adds	r3, #3
 80016c2:	2203      	movs	r2, #3
 80016c4:	4918      	ldr	r1, [pc, #96]	; (8001728 <GPS_task+0x134>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f009 faee 	bl	800aca8 <strncmp>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01e      	beq.n	8001710 <GPS_task+0x11c>
        {
            continue;
        }

        printf("%s\n", line);
 80016d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f009 f9fe 	bl	800aad8 <puts>

        if (strncmp((char *)line + 3, "GGA", 3) == 0)
 80016dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016e0:	3303      	adds	r3, #3
 80016e2:	2203      	movs	r2, #3
 80016e4:	490b      	ldr	r1, [pc, #44]	; (8001714 <GPS_task+0x120>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f009 fade 	bl	800aca8 <strncmp>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d196      	bne.n	8001620 <GPS_task+0x2c>
        {

          struct minmea_sentence_gga sentence;
		  minmea_parse_gga(&sentence, line);
 80016f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f006 fddd 	bl	80082bc <minmea_parse_gga>
 8001702:	e78d      	b.n	8001620 <GPS_task+0x2c>
            continue;
 8001704:	bf00      	nop
 8001706:	e78b      	b.n	8001620 <GPS_task+0x2c>
            continue;
 8001708:	bf00      	nop
 800170a:	e789      	b.n	8001620 <GPS_task+0x2c>
            continue;
 800170c:	bf00      	nop
 800170e:	e787      	b.n	8001620 <GPS_task+0x2c>
            continue;
 8001710:	bf00      	nop
    {
 8001712:	e785      	b.n	8001620 <GPS_task+0x2c>
 8001714:	0800b798 	.word	0x0800b798
 8001718:	0800b79c 	.word	0x0800b79c
 800171c:	0800b7a0 	.word	0x0800b7a0
 8001720:	0800b7a4 	.word	0x0800b7a4
 8001724:	0800b7ac 	.word	0x0800b7ac
 8001728:	0800b7b0 	.word	0x0800b7b0

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001730:	f7ff fef4 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001736:	e003      	b.n	8001740 <LoopCopyDataInit>

08001738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800173a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800173c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800173e:	3104      	adds	r1, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001740:	480a      	ldr	r0, [pc, #40]	; (800176c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001748:	d3f6      	bcc.n	8001738 <CopyDataInit>
	ldr	r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopForever+0x12>)
	b	LoopFillZerobss
 800174c:	e002      	b.n	8001754 <LoopFillZerobss>

0800174e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800174e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001750:	f842 3b04 	str.w	r3, [r2], #4

08001754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <LoopForever+0x16>)
	cmp	r2, r3
 8001756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001758:	d3f9      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f009 fb13 	bl	800ad84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7fe ff65 	bl	800062c <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001764:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001768:	0800bb04 	.word	0x0800bb04
	ldr	r0, =_sdata
 800176c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001770:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001774:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001778:	20003202 	.word	0x20003202

0800177c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_IRQHandler>
	...

08001780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_Init+0x4c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_Init+0x4c>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f8f0 	bl	8001976 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001796:	f001 fef7 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 800179a:	4602      	mov	r2, r0
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_Init+0x50>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	490b      	ldr	r1, [pc, #44]	; (80017d4 <HAL_Init+0x54>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_Init+0x58>)
 80017ae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b0:	200f      	movs	r0, #15
 80017b2:	f7ff fcc3 	bl	800113c <HAL_InitTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e002      	b.n	80017c6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fac6 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000
 80017d0:	46020c00 	.word	0x46020c00
 80017d4:	0800b8c0 	.word	0x0800b8c0
 80017d8:	20000000 	.word	0x20000000

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000384 	.word	0x20000384

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000384 	.word	0x20000384

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff4c 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800199a:	f7ff ff63 	bl	8001864 <__NVIC_GetPriorityGrouping>
 800199e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	6978      	ldr	r0, [r7, #20]
 80019a6:	f7ff ffb3 	bl	8001910 <NVIC_EncodePriority>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff82 	bl	80018bc <__NVIC_SetPriority>
}
 80019b8:	bf00      	nop
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff56 	bl	8001880 <__NVIC_EnableIRQ>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019ee:	e1ba      	b.n	8001d66 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 81aa 	beq.w	8001d60 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <HAL_GPIO_Init+0x188>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d15d      	bne.n	8001ad0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_GPIO_Init+0x18c>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a4c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001a4e:	4a46      	ldr	r2, [pc, #280]	; (8001b68 <HAL_GPIO_Init+0x18c>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	3208      	adds	r2, #8
 8001a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a66:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220b      	movs	r2, #11
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	08da      	lsrs	r2, r3, #3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	69f9      	ldr	r1, [r7, #28]
 8001a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2202      	movs	r2, #2
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e067      	b.n	8001ba0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x104>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b12      	cmp	r3, #18
 8001ade:	d145      	bne.n	8001b6c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3208      	adds	r2, #8
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69f9      	ldr	r1, [r7, #28]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e01e      	b.n	8001ba0 <HAL_GPIO_Init+0x1c4>
 8001b62:	bf00      	nop
 8001b64:	46020000 	.word	0x46020000
 8001b68:	0800b918 	.word	0x0800b918
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_GPIO_Init+0x1e4>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d007      	beq.n	8001bc0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb4:	2b11      	cmp	r3, #17
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d07c      	beq.n	8001d60 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c66:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3318      	adds	r3, #24
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0a9a      	lsrs	r2, r3, #10
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_GPIO_Init+0x3ac>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ca2:	4938      	ldr	r1, [pc, #224]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3318      	adds	r3, #24
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d38:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_GPIO_Init+0x3a8>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f ae3d 	bne.w	80019f0 <HAL_GPIO_Init+0x14>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3724      	adds	r7, #36	; 0x24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	46022000 	.word	0x46022000
 8001d88:	002f7f7f 	.word	0x002f7f7f

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f814 	bl	8001e08 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f812 	bl	8001e1e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	46022000 	.word	0x46022000

08001e08 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e08d      	b.n	8001f62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe ff96 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001eba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d108      	bne.n	8001ed6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	e007      	b.n	8001ee6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69d9      	ldr	r1, [r3, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d138      	bne.n	8001ff2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e032      	b.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2224      	movs	r2, #36	; 0x24
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	d139      	bne.n	800208a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002020:	2302      	movs	r3, #2
 8002022:	e033      	b.n	800208c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002052:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e007      	b.n	80020c6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0204 	bic.w	r2, r3, #4
 80020be:	4905      	ldr	r1, [pc, #20]	; (80020d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40030400 	.word	0x40030400

080020d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_ICACHE_Enable+0x1c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_ICACHE_Enable+0x1c>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40030400 	.word	0x40030400

080020f8 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e059      	b.n	80021be <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_PWR_ConfigPVD+0xd4>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	492d      	ldr	r1, [pc, #180]	; (80021cc <HAL_PWR_ConfigPVD+0xd4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002122:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800212e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 8002162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002166:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800217e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_PWR_ConfigPVD+0xd8>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	46020800 	.word	0x46020800
 80021d0:	46022000 	.word	0x46022000

080021d4 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_PWR_EnablePVD+0x1c>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_PWR_EnablePVD+0x1c>)
 80021de:	f043 0310 	orr.w	r3, r3, #16
 80021e2:	6113      	str	r3, [r2, #16]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	46020800 	.word	0x46020800

080021f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002204:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	d10b      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002214:	d905      	bls.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e057      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d90a      	bls.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4313      	orrs	r3, r2
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	60d3      	str	r3, [r2, #12]
 8002242:	e007      	b.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800224c:	4925      	ldr	r1, [pc, #148]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	2232      	movs	r2, #50	; 0x32
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a21      	ldr	r2, [pc, #132]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002272:	e002      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3b01      	subs	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f3      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01b      	beq.n	80022ca <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	2232      	movs	r2, #50	; 0x32
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	099b      	lsrs	r3, r3, #6
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80022b0:	e002      	b.n	80022b8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80022ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0xd6>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f3      	bne.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e000      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	46020800 	.word	0x46020800
 80022e8:	20000000 	.word	0x20000000
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <HAL_PWREx_GetVoltageRange+0x18>)
 80022f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	46020800 	.word	0x46020800

0800230c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002314:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_PWREx_ConfigSupply+0x94>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_PWREx_ConfigSupply+0x98>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2232      	movs	r2, #50	; 0x32
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_PWREx_ConfigSupply+0x98>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d113      	bne.n	8002360 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002344:	e002      	b.n	800234c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3b01      	subs	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_PWREx_ConfigSupply+0x9c>)
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d116      	bne.n	8002386 <HAL_PWREx_ConfigSupply+0x7a>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f3      	bne.n	8002346 <HAL_PWREx_ConfigSupply+0x3a>
 800235e:	e012      	b.n	8002386 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800236c:	e002      	b.n	8002374 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3b01      	subs	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_PWREx_ConfigSupply+0x7a>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f3      	bne.n	800236e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e000      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000
 80023a4:	10624dd3 	.word	0x10624dd3
 80023a8:	46020800 	.word	0x46020800

080023ac <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ba:	6113      	str	r3, [r2, #16]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	46020800 	.word	0x46020800

080023cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	46020800 	.word	0x46020800

080023ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08e      	sub	sp, #56	; 0x38
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f000 bec8 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4b99      	ldr	r3, [pc, #612]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002410:	4b96      	ldr	r3, [pc, #600]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 816c 	beq.w	8002700 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_RCC_OscConfig+0x52>
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	2b0c      	cmp	r3, #12
 8002432:	f040 80de 	bne.w	80025f2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	2b01      	cmp	r3, #1
 800243a:	f040 80da 	bne.w	80025f2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f000 bea5 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002450:	4b86      	ldr	r3, [pc, #536]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <HAL_RCC_OscConfig+0x7a>
 800245c:	4b83      	ldr	r3, [pc, #524]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002464:	e005      	b.n	8002472 <HAL_RCC_OscConfig+0x86>
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002472:	4293      	cmp	r3, r2
 8002474:	d255      	bcs.n	8002522 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fa11 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f000 be82 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4a75      	ldr	r2, [pc, #468]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800249c:	6093      	str	r3, [r2, #8]
 800249e:	4b73      	ldr	r3, [pc, #460]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	4970      	ldr	r1, [pc, #448]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80024b8:	d309      	bcc.n	80024ce <HAL_RCC_OscConfig+0xe2>
 80024ba:	4b6c      	ldr	r3, [pc, #432]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 021f 	bic.w	r2, r3, #31
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4969      	ldr	r1, [pc, #420]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
 80024cc:	e07e      	b.n	80025cc <HAL_RCC_OscConfig+0x1e0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da0a      	bge.n	80024ec <HAL_RCC_OscConfig+0x100>
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	015b      	lsls	r3, r3, #5
 80024e4:	4961      	ldr	r1, [pc, #388]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
 80024ea:	e06f      	b.n	80025cc <HAL_RCC_OscConfig+0x1e0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d30a      	bcc.n	800250c <HAL_RCC_OscConfig+0x120>
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4959      	ldr	r1, [pc, #356]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002506:	4313      	orrs	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]
 800250a:	e05f      	b.n	80025cc <HAL_RCC_OscConfig+0x1e0>
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	03db      	lsls	r3, r3, #15
 800251a:	4954      	ldr	r1, [pc, #336]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
 8002520:	e054      	b.n	80025cc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a51      	ldr	r2, [pc, #324]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800252c:	6093      	str	r3, [r2, #8]
 800252e:	4b4f      	ldr	r3, [pc, #316]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	494c      	ldr	r1, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002548:	d309      	bcc.n	800255e <HAL_RCC_OscConfig+0x172>
 800254a:	4b48      	ldr	r3, [pc, #288]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 021f 	bic.w	r2, r3, #31
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4945      	ldr	r1, [pc, #276]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e028      	b.n	80025b0 <HAL_RCC_OscConfig+0x1c4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	da0a      	bge.n	800257c <HAL_RCC_OscConfig+0x190>
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	015b      	lsls	r3, r3, #5
 8002574:	493d      	ldr	r1, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002576:	4313      	orrs	r3, r2
 8002578:	60cb      	str	r3, [r1, #12]
 800257a:	e019      	b.n	80025b0 <HAL_RCC_OscConfig+0x1c4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d30a      	bcc.n	800259c <HAL_RCC_OscConfig+0x1b0>
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	4935      	ldr	r1, [pc, #212]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]
 800259a:	e009      	b.n	80025b0 <HAL_RCC_OscConfig+0x1c4>
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	03db      	lsls	r3, r3, #15
 80025aa:	4930      	ldr	r1, [pc, #192]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 f974 	bl	80038a8 <RCC_SetFlashLatencyFromMSIRange>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f000 bde5 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80025cc:	f001 f8de 	bl	800378c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025d0:	4b27      	ldr	r3, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x284>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fdb1 	bl	800113c <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80025e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 808a 	beq.w	80026fe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ee:	f000 bdd2 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d066      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_RCC_OscConfig+0x280>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002606:	f7ff f8fd 	bl	8001804 <HAL_GetTick>
 800260a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800260c:	e009      	b.n	8002622 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800260e:	f7ff f8f9 	bl	8001804 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d902      	bls.n	8002622 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	f000 bdba 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ef      	beq.n	800260e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002638:	6093      	str	r3, [r2, #8]
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCC_OscConfig+0x280>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	4909      	ldr	r1, [pc, #36]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002654:	d30e      	bcc.n	8002674 <HAL_RCC_OscConfig+0x288>
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 021f 	bic.w	r2, r3, #31
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4902      	ldr	r1, [pc, #8]	; (800266c <HAL_RCC_OscConfig+0x280>)
 8002664:	4313      	orrs	r3, r2
 8002666:	60cb      	str	r3, [r1, #12]
 8002668:	e04a      	b.n	8002700 <HAL_RCC_OscConfig+0x314>
 800266a:	bf00      	nop
 800266c:	46020c00 	.word	0x46020c00
 8002670:	20000004 	.word	0x20000004
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	da0a      	bge.n	8002692 <HAL_RCC_OscConfig+0x2a6>
 800267c:	4b98      	ldr	r3, [pc, #608]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	015b      	lsls	r3, r3, #5
 800268a:	4995      	ldr	r1, [pc, #596]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
 8002690:	e036      	b.n	8002700 <HAL_RCC_OscConfig+0x314>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d30a      	bcc.n	80026b2 <HAL_RCC_OscConfig+0x2c6>
 800269c:	4b90      	ldr	r3, [pc, #576]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	498d      	ldr	r1, [pc, #564]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
 80026b0:	e026      	b.n	8002700 <HAL_RCC_OscConfig+0x314>
 80026b2:	4b8b      	ldr	r3, [pc, #556]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	03db      	lsls	r3, r3, #15
 80026c0:	4987      	ldr	r1, [pc, #540]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60cb      	str	r3, [r1, #12]
 80026c6:	e01b      	b.n	8002700 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80026c8:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a84      	ldr	r2, [pc, #528]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026d4:	f7ff f896 	bl	8001804 <HAL_GetTick>
 80026d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026dc:	f7ff f892 	bl	8001804 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	f000 bd53 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80026f0:	4b7b      	ldr	r3, [pc, #492]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ef      	bne.n	80026dc <HAL_RCC_OscConfig+0x2f0>
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 808b 	beq.w	8002824 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	2b08      	cmp	r3, #8
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x334>
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d109      	bne.n	800272e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	2b03      	cmp	r3, #3
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d17d      	bne.n	8002824 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f000 bd34 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x35a>
 8002738:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e041      	b.n	80027ca <HAL_RCC_OscConfig+0x3de>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800274e:	d112      	bne.n	8002776 <HAL_RCC_OscConfig+0x38a>
 8002750:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a62      	ldr	r2, [pc, #392]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	e029      	b.n	80027ca <HAL_RCC_OscConfig+0x3de>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3ba>
 8002780:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a53      	ldr	r2, [pc, #332]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b51      	ldr	r3, [pc, #324]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e011      	b.n	80027ca <HAL_RCC_OscConfig+0x3de>
 80027a6:	4b4e      	ldr	r3, [pc, #312]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4d      	ldr	r2, [pc, #308]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a47      	ldr	r2, [pc, #284]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80027d2:	f7ff f817 	bl	8001804 <HAL_GetTick>
 80027d6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027da:	f7ff f813 	bl	8001804 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	d902      	bls.n	80027ee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f000 bcd4 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ee:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ef      	beq.n	80027da <HAL_RCC_OscConfig+0x3ee>
 80027fa:	e013      	b.n	8002824 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80027fc:	f7ff f802 	bl	8001804 <HAL_GetTick>
 8002800:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002802:	e009      	b.n	8002818 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe fffe 	bl	8001804 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d902      	bls.n	8002818 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	f000 bcbf 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ef      	bne.n	8002804 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05f      	beq.n	80028f0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	2b04      	cmp	r3, #4
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x456>
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d114      	bne.n	8002866 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	2b02      	cmp	r3, #2
 8002840:	d111      	bne.n	8002866 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f000 bca3 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	4920      	ldr	r1, [pc, #128]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002864:	e044      	b.n	80028f0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d024      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800287a:	f7fe ffc3 	bl	8001804 <HAL_GetTick>
 800287e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002880:	e009      	b.n	8002896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe ffbf 	bl	8001804 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d902      	bls.n	8002896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	f000 bc80 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ef      	beq.n	8002882 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	490b      	ldr	r1, [pc, #44]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	610b      	str	r3, [r1, #16]
 80028b6:	e01b      	b.n	80028f0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_RCC_OscConfig+0x4f4>)
 80028be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80028c4:	f7fe ff9e 	bl	8001804 <HAL_GetTick>
 80028c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fe ff9a 	bl	8001804 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d904      	bls.n	80028e4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	f000 bc5b 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
 80028e0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	4baf      	ldr	r3, [pc, #700]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ed      	bne.n	80028cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80c8 	beq.w	8002a8e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002904:	4ba7      	ldr	r3, [pc, #668]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d111      	bne.n	8002936 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4ba4      	ldr	r3, [pc, #656]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002918:	4aa2      	ldr	r2, [pc, #648]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002922:	4ba0      	ldr	r3, [pc, #640]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002936:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d119      	bne.n	8002976 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002942:	4b99      	ldr	r3, [pc, #612]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	4a98      	ldr	r2, [pc, #608]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe ff59 	bl	8001804 <HAL_GetTick>
 8002952:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002954:	e009      	b.n	800296a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe ff55 	bl	8001804 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f000 bc16 	b.w	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800296a:	4b8f      	ldr	r3, [pc, #572]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ef      	beq.n	8002956 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d05f      	beq.n	8002a3e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002984:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	429a      	cmp	r2, r3
 8002992:	d037      	beq.n	8002a04 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e3f4      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d01b      	beq.n	80029ee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80029b6:	4b7b      	ldr	r3, [pc, #492]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 80029b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029bc:	4a79      	ldr	r2, [pc, #484]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 80029be:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80029c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80029c6:	f7fe ff1d 	bl	8001804 <HAL_GetTick>
 80029ca:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe ff19 	bl	8001804 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e3da      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80029e0:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 80029e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ef      	bne.n	80029ce <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80029ee:	4b6d      	ldr	r3, [pc, #436]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 80029f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4969      	ldr	r1, [pc, #420]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002a04:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002a14:	f7fe fef6 	bl	8001804 <HAL_GetTick>
 8002a18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fef2 	bl	8001804 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e3b3      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <HAL_RCC_OscConfig+0x630>
 8002a3c:	e01b      	b.n	8002a76 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002a3e:	4b59      	ldr	r3, [pc, #356]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a44:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a46:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002a4e:	f7fe fed9 	bl	8001804 <HAL_GetTick>
 8002a52:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe fed5 	bl	8001804 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e396      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a68:	4b4e      	ldr	r3, [pc, #312]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ef      	bne.n	8002a56 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a84:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8111 	beq.w	8002cbe <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ac0:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d118      	bne.n	8002b12 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002ae0:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aec:	f7fe fe8a 	bl	8001804 <HAL_GetTick>
 8002af0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af4:	f7fe fe86 	bl	8001804 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e347      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCC_OscConfig+0x7bc>)
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01f      	beq.n	8002b5e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d010      	beq.n	8002b4c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b40:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b4a:	e018      	b.n	8002b7e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b5c:	e00f      	b.n	8002b7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b64:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x7b8>)
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d057      	beq.n	8002c36 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002b86:	f7fe fe3d 	bl	8001804 <HAL_GetTick>
 8002b8a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fe39 	bl	8001804 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d905      	bls.n	8002bac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e2f8      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
 8002ba4:	46020c00 	.word	0x46020c00
 8002ba8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bac:	4b9c      	ldr	r3, [pc, #624]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0e9      	beq.n	8002b8e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bc6:	4b96      	ldr	r3, [pc, #600]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bcc:	4a94      	ldr	r2, [pc, #592]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fe14 	bl	8001804 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e2d3      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002bee:	4b8c      	ldr	r3, [pc, #560]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ed      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x7ec>
 8002bfc:	e053      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bfe:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c04:	4a86      	ldr	r2, [pc, #536]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fdf8 	bl	8001804 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e2b7      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c26:	4b7e      	ldr	r3, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ed      	bne.n	8002c10 <HAL_RCC_OscConfig+0x824>
 8002c34:	e037      	b.n	8002ca6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002c36:	f7fe fde5 	bl	8001804 <HAL_GetTick>
 8002c3a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fde1 	bl	8001804 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e2a0      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c54:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ed      	bne.n	8002c3e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01a      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c70:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c76:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fdbf 	bl	8001804 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e27e      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c98:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002c9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ed      	bne.n	8002c82 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cae:	4b5c      	ldr	r3, [pc, #368]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb4:	4a5a      	ldr	r2, [pc, #360]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002cb6:	f023 0304 	bic.w	r3, r3, #4
 8002cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d036      	beq.n	8002d38 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d019      	beq.n	8002d06 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002cd2:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cdc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002cde:	f7fe fd91 	bl	8001804 <HAL_GetTick>
 8002ce2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce6:	f7fe fd8d 	bl	8001804 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e24e      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002cf8:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x8fa>
 8002d04:	e018      	b.n	8002d38 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d10:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d12:	f7fe fd77 	bl	8001804 <HAL_GetTick>
 8002d16:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d1a:	f7fe fd73 	bl	8001804 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e234      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d2c:	4b3c      	ldr	r3, [pc, #240]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d036      	beq.n	8002db2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d019      	beq.n	8002d80 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002d4c:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a33      	ldr	r2, [pc, #204]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d58:	f7fe fd54 	bl	8001804 <HAL_GetTick>
 8002d5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002d60:	f7fe fd50 	bl	8001804 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e211      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002d72:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x974>
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d8c:	f7fe fd3a 	bl	8001804 <HAL_GetTick>
 8002d90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002d94:	f7fe fd36 	bl	8001804 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1f7      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d07f      	beq.n	8002ebe <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d062      	beq.n	8002e8c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd0:	6093      	str	r3, [r2, #8]
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	4910      	ldr	r1, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002dec:	d309      	bcc.n	8002e02 <HAL_RCC_OscConfig+0xa16>
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 021f 	bic.w	r2, r3, #31
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4909      	ldr	r1, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
 8002e00:	e02a      	b.n	8002e58 <HAL_RCC_OscConfig+0xa6c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da0c      	bge.n	8002e24 <HAL_RCC_OscConfig+0xa38>
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	4901      	ldr	r1, [pc, #4]	; (8002e20 <HAL_RCC_OscConfig+0xa34>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0xa6c>
 8002e20:	46020c00 	.word	0x46020c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d30a      	bcc.n	8002e44 <HAL_RCC_OscConfig+0xa58>
 8002e2e:	4ba1      	ldr	r3, [pc, #644]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	499d      	ldr	r1, [pc, #628]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60cb      	str	r3, [r1, #12]
 8002e42:	e009      	b.n	8002e58 <HAL_RCC_OscConfig+0xa6c>
 8002e44:	4b9b      	ldr	r3, [pc, #620]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	03db      	lsls	r3, r3, #15
 8002e52:	4998      	ldr	r1, [pc, #608]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002e58:	4b96      	ldr	r3, [pc, #600]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a95      	ldr	r2, [pc, #596]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e64:	f7fe fcce 	bl	8001804 <HAL_GetTick>
 8002e68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002e6c:	f7fe fcca 	bl	8001804 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e18b      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002e7e:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xa80>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002e8c:	4b89      	ldr	r3, [pc, #548]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a88      	ldr	r2, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002e92:	f023 0310 	bic.w	r3, r3, #16
 8002e96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e98:	f7fe fcb4 	bl	8001804 <HAL_GetTick>
 8002e9c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ea0:	f7fe fcb0 	bl	8001804 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e171      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002eb2:	4b80      	ldr	r3, [pc, #512]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8166 	beq.w	8003194 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ece:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	f000 80f2 	beq.w	80030c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	f040 80c5 	bne.w	8003070 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002ef2:	f7fe fc87 	bl	8001804 <HAL_GetTick>
 8002ef6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe fc83 	bl	8001804 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e144      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f0c:	4b69      	ldr	r3, [pc, #420]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f18:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d111      	bne.n	8002f4a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2c:	4a61      	ldr	r2, [pc, #388]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <HAL_RCC_OscConfig+0xccc>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_RCC_OscConfig+0xccc>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4a55      	ldr	r2, [pc, #340]	; (80030b8 <HAL_RCC_OscConfig+0xccc>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002f6a:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	0212      	lsls	r2, r2, #8
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	494a      	ldr	r1, [pc, #296]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f90:	4b48      	ldr	r3, [pc, #288]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f94:	4b49      	ldr	r3, [pc, #292]	; (80030bc <HAL_RCC_OscConfig+0xcd0>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	0252      	lsls	r2, r2, #9
 8002faa:	b292      	uxth	r2, r2
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fb2:	3a01      	subs	r2, #1
 8002fb4:	0412      	lsls	r2, r2, #16
 8002fb6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0612      	lsls	r2, r2, #24
 8002fc4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	493a      	ldr	r1, [pc, #232]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002fd0:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	4a37      	ldr	r2, [pc, #220]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002fd6:	f023 0310 	bic.w	r3, r3, #16
 8002fda:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002fe6:	4b33      	ldr	r3, [pc, #204]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	f023 020c 	bic.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	492d      	ldr	r1, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0xccc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <HAL_RCC_OscConfig+0xccc>)
 8003012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003016:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003018:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003046:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003048:	f7fe fbdc 	bl	8001804 <HAL_GetTick>
 800304c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe fbd8 	bl	8001804 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e099      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xc64>
 800306e:	e091      	b.n	8003194 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800307c:	f7fe fbc2 	bl	8001804 <HAL_GetTick>
 8003080:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fbbe 	bl	8001804 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e07f      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80030a2:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_RCC_OscConfig+0xcc8>)
 80030a8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80030ac:	f023 0303 	bic.w	r3, r3, #3
 80030b0:	6293      	str	r3, [r2, #40]	; 0x28
 80030b2:	e06f      	b.n	8003194 <HAL_RCC_OscConfig+0xda8>
 80030b4:	46020c00 	.word	0x46020c00
 80030b8:	46020800 	.word	0x46020800
 80030bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80030c0:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d039      	beq.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d132      	bne.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d129      	bne.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d122      	bne.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d11a      	bne.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	0a5b      	lsrs	r3, r3, #9
 8003116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d111      	bne.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d108      	bne.n	8003148 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e024      	b.n	8003196 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	08db      	lsrs	r3, r3, #3
 8003152:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800315a:	429a      	cmp	r2, r3
 800315c:	d01a      	beq.n	8003194 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fb4b 	bl	8001804 <HAL_GetTick>
 800316e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003170:	bf00      	nop
 8003172:	f7fe fb47 	bl	8001804 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	4293      	cmp	r3, r2
 800317c:	d0f9      	beq.n	8003172 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_RCC_OscConfig+0xdb4>)
 800318e:	f043 0310 	orr.w	r3, r3, #16
 8003192:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3738      	adds	r7, #56	; 0x38
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	46020c00 	.word	0x46020c00

080031a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e1d9      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b9b      	ldr	r3, [pc, #620]	; (8003428 <HAL_RCC_ClockConfig+0x284>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b98      	ldr	r3, [pc, #608]	; (8003428 <HAL_RCC_ClockConfig+0x284>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 020f 	bic.w	r2, r3, #15
 80031ce:	4996      	ldr	r1, [pc, #600]	; (8003428 <HAL_RCC_ClockConfig+0x284>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b94      	ldr	r3, [pc, #592]	; (8003428 <HAL_RCC_ClockConfig+0x284>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e1c1      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	4b8c      	ldr	r3, [pc, #560]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003200:	429a      	cmp	r2, r3
 8003202:	d908      	bls.n	8003216 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003204:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	4986      	ldr	r1, [pc, #536]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003212:	4313      	orrs	r3, r2
 8003214:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003230:	429a      	cmp	r2, r3
 8003232:	d909      	bls.n	8003248 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003234:	4b7d      	ldr	r3, [pc, #500]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	497a      	ldr	r1, [pc, #488]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003244:	4313      	orrs	r3, r2
 8003246:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4b74      	ldr	r3, [pc, #464]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003260:	429a      	cmp	r2, r3
 8003262:	d908      	bls.n	8003276 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b71      	ldr	r3, [pc, #452]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	496e      	ldr	r1, [pc, #440]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003272:	4313      	orrs	r3, r2
 8003274:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4b69      	ldr	r3, [pc, #420]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	429a      	cmp	r2, r3
 8003290:	d908      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003292:	4b66      	ldr	r3, [pc, #408]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4963      	ldr	r1, [pc, #396]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80d2 	beq.w	8003456 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d143      	bne.n	8003346 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032be:	4b5b      	ldr	r3, [pc, #364]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80032c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d110      	bne.n	80032ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b57      	ldr	r3, [pc, #348]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	4a56      	ldr	r2, [pc, #344]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80032de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	60bb      	str	r3, [r7, #8]
 80032e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80032ee:	f7fe fa89 	bl	8001804 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80032f4:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_RCC_ClockConfig+0x28c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00f      	beq.n	8003320 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003302:	f7fe fa7f 	bl	8001804 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e12b      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003314:	4b46      	ldr	r3, [pc, #280]	; (8003430 <HAL_RCC_ClockConfig+0x28c>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332c:	4a3f      	ldr	r2, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d121      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e112      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d115      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e106      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0fa      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003376:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0f2      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4926      	ldr	r1, [pc, #152]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003398:	f7fe fa34 	bl	8001804 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fe fa2c 	bl	8001804 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0d6      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d1ee      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x204>
 80033ca:	e044      	b.n	8003456 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d112      	bne.n	80033fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d6:	f7fe fa15 	bl	8001804 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0bf      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d1ee      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x232>
 80033f8:	e02d      	b.n	8003456 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d123      	bne.n	800344a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe f9fe 	bl	8001804 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0a8      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_RCC_ClockConfig+0x288>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_ClockConfig+0x260>
 8003426:	e016      	b.n	8003456 <HAL_RCC_ClockConfig+0x2b2>
 8003428:	40022000 	.word	0x40022000
 800342c:	46020c00 	.word	0x46020c00
 8003430:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe f9e6 	bl	8001804 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e090      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800344a:	4b4a      	ldr	r3, [pc, #296]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d010      	beq.n	8003484 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	429a      	cmp	r2, r3
 8003470:	d208      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003472:	4b40      	ldr	r3, [pc, #256]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	493d      	ldr	r1, [pc, #244]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <HAL_RCC_ClockConfig+0x3d4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d210      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b39      	ldr	r3, [pc, #228]	; (8003578 <HAL_RCC_ClockConfig+0x3d4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 020f 	bic.w	r2, r3, #15
 800349a:	4937      	ldr	r1, [pc, #220]	; (8003578 <HAL_RCC_ClockConfig+0x3d4>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_RCC_ClockConfig+0x3d4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e05b      	b.n	800356c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d010      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d208      	bcs.n	80034e2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4925      	ldr	r1, [pc, #148]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d209      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	4919      	ldr	r1, [pc, #100]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800352c:	429a      	cmp	r2, r3
 800352e:	d208      	bcs.n	8003542 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003530:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	490d      	ldr	r1, [pc, #52]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x3d0>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x3d8>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x3dc>)
 800355a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x3e0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fdeb 	bl	800113c <HAL_InitTick>
 8003566:	4603      	mov	r3, r0
 8003568:	73fb      	strb	r3, [r7, #15]

  return status;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	46020c00 	.word	0x46020c00
 8003578:	40022000 	.word	0x40022000
 800357c:	0800b8c0 	.word	0x0800b8c0
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b08b      	sub	sp, #44	; 0x2c
 800358c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003596:	4b78      	ldr	r3, [pc, #480]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x34>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b0c      	cmp	r3, #12
 80035b4:	d121      	bne.n	80035fa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d11e      	bne.n	80035fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80035bc:	4b6e      	ldr	r3, [pc, #440]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80035c8:	4b6b      	ldr	r3, [pc, #428]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035ce:	0b1b      	lsrs	r3, r3, #12
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e005      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80035d8:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	0f1b      	lsrs	r3, r3, #28
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035e4:	4a65      	ldr	r2, [pc, #404]	; (800377c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035f8:	e00d      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b04      	cmp	r3, #4
 8003604:	d102      	bne.n	800360c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003606:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	e004      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b08      	cmp	r3, #8
 8003610:	d101      	bne.n	8003616 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003612:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003614:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	f040 80a5 	bne.w	8003768 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800361e:	4b56      	ldr	r3, [pc, #344]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003636:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003642:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	08db      	lsrs	r3, r3, #3
 8003648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d003      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0xe4>
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d022      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x128>
 800366a:	e043      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003784 <HAL_RCC_GetSysClockFreq+0x1fc>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800368e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003692:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8003788 <HAL_RCC_GetSysClockFreq+0x200>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800369e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ae:	e046      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003784 <HAL_RCC_GetSysClockFreq+0x1fc>
 80036be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036d2:	ed97 6a01 	vldr	s12, [r7, #4]
 80036d6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8003788 <HAL_RCC_GetSysClockFreq+0x200>
 80036da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80036e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f2:	e024      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800371c:	ed97 6a01 	vldr	s12, [r7, #4]
 8003720:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003788 <HAL_RCC_GetSysClockFreq+0x200>
 8003724:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003728:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800372c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003730:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003738:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800373c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	0e1b      	lsrs	r3, r3, #24
 8003744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003748:	3301      	adds	r3, #1
 800374a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003756:	edd7 6a07 	vldr	s13, [r7, #28]
 800375a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003762:	ee17 3a90 	vmov	r3, s15
 8003766:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003768:	6a3b      	ldr	r3, [r7, #32]
}
 800376a:	4618      	mov	r0, r3
 800376c:	372c      	adds	r7, #44	; 0x2c
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	46020c00 	.word	0x46020c00
 800377c:	0800b8d8 	.word	0x0800b8d8
 8003780:	00f42400 	.word	0x00f42400
 8003784:	4b742400 	.word	0x4b742400
 8003788:	46000000 	.word	0x46000000

0800378c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003790:	f7ff fefa 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x28>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4906      	ldr	r1, [pc, #24]	; (80037b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80037a0:	5ccb      	ldrb	r3, [r1, r3]
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_RCC_GetHCLKFreq+0x30>)
 80037a8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <HAL_RCC_GetHCLKFreq+0x30>)
 80037ac:	681b      	ldr	r3, [r3, #0]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	46020c00 	.word	0x46020c00
 80037b8:	0800b8c0 	.word	0x0800b8c0
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80037c4:	f7ff ffe2 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	46020c00 	.word	0x46020c00
 80037e4:	0800b8d0 	.word	0x0800b8d0

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80037ec:	f7ff ffce 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	46020c00 	.word	0x46020c00
 800380c:	0800b8d0 	.word	0x0800b8d0

08003810 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003814:	f7ff ffba 	bl	800378c <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK3Freq+0x20>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4903      	ldr	r1, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	46020c00 	.word	0x46020c00
 8003834:	0800b8d0 	.word	0x0800b8d0

08003838 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	221f      	movs	r2, #31
 8003846:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_RCC_GetClockConfig+0x68>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 0203 	and.w	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_GetClockConfig+0x68>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_RCC_GetClockConfig+0x68>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_GetClockConfig+0x68>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_GetClockConfig+0x68>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_RCC_GetClockConfig+0x6c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 020f 	and.w	r2, r3, #15
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	601a      	str	r2, [r3, #0]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	46020c00 	.word	0x46020c00
 80038a4:	40022000 	.word	0x40022000

080038a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038be:	f7fe fd17 	bl	80022f0 <HAL_PWREx_GetVoltageRange>
 80038c2:	6178      	str	r0, [r7, #20]
 80038c4:	e019      	b.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038cc:	4a37      	ldr	r2, [pc, #220]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038ce:	f043 0304 	orr.w	r3, r3, #4
 80038d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80038d6:	4b35      	ldr	r3, [pc, #212]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7fe fd04 	bl	80022f0 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f0:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038f2:	f023 0304 	bic.w	r3, r3, #4
 80038f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003900:	d003      	beq.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003908:	d109      	bne.n	800391e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003910:	d202      	bcs.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003912:	2301      	movs	r3, #1
 8003914:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003916:	e033      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800391c:	e030      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003924:	d208      	bcs.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d102      	bne.n	8003934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800392e:	2303      	movs	r3, #3
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e025      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e035      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800393e:	d90f      	bls.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800394c:	d902      	bls.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e015      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003954:	2301      	movs	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e012      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e00f      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003966:	d109      	bne.n	800397c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d102      	bne.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003970:	2301      	movs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e004      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003976:	2302      	movs	r3, #2
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e001      	b.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800397c:	2301      	movs	r3, #1
 800397e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 020f 	bic.w	r2, r3, #15
 8003988:	4909      	ldr	r1, [pc, #36]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	46020c00 	.word	0x46020c00
 80039b0:	40022000 	.word	0x40022000

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b0b8      	sub	sp, #224	; 0xe0
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f002 0401 	and.w	r4, r2, #1
 80039d8:	2500      	movs	r5, #0
 80039da:	ea54 0305 	orrs.w	r3, r4, r5
 80039de:	d00b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80039e0:	4bca      	ldr	r3, [pc, #808]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e6:	f023 0103 	bic.w	r1, r3, #3
 80039ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	4ac6      	ldr	r2, [pc, #792]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f002 0802 	and.w	r8, r2, #2
 8003a04:	f04f 0900 	mov.w	r9, #0
 8003a08:	ea58 0309 	orrs.w	r3, r8, r9
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003a0e:	4bbf      	ldr	r3, [pc, #764]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a14:	f023 010c 	bic.w	r1, r3, #12
 8003a18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	4abb      	ldr	r2, [pc, #748]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a20:	430b      	orrs	r3, r1
 8003a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f002 0a04 	and.w	sl, r2, #4
 8003a32:	f04f 0b00 	mov.w	fp, #0
 8003a36:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a3a:	d00b      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a3c:	4bb3      	ldr	r3, [pc, #716]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	4aaf      	ldr	r2, [pc, #700]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f002 0308 	and.w	r3, r2, #8
 8003a60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003a74:	4ba5      	ldr	r3, [pc, #660]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	4aa1      	ldr	r2, [pc, #644]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f002 0310 	and.w	r3, r2, #16
 8003a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003aa2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003aac:	4b97      	ldr	r3, [pc, #604]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	4a93      	ldr	r2, [pc, #588]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 0320 	and.w	r3, r2, #32
 8003ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ada:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ae4:	4b89      	ldr	r3, [pc, #548]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aea:	f023 0107 	bic.w	r1, r3, #7
 8003aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af4:	4a85      	ldr	r2, [pc, #532]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b1c:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b22:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2c:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003b40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b4a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b54:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b64:	4a69      	ldr	r2, [pc, #420]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b8c:	4b5f      	ldr	r3, [pc, #380]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a5b      	ldr	r2, [pc, #364]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003bba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003bc4:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bca:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8003bce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd4:	4a4d      	ldr	r2, [pc, #308]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bf2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003bfc:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c02:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8003c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0c:	4a3f      	ldr	r2, [pc, #252]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c3a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003c3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c44:	4a31      	ldr	r2, [pc, #196]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c5e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	d00c      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003c68:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c7a:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c90:	2300      	movs	r3, #0
 8003c92:	677b      	str	r3, [r7, #116]	; 0x74
 8003c94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d04f      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d02d      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d827      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cae:	2b60      	cmp	r3, #96	; 0x60
 8003cb0:	d02e      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003cb2:	2b60      	cmp	r3, #96	; 0x60
 8003cb4:	d823      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d006      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d81f      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d011      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003cc6:	e01a      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd4:	e01d      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cda:	3308      	adds	r3, #8
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 f9d1 	bl	8006084 <RCCEx_PLL2_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ce8:	e013      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cee:	332c      	adds	r3, #44	; 0x2c
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 fa5f 	bl	80061b4 <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cfc:	e009      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003d04:	e005      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8003d06:	bf00      	nop
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003d0a:	bf00      	nop
 8003d0c:	46020c00 	.word	0x46020c00
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d1a:	4bb6      	ldr	r3, [pc, #728]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d20:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8003d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	4ab1      	ldr	r2, [pc, #708]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d34:	e003      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003d3a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d50:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d053      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003d5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d033      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d82c      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d02f      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d78:	d826      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d820      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d011      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003d90:	e01a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d92:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	4a97      	ldr	r2, [pc, #604]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d9e:	e01a      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003da4:	3308      	adds	r3, #8
 8003da6:	4618      	mov	r0, r3
 8003da8:	f002 f96c 	bl	8006084 <RCCEx_PLL2_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003db2:	e010      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003db8:	332c      	adds	r3, #44	; 0x2c
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 f9fa 	bl	80061b4 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003dc6:	e006      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003dde:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003de4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df0:	4a80      	ldr	r2, [pc, #512]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003df2:	430b      	orrs	r3, r1
 8003df4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003dfe:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003e02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e10:	2300      	movs	r3, #0
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
 8003e14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	d046      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003e1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e2a:	d028      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e2c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e30:	d821      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e36:	d022      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3c:	d81b      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e42:	d01c      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e48:	d815      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e54:	d80f      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	d00e      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e60:	e009      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e66:	3308      	adds	r3, #8
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 f90b 	bl	8006084 <RCCEx_PLL2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e80:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e88:	4b5a      	ldr	r3, [pc, #360]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e8e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e9a:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003ea8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eba:	2300      	movs	r3, #0
 8003ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ebe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	d03f      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d81e      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003f1b 	.word	0x08003f1b
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003eff 	.word	0x08003eff
 8003ee8:	08003f1b 	.word	0x08003f1b
 8003eec:	08003f1b 	.word	0x08003f1b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ef0:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003efc:	e00e      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f02:	332c      	adds	r3, #44	; 0x2c
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 f955 	bl	80061b4 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8003f1a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f1c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003f24:	4b33      	ldr	r3, [pc, #204]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f2a:	f023 0107 	bic.w	r1, r3, #7
 8003f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	4a2f      	ldr	r2, [pc, #188]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f3e:	e003      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003f44:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
 8003f56:	2300      	movs	r3, #0
 8003f58:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	d04d      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003f72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f76:	d821      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f7c:	d024      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003f7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f82:	d81b      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f88:	d00e      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f8e:	d815      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d110      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003fa6:	e012      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fac:	332c      	adds	r3, #44	; 0x2c
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f002 f900 	bl	80061b4 <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003fba:	e008      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003fcc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003fce:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d110      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fdc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe8:	4a02      	ldr	r2, [pc, #8]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ff2:	bf00      	nop
 8003ff4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003ffc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
 800400e:	2300      	movs	r3, #0
 8004010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004012:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	f000 80b5 	beq.w	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004024:	4b9d      	ldr	r3, [pc, #628]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4b9a      	ldr	r3, [pc, #616]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004038:	4a98      	ldr	r2, [pc, #608]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004042:	4b96      	ldr	r3, [pc, #600]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004050:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800405a:	4b91      	ldr	r3, [pc, #580]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	4a90      	ldr	r2, [pc, #576]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004066:	f7fd fbcd 	bl	8001804 <HAL_GetTick>
 800406a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800406e:	e00b      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7fd fbc8 	bl	8001804 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d903      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004086:	e005      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004088:	4b85      	ldr	r3, [pc, #532]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ed      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004094:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004098:	2b00      	cmp	r3, #0
 800409a:	d165      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800409c:	4b7f      	ldr	r3, [pc, #508]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800409e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80040aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d023      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x746>
 80040b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040b6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80040ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01b      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040d0:	4b72      	ldr	r3, [pc, #456]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040d6:	4a71      	ldr	r2, [pc, #452]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040e0:	4b6e      	ldr	r3, [pc, #440]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040e6:	4a6d      	ldr	r2, [pc, #436]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040f0:	4a6a      	ldr	r2, [pc, #424]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d019      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fd fb7d 	bl	8001804 <HAL_GetTick>
 800410a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410e:	e00d      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd fb78 	bl	8001804 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004120:	429a      	cmp	r2, r3
 8004122:	d903      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 800412a:	e006      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412c:	4b5b      	ldr	r3, [pc, #364]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800412e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ea      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800413a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004148:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800414c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004150:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004154:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004156:	430b      	orrs	r3, r1
 8004158:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800415c:	e008      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800415e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004162:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8004166:	e003      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800416c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004170:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004174:	2b01      	cmp	r3, #1
 8004176:	d107      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b48      	ldr	r3, [pc, #288]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417e:	4a47      	ldr	r2, [pc, #284]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
 8004196:	2300      	movs	r3, #0
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
 800419a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d042      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80041a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041b0:	d022      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80041b2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041b6:	d81b      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041bc:	d011      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80041be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c2:	d815      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d019      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x848>
 80041c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041cc:	d110      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041d2:	3308      	adds	r3, #8
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 ff55 	bl	8006084 <RCCEx_PLL2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80041e0:	e00d      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80041fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041fe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004206:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800420c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004218:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800421a:	430b      	orrs	r3, r1
 800421c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004220:	e003      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004226:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800422a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004236:	63bb      	str	r3, [r7, #56]	; 0x38
 8004238:	2300      	movs	r3, #0
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d032      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004252:	d00b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004258:	d804      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004262:	d007      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004274:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004276:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800427a:	2b00      	cmp	r3, #0
 800427c:	d112      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004284:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800428c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004290:	4a02      	ldr	r2, [pc, #8]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004292:	430b      	orrs	r3, r1
 8004294:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004298:	e008      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800429a:	bf00      	nop
 800429c:	46020c00 	.word	0x46020c00
 80042a0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80042a8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80042ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	2300      	movs	r3, #0
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
 80042be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	d019      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80042c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d4:	d105      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042d6:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	4a87      	ldr	r2, [pc, #540]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80042e2:	4b85      	ldr	r3, [pc, #532]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80042ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042f4:	4a80      	ldr	r2, [pc, #512]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80042fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	2300      	movs	r3, #0
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d00c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004318:	4b77      	ldr	r3, [pc, #476]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800432a:	4973      	ldr	r1, [pc, #460]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
 8004344:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d00c      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800434e:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800435c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004360:	4965      	ldr	r1, [pc, #404]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800437e:	460b      	mov	r3, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	d00c      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004384:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800438a:	f023 0218 	bic.w	r2, r3, #24
 800438e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004392:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004396:	4958      	ldr	r1, [pc, #352]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800439e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d032      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80043ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c6:	d105      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	4a4a      	ldr	r2, [pc, #296]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d2:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80043d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043e0:	d108      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043e6:	3308      	adds	r3, #8
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 fe4b 	bl	8006084 <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 80043f4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80043fc:	4b3e      	ldr	r3, [pc, #248]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004402:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004406:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800440a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800440e:	493a      	ldr	r1, [pc, #232]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800441c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d03a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800443c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004448:	d00e      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800444a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444e:	d815      	bhi.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004458:	d110      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004464:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004466:	e00e      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800446c:	3308      	adds	r3, #8
 800446e:	4618      	mov	r0, r3
 8004470:	f001 fe08 	bl	8006084 <RCCEx_PLL2_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800447a:	e004      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004484:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004486:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004494:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800449c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a0:	4915      	ldr	r1, [pc, #84]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80044ae:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80044b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d00c      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044e0:	4905      	ldr	r1, [pc, #20]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044e8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	37e0      	adds	r7, #224	; 0xe0
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	46020c00 	.word	0x46020c00

080044fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004504:	4ba6      	ldr	r3, [pc, #664]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800450e:	4ba4      	ldr	r3, [pc, #656]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004518:	4ba1      	ldr	r3, [pc, #644]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	3301      	adds	r3, #1
 8004524:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004526:	4b9e      	ldr	r3, [pc, #632]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004532:	4b9b      	ldr	r3, [pc, #620]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b03      	cmp	r3, #3
 8004552:	d062      	beq.n	800461a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b03      	cmp	r3, #3
 8004558:	f200 8081 	bhi.w	800465e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d024      	beq.n	80045ac <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d17a      	bne.n	800465e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457a:	4b89      	ldr	r3, [pc, #548]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800458a:	ed97 6a02 	vldr	s12, [r7, #8]
 800458e:	eddf 5a86 	vldr	s11, [pc, #536]	; 80047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004592:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004596:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800459a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045aa:	e08f      	b.n	80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80045ac:	4b7c      	ldr	r3, [pc, #496]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80045b8:	4b79      	ldr	r3, [pc, #484]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	0f1b      	lsrs	r3, r3, #28
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	e006      	b.n	80045d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80045c4:	4b76      	ldr	r3, [pc, #472]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80045c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	0f1b      	lsrs	r3, r3, #28
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	4a76      	ldr	r2, [pc, #472]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80045d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d8:	ee07 3a90 	vmov	s15, r3
 80045dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80045fc:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004618:	e058      	b.n	80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004624:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462c:	4b5c      	ldr	r3, [pc, #368]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800463c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004640:	eddf 5a59 	vldr	s11, [pc, #356]	; 80047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004644:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004648:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800464c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004650:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800465c:	e036      	b.n	80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800465e:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800466a:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	0f1b      	lsrs	r3, r3, #28
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	4a49      	ldr	r2, [pc, #292]	; (80047ac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ae:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80047a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80046cc:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80046ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80046f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fe:	ee17 2a90 	vmov	r2, s15
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e002      	b.n	800470e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d017      	beq.n	800474a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800472c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004730:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004734:	edd7 6a07 	vldr	s13, [r7, #28]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004750:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d017      	beq.n	800478c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800476e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004772:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004776:	edd7 6a07 	vldr	s13, [r7, #28]
 800477a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004782:	ee17 2a90 	vmov	r2, s15
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800478a:	e002      	b.n	8004792 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	bf00      	nop
 8004794:	3724      	adds	r7, #36	; 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	46020c00 	.word	0x46020c00
 80047a4:	4b742400 	.word	0x4b742400
 80047a8:	46000000 	.word	0x46000000
 80047ac:	0800b8d8 	.word	0x0800b8d8

080047b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80047b8:	4ba6      	ldr	r3, [pc, #664]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80047c2:	4ba4      	ldr	r3, [pc, #656]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80047cc:	4ba1      	ldr	r3, [pc, #644]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3301      	adds	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80047da:	4b9e      	ldr	r3, [pc, #632]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80047e6:	4b9b      	ldr	r3, [pc, #620]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d062      	beq.n	80048ce <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b03      	cmp	r3, #3
 800480c:	f200 8081 	bhi.w	8004912 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d024      	beq.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d17a      	bne.n	8004912 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b89      	ldr	r3, [pc, #548]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800483e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004842:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485e:	e08f      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004860:	4b7c      	ldr	r3, [pc, #496]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800486c:	4b79      	ldr	r3, [pc, #484]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	0f1b      	lsrs	r3, r3, #28
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	e006      	b.n	8004886 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004878:	4b76      	ldr	r3, [pc, #472]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800487a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	0f1b      	lsrs	r3, r3, #28
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	4a76      	ldr	r2, [pc, #472]	; (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	ee07 3a90 	vmov	s15, r3
 80048a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b0:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80048b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80048c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048cc:	e058      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	ee07 3a90 	vmov	s15, r3
 80048d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d8:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80048dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e0:	4b5c      	ldr	r3, [pc, #368]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f4:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80048f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80048fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004904:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004910:	e036      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004912:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800491e:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0f1b      	lsrs	r3, r3, #28
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800492c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	0f1b      	lsrs	r3, r3, #28
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	4a49      	ldr	r2, [pc, #292]	; (8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800493a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004962:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800497e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004980:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d017      	beq.n	80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800498c:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	0a5b      	lsrs	r3, r3, #9
 8004992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800499e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b2:	ee17 2a90 	vmov	r2, s15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80049e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80049e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f4:	ee17 2a90 	vmov	r2, s15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d017      	beq.n	8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a26:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a36:	ee17 2a90 	vmov	r2, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a3e:	e002      	b.n	8004a46 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	609a      	str	r2, [r3, #8]
}
 8004a46:	bf00      	nop
 8004a48:	3724      	adds	r7, #36	; 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	46020c00 	.word	0x46020c00
 8004a58:	4b742400 	.word	0x4b742400
 8004a5c:	46000000 	.word	0x46000000
 8004a60:	0800b8d8 	.word	0x0800b8d8

08004a64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004a6c:	4ba6      	ldr	r3, [pc, #664]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a74:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004a76:	4ba4      	ldr	r3, [pc, #656]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004a80:	4ba1      	ldr	r3, [pc, #644]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004a8e:	4b9e      	ldr	r3, [pc, #632]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004a9a:	4b9b      	ldr	r3, [pc, #620]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d062      	beq.n	8004b82 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	f200 8081 	bhi.w	8004bc6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d024      	beq.n	8004b14 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d17a      	bne.n	8004bc6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae2:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004af6:	eddf 5a86 	vldr	s11, [pc, #536]	; 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004b12:	e08f      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b14:	4b7c      	ldr	r3, [pc, #496]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004b20:	4b79      	ldr	r3, [pc, #484]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	0f1b      	lsrs	r3, r3, #28
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	e006      	b.n	8004b3a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004b2c:	4b76      	ldr	r3, [pc, #472]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	0f1b      	lsrs	r3, r3, #28
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a76      	ldr	r2, [pc, #472]	; (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b60:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b64:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b80:	e058      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b94:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ba8:	eddf 5a59 	vldr	s11, [pc, #356]	; 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bc4:	e036      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004bc6:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004bd2:	4b4d      	ldr	r3, [pc, #308]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004bde:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	0f1b      	lsrs	r3, r3, #28
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	4a49      	ldr	r2, [pc, #292]	; (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c16:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c32:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004c34:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d017      	beq.n	8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c40:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	0a5b      	lsrs	r3, r3, #9
 8004c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004c52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c66:	ee17 2a90 	vmov	r2, s15
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e002      	b.n	8004c76 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004c76:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d017      	beq.n	8004cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c82:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004c94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c98:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca8:	ee17 2a90 	vmov	r2, s15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004cb8:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cc4:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004cd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cda:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cea:	ee17 2a90 	vmov	r2, s15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cf2:	e002      	b.n	8004cfa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
}
 8004cfa:	bf00      	nop
 8004cfc:	3724      	adds	r7, #36	; 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	46020c00 	.word	0x46020c00
 8004d0c:	4b742400 	.word	0x4b742400
 8004d10:	46000000 	.word	0x46000000
 8004d14:	0800b8d8 	.word	0x0800b8d8

08004d18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08e      	sub	sp, #56	; 0x38
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d26:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	d145      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d2e:	4baa      	ldr	r3, [pc, #680]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004d3a:	4ba7      	ldr	r3, [pc, #668]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d108      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	d104      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
 8004d56:	f001 b987 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004d5a:	4b9f      	ldr	r3, [pc, #636]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d68:	d114      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d70:	d110      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d72:	4b99      	ldr	r3, [pc, #612]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d80:	d103      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004d82:	23fa      	movs	r3, #250	; 0xfa
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d86:	f001 b96f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d8a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d90:	f001 b96a 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004d94:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da0:	d107      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da8:	d103      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004daa:	4b8c      	ldr	r3, [pc, #560]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004dac:	637b      	str	r3, [r7, #52]	; 0x34
 8004dae:	f001 b95b 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
 8004db6:	f001 b957 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbe:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	d151      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004dc6:	4b84      	ldr	r3, [pc, #528]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004dc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004dcc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d035      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2b80      	cmp	r3, #128	; 0x80
 8004ddc:	d841      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	2b60      	cmp	r3, #96	; 0x60
 8004de2:	d02a      	beq.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	2b60      	cmp	r3, #96	; 0x60
 8004de8:	d83b      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d009      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d835      	bhi.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00c      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d012      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004e02:	e02e      	b.n	8004e62 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fb77 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e12:	f001 b929 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e16:	f107 0318 	add.w	r3, r7, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fcc8 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e24:	f001 b920 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e28:	f107 030c 	add.w	r3, r7, #12
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fe19 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e36:	f001 b917 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e40:	f001 b912 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e44:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e50:	d103      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004e52:	4b63      	ldr	r3, [pc, #396]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e56:	f001 b907 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e5e:	f001 b903 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e66:	f001 b8ff 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004e72:	430b      	orrs	r3, r1
 8004e74:	d158      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004e76:	4b58      	ldr	r3, [pc, #352]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e88:	d03b      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e90:	d846      	bhi.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea0:	d83e      	bhi.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb0:	d836      	bhi.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	d012      	beq.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004ec0:	e02e      	b.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fb18 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ed0:	f001 b8ca 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed4:	f107 0318 	add.w	r3, r7, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fc69 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ee2:	f001 b8c1 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fdba 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ef4:	f001 b8b8 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ef8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004efe:	f001 b8b3 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f02:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0e:	d103      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f14:	f001 b8a8 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f1c:	f001 b8a4 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f24:	f001 b8a0 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f2c:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004f30:	430b      	orrs	r3, r1
 8004f32:	d16e      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f3a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f46:	d034      	beq.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004f4e:	d85c      	bhi.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5e:	d854      	bhi.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004f6e:	e04c      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fac1 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f7e:	f001 b873 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f82:	f107 0318 	add.w	r3, r7, #24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fc12 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f90:	f001 b86a 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004f94:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d103      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fa6:	f001 b85f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fae:	f001 b85b 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d121      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8004fca:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0e1b      	lsrs	r3, r3, #24
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	e00f      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004fd6:	bf00      	nop
 8004fd8:	46020c00 	.word	0x46020c00
 8004fdc:	0007a120 	.word	0x0007a120
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	02dc6c00 	.word	0x02dc6c00
 8004fe8:	4ba7      	ldr	r3, [pc, #668]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	0e1b      	lsrs	r3, r3, #24
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4aa5      	ldr	r2, [pc, #660]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ffe:	f001 b833 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005006:	f001 b82f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800500e:	f001 b82b 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005016:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800501a:	430b      	orrs	r3, r1
 800501c:	d17f      	bne.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800501e:	4b9a      	ldr	r3, [pc, #616]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b00      	cmp	r3, #0
 800502e:	d165      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005030:	4b95      	ldr	r3, [pc, #596]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005036:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800503a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005042:	d034      	beq.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800504a:	d853      	bhi.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005052:	d00b      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800505a:	d84b      	bhi.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005068:	d009      	beq.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800506a:	e043      	b.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800506c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fa43 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800507a:	f000 bff5 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800507e:	f107 0318 	add.w	r3, r7, #24
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fb94 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800508c:	f000 bfec 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005090:	4b7d      	ldr	r3, [pc, #500]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509c:	d103      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800509e:	4b7c      	ldr	r3, [pc, #496]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80050a2:	f000 bfe1 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050aa:	f000 bfdd 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80050ae:	4b76      	ldr	r3, [pc, #472]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d118      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050ba:	4b73      	ldr	r3, [pc, #460]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80050c6:	4b70      	ldr	r3, [pc, #448]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0e1b      	lsrs	r3, r3, #24
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	e006      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80050d2:	4b6d      	ldr	r3, [pc, #436]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80050d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	0e1b      	lsrs	r3, r3, #24
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	4a6a      	ldr	r2, [pc, #424]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80050e8:	f000 bfbe 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050f0:	f000 bfba 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80050f8:	f000 bfb6 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005102:	d108      	bne.n	8005116 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f9f7 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
 8005112:	f000 bfa9 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
 800511a:	f000 bfa5 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800511e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005122:	1e51      	subs	r1, r2, #1
 8005124:	430b      	orrs	r3, r1
 8005126:	d136      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005128:	4b57      	ldr	r3, [pc, #348]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800512a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800513a:	f7fe fb55 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 800513e:	6378      	str	r0, [r7, #52]	; 0x34
 8005140:	f000 bf92 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	2b01      	cmp	r3, #1
 8005148:	d104      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800514a:	f7fe fa1d 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 800514e:	6378      	str	r0, [r7, #52]	; 0x34
 8005150:	f000 bf8a 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005154:	4b4c      	ldr	r3, [pc, #304]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d106      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	2b02      	cmp	r3, #2
 8005166:	d103      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005168:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	f000 bf7c 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005170:	4b45      	ldr	r3, [pc, #276]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b02      	cmp	r3, #2
 800517c:	d107      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	2b03      	cmp	r3, #3
 8005182:	d104      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
 800518a:	f000 bf6d 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
 8005192:	f000 bf69 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800519a:	1e91      	subs	r1, r2, #2
 800519c:	430b      	orrs	r3, r1
 800519e:	d136      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80051a0:	4b39      	ldr	r3, [pc, #228]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7fe fb05 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80051b6:	6378      	str	r0, [r7, #52]	; 0x34
 80051b8:	f000 bf56 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d104      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051c2:	f7fe f9e1 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 80051c6:	6378      	str	r0, [r7, #52]	; 0x34
 80051c8:	f000 bf4e 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80051cc:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d8:	d106      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d103      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80051e0:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80051e2:	637b      	str	r3, [r7, #52]	; 0x34
 80051e4:	f000 bf40 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d107      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d104      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80051fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
 8005202:	f000 bf31 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	f000 bf2d 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800520e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005212:	1f11      	subs	r1, r2, #4
 8005214:	430b      	orrs	r3, r1
 8005216:	d13f      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800521a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800521e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005222:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2b00      	cmp	r3, #0
 8005228:	d104      	bne.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800522a:	f7fe fac9 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 800522e:	6378      	str	r0, [r7, #52]	; 0x34
 8005230:	f000 bf1a 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2b10      	cmp	r3, #16
 8005238:	d104      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800523a:	f7fe f9a5 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 800523e:	6378      	str	r0, [r7, #52]	; 0x34
 8005240:	f000 bf12 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005244:	4b10      	ldr	r3, [pc, #64]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005250:	d106      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	2b20      	cmp	r3, #32
 8005256:	d103      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
 800525c:	f000 bf04 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b02      	cmp	r3, #2
 800526c:	d107      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d104      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8005274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	f000 bef5 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	f000 bef1 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005286:	bf00      	nop
 8005288:	46020c00 	.word	0x46020c00
 800528c:	0800b8d8 	.word	0x0800b8d8
 8005290:	02dc6c00 	.word	0x02dc6c00
 8005294:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529c:	f1a2 0108 	sub.w	r1, r2, #8
 80052a0:	430b      	orrs	r3, r1
 80052a2:	d136      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80052a4:	4ba4      	ldr	r3, [pc, #656]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80052a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80052b6:	f7fe fa83 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80052ba:	6378      	str	r0, [r7, #52]	; 0x34
 80052bc:	f000 bed4 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d104      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe f95f 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 80052ca:	6378      	str	r0, [r7, #52]	; 0x34
 80052cc:	f000 becc 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80052d0:	4b99      	ldr	r3, [pc, #612]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052dc:	d106      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	2b80      	cmp	r3, #128	; 0x80
 80052e2:	d103      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80052e4:	4b95      	ldr	r3, [pc, #596]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
 80052e8:	f000 bebe 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80052ec:	4b92      	ldr	r3, [pc, #584]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80052ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d107      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2bc0      	cmp	r3, #192	; 0xc0
 80052fe:	d104      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
 8005306:	f000 beaf 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
 800530e:	f000 beab 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005316:	f1a2 0110 	sub.w	r1, r2, #16
 800531a:	430b      	orrs	r3, r1
 800531c:	d139      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800531e:	4b86      	ldr	r3, [pc, #536]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005330:	f7fe fa46 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005334:	6378      	str	r0, [r7, #52]	; 0x34
 8005336:	f000 be97 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005340:	d104      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005342:	f7fe f921 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005346:	6378      	str	r0, [r7, #52]	; 0x34
 8005348:	f000 be8e 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800534c:	4b7a      	ldr	r3, [pc, #488]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005358:	d107      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005360:	d103      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8005362:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	f000 be7f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800536a:	4b73      	ldr	r3, [pc, #460]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800536c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d108      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537e:	d104      	bne.n	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	f000 be6f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	f000 be6b 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005396:	f1a2 0120 	sub.w	r1, r2, #32
 800539a:	430b      	orrs	r3, r1
 800539c:	d158      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800539e:	4b66      	ldr	r3, [pc, #408]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80053b0:	f7fe fa2e 	bl	8003810 <HAL_RCC_GetPCLK3Freq>
 80053b4:	6378      	str	r0, [r7, #52]	; 0x34
 80053b6:	f000 be57 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d104      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053c0:	f7fe f8e2 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 80053c4:	6378      	str	r0, [r7, #52]	; 0x34
 80053c6:	f000 be4f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80053ca:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d6:	d106      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d103      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80053de:	4b57      	ldr	r3, [pc, #348]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
 80053e2:	f000 be41 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80053e6:	4b54      	ldr	r3, [pc, #336]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80053e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d107      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d104      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005400:	f000 be32 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005404:	4b4c      	ldr	r3, [pc, #304]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b20      	cmp	r3, #32
 800540e:	d11b      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2b04      	cmp	r3, #4
 8005414:	d118      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005416:	4b48      	ldr	r3, [pc, #288]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0e1b      	lsrs	r3, r3, #24
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	e006      	b.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800542e:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	0e1b      	lsrs	r3, r3, #24
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	4a40      	ldr	r2, [pc, #256]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800543e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
 8005444:	f000 be10 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	637b      	str	r3, [r7, #52]	; 0x34
 800544c:	f000 be0c 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005454:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005458:	430b      	orrs	r3, r1
 800545a:	d173      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800545e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005462:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005466:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d104      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005470:	f7fe f88a 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005474:	6378      	str	r0, [r7, #52]	; 0x34
 8005476:	f000 bdf7 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005480:	d108      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005482:	f107 0318 	add.w	r3, r7, #24
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f992 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
 8005490:	f000 bdea 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800549a:	f7fe f977 	bl	800378c <HAL_RCC_GetHCLKFreq>
 800549e:	6378      	str	r0, [r7, #52]	; 0x34
 80054a0:	f000 bde2 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80054aa:	d122      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d118      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054b8:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80054c4:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	0e1b      	lsrs	r3, r3, #24
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	e006      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80054e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
 80054e6:	f000 bdbf 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	637b      	str	r3, [r7, #52]	; 0x34
 80054ee:	f000 bdbb 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054fe:	d107      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005506:	d103      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
 800550c:	f000 bdac 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551c:	d107      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005524:	d103      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
 800552a:	f000 bd9d 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	f000 bd99 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005536:	bf00      	nop
 8005538:	46020c00 	.word	0x46020c00
 800553c:	00f42400 	.word	0x00f42400
 8005540:	0800b8d8 	.word	0x0800b8d8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005548:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800554c:	430b      	orrs	r3, r1
 800554e:	d158      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005550:	4bad      	ldr	r3, [pc, #692]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2b04      	cmp	r3, #4
 8005560:	d84b      	bhi.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	080055a1 	.word	0x080055a1
 800556c:	0800557d 	.word	0x0800557d
 8005570:	0800558f 	.word	0x0800558f
 8005574:	080055ab 	.word	0x080055ab
 8005578:	080055b5 	.word	0x080055b5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800557c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe ffbb 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800558a:	f000 bd6d 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fa66 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800559c:	f000 bd64 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80055a0:	f7fe f8f4 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80055a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80055a6:	f000 bd5f 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80055aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055b0:	f000 bd5a 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055b4:	4b94      	ldr	r3, [pc, #592]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d118      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055c0:	4b91      	ldr	r3, [pc, #580]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80055cc:	4b8e      	ldr	r3, [pc, #568]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	0e1b      	lsrs	r3, r3, #24
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	e006      	b.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80055d8:	4b8b      	ldr	r3, [pc, #556]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80055da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	0e1b      	lsrs	r3, r3, #24
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	4a89      	ldr	r2, [pc, #548]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80055e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055ee:	f000 bd3b 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055f6:	f000 bd37 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055fe:	f000 bd33 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005606:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800560a:	430b      	orrs	r3, r1
 800560c:	d167      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800560e:	4b7e      	ldr	r3, [pc, #504]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005614:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005618:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005620:	d036      	beq.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005628:	d855      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005630:	d029      	beq.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005638:	d84d      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005640:	d013      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005648:	d845      	bhi.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d13e      	bne.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe ff4d 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005666:	f000 bcff 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800566a:	f107 030c 	add.w	r3, r7, #12
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff f9f8 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005678:	f000 bcf6 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800567c:	f7fe f886 	bl	800378c <HAL_RCC_GetHCLKFreq>
 8005680:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005682:	f000 bcf1 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005686:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800568c:	f000 bcec 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005690:	4b5d      	ldr	r3, [pc, #372]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b20      	cmp	r3, #32
 800569a:	d118      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800569c:	4b5a      	ldr	r3, [pc, #360]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80056a8:	4b57      	ldr	r3, [pc, #348]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	0e1b      	lsrs	r3, r3, #24
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	e006      	b.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80056b4:	4b54      	ldr	r3, [pc, #336]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80056c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056ca:	f000 bccd 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056d2:	f000 bcc9 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056da:	f000 bcc5 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80056de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80056e6:	430b      	orrs	r3, r1
 80056e8:	d14c      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80056ea:	4b47      	ldr	r3, [pc, #284]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80056ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fe f860 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005700:	6378      	str	r0, [r7, #52]	; 0x34
 8005702:	f000 bcb1 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d104      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800570e:	f7fd ff3b 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005712:	6378      	str	r0, [r7, #52]	; 0x34
 8005714:	f000 bca8 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005718:	4b3b      	ldr	r3, [pc, #236]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d107      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572c:	d103      	bne.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	f000 bc99 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005736:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b20      	cmp	r3, #32
 8005740:	d11c      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005748:	d118      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800574a:	4b2f      	ldr	r3, [pc, #188]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8005756:	4b2c      	ldr	r3, [pc, #176]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8005762:	4b29      	ldr	r3, [pc, #164]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	f000 bc76 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	f000 bc72 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005788:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800578c:	430b      	orrs	r3, r1
 800578e:	d152      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005790:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005796:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800579a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80057a2:	f7fe f80d 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80057a6:	6378      	str	r0, [r7, #52]	; 0x34
 80057a8:	f000 bc5e 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d104      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80057b4:	f7fd fee8 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 80057b8:	6378      	str	r0, [r7, #52]	; 0x34
 80057ba:	f000 bc55 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ca:	d107      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d2:	d103      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
 80057d8:	f000 bc46 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d122      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057ee:	d11e      	bne.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80057fc:	4b02      	ldr	r3, [pc, #8]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	0e1b      	lsrs	r3, r3, #24
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	e00c      	b.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8005808:	46020c00 	.word	0x46020c00
 800580c:	0800b8d8 	.word	0x0800b8d8
 8005810:	00f42400 	.word	0x00f42400
 8005814:	4ba1      	ldr	r3, [pc, #644]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	0e1b      	lsrs	r3, r3, #24
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	4a9f      	ldr	r2, [pc, #636]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	f000 bc1d 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	f000 bc19 	b.w	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800583e:	430b      	orrs	r3, r1
 8005840:	d151      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005842:	4b96      	ldr	r3, [pc, #600]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005848:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800584c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	2bc0      	cmp	r3, #192	; 0xc0
 8005852:	d024      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	2bc0      	cmp	r3, #192	; 0xc0
 8005858:	d842      	bhi.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d00d      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d83c      	bhi.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d011      	beq.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8005872:	e035      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005874:	f7fd ffcc 	bl	8003810 <HAL_RCC_GetPCLK3Freq>
 8005878:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800587a:	e3f5      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800587c:	4b87      	ldr	r3, [pc, #540]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005888:	d102      	bne.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800588a:	4b86      	ldr	r3, [pc, #536]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800588e:	e3eb      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005894:	e3e8      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005896:	f7fd fe77 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 800589a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800589c:	e3e4      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800589e:	4b7f      	ldr	r3, [pc, #508]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d117      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058aa:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80058b6:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	0e1b      	lsrs	r3, r3, #24
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	e006      	b.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80058c2:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	4a73      	ldr	r2, [pc, #460]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058d8:	e3c6      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058de:	e3c3      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e4:	e3c0      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80058e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ea:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80058ee:	430b      	orrs	r3, r1
 80058f0:	d147      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80058f2:	4b6a      	ldr	r3, [pc, #424]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80058f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005904:	f7fd ff5c 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005908:	6378      	str	r0, [r7, #52]	; 0x34
 800590a:	e3ad      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005912:	d103      	bne.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005914:	f7fd fe38 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005918:	6378      	str	r0, [r7, #52]	; 0x34
 800591a:	e3a5      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800591c:	4b5f      	ldr	r3, [pc, #380]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d106      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d102      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8005932:	4b5c      	ldr	r3, [pc, #368]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
 8005936:	e397      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005938:	4b58      	ldr	r3, [pc, #352]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b20      	cmp	r3, #32
 8005942:	d11b      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800594a:	d117      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8005958:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	0e1b      	lsrs	r3, r3, #24
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005964:	4b4d      	ldr	r3, [pc, #308]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	0e1b      	lsrs	r3, r3, #24
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	4a4b      	ldr	r2, [pc, #300]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	e375      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
 8005980:	e372      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005986:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800598a:	430b      	orrs	r3, r1
 800598c:	d164      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800598e:	4b43      	ldr	r3, [pc, #268]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005998:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2b00      	cmp	r3, #0
 800599e:	d120      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059a0:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d117      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059ac:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80059b8:	4b38      	ldr	r3, [pc, #224]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	0e1b      	lsrs	r3, r3, #24
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	e006      	b.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80059c4:	4b35      	ldr	r3, [pc, #212]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	0e1b      	lsrs	r3, r3, #24
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80059d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
 80059da:	e345      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	637b      	str	r3, [r7, #52]	; 0x34
 80059e0:	e342      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80059e2:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f0:	d112      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f8:	d10e      	bne.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80059fa:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80059fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a08:	d102      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8005a0a:	23fa      	movs	r3, #250	; 0xfa
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a0e:	e32b      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a16:	e327      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005a18:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a24:	d106      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2c:	d102      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	e319      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d107      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a48:	d103      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	e30a      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	e307      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005a60:	430b      	orrs	r3, r1
 8005a62:	d16b      	bne.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d127      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d11e      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	0e1b      	lsrs	r3, r3, #24
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	e00d      	b.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8005a9a:	bf00      	nop
 8005a9c:	46020c00 	.word	0x46020c00
 8005aa0:	0800b8d8 	.word	0x0800b8d8
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	4b94      	ldr	r3, [pc, #592]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	0e1b      	lsrs	r3, r3, #24
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	4a92      	ldr	r2, [pc, #584]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	e2d3      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	e2d0      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005ac6:	4b8d      	ldr	r3, [pc, #564]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad4:	d112      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d10e      	bne.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ade:	4b87      	ldr	r3, [pc, #540]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aec:	d102      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8005aee:	23fa      	movs	r3, #250	; 0xfa
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005af2:	e2b9      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005af4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005afa:	e2b5      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005afc:	4b7f      	ldr	r3, [pc, #508]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d106      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b10:	d102      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8005b12:	4b7c      	ldr	r3, [pc, #496]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
 8005b16:	e2a7      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005b18:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d107      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b2c:	d103      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
 8005b34:	e298      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3a:	e295      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b40:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8005b44:	430b      	orrs	r3, r1
 8005b46:	d147      	bne.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005b48:	4b6c      	ldr	r3, [pc, #432]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b4e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005b5a:	f7fd fe31 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005b5e:	6378      	str	r0, [r7, #52]	; 0x34
 8005b60:	e282      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005b62:	4b66      	ldr	r3, [pc, #408]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b70:	d112      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b78:	d10e      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b7a:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b88:	d102      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8005b8a:	23fa      	movs	r3, #250	; 0xfa
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b8e:	e26b      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005b90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005b96:	e267      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005b98:	4b58      	ldr	r3, [pc, #352]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d106      	bne.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bac:	d102      	bne.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8005bae:	4b55      	ldr	r3, [pc, #340]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb2:	e259      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005bb4:	4b51      	ldr	r3, [pc, #324]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005bc8:	d103      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8005bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd0:	e24a      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd6:	e247      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bdc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8005be0:	430b      	orrs	r3, r1
 8005be2:	d12d      	bne.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005be4:	4b45      	ldr	r3, [pc, #276]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bea:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005bee:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005bf0:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bfc:	d105      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8005c04:	4b3f      	ldr	r3, [pc, #252]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
 8005c08:	e22e      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c10:	d107      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fc70 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c20:	e222      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c28:	d107      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2a:	f107 0318 	add.w	r3, r7, #24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fdbe 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
 8005c38:	e216      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3e:	e213      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c44:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	d15d      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c5e:	d028      	beq.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c66:	d845      	bhi.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c6e:	d013      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c76:	d83d      	bhi.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c84:	d004      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8005c86:	e035      	b.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fd fdae 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c8e:	e1eb      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c90:	f7fd fc7a 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005c94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c96:	e1e7      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c98:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca4:	d102      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005caa:	e1dd      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cb0:	e1da      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d117      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005cbe:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	0e1b      	lsrs	r3, r3, #24
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	e006      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8005cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	0e1b      	lsrs	r3, r3, #24
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	4a06      	ldr	r2, [pc, #24]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8005ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005cec:	e1bc      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf2:	e1b9      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf8:	e1b6      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005cfa:	bf00      	nop
 8005cfc:	46020c00 	.word	0x46020c00
 8005d00:	0800b8d8 	.word	0x0800b8d8
 8005d04:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d0c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8005d10:	430b      	orrs	r3, r1
 8005d12:	d156      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005d14:	4ba5      	ldr	r3, [pc, #660]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d1e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d26:	d028      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d2e:	d845      	bhi.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d36:	d013      	beq.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d3e:	d83d      	bhi.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d004      	beq.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005d4e:	e035      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fd fd36 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8005d54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d56:	e187      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d58:	f7fd fc16 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005d5c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005d5e:	e183      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d60:	4b92      	ldr	r3, [pc, #584]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6c:	d102      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8005d6e:	4b90      	ldr	r3, [pc, #576]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005d70:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d72:	e179      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d78:	e176      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d7a:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d117      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d86:	4b89      	ldr	r3, [pc, #548]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8005d92:	4b86      	ldr	r3, [pc, #536]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0e1b      	lsrs	r3, r3, #24
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	e006      	b.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8005d9e:	4b83      	ldr	r3, [pc, #524]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005da4:	041b      	lsls	r3, r3, #16
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	4a81      	ldr	r2, [pc, #516]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005db4:	e158      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dba:	e155      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc0:	e152      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc6:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	d177      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005dce:	4b77      	ldr	r3, [pc, #476]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dd4:	f003 0318 	and.w	r3, r3, #24
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b18      	cmp	r3, #24
 8005dde:	d86b      	bhi.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005eb9 	.word	0x08005eb9
 8005df0:	08005eb9 	.word	0x08005eb9
 8005df4:	08005eb9 	.word	0x08005eb9
 8005df8:	08005eb9 	.word	0x08005eb9
 8005dfc:	08005eb9 	.word	0x08005eb9
 8005e00:	08005eb9 	.word	0x08005eb9
 8005e04:	08005eb9 	.word	0x08005eb9
 8005e08:	08005e55 	.word	0x08005e55
 8005e0c:	08005eb9 	.word	0x08005eb9
 8005e10:	08005eb9 	.word	0x08005eb9
 8005e14:	08005eb9 	.word	0x08005eb9
 8005e18:	08005eb9 	.word	0x08005eb9
 8005e1c:	08005eb9 	.word	0x08005eb9
 8005e20:	08005eb9 	.word	0x08005eb9
 8005e24:	08005eb9 	.word	0x08005eb9
 8005e28:	08005e5d 	.word	0x08005e5d
 8005e2c:	08005eb9 	.word	0x08005eb9
 8005e30:	08005eb9 	.word	0x08005eb9
 8005e34:	08005eb9 	.word	0x08005eb9
 8005e38:	08005eb9 	.word	0x08005eb9
 8005e3c:	08005eb9 	.word	0x08005eb9
 8005e40:	08005eb9 	.word	0x08005eb9
 8005e44:	08005eb9 	.word	0x08005eb9
 8005e48:	08005e77 	.word	0x08005e77
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005e4c:	f7fd fce0 	bl	8003810 <HAL_RCC_GetPCLK3Freq>
 8005e50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e52:	e109      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005e54:	f7fd fb98 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005e58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e5a:	e105      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d102      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8005e6a:	4b51      	ldr	r3, [pc, #324]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e6e:	e0fb      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e74:	e0f8      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005e76:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d117      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	0e1b      	lsrs	r3, r3, #24
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8005e9a:	4b44      	ldr	r3, [pc, #272]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	0e1b      	lsrs	r3, r3, #24
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	4a42      	ldr	r2, [pc, #264]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005eb0:	e0da      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eb6:	e0d7      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ebc:	e0d4      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	d155      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005eca:	4b38      	ldr	r3, [pc, #224]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005ecc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ed0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005edc:	d013      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ee4:	d844      	bhi.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eec:	d013      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef4:	d83c      	bhi.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d014      	beq.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f02:	d014      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8005f04:	e034      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f06:	f107 0318 	add.w	r3, r7, #24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe fc50 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f14:	e0a8      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe faee 	bl	80044fc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f24:	e0a0      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fd fb2f 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8005f2a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f2c:	e09c      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f2e:	4b1f      	ldr	r3, [pc, #124]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d117      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005f46:	4b19      	ldr	r3, [pc, #100]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0e1b      	lsrs	r3, r3, #24
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8005f52:	4b16      	ldr	r3, [pc, #88]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	0e1b      	lsrs	r3, r3, #24
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8005f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f68:	e07e      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f6e:	e07b      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f74:	e078      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	d138      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f8c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8005f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d10d      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8005fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa8:	e05e      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005faa:	bf00      	nop
 8005fac:	46020c00 	.word	0x46020c00
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	0800b8d8 	.word	0x0800b8d8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005fb8:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc6:	d112      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fce:	d10e      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fd0:	4b28      	ldr	r3, [pc, #160]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8005fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fde:	d102      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8005fe0:	23fa      	movs	r3, #250	; 0xfa
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fe4:	e040      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005fe6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fec:	e03c      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff2:	e039      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ff8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	d131      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006000:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006002:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006006:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800600a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006018:	d105      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006020:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
 8006024:	e020      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006026:	4b13      	ldr	r3, [pc, #76]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006032:	d106      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603a:	d102      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
 8006040:	e012      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604e:	d106      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006056:	d102      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
 800605c:	e004      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
 8006062:	e001      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800606a:	4618      	mov	r0, r3
 800606c:	3738      	adds	r7, #56	; 0x38
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	46020c00 	.word	0x46020c00
 8006078:	02dc6c00 	.word	0x02dc6c00
 800607c:	016e3600 	.word	0x016e3600
 8006080:	00f42400 	.word	0x00f42400

08006084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800608c:	4b47      	ldr	r3, [pc, #284]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a46      	ldr	r2, [pc, #280]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006096:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006098:	f7fb fbb4 	bl	8001804 <HAL_GetTick>
 800609c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800609e:	e008      	b.n	80060b2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060a0:	f7fb fbb0 	bl	8001804 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e077      	b.n	80061a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060b2:	4b3e      	ldr	r3, [pc, #248]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80060be:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6852      	ldr	r2, [r2, #4]
 80060d2:	3a01      	subs	r2, #1
 80060d4:	0212      	lsls	r2, r2, #8
 80060d6:	430a      	orrs	r2, r1
 80060d8:	4934      	ldr	r1, [pc, #208]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 80060e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e2:	4b33      	ldr	r3, [pc, #204]	; (80061b0 <RCCEx_PLL2_Config+0x12c>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6892      	ldr	r2, [r2, #8]
 80060ea:	3a01      	subs	r2, #1
 80060ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68d2      	ldr	r2, [r2, #12]
 80060f4:	3a01      	subs	r2, #1
 80060f6:	0252      	lsls	r2, r2, #9
 80060f8:	b292      	uxth	r2, r2
 80060fa:	4311      	orrs	r1, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6912      	ldr	r2, [r2, #16]
 8006100:	3a01      	subs	r2, #1
 8006102:	0412      	lsls	r2, r2, #16
 8006104:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006108:	4311      	orrs	r1, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6952      	ldr	r2, [r2, #20]
 800610e:	3a01      	subs	r2, #1
 8006110:	0612      	lsls	r2, r2, #24
 8006112:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006116:	430a      	orrs	r2, r1
 8006118:	4924      	ldr	r1, [pc, #144]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 800611a:	4313      	orrs	r3, r2
 800611c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800611e:	4b23      	ldr	r3, [pc, #140]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	f023 020c 	bic.w	r2, r3, #12
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	4920      	ldr	r1, [pc, #128]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 800612c:	4313      	orrs	r3, r2
 800612e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	491c      	ldr	r1, [pc, #112]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 800613a:	4313      	orrs	r3, r2
 800613c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800613e:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006144:	f023 0310 	bic.w	r3, r3, #16
 8006148:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800614a:	4b18      	ldr	r3, [pc, #96]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006152:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	69d2      	ldr	r2, [r2, #28]
 800615a:	00d2      	lsls	r2, r2, #3
 800615c:	4913      	ldr	r1, [pc, #76]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 800615e:	4313      	orrs	r3, r2
 8006160:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006162:	4b12      	ldr	r3, [pc, #72]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	4a11      	ldr	r2, [pc, #68]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006168:	f043 0310 	orr.w	r3, r3, #16
 800616c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a0e      	ldr	r2, [pc, #56]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006178:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800617a:	f7fb fb43 	bl	8001804 <HAL_GetTick>
 800617e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006180:	e008      	b.n	8006194 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006182:	f7fb fb3f 	bl	8001804 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e006      	b.n	80061a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <RCCEx_PLL2_Config+0x128>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0

}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	46020c00 	.word	0x46020c00
 80061b0:	80800000 	.word	0x80800000

080061b4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80061bc:	4b47      	ldr	r3, [pc, #284]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a46      	ldr	r2, [pc, #280]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80061c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061c8:	f7fb fb1c 	bl	8001804 <HAL_GetTick>
 80061cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061ce:	e008      	b.n	80061e2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061d0:	f7fb fb18 	bl	8001804 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e077      	b.n	80062d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061e2:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80061ee:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6811      	ldr	r1, [r2, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6852      	ldr	r2, [r2, #4]
 8006202:	3a01      	subs	r2, #1
 8006204:	0212      	lsls	r2, r2, #8
 8006206:	430a      	orrs	r2, r1
 8006208:	4934      	ldr	r1, [pc, #208]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 800620a:	4313      	orrs	r3, r2
 800620c:	630b      	str	r3, [r1, #48]	; 0x30
 800620e:	4b33      	ldr	r3, [pc, #204]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006212:	4b33      	ldr	r3, [pc, #204]	; (80062e0 <RCCEx_PLL3_Config+0x12c>)
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	3a01      	subs	r2, #1
 800621c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68d2      	ldr	r2, [r2, #12]
 8006224:	3a01      	subs	r2, #1
 8006226:	0252      	lsls	r2, r2, #9
 8006228:	b292      	uxth	r2, r2
 800622a:	4311      	orrs	r1, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6912      	ldr	r2, [r2, #16]
 8006230:	3a01      	subs	r2, #1
 8006232:	0412      	lsls	r2, r2, #16
 8006234:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006238:	4311      	orrs	r1, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6952      	ldr	r2, [r2, #20]
 800623e:	3a01      	subs	r2, #1
 8006240:	0612      	lsls	r2, r2, #24
 8006242:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006246:	430a      	orrs	r2, r1
 8006248:	4924      	ldr	r1, [pc, #144]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 800624a:	4313      	orrs	r3, r2
 800624c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800624e:	4b23      	ldr	r3, [pc, #140]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f023 020c 	bic.w	r2, r3, #12
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	4920      	ldr	r1, [pc, #128]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 800625c:	4313      	orrs	r3, r2
 800625e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006260:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	491c      	ldr	r1, [pc, #112]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 800626a:	4313      	orrs	r3, r2
 800626c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800626e:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006274:	f023 0310 	bic.w	r3, r3, #16
 8006278:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800627a:	4b18      	ldr	r3, [pc, #96]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 800627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006282:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	69d2      	ldr	r2, [r2, #28]
 800628a:	00d2      	lsls	r2, r2, #3
 800628c:	4913      	ldr	r1, [pc, #76]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 800628e:	4313      	orrs	r3, r2
 8006290:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4a11      	ldr	r2, [pc, #68]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 8006298:	f043 0310 	orr.w	r3, r3, #16
 800629c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a0e      	ldr	r2, [pc, #56]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80062a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062aa:	f7fb faab 	bl	8001804 <HAL_GetTick>
 80062ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062b0:	e008      	b.n	80062c4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062b2:	f7fb faa7 	bl	8001804 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e006      	b.n	80062d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <RCCEx_PLL3_Config+0x128>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	46020c00 	.word	0x46020c00
 80062e0:	80800000 	.word	0x80800000

080062e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0fb      	b.n	80064ee <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a7f      	ldr	r2, [pc, #508]	; (80064f8 <HAL_SPI_Init+0x214>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_SPI_Init+0x26>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a7d      	ldr	r2, [pc, #500]	; (80064fc <HAL_SPI_Init+0x218>)
 8006306:	4293      	cmp	r3, r2
 8006308:	e000      	b.n	800630c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800630a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a78      	ldr	r2, [pc, #480]	; (80064f8 <HAL_SPI_Init+0x214>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <HAL_SPI_Init+0x42>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a76      	ldr	r2, [pc, #472]	; (80064fc <HAL_SPI_Init+0x218>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d105      	bne.n	8006332 <HAL_SPI_Init+0x4e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b0f      	cmp	r3, #15
 800632c:	d901      	bls.n	8006332 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e0dd      	b.n	80064ee <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8ec 	bl	8006510 <SPI_GetPacketSize>
 8006338:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a6e      	ldr	r2, [pc, #440]	; (80064f8 <HAL_SPI_Init+0x214>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_SPI_Init+0x6a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a6c      	ldr	r2, [pc, #432]	; (80064fc <HAL_SPI_Init+0x218>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d102      	bne.n	8006354 <HAL_SPI_Init+0x70>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d816      	bhi.n	8006382 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006358:	4a69      	ldr	r2, [pc, #420]	; (8006500 <HAL_SPI_Init+0x21c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00e      	beq.n	800637c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a68      	ldr	r2, [pc, #416]	; (8006504 <HAL_SPI_Init+0x220>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_SPI_Init+0x98>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a66      	ldr	r2, [pc, #408]	; (8006508 <HAL_SPI_Init+0x224>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_SPI_Init+0x98>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a65      	ldr	r2, [pc, #404]	; (800650c <HAL_SPI_Init+0x228>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d104      	bne.n	8006386 <HAL_SPI_Init+0xa2>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b10      	cmp	r3, #16
 8006380:	d901      	bls.n	8006386 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e0b3      	b.n	80064ee <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fa fd5e 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80063c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063cc:	d119      	bne.n	8006402 <HAL_SPI_Init+0x11e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d6:	d103      	bne.n	80063e0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10c      	bne.n	8006402 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80063ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f0:	d107      	bne.n	8006402 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006400:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00f      	beq.n	800642e <HAL_SPI_Init+0x14a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b06      	cmp	r3, #6
 8006414:	d90b      	bls.n	800642e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	e007      	b.n	800643e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800643c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	431a      	orrs	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	ea42 0103 	orr.w	r1, r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	ea42 0103 	orr.w	r1, r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	46002000 	.word	0x46002000
 80064fc:	56002000 	.word	0x56002000
 8006500:	40013000 	.word	0x40013000
 8006504:	50013000 	.word	0x50013000
 8006508:	40003800 	.word	0x40003800
 800650c:	50003800 	.word	0x50003800

08006510 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	3301      	adds	r3, #1
 8006528:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	3307      	adds	r3, #7
 800652e:	08db      	lsrs	r3, r3, #3
 8006530:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	fb02 f303 	mul.w	r3, r2, r3
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d12e      	bne.n	80065ba <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8006566:	2302      	movs	r3, #2
 8006568:	e028      	b.n	80065bc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006596:	ea42 0103 	orr.w	r1, r2, r3
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e000      	b.n	80065bc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e049      	b.n	800666e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f841 	bl	8006676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f000 fa58 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d001      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e072      	b.n	800678a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a35      	ldr	r2, [pc, #212]	; (8006798 <HAL_TIM_Base_Start_IT+0x10c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d040      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a34      	ldr	r2, [pc, #208]	; (800679c <HAL_TIM_Base_Start_IT+0x110>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d03b      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d8:	d036      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066e2:	d031      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2d      	ldr	r2, [pc, #180]	; (80067a0 <HAL_TIM_Base_Start_IT+0x114>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02c      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2c      	ldr	r2, [pc, #176]	; (80067a4 <HAL_TIM_Base_Start_IT+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d027      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a2a      	ldr	r2, [pc, #168]	; (80067a8 <HAL_TIM_Base_Start_IT+0x11c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d022      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a29      	ldr	r2, [pc, #164]	; (80067ac <HAL_TIM_Base_Start_IT+0x120>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d01d      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a27      	ldr	r2, [pc, #156]	; (80067b0 <HAL_TIM_Base_Start_IT+0x124>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_TIM_Base_Start_IT+0x128>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a24      	ldr	r2, [pc, #144]	; (80067b8 <HAL_TIM_Base_Start_IT+0x12c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a23      	ldr	r2, [pc, #140]	; (80067bc <HAL_TIM_Base_Start_IT+0x130>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a21      	ldr	r2, [pc, #132]	; (80067c0 <HAL_TIM_Base_Start_IT+0x134>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIM_Base_Start_IT+0xbc>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a20      	ldr	r2, [pc, #128]	; (80067c4 <HAL_TIM_Base_Start_IT+0x138>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d115      	bne.n	8006774 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <HAL_TIM_Base_Start_IT+0x13c>)
 8006750:	4013      	ands	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b06      	cmp	r3, #6
 8006758:	d015      	beq.n	8006786 <HAL_TIM_Base_Start_IT+0xfa>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	d011      	beq.n	8006786 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0201 	orr.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	e008      	b.n	8006786 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e000      	b.n	8006788 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006786:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40012c00 	.word	0x40012c00
 800679c:	50012c00 	.word	0x50012c00
 80067a0:	40000400 	.word	0x40000400
 80067a4:	50000400 	.word	0x50000400
 80067a8:	40000800 	.word	0x40000800
 80067ac:	50000800 	.word	0x50000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	50000c00 	.word	0x50000c00
 80067b8:	40013400 	.word	0x40013400
 80067bc:	50013400 	.word	0x50013400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	50014000 	.word	0x50014000
 80067c8:	00010007 	.word	0x00010007

080067cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d020      	beq.n	8006830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01b      	beq.n	8006830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0202 	mvn.w	r2, #2
 8006800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f931 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f923 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f934 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d020      	beq.n	800687c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01b      	beq.n	800687c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0204 	mvn.w	r2, #4
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f90b 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8fd 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f90e 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d020      	beq.n	80068c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01b      	beq.n	80068c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0208 	mvn.w	r2, #8
 8006898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2204      	movs	r2, #4
 800689e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f8e5 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 80068b4:	e005      	b.n	80068c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8d7 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f8e8 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d020      	beq.n	8006914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01b      	beq.n	8006914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0210 	mvn.w	r2, #16
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2208      	movs	r2, #8
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f8bf 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8b1 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f8c2 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0201 	mvn.w	r2, #1
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fa f9ea 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800695e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f9af 	bl	8006cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00c      	beq.n	800698a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d007      	beq.n	800698a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9a7 	bl	8006cd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00c      	beq.n	80069ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f87c 	bl	8006aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00c      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f06f 0220 	mvn.w	r2, #32
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f96f 	bl	8006cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00c      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80069ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f97b 	bl	8006cec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00c      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f973 	bl	8006d00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00c      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f96b 	bl	8006d14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00c      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f963 	bl	8006d28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a68      	ldr	r2, [pc, #416]	; (8006c70 <TIM_Base_SetConfig+0x1b4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d02b      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a67      	ldr	r2, [pc, #412]	; (8006c74 <TIM_Base_SetConfig+0x1b8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d027      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae2:	d023      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aea:	d01f      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a62      	ldr	r2, [pc, #392]	; (8006c78 <TIM_Base_SetConfig+0x1bc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d01b      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a61      	ldr	r2, [pc, #388]	; (8006c7c <TIM_Base_SetConfig+0x1c0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d017      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a60      	ldr	r2, [pc, #384]	; (8006c80 <TIM_Base_SetConfig+0x1c4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d013      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a5f      	ldr	r2, [pc, #380]	; (8006c84 <TIM_Base_SetConfig+0x1c8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a5e      	ldr	r2, [pc, #376]	; (8006c88 <TIM_Base_SetConfig+0x1cc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a5d      	ldr	r2, [pc, #372]	; (8006c8c <TIM_Base_SetConfig+0x1d0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a5c      	ldr	r2, [pc, #368]	; (8006c90 <TIM_Base_SetConfig+0x1d4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x70>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a5b      	ldr	r2, [pc, #364]	; (8006c94 <TIM_Base_SetConfig+0x1d8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a4b      	ldr	r2, [pc, #300]	; (8006c70 <TIM_Base_SetConfig+0x1b4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d043      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a4a      	ldr	r2, [pc, #296]	; (8006c74 <TIM_Base_SetConfig+0x1b8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d03f      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b54:	d03b      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5c:	d037      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a45      	ldr	r2, [pc, #276]	; (8006c78 <TIM_Base_SetConfig+0x1bc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d033      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a44      	ldr	r2, [pc, #272]	; (8006c7c <TIM_Base_SetConfig+0x1c0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d02f      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a43      	ldr	r2, [pc, #268]	; (8006c80 <TIM_Base_SetConfig+0x1c4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d02b      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a42      	ldr	r2, [pc, #264]	; (8006c84 <TIM_Base_SetConfig+0x1c8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d027      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a41      	ldr	r2, [pc, #260]	; (8006c88 <TIM_Base_SetConfig+0x1cc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d023      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a40      	ldr	r2, [pc, #256]	; (8006c8c <TIM_Base_SetConfig+0x1d0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01f      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a3f      	ldr	r2, [pc, #252]	; (8006c90 <TIM_Base_SetConfig+0x1d4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01b      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a3e      	ldr	r2, [pc, #248]	; (8006c94 <TIM_Base_SetConfig+0x1d8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d017      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a3d      	ldr	r2, [pc, #244]	; (8006c98 <TIM_Base_SetConfig+0x1dc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a3c      	ldr	r2, [pc, #240]	; (8006c9c <TIM_Base_SetConfig+0x1e0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00f      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a3b      	ldr	r2, [pc, #236]	; (8006ca0 <TIM_Base_SetConfig+0x1e4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00b      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a3a      	ldr	r2, [pc, #232]	; (8006ca4 <TIM_Base_SetConfig+0x1e8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d007      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a39      	ldr	r2, [pc, #228]	; (8006ca8 <TIM_Base_SetConfig+0x1ec>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_Base_SetConfig+0x112>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a38      	ldr	r2, [pc, #224]	; (8006cac <TIM_Base_SetConfig+0x1f0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d108      	bne.n	8006be0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1a      	ldr	r2, [pc, #104]	; (8006c70 <TIM_Base_SetConfig+0x1b4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d023      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <TIM_Base_SetConfig+0x1b8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01f      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <TIM_Base_SetConfig+0x1d4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d01b      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <TIM_Base_SetConfig+0x1d8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d017      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a1c      	ldr	r2, [pc, #112]	; (8006c98 <TIM_Base_SetConfig+0x1dc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d013      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a1b      	ldr	r2, [pc, #108]	; (8006c9c <TIM_Base_SetConfig+0x1e0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a1a      	ldr	r2, [pc, #104]	; (8006ca0 <TIM_Base_SetConfig+0x1e4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <TIM_Base_SetConfig+0x1e8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <TIM_Base_SetConfig+0x1ec>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0x198>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a17      	ldr	r2, [pc, #92]	; (8006cac <TIM_Base_SetConfig+0x1f0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	50012c00 	.word	0x50012c00
 8006c78:	40000400 	.word	0x40000400
 8006c7c:	50000400 	.word	0x50000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	50000800 	.word	0x50000800
 8006c88:	40000c00 	.word	0x40000c00
 8006c8c:	50000c00 	.word	0x50000c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	50013400 	.word	0x50013400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	50014000 	.word	0x50014000
 8006ca0:	40014400 	.word	0x40014400
 8006ca4:	50014400 	.word	0x50014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	50014800 	.word	0x50014800

08006cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e042      	b.n	8006dd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fa f8e5 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2224      	movs	r2, #36	; 0x24
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb40 	bl	800740c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f99b 	bl	80070c8 <UART_SetConfig>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e01b      	b.n	8006dd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fbbf 	bl	8007550 <UART_CheckIdleState>
 8006dd2:	4603      	mov	r3, r0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	4613      	mov	r3, r2
 8006dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	f040 808b 	bne.w	8006f0e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_UART_Transmit+0x28>
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e083      	b.n	8006f10 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d107      	bne.n	8006e26 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e24:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2221      	movs	r2, #33	; 0x21
 8006e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e36:	f7fa fce5 	bl	8001804 <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d108      	bne.n	8006e68 <HAL_UART_Transmit+0x8c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	e003      	b.n	8006e70 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e70:	e030      	b.n	8006ed4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fc11 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e03d      	b.n	8006f10 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10b      	bne.n	8006eb2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	3302      	adds	r3, #2
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e007      	b.n	8006ec2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	781a      	ldrb	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1c8      	bne.n	8006e72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2140      	movs	r1, #64	; 0x40
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fbda 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e006      	b.n	8006f10 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e000      	b.n	8006f10 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006f0e:	2302      	movs	r3, #2
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	f040 80c4 	bne.w	80070bc <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Receive+0x28>
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0bc      	b.n	80070be <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d107      	bne.n	8006f62 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f60:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2222      	movs	r2, #34	; 0x22
 8006f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f78:	f7fa fc44 	bl	8001804 <HAL_GetTick>
 8006f7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	d10e      	bne.n	8006fb6 <HAL_UART_Receive+0x9e>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <HAL_UART_Receive+0x94>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006faa:	e02d      	b.n	8007008 <HAL_UART_Receive+0xf0>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	22ff      	movs	r2, #255	; 0xff
 8006fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fb4:	e028      	b.n	8007008 <HAL_UART_Receive+0xf0>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10d      	bne.n	8006fda <HAL_UART_Receive+0xc2>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <HAL_UART_Receive+0xb8>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	22ff      	movs	r2, #255	; 0xff
 8006fca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fce:	e01b      	b.n	8007008 <HAL_UART_Receive+0xf0>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	227f      	movs	r2, #127	; 0x7f
 8006fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006fd8:	e016      	b.n	8007008 <HAL_UART_Receive+0xf0>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe2:	d10d      	bne.n	8007000 <HAL_UART_Receive+0xe8>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_UART_Receive+0xde>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	227f      	movs	r2, #127	; 0x7f
 8006ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ff4:	e008      	b.n	8007008 <HAL_UART_Receive+0xf0>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	223f      	movs	r2, #63	; 0x3f
 8006ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ffe:	e003      	b.n	8007008 <HAL_UART_Receive+0xf0>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800700e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007018:	d108      	bne.n	800702c <HAL_UART_Receive+0x114>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	e003      	b.n	8007034 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007034:	e036      	b.n	80070a4 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2200      	movs	r2, #0
 800703e:	2120      	movs	r1, #32
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fb2f 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e032      	b.n	80070be <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	b29a      	uxth	r2, r3
 8007066:	8a7b      	ldrh	r3, [r7, #18]
 8007068:	4013      	ands	r3, r2
 800706a:	b29a      	uxth	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	3302      	adds	r3, #2
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e00c      	b.n	8007092 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	b2da      	uxtb	r2, r3
 8007080:	8a7b      	ldrh	r3, [r7, #18]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	4013      	ands	r3, r2
 8007086:	b2da      	uxtb	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	3301      	adds	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1c2      	bne.n	8007036 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070cc:	b094      	sub	sp, #80	; 0x50
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4b7e      	ldr	r3, [pc, #504]	; (80072d8 <UART_SetConfig+0x210>)
 80070de:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4977      	ldr	r1, [pc, #476]	; (80072dc <UART_SetConfig+0x214>)
 8007100:	4019      	ands	r1, r3
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007108:	430b      	orrs	r3, r1
 800710a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	68d9      	ldr	r1, [r3, #12]
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	ea40 0301 	orr.w	r3, r0, r1
 8007122:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b6a      	ldr	r3, [pc, #424]	; (80072d8 <UART_SetConfig+0x210>)
 8007130:	429a      	cmp	r2, r3
 8007132:	d009      	beq.n	8007148 <UART_SetConfig+0x80>
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4b69      	ldr	r3, [pc, #420]	; (80072e0 <UART_SetConfig+0x218>)
 800713a:	429a      	cmp	r2, r3
 800713c:	d004      	beq.n	8007148 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007144:	4313      	orrs	r3, r2
 8007146:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007152:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715c:	430b      	orrs	r3, r1
 800715e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	f023 000f 	bic.w	r0, r3, #15
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	ea40 0301 	orr.w	r3, r0, r1
 8007176:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <UART_SetConfig+0x21c>)
 800717e:	429a      	cmp	r2, r3
 8007180:	d102      	bne.n	8007188 <UART_SetConfig+0xc0>
 8007182:	2301      	movs	r3, #1
 8007184:	64bb      	str	r3, [r7, #72]	; 0x48
 8007186:	e029      	b.n	80071dc <UART_SetConfig+0x114>
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b56      	ldr	r3, [pc, #344]	; (80072e8 <UART_SetConfig+0x220>)
 800718e:	429a      	cmp	r2, r3
 8007190:	d102      	bne.n	8007198 <UART_SetConfig+0xd0>
 8007192:	2302      	movs	r3, #2
 8007194:	64bb      	str	r3, [r7, #72]	; 0x48
 8007196:	e021      	b.n	80071dc <UART_SetConfig+0x114>
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b53      	ldr	r3, [pc, #332]	; (80072ec <UART_SetConfig+0x224>)
 800719e:	429a      	cmp	r2, r3
 80071a0:	d102      	bne.n	80071a8 <UART_SetConfig+0xe0>
 80071a2:	2304      	movs	r3, #4
 80071a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a6:	e019      	b.n	80071dc <UART_SetConfig+0x114>
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <UART_SetConfig+0x228>)
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d102      	bne.n	80071b8 <UART_SetConfig+0xf0>
 80071b2:	2308      	movs	r3, #8
 80071b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b6:	e011      	b.n	80071dc <UART_SetConfig+0x114>
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b4d      	ldr	r3, [pc, #308]	; (80072f4 <UART_SetConfig+0x22c>)
 80071be:	429a      	cmp	r2, r3
 80071c0:	d102      	bne.n	80071c8 <UART_SetConfig+0x100>
 80071c2:	2310      	movs	r3, #16
 80071c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c6:	e009      	b.n	80071dc <UART_SetConfig+0x114>
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	4b42      	ldr	r3, [pc, #264]	; (80072d8 <UART_SetConfig+0x210>)
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d102      	bne.n	80071d8 <UART_SetConfig+0x110>
 80071d2:	2320      	movs	r3, #32
 80071d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d6:	e001      	b.n	80071dc <UART_SetConfig+0x114>
 80071d8:	2300      	movs	r3, #0
 80071da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b3d      	ldr	r3, [pc, #244]	; (80072d8 <UART_SetConfig+0x210>)
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d005      	beq.n	80071f2 <UART_SetConfig+0x12a>
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b3d      	ldr	r3, [pc, #244]	; (80072e0 <UART_SetConfig+0x218>)
 80071ec:	429a      	cmp	r2, r3
 80071ee:	f040 8085 	bne.w	80072fc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f4:	2200      	movs	r2, #0
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	627a      	str	r2, [r7, #36]	; 0x24
 80071fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80071fe:	f7fd fd8b 	bl	8004d18 <HAL_RCCEx_GetPeriphCLKFreq>
 8007202:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 80e8 	beq.w	80073dc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	4a39      	ldr	r2, [pc, #228]	; (80072f8 <UART_SetConfig+0x230>)
 8007212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007216:	461a      	mov	r2, r3
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	fbb3 f3f2 	udiv	r3, r3, r2
 800721e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800722c:	429a      	cmp	r2, r3
 800722e:	d305      	bcc.n	800723c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007238:	429a      	cmp	r2, r3
 800723a:	d903      	bls.n	8007244 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007242:	e048      	b.n	80072d6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007246:	2200      	movs	r2, #0
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	61fa      	str	r2, [r7, #28]
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <UART_SetConfig+0x230>)
 8007252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007256:	b29b      	uxth	r3, r3
 8007258:	2200      	movs	r2, #0
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	617a      	str	r2, [r7, #20]
 800725e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007262:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007266:	f7f9 f815 	bl	8000294 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	020b      	lsls	r3, r1, #8
 800727c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007280:	0202      	lsls	r2, r0, #8
 8007282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007284:	6849      	ldr	r1, [r1, #4]
 8007286:	0849      	lsrs	r1, r1, #1
 8007288:	2000      	movs	r0, #0
 800728a:	460c      	mov	r4, r1
 800728c:	4605      	mov	r5, r0
 800728e:	eb12 0804 	adds.w	r8, r2, r4
 8007292:	eb43 0905 	adc.w	r9, r3, r5
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	60fa      	str	r2, [r7, #12]
 80072a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f8 fff4 	bl	8000294 <__aeabi_uldivmod>
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	4613      	mov	r3, r2
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ba:	d308      	bcc.n	80072ce <UART_SetConfig+0x206>
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c2:	d204      	bcs.n	80072ce <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ca:	60da      	str	r2, [r3, #12]
 80072cc:	e003      	b.n	80072d6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80072d4:	e082      	b.n	80073dc <UART_SetConfig+0x314>
 80072d6:	e081      	b.n	80073dc <UART_SetConfig+0x314>
 80072d8:	46002400 	.word	0x46002400
 80072dc:	cfff69f3 	.word	0xcfff69f3
 80072e0:	56002400 	.word	0x56002400
 80072e4:	40013800 	.word	0x40013800
 80072e8:	40004400 	.word	0x40004400
 80072ec:	40004800 	.word	0x40004800
 80072f0:	40004c00 	.word	0x40004c00
 80072f4:	40005000 	.word	0x40005000
 80072f8:	0800b998 	.word	0x0800b998
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007304:	d13c      	bne.n	8007380 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007308:	2200      	movs	r2, #0
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007312:	f7fd fd01 	bl	8004d18 <HAL_RCCEx_GetPeriphCLKFreq>
 8007316:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d05e      	beq.n	80073dc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	4a39      	ldr	r2, [pc, #228]	; (8007408 <UART_SetConfig+0x340>)
 8007324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007328:	461a      	mov	r2, r3
 800732a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800732c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007330:	005a      	lsls	r2, r3, #1
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	441a      	add	r2, r3
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007346:	2b0f      	cmp	r3, #15
 8007348:	d916      	bls.n	8007378 <UART_SetConfig+0x2b0>
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007350:	d212      	bcs.n	8007378 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007354:	b29b      	uxth	r3, r3
 8007356:	f023 030f 	bic.w	r3, r3, #15
 800735a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	b29a      	uxth	r2, r3
 8007368:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800736a:	4313      	orrs	r3, r2
 800736c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	e031      	b.n	80073dc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800737e:	e02d      	b.n	80073dc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007382:	2200      	movs	r2, #0
 8007384:	469a      	mov	sl, r3
 8007386:	4693      	mov	fp, r2
 8007388:	4650      	mov	r0, sl
 800738a:	4659      	mov	r1, fp
 800738c:	f7fd fcc4 	bl	8004d18 <HAL_RCCEx_GetPeriphCLKFreq>
 8007390:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d021      	beq.n	80073dc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	4a1a      	ldr	r2, [pc, #104]	; (8007408 <UART_SetConfig+0x340>)
 800739e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	085b      	lsrs	r3, r3, #1
 80073b0:	441a      	add	r2, r3
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073be:	2b0f      	cmp	r3, #15
 80073c0:	d909      	bls.n	80073d6 <UART_SetConfig+0x30e>
 80073c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c8:	d205      	bcs.n	80073d6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60da      	str	r2, [r3, #12]
 80073d4:	e002      	b.n	80073dc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	2201      	movs	r2, #1
 80073e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	2201      	movs	r2, #1
 80073e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2200      	movs	r2, #0
 80073f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	2200      	movs	r2, #0
 80073f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3750      	adds	r7, #80	; 0x50
 8007400:	46bd      	mov	sp, r7
 8007402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007406:	bf00      	nop
 8007408:	0800b998 	.word	0x0800b998

0800740c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01a      	beq.n	8007522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750a:	d10a      	bne.n	8007522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b098      	sub	sp, #96	; 0x60
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007560:	f7fa f950 	bl	8001804 <HAL_GetTick>
 8007564:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b08      	cmp	r3, #8
 8007572:	d12f      	bne.n	80075d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800757c:	2200      	movs	r2, #0
 800757e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f88e 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d022      	beq.n	80075d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a2:	653b      	str	r3, [r7, #80]	; 0x50
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
 80075ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e063      	b.n	800769c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d149      	bne.n	8007676 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ea:	2200      	movs	r2, #0
 80075ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f857 	bl	80076a4 <UART_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d03c      	beq.n	8007676 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	623b      	str	r3, [r7, #32]
   return(result);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761a:	633b      	str	r3, [r7, #48]	; 0x30
 800761c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e6      	bne.n	80075fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3308      	adds	r3, #8
 8007634:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	60fb      	str	r3, [r7, #12]
   return(result);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	64bb      	str	r3, [r7, #72]	; 0x48
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764e:	61fa      	str	r2, [r7, #28]
 8007650:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	69b9      	ldr	r1, [r7, #24]
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	617b      	str	r3, [r7, #20]
   return(result);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e5      	bne.n	800762e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e012      	b.n	800769c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3758      	adds	r7, #88	; 0x58
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	4613      	mov	r3, r2
 80076b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b4:	e049      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d045      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076be:	f7fa f8a1 	bl	8001804 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d302      	bcc.n	80076d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e048      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d031      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d110      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2208      	movs	r2, #8
 80076fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f838 	bl	8007772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2208      	movs	r2, #8
 8007706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e029      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007724:	d111      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f81e 	bl	8007772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e00f      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	429a      	cmp	r2, r3
 8007766:	d0a6      	beq.n	80076b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007772:	b480      	push	{r7}
 8007774:	b095      	sub	sp, #84	; 0x54
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	643b      	str	r3, [r7, #64]	; 0x40
 800779a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800779e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3308      	adds	r3, #8
 80077ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e3      	bne.n	80077ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d118      	bne.n	800781e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f023 0310 	bic.w	r3, r3, #16
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6979      	ldr	r1, [r7, #20]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	613b      	str	r3, [r7, #16]
   return(result);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e6      	bne.n	80077ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007832:	bf00      	nop
 8007834:	3754      	adds	r7, #84	; 0x54
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_UARTEx_EnableFifoMode+0x16>
 8007850:	2302      	movs	r3, #2
 8007852:	e02b      	b.n	80078ac <HAL_UARTEx_EnableFifoMode+0x6e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2224      	movs	r2, #36	; 0x24
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0201 	bic.w	r2, r2, #1
 800787a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007882:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800788a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f8c3 	bl	8007a20 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_UARTEx_DisableFifoMode+0x16>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e027      	b.n	800791a <HAL_UARTEx_DisableFifoMode+0x66>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2224      	movs	r2, #36	; 0x24
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0201 	bic.w	r2, r2, #1
 80078f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800793a:	2302      	movs	r3, #2
 800793c:	e02d      	b.n	800799a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2224      	movs	r2, #36	; 0x24
 800794a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f850 	bl	8007a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e02d      	b.n	8007a16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2224      	movs	r2, #36	; 0x24
 80079c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0201 	bic.w	r2, r2, #1
 80079e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f812 	bl	8007a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d108      	bne.n	8007a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a40:	e031      	b.n	8007aa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a42:	2308      	movs	r3, #8
 8007a44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a46:	2308      	movs	r3, #8
 8007a48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	0e5b      	lsrs	r3, r3, #25
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	0f5b      	lsrs	r3, r3, #29
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	7b3a      	ldrb	r2, [r7, #12]
 8007a6e:	4911      	ldr	r1, [pc, #68]	; (8007ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8007a70:	5c8a      	ldrb	r2, [r1, r2]
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a76:	7b3a      	ldrb	r2, [r7, #12]
 8007a78:	490f      	ldr	r1, [pc, #60]	; (8007ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8007a7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	7b7a      	ldrb	r2, [r7, #13]
 8007a8c:	4909      	ldr	r1, [pc, #36]	; (8007ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8007a8e:	5c8a      	ldrb	r2, [r1, r2]
 8007a90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a94:	7b7a      	ldrb	r2, [r7, #13]
 8007a96:	4908      	ldr	r1, [pc, #32]	; (8007ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8007a98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007aa6:	bf00      	nop
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	0800b9b0 	.word	0x0800b9b0
 8007ab8:	0800b9b8 	.word	0x0800b9b8

08007abc <minmea_isfield>:

/**
 * Check whether a character belongs to the set of characters allowed in a
 * sentence data field.
 */
static inline bool minmea_isfield(char c) {
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a0c      	ldr	r2, [pc, #48]	; (8007afc <minmea_isfield+0x40>)
 8007acc:	4413      	add	r3, r2
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <minmea_isfield+0x2c>
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	2b2c      	cmp	r3, #44	; 0x2c
 8007adc:	d004      	beq.n	8007ae8 <minmea_isfield+0x2c>
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae2:	d001      	beq.n	8007ae8 <minmea_isfield+0x2c>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <minmea_isfield+0x2e>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	b2db      	uxtb	r3, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	0800b9c0 	.word	0x0800b9c0

08007b00 <minmea_scan>:

    return true;
}

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8007b00:	b40e      	push	{r1, r2, r3}
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b0a7      	sub	sp, #156	; 0x9c
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
    bool result = false;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool optional = false;
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    if (sentence == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <minmea_scan+0x20>
        return false;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e3c0      	b.n	80082a2 <minmea_scan+0x7a2>

    va_list ap;
    va_start(ap, format);
 8007b20:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c

    const char *field = sentence;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8007b2c:	e394      	b.n	8008258 <minmea_scan+0x758>
        char type = *format++;
 8007b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        if (type == ';') {
 8007b3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b42:	2b3b      	cmp	r3, #59	; 0x3b
 8007b44:	d103      	bne.n	8007b4e <minmea_scan+0x4e>
            // All further fields are optional.
            optional = true;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            continue;
 8007b4c:	e384      	b.n	8008258 <minmea_scan+0x758>
        }

        if (!field && !optional) {
 8007b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d107      	bne.n	8007b66 <minmea_scan+0x66>
 8007b56:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8007b5a:	f083 0301 	eor.w	r3, r3, #1
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8383 	bne.w	800826c <minmea_scan+0x76c>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8007b66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007b6a:	3b44      	subs	r3, #68	; 0x44
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	f200 837f 	bhi.w	8008270 <minmea_scan+0x770>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <minmea_scan+0x78>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007fb5 	.word	0x08007fb5
 8007b7c:	08008271 	.word	0x08008271
 8007b80:	08008271 	.word	0x08008271
 8007b84:	08008271 	.word	0x08008271
 8007b88:	08008271 	.word	0x08008271
 8007b8c:	08008271 	.word	0x08008271
 8007b90:	08008271 	.word	0x08008271
 8007b94:	08008271 	.word	0x08008271
 8007b98:	08008271 	.word	0x08008271
 8007b9c:	08008271 	.word	0x08008271
 8007ba0:	08008271 	.word	0x08008271
 8007ba4:	08008271 	.word	0x08008271
 8007ba8:	08008271 	.word	0x08008271
 8007bac:	08008271 	.word	0x08008271
 8007bb0:	08008271 	.word	0x08008271
 8007bb4:	08008271 	.word	0x08008271
 8007bb8:	080080ab 	.word	0x080080ab
 8007bbc:	08008271 	.word	0x08008271
 8007bc0:	08008271 	.word	0x08008271
 8007bc4:	08008271 	.word	0x08008271
 8007bc8:	08008271 	.word	0x08008271
 8007bcc:	08008271 	.word	0x08008271
 8007bd0:	08008271 	.word	0x08008271
 8007bd4:	08008271 	.word	0x08008271
 8007bd8:	08008271 	.word	0x08008271
 8007bdc:	08008271 	.word	0x08008271
 8007be0:	08008271 	.word	0x08008271
 8007be4:	08008223 	.word	0x08008223
 8007be8:	08008271 	.word	0x08008271
 8007bec:	08008271 	.word	0x08008271
 8007bf0:	08008271 	.word	0x08008271
 8007bf4:	08007c3d 	.word	0x08007c3d
 8007bf8:	08007c77 	.word	0x08007c77
 8007bfc:	08008271 	.word	0x08008271
 8007c00:	08007d1b 	.word	0x08007d1b
 8007c04:	08008271 	.word	0x08008271
 8007c08:	08008271 	.word	0x08008271
 8007c0c:	08007ec7 	.word	0x08007ec7
 8007c10:	08008271 	.word	0x08008271
 8007c14:	08008271 	.word	0x08008271
 8007c18:	08008271 	.word	0x08008271
 8007c1c:	08008271 	.word	0x08008271
 8007c20:	08008271 	.word	0x08008271
 8007c24:	08008271 	.word	0x08008271
 8007c28:	08008271 	.word	0x08008271
 8007c2c:	08008271 	.word	0x08008271
 8007c30:	08008271 	.word	0x08008271
 8007c34:	08007f05 	.word	0x08007f05
 8007c38:	08007f47 	.word	0x08007f47
            case 'c': { // Single character field (char).
                char value = '\0';
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                if (field && minmea_isfield(*field))
 8007c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <minmea_scan+0x166>
 8007c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff ff33 	bl	8007abc <minmea_isfield>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <minmea_scan+0x166>
                    value = *field;
 8007c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8007c72:	701a      	strb	r2, [r3, #0]
            } break;
 8007c74:	e2d6      	b.n	8008224 <minmea_scan+0x724>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 8007c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d042      	beq.n	8007d0a <minmea_scan+0x20a>
 8007c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff ff16 	bl	8007abc <minmea_isfield>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d039      	beq.n	8007d0a <minmea_scan+0x20a>
                    switch (*field) {
 8007c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	3b45      	subs	r3, #69	; 0x45
 8007c9e:	2b12      	cmp	r3, #18
 8007ca0:	f200 82e8 	bhi.w	8008274 <minmea_scan+0x774>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <minmea_scan+0x1ac>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cf9 	.word	0x08007cf9
 8007cb0:	08008275 	.word	0x08008275
 8007cb4:	08008275 	.word	0x08008275
 8007cb8:	08008275 	.word	0x08008275
 8007cbc:	08008275 	.word	0x08008275
 8007cc0:	08008275 	.word	0x08008275
 8007cc4:	08008275 	.word	0x08008275
 8007cc8:	08008275 	.word	0x08008275
 8007ccc:	08008275 	.word	0x08008275
 8007cd0:	08007cf9 	.word	0x08007cf9
 8007cd4:	08008275 	.word	0x08008275
 8007cd8:	08008275 	.word	0x08008275
 8007cdc:	08008275 	.word	0x08008275
 8007ce0:	08008275 	.word	0x08008275
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08008275 	.word	0x08008275
 8007cec:	08008275 	.word	0x08008275
 8007cf0:	08008275 	.word	0x08008275
 8007cf4:	08007d01 	.word	0x08007d01
                        case 'N':
                        case 'E':
                            value = 1;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 8007cfe:	e004      	b.n	8007d0a <minmea_scan+0x20a>
                        case 'S':
                        case 'W':
                            value = -1;
 8007d00:	f04f 33ff 	mov.w	r3, #4294967295
 8007d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 8007d08:	bf00      	nop
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007d16:	601a      	str	r2, [r3, #0]
            } break;
 8007d18:	e284      	b.n	8008224 <minmea_scan+0x724>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                int_least32_t value = -1;
 8007d20:	f04f 33ff 	mov.w	r3, #4294967295
 8007d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                int_least32_t scale = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	67fb      	str	r3, [r7, #124]	; 0x7c

                if (field) {
 8007d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 8095 	beq.w	8007e60 <minmea_scan+0x360>
                    while (minmea_isfield(*field)) {
 8007d36:	e089      	b.n	8007e4c <minmea_scan+0x34c>
                        if (*field == '+' && !sign && value == -1) {
 8007d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b2b      	cmp	r3, #43	; 0x2b
 8007d40:	d10c      	bne.n	8007d5c <minmea_scan+0x25c>
 8007d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d108      	bne.n	8007d5c <minmea_scan+0x25c>
 8007d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d103      	bne.n	8007d5c <minmea_scan+0x25c>
                            sign = 1;
 8007d54:	2301      	movs	r3, #1
 8007d56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d5a:	e072      	b.n	8007e42 <minmea_scan+0x342>
                        } else if (*field == '-' && !sign && value == -1) {
 8007d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b2d      	cmp	r3, #45	; 0x2d
 8007d64:	d10d      	bne.n	8007d82 <minmea_scan+0x282>
 8007d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <minmea_scan+0x282>
 8007d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d104      	bne.n	8007d82 <minmea_scan+0x282>
                            sign = -1;
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d80:	e05f      	b.n	8007e42 <minmea_scan+0x342>
                        } else if (isdigit((unsigned char) *field)) {
 8007d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	4a99      	ldr	r2, [pc, #612]	; (8007ff0 <minmea_scan+0x4f0>)
 8007d8c:	4413      	add	r3, r2
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d034      	beq.n	8007e02 <minmea_scan+0x302>
                            int digit = *field - '0';
 8007d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	3b30      	subs	r3, #48	; 0x30
 8007da0:	63bb      	str	r3, [r7, #56]	; 0x38
                            if (value == -1)
 8007da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d102      	bne.n	8007db2 <minmea_scan+0x2b2>
                                value = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8007db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	4a8e      	ldr	r2, [pc, #568]	; (8007ff4 <minmea_scan+0x4f4>)
 8007dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8007dc0:	1092      	asrs	r2, r2, #2
 8007dc2:	17db      	asrs	r3, r3, #31
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	dd04      	ble.n	8007dd8 <minmea_scan+0x2d8>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8007dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8251 	beq.w	8008278 <minmea_scan+0x778>
                                    /* truncate extra precision */
                                    break;
 8007dd6:	e043      	b.n	8007e60 <minmea_scan+0x360>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8007dd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ddc:	4613      	mov	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	461a      	mov	r2, r3
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	4413      	add	r3, r2
 8007dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (scale)
 8007dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d026      	beq.n	8007e42 <minmea_scan+0x342>
                                scale *= 10;
 8007df4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e00:	e01f      	b.n	8007e42 <minmea_scan+0x342>
                        } else if (*field == '.' && scale == 0) {
 8007e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b2e      	cmp	r3, #46	; 0x2e
 8007e0a:	d105      	bne.n	8007e18 <minmea_scan+0x318>
 8007e0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <minmea_scan+0x318>
                            scale = 1;
 8007e12:	2301      	movs	r3, #1
 8007e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e16:	e014      	b.n	8007e42 <minmea_scan+0x342>
                        } else if (*field == ' ') {
 8007e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	f040 822c 	bne.w	800827c <minmea_scan+0x77c>
                            /* Allow spaces at the start of the field. Not NMEA
                             * conformant, but some modules do this. */
                            if (sign != 0 || value != -1 || scale != 0)
 8007e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f040 8229 	bne.w	8008280 <minmea_scan+0x780>
 8007e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	f040 8223 	bne.w	8008280 <minmea_scan+0x780>
 8007e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 821f 	bne.w	8008280 <minmea_scan+0x780>
                                goto parse_error;
                        } else {
                            goto parse_error;
                        }
                        field++;
 8007e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e46:	3301      	adds	r3, #1
 8007e48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 8007e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fe32 	bl	8007abc <minmea_isfield>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f47f af6c 	bne.w	8007d38 <minmea_scan+0x238>
                    }
                }

                if ((sign || scale) && value == -1)
 8007e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <minmea_scan+0x36e>
 8007e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <minmea_scan+0x37a>
 8007e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	f000 8205 	beq.w	8008284 <minmea_scan+0x784>
                    goto parse_error;

                if (value == -1) {
 8007e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d105      	bne.n	8007e90 <minmea_scan+0x390>
                    /* No digits were scanned. */
                    value = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    scale = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e8e:	e004      	b.n	8007e9a <minmea_scan+0x39a>
                } else if (scale == 0) {
 8007e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <minmea_scan+0x39a>
                    /* No decimal point. */
                    scale = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
                if (sign)
 8007e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <minmea_scan+0x3b2>
                    value *= sign;
 8007ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ea6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007eaa:	fb02 f303 	mul.w	r3, r2, r3
 8007eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ec2:	605a      	str	r2, [r3, #4]
            } break;
 8007ec4:	e1ae      	b.n	8008224 <minmea_scan+0x724>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	67bb      	str	r3, [r7, #120]	; 0x78

                if (field) {
 8007eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d011      	beq.n	8007ef6 <minmea_scan+0x3f6>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8007ed2:	f107 0320 	add.w	r3, r7, #32
 8007ed6:	220a      	movs	r2, #10
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007ede:	f002 fcc1 	bl	800a864 <strtol>
 8007ee2:	67b8      	str	r0, [r7, #120]	; 0x78
                    if (minmea_isfield(*endptr))
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fde7 	bl	8007abc <minmea_isfield>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 81c9 	bne.w	8008288 <minmea_scan+0x788>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f00:	601a      	str	r2, [r3, #0]
            } break;
 8007f02:	e18f      	b.n	8008224 <minmea_scan+0x724>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	1d1a      	adds	r2, r3, #4
 8007f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	677b      	str	r3, [r7, #116]	; 0x74

                if (field) {
 8007f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d013      	beq.n	8007f3e <minmea_scan+0x43e>
                    while (minmea_isfield(*field))
 8007f16:	e009      	b.n	8007f2c <minmea_scan+0x42c>
                        *buf++ = *field++;
 8007f18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007f1c:	1c53      	adds	r3, r2, #1
 8007f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f24:	1c59      	adds	r1, r3, #1
 8007f26:	6779      	str	r1, [r7, #116]	; 0x74
 8007f28:	7812      	ldrb	r2, [r2, #0]
 8007f2a:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8007f2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fdc2 	bl	8007abc <minmea_isfield>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1ec      	bne.n	8007f18 <minmea_scan+0x418>
                }

                *buf = '\0';
 8007f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
            } break;
 8007f44:	e16e      	b.n	8008224 <minmea_scan+0x724>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8007f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 819e 	beq.w	800828c <minmea_scan+0x78c>
                    goto parse_error;

                if (field[0] != '$')
 8007f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b24      	cmp	r3, #36	; 0x24
 8007f58:	f040 819a 	bne.w	8008290 <minmea_scan+0x790>
                    goto parse_error;
                for (int f=0; f<5; f++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8007f60:	e013      	b.n	8007f8a <minmea_scan+0x48a>
                    if (!minmea_isfield(field[1+f]))
 8007f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f64:	3301      	adds	r3, #1
 8007f66:	461a      	mov	r2, r3
 8007f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fda3 	bl	8007abc <minmea_isfield>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f083 0301 	eor.w	r3, r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 8188 	bne.w	8008294 <minmea_scan+0x794>
                for (int f=0; f<5; f++)
 8007f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f86:	3301      	adds	r3, #1
 8007f88:	673b      	str	r3, [r7, #112]	; 0x70
 8007f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	dde8      	ble.n	8007f62 <minmea_scan+0x462>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
                memcpy(buf, field+1, 5);
 8007f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	2205      	movs	r2, #5
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007fa6:	f002 ff14 	bl	800add2 <memcpy>
                buf[5] = '\0';
 8007faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fac:	3305      	adds	r3, #5
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
            } break;
 8007fb2:	e137      	b.n	8008224 <minmea_scan+0x724>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	1d1a      	adds	r2, r3, #4
 8007fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 8007fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295
 8007fce:	667b      	str	r3, [r7, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 8007fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d05e      	beq.n	8008096 <minmea_scan+0x596>
 8007fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fd6c 	bl	8007abc <minmea_isfield>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d055      	beq.n	8008096 <minmea_scan+0x596>
                    // Always six digits.
                    for (int f=0; f<6; f++)
 8007fea:	2300      	movs	r3, #0
 8007fec:	663b      	str	r3, [r7, #96]	; 0x60
 8007fee:	e014      	b.n	800801a <minmea_scan+0x51a>
 8007ff0:	0800b9c0 	.word	0x0800b9c0
 8007ff4:	66666667 	.word	0x66666667
                        if (!isdigit((unsigned char) field[f]))
 8007ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007ffe:	4413      	add	r3, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	3301      	adds	r3, #1
 8008004:	4aaa      	ldr	r2, [pc, #680]	; (80082b0 <minmea_scan+0x7b0>)
 8008006:	4413      	add	r3, r2
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8142 	beq.w	8008298 <minmea_scan+0x798>
                    for (int f=0; f<6; f++)
 8008014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008016:	3301      	adds	r3, #1
 8008018:	663b      	str	r3, [r7, #96]	; 0x60
 800801a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800801c:	2b05      	cmp	r3, #5
 800801e:	ddeb      	ble.n	8007ff8 <minmea_scan+0x4f8>
                            goto parse_error;

                    char dArr[] = {field[0], field[1], '\0'};
 8008020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	773b      	strb	r3, [r7, #28]
 8008028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800802c:	3301      	adds	r3, #1
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	777b      	strb	r3, [r7, #29]
 8008032:	2300      	movs	r3, #0
 8008034:	77bb      	strb	r3, [r7, #30]
                    char mArr[] = {field[2], field[3], '\0'};
 8008036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800803a:	3302      	adds	r3, #2
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	763b      	strb	r3, [r7, #24]
 8008040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008044:	3303      	adds	r3, #3
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	767b      	strb	r3, [r7, #25]
 800804a:	2300      	movs	r3, #0
 800804c:	76bb      	strb	r3, [r7, #26]
                    char yArr[] = {field[4], field[5], '\0'};
 800804e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008052:	3304      	adds	r3, #4
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	753b      	strb	r3, [r7, #20]
 8008058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800805c:	3305      	adds	r3, #5
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	757b      	strb	r3, [r7, #21]
 8008062:	2300      	movs	r3, #0
 8008064:	75bb      	strb	r3, [r7, #22]
                    d = strtol(dArr, NULL, 10);
 8008066:	f107 031c 	add.w	r3, r7, #28
 800806a:	220a      	movs	r2, #10
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f002 fbf8 	bl	800a864 <strtol>
 8008074:	66f8      	str	r0, [r7, #108]	; 0x6c
                    m = strtol(mArr, NULL, 10);
 8008076:	f107 0318 	add.w	r3, r7, #24
 800807a:	220a      	movs	r2, #10
 800807c:	2100      	movs	r1, #0
 800807e:	4618      	mov	r0, r3
 8008080:	f002 fbf0 	bl	800a864 <strtol>
 8008084:	66b8      	str	r0, [r7, #104]	; 0x68
                    y = strtol(yArr, NULL, 10);
 8008086:	f107 0314 	add.w	r3, r7, #20
 800808a:	220a      	movs	r2, #10
 800808c:	2100      	movs	r1, #0
 800808e:	4618      	mov	r0, r3
 8008090:	f002 fbe8 	bl	800a864 <strtol>
 8008094:	6678      	str	r0, [r7, #100]	; 0x64
                }

                date->day = d;
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800809a:	601a      	str	r2, [r3, #0]
                date->month = m;
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080a0:	605a      	str	r2, [r3, #4]
                date->year = y;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080a6:	609a      	str	r2, [r3, #8]
            } break;
 80080a8:	e0bc      	b.n	8008224 <minmea_scan+0x724>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	1d1a      	adds	r2, r3, #4
 80080ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295
 80080be:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c0:	f04f 33ff 	mov.w	r3, #4294967295
 80080c4:	657b      	str	r3, [r7, #84]	; 0x54
 80080c6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ca:	653b      	str	r3, [r7, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 80080cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8099 	beq.w	8008208 <minmea_scan+0x708>
 80080d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7ff fced 	bl	8007abc <minmea_isfield>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 808f 	beq.w	8008208 <minmea_scan+0x708>
                    // Minimum required: integer time.
                    for (int f=0; f<6; f++)
 80080ea:	2300      	movs	r3, #0
 80080ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ee:	e010      	b.n	8008112 <minmea_scan+0x612>
                        if (!isdigit((unsigned char) field[f]))
 80080f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80080f6:	4413      	add	r3, r2
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	3301      	adds	r3, #1
 80080fc:	4a6c      	ldr	r2, [pc, #432]	; (80082b0 <minmea_scan+0x7b0>)
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80c8 	beq.w	800829c <minmea_scan+0x79c>
                    for (int f=0; f<6; f++)
 800810c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810e:	3301      	adds	r3, #1
 8008110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008114:	2b05      	cmp	r3, #5
 8008116:	ddeb      	ble.n	80080f0 <minmea_scan+0x5f0>
                            goto parse_error;

                    char hArr[] = {field[0], field[1], '\0'};
 8008118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	743b      	strb	r3, [r7, #16]
 8008120:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008124:	3301      	adds	r3, #1
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	747b      	strb	r3, [r7, #17]
 800812a:	2300      	movs	r3, #0
 800812c:	74bb      	strb	r3, [r7, #18]
                    char iArr[] = {field[2], field[3], '\0'};
 800812e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008132:	3302      	adds	r3, #2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	733b      	strb	r3, [r7, #12]
 8008138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800813c:	3303      	adds	r3, #3
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	737b      	strb	r3, [r7, #13]
 8008142:	2300      	movs	r3, #0
 8008144:	73bb      	strb	r3, [r7, #14]
                    char sArr[] = {field[4], field[5], '\0'};
 8008146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800814a:	3304      	adds	r3, #4
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	723b      	strb	r3, [r7, #8]
 8008150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008154:	3305      	adds	r3, #5
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	727b      	strb	r3, [r7, #9]
 800815a:	2300      	movs	r3, #0
 800815c:	72bb      	strb	r3, [r7, #10]
                    h = strtol(hArr, NULL, 10);
 800815e:	f107 0310 	add.w	r3, r7, #16
 8008162:	220a      	movs	r2, #10
 8008164:	2100      	movs	r1, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f002 fb7c 	bl	800a864 <strtol>
 800816c:	65f8      	str	r0, [r7, #92]	; 0x5c
                    i = strtol(iArr, NULL, 10);
 800816e:	f107 030c 	add.w	r3, r7, #12
 8008172:	220a      	movs	r2, #10
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f002 fb74 	bl	800a864 <strtol>
 800817c:	65b8      	str	r0, [r7, #88]	; 0x58
                    s = strtol(sArr, NULL, 10);
 800817e:	f107 0308 	add.w	r3, r7, #8
 8008182:	220a      	movs	r2, #10
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f002 fb6c 	bl	800a864 <strtol>
 800818c:	6578      	str	r0, [r7, #84]	; 0x54
                    field += 6;
 800818e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008192:	3306      	adds	r3, #6
 8008194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8008198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b2e      	cmp	r3, #46	; 0x2e
 80081a6:	d12d      	bne.n	8008204 <minmea_scan+0x704>
                        uint32_t value = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48
                        uint32_t scale = 1000000LU;
 80081ac:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <minmea_scan+0x7b4>)
 80081ae:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80081b0:	e014      	b.n	80081dc <minmea_scan+0x6dc>
                            value = (value * 10) + (*field++ - '0');
 80081b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	4619      	mov	r1, r3
 80081be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	440b      	add	r3, r1
 80081cc:	3b30      	subs	r3, #48	; 0x30
 80081ce:	64bb      	str	r3, [r7, #72]	; 0x48
                            scale /= 10;
 80081d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d2:	4a39      	ldr	r2, [pc, #228]	; (80082b8 <minmea_scan+0x7b8>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	08db      	lsrs	r3, r3, #3
 80081da:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80081dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	3301      	adds	r3, #1
 80081e4:	4a32      	ldr	r2, [pc, #200]	; (80082b0 <minmea_scan+0x7b0>)
 80081e6:	4413      	add	r3, r2
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	f003 0304 	and.w	r3, r3, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <minmea_scan+0x6f8>
 80081f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d8dc      	bhi.n	80081b2 <minmea_scan+0x6b2>
                        }
                        u = value * scale;
 80081f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	653b      	str	r3, [r7, #80]	; 0x50
 8008202:	e001      	b.n	8008208 <minmea_scan+0x708>
                    } else {
                        u = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	653b      	str	r3, [r7, #80]	; 0x50
                    }
                }

                time_->hours = h;
 8008208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800820c:	601a      	str	r2, [r3, #0]
                time_->minutes = i;
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008212:	605a      	str	r2, [r3, #4]
                time_->seconds = s;
 8008214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008218:	609a      	str	r2, [r3, #8]
                time_->microseconds = u;
 800821a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800821e:	60da      	str	r2, [r3, #12]
            } break;
 8008220:	e000      	b.n	8008224 <minmea_scan+0x724>

            case '_': { // Ignore the field.
            } break;
 8008222:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            }
        }

        next_field();
 8008224:	e002      	b.n	800822c <minmea_scan+0x72c>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3301      	adds	r3, #1
 800822a:	607b      	str	r3, [r7, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff fc43 	bl	8007abc <minmea_isfield>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f4      	bne.n	8008226 <minmea_scan+0x726>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b2c      	cmp	r3, #44	; 0x2c
 8008242:	d106      	bne.n	8008252 <minmea_scan+0x752>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3301      	adds	r3, #1
 8008248:	607b      	str	r3, [r7, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008250:	e002      	b.n	8008258 <minmea_scan+0x758>
 8008252:	2300      	movs	r3, #0
 8008254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while (*format) {
 8008258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f47f ac65 	bne.w	8007b2e <minmea_scan+0x2e>
    }

    result = true;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800826a:	e018      	b.n	800829e <minmea_scan+0x79e>
            goto parse_error;
 800826c:	bf00      	nop
 800826e:	e016      	b.n	800829e <minmea_scan+0x79e>
                goto parse_error;
 8008270:	bf00      	nop
 8008272:	e014      	b.n	800829e <minmea_scan+0x79e>
                            goto parse_error;
 8008274:	bf00      	nop
 8008276:	e012      	b.n	800829e <minmea_scan+0x79e>
                                    goto parse_error;
 8008278:	bf00      	nop
 800827a:	e010      	b.n	800829e <minmea_scan+0x79e>
                            goto parse_error;
 800827c:	bf00      	nop
 800827e:	e00e      	b.n	800829e <minmea_scan+0x79e>
                                goto parse_error;
 8008280:	bf00      	nop
 8008282:	e00c      	b.n	800829e <minmea_scan+0x79e>
                    goto parse_error;
 8008284:	bf00      	nop
 8008286:	e00a      	b.n	800829e <minmea_scan+0x79e>
                        goto parse_error;
 8008288:	bf00      	nop
 800828a:	e008      	b.n	800829e <minmea_scan+0x79e>
                    goto parse_error;
 800828c:	bf00      	nop
 800828e:	e006      	b.n	800829e <minmea_scan+0x79e>
                    goto parse_error;
 8008290:	bf00      	nop
 8008292:	e004      	b.n	800829e <minmea_scan+0x79e>
                        goto parse_error;
 8008294:	bf00      	nop
 8008296:	e002      	b.n	800829e <minmea_scan+0x79e>
                            goto parse_error;
 8008298:	bf00      	nop
 800829a:	e000      	b.n	800829e <minmea_scan+0x79e>
                            goto parse_error;
 800829c:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 800829e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	379c      	adds	r7, #156	; 0x9c
 80082a6:	46bd      	mov	sp, r7
 80082a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082ac:	b003      	add	sp, #12
 80082ae:	4770      	bx	lr
 80082b0:	0800b9c0 	.word	0x0800b9c0
 80082b4:	000f4240 	.word	0x000f4240
 80082b8:	cccccccd 	.word	0xcccccccd

080082bc <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	b097      	sub	sp, #92	; 0x5c
 80082c0:	af0c      	add	r7, sp, #48	; 0x30
 80082c2:	6178      	str	r0, [r7, #20]
 80082c4:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfcf_",
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	3310      	adds	r3, #16
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	3218      	adds	r2, #24
 80082d2:	60ba      	str	r2, [r7, #8]
 80082d4:	6979      	ldr	r1, [r7, #20]
 80082d6:	3120      	adds	r1, #32
 80082d8:	6978      	ldr	r0, [r7, #20]
 80082da:	3024      	adds	r0, #36	; 0x24
 80082dc:	697c      	ldr	r4, [r7, #20]
 80082de:	3428      	adds	r4, #40	; 0x28
 80082e0:	697d      	ldr	r5, [r7, #20]
 80082e2:	3530      	adds	r5, #48	; 0x30
 80082e4:	697e      	ldr	r6, [r7, #20]
 80082e6:	3638      	adds	r6, #56	; 0x38
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	323c      	adds	r2, #60	; 0x3c
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	3244      	adds	r2, #68	; 0x44
 80082f2:	603a      	str	r2, [r7, #0]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	3248      	adds	r2, #72	; 0x48
 80082f8:	f107 0c20 	add.w	ip, r7, #32
 80082fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	920a      	str	r2, [sp, #40]	; 0x28
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	9209      	str	r2, [sp, #36]	; 0x24
 8008306:	9608      	str	r6, [sp, #32]
 8008308:	9507      	str	r5, [sp, #28]
 800830a:	9406      	str	r4, [sp, #24]
 800830c:	9005      	str	r0, [sp, #20]
 800830e:	9104      	str	r1, [sp, #16]
 8008310:	f107 0118 	add.w	r1, r7, #24
 8008314:	9103      	str	r1, [sp, #12]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	9202      	str	r2, [sp, #8]
 800831a:	f107 021c 	add.w	r2, r7, #28
 800831e:	9201      	str	r2, [sp, #4]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4662      	mov	r2, ip
 8008326:	4915      	ldr	r1, [pc, #84]	; (800837c <minmea_parse_gga+0xc0>)
 8008328:	6938      	ldr	r0, [r7, #16]
 800832a:	f7ff fbe9 	bl	8007b00 <minmea_scan>
 800832e:	4603      	mov	r3, r0
 8008330:	f083 0301 	eor.w	r3, r3, #1
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <minmea_parse_gga+0x82>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 800833a:	2300      	movs	r3, #0
 800833c:	e01a      	b.n	8008374 <minmea_parse_gga+0xb8>
    if (strcmp(type+2, "GGA"))
 800833e:	f107 0320 	add.w	r3, r7, #32
 8008342:	3302      	adds	r3, #2
 8008344:	490e      	ldr	r1, [pc, #56]	; (8008380 <minmea_parse_gga+0xc4>)
 8008346:	4618      	mov	r0, r3
 8008348:	f7f7 ff9a 	bl	8000280 <strcmp>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <minmea_parse_gga+0x9a>
        return false;
 8008352:	2300      	movs	r3, #0
 8008354:	e00e      	b.n	8008374 <minmea_parse_gga+0xb8>

    frame->latitude.value *= latitude_direction;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	fb03 f202 	mul.w	r2, r3, r2
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	fb03 f202 	mul.w	r2, r3, r2
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	619a      	str	r2, [r3, #24]

    return true;
 8008372:	2301      	movs	r3, #1
}
 8008374:	4618      	mov	r0, r3
 8008376:	372c      	adds	r7, #44	; 0x2c
 8008378:	46bd      	mov	sp, r7
 800837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837c:	0800b7f8 	.word	0x0800b7f8
 8008380:	0800b7bc 	.word	0x0800b7bc

08008384 <__NVIC_SetPriority>:
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008394:	2b00      	cmp	r3, #0
 8008396:	db0a      	blt.n	80083ae <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	b2da      	uxtb	r2, r3
 800839c:	490c      	ldr	r1, [pc, #48]	; (80083d0 <__NVIC_SetPriority+0x4c>)
 800839e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a2:	0112      	lsls	r2, r2, #4
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	440b      	add	r3, r1
 80083a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80083ac:	e00a      	b.n	80083c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	4908      	ldr	r1, [pc, #32]	; (80083d4 <__NVIC_SetPriority+0x50>)
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	3b04      	subs	r3, #4
 80083bc:	0112      	lsls	r2, r2, #4
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	440b      	add	r3, r1
 80083c2:	761a      	strb	r2, [r3, #24]
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	e000e100 	.word	0xe000e100
 80083d4:	e000ed00 	.word	0xe000ed00

080083d8 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <SysTick_Handler+0x1c>)
 80083de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083e0:	f001 fb98 	bl	8009b14 <xTaskGetSchedulerState>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d001      	beq.n	80083ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083ea:	f001 ff3b 	bl	800a264 <xPortSysTickHandler>
  }
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	e000e010 	.word	0xe000e010

080083f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 80083fc:	2100      	movs	r1, #0
 80083fe:	f06f 0004 	mvn.w	r0, #4
 8008402:	f7ff ffbf 	bl	8008384 <__NVIC_SetPriority>
#endif
}
 8008406:	bf00      	nop
 8008408:	bd80      	pop	{r7, pc}

0800840a <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008414:	f3ef 8305 	mrs	r3, IPSR
 8008418:	60fb      	str	r3, [r7, #12]
  return(result);
 800841a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8008420:	2301      	movs	r3, #1
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	e013      	b.n	800844e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8008426:	f001 fb75 	bl	8009b14 <xTaskGetSchedulerState>
 800842a:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d00d      	beq.n	800844e <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008432:	f3ef 8310 	mrs	r3, PRIMASK
 8008436:	60bb      	str	r3, [r7, #8]
  return(result);
 8008438:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800843e:	f3ef 8311 	mrs	r3, BASEPRI
 8008442:	607b      	str	r3, [r7, #4]
  return(result);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800844a:	2301      	movs	r3, #1
 800844c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800844e:	697b      	ldr	r3, [r7, #20]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800845e:	f7ff ffd4 	bl	800840a <IRQ_Context>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8008468:	f06f 0305 	mvn.w	r3, #5
 800846c:	607b      	str	r3, [r7, #4]
 800846e:	e012      	b.n	8008496 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8008470:	f001 fb50 	bl	8009b14 <xTaskGetSchedulerState>
 8008474:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d109      	bne.n	8008490 <osKernelInitialize+0x38>
 800847c:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <osKernelInitialize+0x48>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <osKernelInitialize+0x48>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800848a:	2300      	movs	r3, #0
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	e002      	b.n	8008496 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008496:	687b      	ldr	r3, [r7, #4]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000388 	.word	0x20000388

080084a4 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 80084aa:	f7ff ffae 	bl	800840a <IRQ_Context>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <osKernelStart+0x18>
    stat = osErrorISR;
 80084b4:	f06f 0305 	mvn.w	r3, #5
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	e016      	b.n	80084ea <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 80084bc:	f001 fb2a 	bl	8009b14 <xTaskGetSchedulerState>
 80084c0:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d10d      	bne.n	80084e4 <osKernelStart+0x40>
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <osKernelStart+0x50>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d109      	bne.n	80084e4 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80084d0:	f7ff ff92 	bl	80083f8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 80084d4:	4b07      	ldr	r3, [pc, #28]	; (80084f4 <osKernelStart+0x50>)
 80084d6:	2202      	movs	r2, #2
 80084d8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084da:	f000 fdf1 	bl	80090c0 <vTaskStartScheduler>
      stat = osOK;
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
 80084e2:	e002      	b.n	80084ea <osKernelStart+0x46>
    } else {
      stat = osError;
 80084e4:	f04f 33ff 	mov.w	r3, #4294967295
 80084e8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80084ea:	687b      	ldr	r3, [r7, #4]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000388 	.word	0x20000388

080084f8 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08e      	sub	sp, #56	; 0x38
 80084fc:	af04      	add	r7, sp, #16
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8008508:	f7ff ff7f 	bl	800840a <IRQ_Context>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d17e      	bne.n	8008610 <osThreadNew+0x118>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d07b      	beq.n	8008610 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8008518:	2380      	movs	r3, #128	; 0x80
 800851a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800851c:	2318      	movs	r3, #24
 800851e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008524:	f04f 33ff 	mov.w	r3, #4294967295
 8008528:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d045      	beq.n	80085bc <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <osThreadNew+0x46>
        name = attr->name;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <osThreadNew+0x6c>
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	2b38      	cmp	r3, #56	; 0x38
 8008556:	d805      	bhi.n	8008564 <osThreadNew+0x6c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8008564:	2300      	movs	r3, #0
 8008566:	e054      	b.n	8008612 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	089b      	lsrs	r3, r3, #2
 8008576:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00e      	beq.n	800859e <osThreadNew+0xa6>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	2b5b      	cmp	r3, #91	; 0x5b
 8008586:	d90a      	bls.n	800859e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800858c:	2b00      	cmp	r3, #0
 800858e:	d006      	beq.n	800859e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8008598:	2301      	movs	r3, #1
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	e010      	b.n	80085c0 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <osThreadNew+0xc8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d108      	bne.n	80085c0 <osThreadNew+0xc8>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61bb      	str	r3, [r7, #24]
 80085ba:	e001      	b.n	80085c0 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d110      	bne.n	80085e8 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80085ce:	9202      	str	r2, [sp, #8]
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	6a3a      	ldr	r2, [r7, #32]
 80085da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fb9b 	bl	8008d18 <xTaskCreateStatic>
 80085e2:	4603      	mov	r3, r0
 80085e4:	617b      	str	r3, [r7, #20]
 80085e6:	e013      	b.n	8008610 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d110      	bne.n	8008610 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	9301      	str	r3, [sp, #4]
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fbce 	bl	8008da2 <xTaskCreate>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d001      	beq.n	8008610 <osThreadNew+0x118>
            hTask = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8008610:	697b      	ldr	r3, [r7, #20]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3728      	adds	r7, #40	; 0x28
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8008622:	f7ff fef2 	bl	800840a <IRQ_Context>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <osDelay+0x1a>
    stat = osErrorISR;
 800862c:	f06f 0305 	mvn.w	r3, #5
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e007      	b.n	8008644 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <osDelay+0x2a>
      vTaskDelay(ticks);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fd1a 	bl	8009078 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4a07      	ldr	r2, [pc, #28]	; (800867c <vApplicationGetIdleTaskMemory+0x2c>)
 8008660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	4a06      	ldr	r2, [pc, #24]	; (8008680 <vApplicationGetIdleTaskMemory+0x30>)
 8008666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2280      	movs	r2, #128	; 0x80
 800866c:	601a      	str	r2, [r3, #0]
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	2000038c 	.word	0x2000038c
 8008680:	200003e8 	.word	0x200003e8

08008684 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a07      	ldr	r2, [pc, #28]	; (80086b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008694:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	4a06      	ldr	r2, [pc, #24]	; (80086b4 <vApplicationGetTimerTaskMemory+0x30>)
 800869a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	200005e8 	.word	0x200005e8
 80086b4:	20000644 	.word	0x20000644

080086b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f103 0208 	add.w	r2, r3, #8
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f04f 32ff 	mov.w	r2, #4294967295
 80086d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f103 0208 	add.w	r2, r3, #8
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 0208 	add.w	r2, r3, #8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008712:	b480      	push	{r7}
 8008714:	b085      	sub	sp, #20
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d103      	bne.n	8008732 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e00c      	b.n	800874c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3308      	adds	r3, #8
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e002      	b.n	8008740 <vListInsert+0x2e>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	d2f6      	bcs.n	800873a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	601a      	str	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6892      	ldr	r2, [r2, #8]
 800879a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6852      	ldr	r2, [r2, #4]
 80087a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d103      	bne.n	80087b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	1e5a      	subs	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80087e2:	2301      	movs	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <xQueueGenericReset+0x1e>
 80087f0:	f001 fe4a 	bl	800a488 <ulSetInterruptMask>
 80087f4:	e7fe      	b.n	80087f4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d057      	beq.n	80088ac <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8008800:	2b00      	cmp	r3, #0
 8008802:	d053      	beq.n	80088ac <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880c:	2100      	movs	r1, #0
 800880e:	fba3 2302 	umull	r2, r3, r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d000      	beq.n	8008818 <xQueueGenericReset+0x40>
 8008816:	2101      	movs	r1, #1
 8008818:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800881a:	2b00      	cmp	r3, #0
 800881c:	d146      	bne.n	80088ac <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800881e:	f001 fcf5 	bl	800a20c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	441a      	add	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2200      	movs	r2, #0
 800883c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884e:	3b01      	subs	r3, #1
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008854:	fb01 f303 	mul.w	r3, r1, r3
 8008858:	441a      	add	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	22ff      	movs	r2, #255	; 0xff
 8008862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	22ff      	movs	r2, #255	; 0xff
 800886a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10e      	bne.n	8008892 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d014      	beq.n	80088a6 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	3310      	adds	r3, #16
 8008880:	4618      	mov	r0, r3
 8008882:	f000 ff3f 	bl	8009704 <xTaskRemoveFromEventList>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00c      	beq.n	80088a6 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800888c:	f001 fcac 	bl	800a1e8 <vPortYield>
 8008890:	e009      	b.n	80088a6 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	3310      	adds	r3, #16
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff ff0e 	bl	80086b8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	3324      	adds	r3, #36	; 0x24
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff ff09 	bl	80086b8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80088a6:	f001 fcc3 	bl	800a230 <vPortExitCritical>
 80088aa:	e001      	b.n	80088b0 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d102      	bne.n	80088bc <xQueueGenericReset+0xe4>
 80088b6:	f001 fde7 	bl	800a488 <ulSetInterruptMask>
 80088ba:	e7fe      	b.n	80088ba <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80088bc:	68fb      	ldr	r3, [r7, #12]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b088      	sub	sp, #32
 80088ca:	af02      	add	r7, sp, #8
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d102      	bne.n	80088e4 <xQueueGenericCreateStatic+0x1e>
 80088de:	f001 fdd3 	bl	800a488 <ulSetInterruptMask>
 80088e2:	e7fe      	b.n	80088e2 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d028      	beq.n	800893c <xQueueGenericCreateStatic+0x76>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d025      	beq.n	800893c <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01f      	beq.n	800893c <xQueueGenericCreateStatic+0x76>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d119      	bne.n	800893c <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                     * the real queue and semaphore structures. */
                    volatile size_t xSize = sizeof( StaticQueue_t );
 8008908:	2350      	movs	r3, #80	; 0x50
 800890a:	613b      	str	r3, [r7, #16]

                    /* This assertion cannot be branch covered in unit tests */
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b50      	cmp	r3, #80	; 0x50
 8008910:	d002      	beq.n	8008918 <xQueueGenericCreateStatic+0x52>
 8008912:	f001 fdb9 	bl	800a488 <ulSetInterruptMask>
 8008916:	e7fe      	b.n	8008916 <xQueueGenericCreateStatic+0x50>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8008918:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008926:	f897 2020 	ldrb.w	r2, [r7, #32]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	4613      	mov	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f80c 	bl	8008952 <prvInitialiseNewQueue>
 800893a:	e005      	b.n	8008948 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <xQueueGenericCreateStatic+0x82>
 8008942:	f001 fda1 	bl	800a488 <ulSetInterruptMask>
 8008946:	e7fe      	b.n	8008946 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008948:	697b      	ldr	r3, [r7, #20]
    }
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
 800895e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d103      	bne.n	800896e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e002      	b.n	8008974 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008980:	2101      	movs	r1, #1
 8008982:	69b8      	ldr	r0, [r7, #24]
 8008984:	f7ff ff28 	bl	80087d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <xQueueReceive+0x20>
 80089b2:	f001 fd69 	bl	800a488 <ulSetInterruptMask>
 80089b6:	e7fe      	b.n	80089b6 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <xQueueReceive+0x2e>
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <xQueueReceive+0x32>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <xQueueReceive+0x34>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <xQueueReceive+0x3e>
 80089d0:	f001 fd5a 	bl	800a488 <ulSetInterruptMask>
 80089d4:	e7fe      	b.n	80089d4 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089d6:	f001 f89d 	bl	8009b14 <xTaskGetSchedulerState>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <xQueueReceive+0x4e>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <xQueueReceive+0x52>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <xQueueReceive+0x54>
 80089ea:	2300      	movs	r3, #0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <xQueueReceive+0x5e>
 80089f0:	f001 fd4a 	bl	800a488 <ulSetInterruptMask>
 80089f4:	e7fe      	b.n	80089f4 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80089f6:	f001 fc09 	bl	800a20c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fe:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d019      	beq.n	8008a3a <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	6a38      	ldr	r0, [r7, #32]
 8008a0a:	f000 f87e 	bl	8008b0a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	1e5a      	subs	r2, r3, #1
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	3310      	adds	r3, #16
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fe6e 	bl	8009704 <xTaskRemoveFromEventList>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008a2e:	f001 fbdb 	bl	800a1e8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008a32:	f001 fbfd 	bl	800a230 <vPortExitCritical>
                return pdPASS;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e063      	b.n	8008b02 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008a40:	f001 fbf6 	bl	800a230 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e05c      	b.n	8008b02 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008a4e:	f107 0314 	add.w	r3, r7, #20
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 ff24 	bl	80098a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008a5c:	f001 fbe8 	bl	800a230 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008a60:	f000 fb88 	bl	8009174 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008a64:	f001 fbd2 	bl	800a20c <vPortEnterCritical>
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a74:	d103      	bne.n	8008a7e <xQueueReceive+0xe6>
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a84:	b25b      	sxtb	r3, r3
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d103      	bne.n	8008a94 <xQueueReceive+0xfc>
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a94:	f001 fbcc 	bl	800a230 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a98:	1d3a      	adds	r2, r7, #4
 8008a9a:	f107 0314 	add.w	r3, r7, #20
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 ff13 	bl	80098cc <xTaskCheckForTimeOut>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d11d      	bne.n	8008ae8 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aac:	6a38      	ldr	r0, [r7, #32]
 8008aae:	f000 f8a4 	bl	8008bfa <prvIsQueueEmpty>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d011      	beq.n	8008adc <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	3324      	adds	r3, #36	; 0x24
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fdc5 	bl	8009650 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008ac6:	6a38      	ldr	r0, [r7, #32]
 8008ac8:	f000 f845 	bl	8008b56 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008acc:	f000 fb60 	bl	8009190 <xTaskResumeAll>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d18f      	bne.n	80089f6 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8008ad6:	f001 fb87 	bl	800a1e8 <vPortYield>
 8008ada:	e78c      	b.n	80089f6 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008adc:	6a38      	ldr	r0, [r7, #32]
 8008ade:	f000 f83a 	bl	8008b56 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008ae2:	f000 fb55 	bl	8009190 <xTaskResumeAll>
 8008ae6:	e786      	b.n	80089f6 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008ae8:	6a38      	ldr	r0, [r7, #32]
 8008aea:	f000 f834 	bl	8008b56 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008aee:	f000 fb4f 	bl	8009190 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008af2:	6a38      	ldr	r0, [r7, #32]
 8008af4:	f000 f881 	bl	8008bfa <prvIsQueueEmpty>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f43f af7b 	beq.w	80089f6 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008b00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3728      	adds	r7, #40	; 0x28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d018      	beq.n	8008b4e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d303      	bcc.n	8008b3e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68d9      	ldr	r1, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	461a      	mov	r2, r3
 8008b48:	6838      	ldr	r0, [r7, #0]
 8008b4a:	f002 f942 	bl	800add2 <memcpy>
    }
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008b5e:	f001 fb55 	bl	800a20c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b68:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b6a:	e011      	b.n	8008b90 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3324      	adds	r3, #36	; 0x24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fdc3 	bl	8009704 <xTaskRemoveFromEventList>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8008b84:	f000 fef8 	bl	8009978 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	dce9      	bgt.n	8008b6c <prvUnlockQueue+0x16>
 8008b98:	e000      	b.n	8008b9c <prvUnlockQueue+0x46>
                        break;
 8008b9a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	22ff      	movs	r2, #255	; 0xff
 8008ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8008ba4:	f001 fb44 	bl	800a230 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008ba8:	f001 fb30 	bl	800a20c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bb4:	e011      	b.n	8008bda <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d012      	beq.n	8008be4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fd9e 	bl	8009704 <xTaskRemoveFromEventList>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008bce:	f000 fed3 	bl	8009978 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dce9      	bgt.n	8008bb6 <prvUnlockQueue+0x60>
 8008be2:	e000      	b.n	8008be6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008be4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	22ff      	movs	r2, #255	; 0xff
 8008bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8008bee:	f001 fb1f 	bl	800a230 <vPortExitCritical>
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008c02:	f001 fb03 	bl	800a20c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	e001      	b.n	8008c18 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008c18:	f001 fb0a 	bl	800a230 <vPortExitCritical>

    return xReturn;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <vQueueAddToRegistry+0x16>
 8008c38:	f001 fc26 	bl	800a488 <ulSetInterruptMask>
 8008c3c:	e7fe      	b.n	8008c3c <vQueueAddToRegistry+0x14>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d024      	beq.n	8008c92 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e01e      	b.n	8008c8c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008c4e:	4a17      	ldr	r2, [pc, #92]	; (8008cac <vQueueAddToRegistry+0x84>)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d105      	bne.n	8008c6a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	4a12      	ldr	r2, [pc, #72]	; (8008cac <vQueueAddToRegistry+0x84>)
 8008c64:	4413      	add	r3, r2
 8008c66:	60bb      	str	r3, [r7, #8]
                    break;
 8008c68:	e013      	b.n	8008c92 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <vQueueAddToRegistry+0x5e>
 8008c70:	4a0e      	ldr	r2, [pc, #56]	; (8008cac <vQueueAddToRegistry+0x84>)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <vQueueAddToRegistry+0x84>)
 8008c82:	4413      	add	r3, r2
 8008c84:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b07      	cmp	r3, #7
 8008c90:	d9dd      	bls.n	8008c4e <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8008ca4:	bf00      	nop
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000a44 	.word	0x20000a44

08008cb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008cc0:	f001 faa4 	bl	800a20c <vPortEnterCritical>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d103      	bne.n	8008cda <vQueueWaitForMessageRestricted+0x2a>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d103      	bne.n	8008cf0 <vQueueWaitForMessageRestricted+0x40>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cf0:	f001 fa9e 	bl	800a230 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	3324      	adds	r3, #36	; 0x24
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fcbf 	bl	8009688 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008d0a:	6978      	ldr	r0, [r7, #20]
 8008d0c:	f7ff ff23 	bl	8008b56 <prvUnlockQueue>
    }
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08c      	sub	sp, #48	; 0x30
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <xTaskCreateStatic+0x1a>
 8008d2c:	f001 fbac 	bl	800a488 <ulSetInterruptMask>
 8008d30:	e7fe      	b.n	8008d30 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <xTaskCreateStatic+0x26>
 8008d38:	f001 fba6 	bl	800a488 <ulSetInterruptMask>
 8008d3c:	e7fe      	b.n	8008d3c <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8008d3e:	235c      	movs	r3, #92	; 0x5c
 8008d40:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b5c      	cmp	r3, #92	; 0x5c
 8008d46:	d002      	beq.n	8008d4e <xTaskCreateStatic+0x36>
 8008d48:	f001 fb9e 	bl	800a488 <ulSetInterruptMask>
 8008d4c:	e7fe      	b.n	8008d4c <xTaskCreateStatic+0x34>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d4e:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d01e      	beq.n	8008d94 <xTaskCreateStatic+0x7c>
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01b      	beq.n	8008d94 <xTaskCreateStatic+0x7c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d64:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	f107 0318 	add.w	r3, r7, #24
 8008d7a:	9301      	str	r3, [sp, #4]
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f850 	bl	8008e2c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d8c:	69f8      	ldr	r0, [r7, #28]
 8008d8e:	f000 f8e3 	bl	8008f58 <prvAddNewTaskToReadyList>
 8008d92:	e001      	b.n	8008d98 <xTaskCreateStatic+0x80>
        }
        else
        {
            xReturn = NULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008d98:	69bb      	ldr	r3, [r7, #24]
    }
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b08c      	sub	sp, #48	; 0x30
 8008da6:	af04      	add	r7, sp, #16
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	603b      	str	r3, [r7, #0]
 8008dae:	4613      	mov	r3, r2
 8008db0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008db2:	88fb      	ldrh	r3, [r7, #6]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 fbc6 	bl	800a548 <pvPortMalloc>
 8008dbc:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00e      	beq.n	8008de2 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dc4:	205c      	movs	r0, #92	; 0x5c
 8008dc6:	f001 fbbf 	bl	800a548 <pvPortMalloc>
 8008dca:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8008dd8:	e005      	b.n	8008de6 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8008dda:	6978      	ldr	r0, [r7, #20]
 8008ddc:	f001 fc06 	bl	800a5ec <vPortFree>
 8008de0:	e001      	b.n	8008de6 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d017      	beq.n	8008e1c <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008df4:	88fa      	ldrh	r2, [r7, #6]
 8008df6:	2300      	movs	r3, #0
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	9302      	str	r3, [sp, #8]
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f80e 	bl	8008e2c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008e10:	69f8      	ldr	r0, [r7, #28]
 8008e12:	f000 f8a1 	bl	8008f58 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008e16:	2301      	movs	r3, #1
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	e002      	b.n	8008e22 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e20:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008e22:	69bb      	ldr	r3, [r7, #24]
    }
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	461a      	mov	r2, r3
 8008e44:	21a5      	movs	r1, #165	; 0xa5
 8008e46:	f001 ff27 	bl	800ac98 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e54:	3b01      	subs	r3, #1
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f023 0307 	bic.w	r3, r3, #7
 8008e62:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <prvInitialiseNewTask+0x48>
 8008e6e:	f001 fb0b 	bl	800a488 <ulSetInterruptMask>
 8008e72:	e7fe      	b.n	8008e72 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d01f      	beq.n	8008eba <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e012      	b.n	8008ea6 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	4413      	add	r3, r2
 8008e86:	7819      	ldrb	r1, [r3, #0]
 8008e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3334      	adds	r3, #52	; 0x34
 8008e90:	460a      	mov	r2, r1
 8008e92:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	4413      	add	r3, r2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d006      	beq.n	8008eae <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b0f      	cmp	r3, #15
 8008eaa:	d9e9      	bls.n	8008e80 <prvInitialiseNewTask+0x54>
 8008eac:	e000      	b.n	8008eb0 <prvInitialiseNewTask+0x84>
            {
                break;
 8008eae:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eb8:	e003      	b.n	8008ec2 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	2b37      	cmp	r3, #55	; 0x37
 8008ec6:	d902      	bls.n	8008ece <prvInitialiseNewTask+0xa2>
 8008ec8:	f001 fade 	bl	800a488 <ulSetInterruptMask>
 8008ecc:	e7fe      	b.n	8008ecc <prvInitialiseNewTask+0xa0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	2b37      	cmp	r3, #55	; 0x37
 8008ed2:	d901      	bls.n	8008ed8 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ed4:	2337      	movs	r3, #55	; 0x37
 8008ed6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	6a3a      	ldr	r2, [r7, #32]
 8008ee2:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	3304      	adds	r3, #4
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fc02 	bl	80086f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	3318      	adds	r3, #24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fbfd 	bl	80086f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f02:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f12:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	3354      	adds	r3, #84	; 0x54
 8008f18:	2204      	movs	r2, #4
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 febb 	bl	800ac98 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	3358      	adds	r3, #88	; 0x58
 8008f26:	2201      	movs	r2, #1
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 feb4 	bl	800ac98 <memset>
             * function as well. */
            #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
                {
                    #if ( portSTACK_GROWTH < 0 )
                        {
                            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	6938      	ldr	r0, [r7, #16]
 8008f3a:	f001 f9c3 	bl	800a2c4 <pxPortInitialiseStack>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008f50:	bf00      	nop
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008f60:	f001 f954 	bl	800a20c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008f64:	4b3e      	ldr	r3, [pc, #248]	; (8009060 <prvAddNewTaskToReadyList+0x108>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	4a3d      	ldr	r2, [pc, #244]	; (8009060 <prvAddNewTaskToReadyList+0x108>)
 8008f6c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008f6e:	4b3d      	ldr	r3, [pc, #244]	; (8009064 <prvAddNewTaskToReadyList+0x10c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008f76:	4a3b      	ldr	r2, [pc, #236]	; (8009064 <prvAddNewTaskToReadyList+0x10c>)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f7c:	4b38      	ldr	r3, [pc, #224]	; (8009060 <prvAddNewTaskToReadyList+0x108>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d110      	bne.n	8008fa6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008f84:	f000 fd14 	bl	80099b0 <prvInitialiseTaskLists>
 8008f88:	e00d      	b.n	8008fa6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008f8a:	4b37      	ldr	r3, [pc, #220]	; (8009068 <prvAddNewTaskToReadyList+0x110>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d109      	bne.n	8008fa6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f92:	4b34      	ldr	r3, [pc, #208]	; (8009064 <prvAddNewTaskToReadyList+0x10c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d802      	bhi.n	8008fa6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008fa0:	4a30      	ldr	r2, [pc, #192]	; (8009064 <prvAddNewTaskToReadyList+0x10c>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008fa6:	4b31      	ldr	r3, [pc, #196]	; (800906c <prvAddNewTaskToReadyList+0x114>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3301      	adds	r3, #1
 8008fac:	4a2f      	ldr	r2, [pc, #188]	; (800906c <prvAddNewTaskToReadyList+0x114>)
 8008fae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fb0:	4b2e      	ldr	r3, [pc, #184]	; (800906c <prvAddNewTaskToReadyList+0x114>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	4b2c      	ldr	r3, [pc, #176]	; (8009070 <prvAddNewTaskToReadyList+0x118>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d903      	bls.n	8008fcc <prvAddNewTaskToReadyList+0x74>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a29      	ldr	r2, [pc, #164]	; (8009070 <prvAddNewTaskToReadyList+0x118>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	4928      	ldr	r1, [pc, #160]	; (8009074 <prvAddNewTaskToReadyList+0x11c>)
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	3304      	adds	r3, #4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	609a      	str	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60da      	str	r2, [r3, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	3204      	adds	r2, #4
 8008ff8:	605a      	str	r2, [r3, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	1d1a      	adds	r2, r3, #4
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	609a      	str	r2, [r3, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4a19      	ldr	r2, [pc, #100]	; (8009074 <prvAddNewTaskToReadyList+0x11c>)
 8009010:	441a      	add	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	615a      	str	r2, [r3, #20]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901a:	4916      	ldr	r1, [pc, #88]	; (8009074 <prvAddNewTaskToReadyList+0x11c>)
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	1c59      	adds	r1, r3, #1
 800902a:	4812      	ldr	r0, [pc, #72]	; (8009074 <prvAddNewTaskToReadyList+0x11c>)
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4403      	add	r3, r0
 8009036:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009038:	f001 f8fa 	bl	800a230 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <prvAddNewTaskToReadyList+0x110>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009044:	4b07      	ldr	r3, [pc, #28]	; (8009064 <prvAddNewTaskToReadyList+0x10c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	429a      	cmp	r2, r3
 8009050:	d201      	bcs.n	8009056 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009052:	f001 f8c9 	bl	800a1e8 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000f58 	.word	0x20000f58
 8009064:	20000a84 	.word	0x20000a84
 8009068:	20000f64 	.word	0x20000f64
 800906c:	20000f74 	.word	0x20000f74
 8009070:	20000f60 	.word	0x20000f60
 8009074:	20000a88 	.word	0x20000a88

08009078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00f      	beq.n	80090aa <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <vTaskDelay+0x44>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <vTaskDelay+0x20>
 8009092:	f001 f9f9 	bl	800a488 <ulSetInterruptMask>
 8009096:	e7fe      	b.n	8009096 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8009098:	f000 f86c 	bl	8009174 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800909c:	2100      	movs	r1, #0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fd56 	bl	8009b50 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80090a4:	f000 f874 	bl	8009190 <xTaskResumeAll>
 80090a8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 80090b0:	f001 f89a 	bl	800a1e8 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80090b4:	bf00      	nop
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000f80 	.word	0x20000f80

080090c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090ce:	463a      	mov	r2, r7
 80090d0:	1d39      	adds	r1, r7, #4
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff faba 	bl	8008650 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	9202      	str	r2, [sp, #8]
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	2300      	movs	r3, #0
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	2300      	movs	r3, #0
 80090ec:	460a      	mov	r2, r1
 80090ee:	491a      	ldr	r1, [pc, #104]	; (8009158 <vTaskStartScheduler+0x98>)
 80090f0:	481a      	ldr	r0, [pc, #104]	; (800915c <vTaskStartScheduler+0x9c>)
 80090f2:	f7ff fe11 	bl	8008d18 <xTaskCreateStatic>
 80090f6:	4603      	mov	r3, r0
 80090f8:	4a19      	ldr	r2, [pc, #100]	; (8009160 <vTaskStartScheduler+0xa0>)
 80090fa:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80090fc:	4b18      	ldr	r3, [pc, #96]	; (8009160 <vTaskStartScheduler+0xa0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 8009104:	2301      	movs	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e001      	b.n	800910e <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d102      	bne.n	800911a <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 8009114:	f000 fd8a 	bl	8009c2c <xTimerCreateTimerTask>
 8009118:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d10e      	bne.n	800913e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8009120:	f001 f9b2 	bl	800a488 <ulSetInterruptMask>
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009124:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <vTaskStartScheduler+0xa4>)
 8009126:	f04f 32ff 	mov.w	r2, #4294967295
 800912a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800912c:	4b0e      	ldr	r3, [pc, #56]	; (8009168 <vTaskStartScheduler+0xa8>)
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009132:	4b0e      	ldr	r3, [pc, #56]	; (800916c <vTaskStartScheduler+0xac>)
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009138:	f001 f94e 	bl	800a3d8 <xPortStartScheduler>
 800913c:	e006      	b.n	800914c <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d102      	bne.n	800914c <vTaskStartScheduler+0x8c>
 8009146:	f001 f99f 	bl	800a488 <ulSetInterruptMask>
 800914a:	e7fe      	b.n	800914a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800914c:	4b08      	ldr	r3, [pc, #32]	; (8009170 <vTaskStartScheduler+0xb0>)
 800914e:	681b      	ldr	r3, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	0800b860 	.word	0x0800b860
 800915c:	08009991 	.word	0x08009991
 8009160:	20000f7c 	.word	0x20000f7c
 8009164:	20000f78 	.word	0x20000f78
 8009168:	20000f64 	.word	0x20000f64
 800916c:	20000f5c 	.word	0x20000f5c
 8009170:	2000000c 	.word	0x2000000c

08009174 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <vTaskSuspendAll+0x18>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	4a03      	ldr	r2, [pc, #12]	; (800918c <vTaskSuspendAll+0x18>)
 8009180:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009182:	bf00      	nop
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	20000f80 	.word	0x20000f80

08009190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009196:	2300      	movs	r3, #0
 8009198:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800919a:	2300      	movs	r3, #0
 800919c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800919e:	4b6a      	ldr	r3, [pc, #424]	; (8009348 <xTaskResumeAll+0x1b8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <xTaskResumeAll+0x1c>
 80091a6:	f001 f96f 	bl	800a488 <ulSetInterruptMask>
 80091aa:	e7fe      	b.n	80091aa <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80091ac:	f001 f82e 	bl	800a20c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80091b0:	4b65      	ldr	r3, [pc, #404]	; (8009348 <xTaskResumeAll+0x1b8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	4a64      	ldr	r2, [pc, #400]	; (8009348 <xTaskResumeAll+0x1b8>)
 80091b8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ba:	4b63      	ldr	r3, [pc, #396]	; (8009348 <xTaskResumeAll+0x1b8>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f040 80bb 	bne.w	800933a <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <xTaskResumeAll+0x1bc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 80b6 	beq.w	800933a <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091ce:	e08b      	b.n	80092e8 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d0:	4b5f      	ldr	r3, [pc, #380]	; (8009350 <xTaskResumeAll+0x1c0>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	60bb      	str	r3, [r7, #8]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	6a12      	ldr	r2, [r2, #32]
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	69d2      	ldr	r2, [r2, #28]
 80091f0:	605a      	str	r2, [r3, #4]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	3318      	adds	r3, #24
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d103      	bne.n	8009206 <xTaskResumeAll+0x76>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	6a1a      	ldr	r2, [r3, #32]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	605a      	str	r2, [r3, #4]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2200      	movs	r2, #0
 800920a:	629a      	str	r2, [r3, #40]	; 0x28
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	607b      	str	r3, [r7, #4]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	68d2      	ldr	r2, [r2, #12]
 8009224:	609a      	str	r2, [r3, #8]
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	6892      	ldr	r2, [r2, #8]
 800922e:	605a      	str	r2, [r3, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	3304      	adds	r3, #4
 8009238:	429a      	cmp	r2, r3
 800923a:	d103      	bne.n	8009244 <xTaskResumeAll+0xb4>
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2200      	movs	r2, #0
 8009248:	615a      	str	r2, [r3, #20]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	1e5a      	subs	r2, r3, #1
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009258:	4b3e      	ldr	r3, [pc, #248]	; (8009354 <xTaskResumeAll+0x1c4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d903      	bls.n	8009268 <xTaskResumeAll+0xd8>
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	4a3b      	ldr	r2, [pc, #236]	; (8009354 <xTaskResumeAll+0x1c4>)
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	493a      	ldr	r1, [pc, #232]	; (8009358 <xTaskResumeAll+0x1c8>)
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	3304      	adds	r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	609a      	str	r2, [r3, #8]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	60da      	str	r2, [r3, #12]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	3204      	adds	r2, #4
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	1d1a      	adds	r2, r3, #4
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	609a      	str	r2, [r3, #8]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a2:	4613      	mov	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4a2b      	ldr	r2, [pc, #172]	; (8009358 <xTaskResumeAll+0x1c8>)
 80092ac:	441a      	add	r2, r3
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	615a      	str	r2, [r3, #20]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	4928      	ldr	r1, [pc, #160]	; (8009358 <xTaskResumeAll+0x1c8>)
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	440b      	add	r3, r1
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	1c59      	adds	r1, r3, #1
 80092c6:	4824      	ldr	r0, [pc, #144]	; (8009358 <xTaskResumeAll+0x1c8>)
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4403      	add	r3, r0
 80092d2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d8:	4b20      	ldr	r3, [pc, #128]	; (800935c <xTaskResumeAll+0x1cc>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	429a      	cmp	r2, r3
 80092e0:	d302      	bcc.n	80092e8 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 80092e2:	4b1f      	ldr	r3, [pc, #124]	; (8009360 <xTaskResumeAll+0x1d0>)
 80092e4:	2201      	movs	r2, #1
 80092e6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092e8:	4b19      	ldr	r3, [pc, #100]	; (8009350 <xTaskResumeAll+0x1c0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f47f af6f 	bne.w	80091d0 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80092f8:	f000 fbf0 	bl	8009adc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092fc:	4b19      	ldr	r3, [pc, #100]	; (8009364 <xTaskResumeAll+0x1d4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d010      	beq.n	800932a <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009308:	f000 f83e 	bl	8009388 <xTaskIncrementTick>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 8009312:	4b13      	ldr	r3, [pc, #76]	; (8009360 <xTaskResumeAll+0x1d0>)
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3b01      	subs	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1f1      	bne.n	8009308 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <xTaskResumeAll+0x1d4>)
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800932a:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <xTaskResumeAll+0x1d0>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8009332:	2301      	movs	r3, #1
 8009334:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009336:	f000 ff57 	bl	800a1e8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800933a:	f000 ff79 	bl	800a230 <vPortExitCritical>

    return xAlreadyYielded;
 800933e:	693b      	ldr	r3, [r7, #16]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000f80 	.word	0x20000f80
 800934c:	20000f58 	.word	0x20000f58
 8009350:	20000f18 	.word	0x20000f18
 8009354:	20000f60 	.word	0x20000f60
 8009358:	20000a88 	.word	0x20000a88
 800935c:	20000a84 	.word	0x20000a84
 8009360:	20000f6c 	.word	0x20000f6c
 8009364:	20000f68 	.word	0x20000f68

08009368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <xTaskGetTickCount+0x1c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009374:	687b      	ldr	r3, [r7, #4]
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000f5c 	.word	0x20000f5c

08009388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009392:	4b7a      	ldr	r3, [pc, #488]	; (800957c <xTaskIncrementTick+0x1f4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f040 80e5 	bne.w	8009566 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800939c:	4b78      	ldr	r3, [pc, #480]	; (8009580 <xTaskIncrementTick+0x1f8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80093a4:	4a76      	ldr	r2, [pc, #472]	; (8009580 <xTaskIncrementTick+0x1f8>)
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d118      	bne.n	80093e2 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 80093b0:	4b74      	ldr	r3, [pc, #464]	; (8009584 <xTaskIncrementTick+0x1fc>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <xTaskIncrementTick+0x38>
 80093ba:	f001 f865 	bl	800a488 <ulSetInterruptMask>
 80093be:	e7fe      	b.n	80093be <xTaskIncrementTick+0x36>
 80093c0:	4b70      	ldr	r3, [pc, #448]	; (8009584 <xTaskIncrementTick+0x1fc>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	4b70      	ldr	r3, [pc, #448]	; (8009588 <xTaskIncrementTick+0x200>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a6e      	ldr	r2, [pc, #440]	; (8009584 <xTaskIncrementTick+0x1fc>)
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	4a6e      	ldr	r2, [pc, #440]	; (8009588 <xTaskIncrementTick+0x200>)
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	4b6d      	ldr	r3, [pc, #436]	; (800958c <xTaskIncrementTick+0x204>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	4a6c      	ldr	r2, [pc, #432]	; (800958c <xTaskIncrementTick+0x204>)
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	f000 fb7d 	bl	8009adc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80093e2:	4b6b      	ldr	r3, [pc, #428]	; (8009590 <xTaskIncrementTick+0x208>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	f0c0 80a7 	bcc.w	800953c <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093ee:	4b65      	ldr	r3, [pc, #404]	; (8009584 <xTaskIncrementTick+0x1fc>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f8:	4b65      	ldr	r3, [pc, #404]	; (8009590 <xTaskIncrementTick+0x208>)
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295
 80093fe:	601a      	str	r2, [r3, #0]
                    break;
 8009400:	e09c      	b.n	800953c <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009402:	4b60      	ldr	r3, [pc, #384]	; (8009584 <xTaskIncrementTick+0x1fc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	429a      	cmp	r2, r3
 8009418:	d203      	bcs.n	8009422 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800941a:	4a5d      	ldr	r2, [pc, #372]	; (8009590 <xTaskIncrementTick+0x208>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009420:	e08c      	b.n	800953c <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	60bb      	str	r3, [r7, #8]
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	68d2      	ldr	r2, [r2, #12]
 8009430:	609a      	str	r2, [r3, #8]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	6892      	ldr	r2, [r2, #8]
 800943a:	605a      	str	r2, [r3, #4]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	3304      	adds	r3, #4
 8009444:	429a      	cmp	r2, r3
 8009446:	d103      	bne.n	8009450 <xTaskIncrementTick+0xc8>
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	605a      	str	r2, [r3, #4]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2200      	movs	r2, #0
 8009454:	615a      	str	r2, [r3, #20]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	1e5a      	subs	r2, r3, #1
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01e      	beq.n	80094a6 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946c:	607b      	str	r3, [r7, #4]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	6a12      	ldr	r2, [r2, #32]
 8009476:	609a      	str	r2, [r3, #8]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	69d2      	ldr	r2, [r2, #28]
 8009480:	605a      	str	r2, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	3318      	adds	r3, #24
 800948a:	429a      	cmp	r2, r3
 800948c:	d103      	bne.n	8009496 <xTaskIncrementTick+0x10e>
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2200      	movs	r2, #0
 800949a:	629a      	str	r2, [r3, #40]	; 0x28
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094aa:	4b3a      	ldr	r3, [pc, #232]	; (8009594 <xTaskIncrementTick+0x20c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d903      	bls.n	80094ba <xTaskIncrementTick+0x132>
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	4a37      	ldr	r2, [pc, #220]	; (8009594 <xTaskIncrementTick+0x20c>)
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094be:	4936      	ldr	r1, [pc, #216]	; (8009598 <xTaskIncrementTick+0x210>)
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	3304      	adds	r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	609a      	str	r2, [r3, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	60da      	str	r2, [r3, #12]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	3204      	adds	r2, #4
 80094e6:	605a      	str	r2, [r3, #4]
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	1d1a      	adds	r2, r3, #4
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4a26      	ldr	r2, [pc, #152]	; (8009598 <xTaskIncrementTick+0x210>)
 80094fe:	441a      	add	r2, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	615a      	str	r2, [r3, #20]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009508:	4923      	ldr	r1, [pc, #140]	; (8009598 <xTaskIncrementTick+0x210>)
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	1c59      	adds	r1, r3, #1
 8009518:	481f      	ldr	r0, [pc, #124]	; (8009598 <xTaskIncrementTick+0x210>)
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4403      	add	r3, r0
 8009524:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	4b1c      	ldr	r3, [pc, #112]	; (800959c <xTaskIncrementTick+0x214>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	429a      	cmp	r2, r3
 8009532:	f4ff af5c 	bcc.w	80093ee <xTaskIncrementTick+0x66>
                            {
                                xSwitchRequired = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800953a:	e758      	b.n	80093ee <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800953c:	4b17      	ldr	r3, [pc, #92]	; (800959c <xTaskIncrementTick+0x214>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	4915      	ldr	r1, [pc, #84]	; (8009598 <xTaskIncrementTick+0x210>)
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d901      	bls.n	8009558 <xTaskIncrementTick+0x1d0>
                {
                    xSwitchRequired = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8009558:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <xTaskIncrementTick+0x218>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	e004      	b.n	8009570 <xTaskIncrementTick+0x1e8>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <xTaskIncrementTick+0x21c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <xTaskIncrementTick+0x21c>)
 800956e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8009570:	69fb      	ldr	r3, [r7, #28]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000f80 	.word	0x20000f80
 8009580:	20000f5c 	.word	0x20000f5c
 8009584:	20000f10 	.word	0x20000f10
 8009588:	20000f14 	.word	0x20000f14
 800958c:	20000f70 	.word	0x20000f70
 8009590:	20000f78 	.word	0x20000f78
 8009594:	20000f60 	.word	0x20000f60
 8009598:	20000a88 	.word	0x20000a88
 800959c:	20000a84 	.word	0x20000a84
 80095a0:	20000f6c 	.word	0x20000f6c
 80095a4:	20000f68 	.word	0x20000f68

080095a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ae:	4b23      	ldr	r3, [pc, #140]	; (800963c <vTaskSwitchContext+0x94>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80095b6:	4b22      	ldr	r3, [pc, #136]	; (8009640 <vTaskSwitchContext+0x98>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80095bc:	e039      	b.n	8009632 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 80095be:	4b20      	ldr	r3, [pc, #128]	; (8009640 <vTaskSwitchContext+0x98>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c4:	4b1f      	ldr	r3, [pc, #124]	; (8009644 <vTaskSwitchContext+0x9c>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	607b      	str	r3, [r7, #4]
 80095ca:	e008      	b.n	80095de <vTaskSwitchContext+0x36>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d102      	bne.n	80095d8 <vTaskSwitchContext+0x30>
 80095d2:	f000 ff59 	bl	800a488 <ulSetInterruptMask>
 80095d6:	e7fe      	b.n	80095d6 <vTaskSwitchContext+0x2e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3b01      	subs	r3, #1
 80095dc:	607b      	str	r3, [r7, #4]
 80095de:	491a      	ldr	r1, [pc, #104]	; (8009648 <vTaskSwitchContext+0xa0>)
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0ec      	beq.n	80095cc <vTaskSwitchContext+0x24>
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a12      	ldr	r2, [pc, #72]	; (8009648 <vTaskSwitchContext+0xa0>)
 80095fe:	4413      	add	r3, r2
 8009600:	603b      	str	r3, [r7, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	685a      	ldr	r2, [r3, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	605a      	str	r2, [r3, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685a      	ldr	r2, [r3, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	429a      	cmp	r2, r3
 8009616:	d104      	bne.n	8009622 <vTaskSwitchContext+0x7a>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	4a08      	ldr	r2, [pc, #32]	; (800964c <vTaskSwitchContext+0xa4>)
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	4a05      	ldr	r2, [pc, #20]	; (8009644 <vTaskSwitchContext+0x9c>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6013      	str	r3, [r2, #0]
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000f80 	.word	0x20000f80
 8009640:	20000f6c 	.word	0x20000f6c
 8009644:	20000f60 	.word	0x20000f60
 8009648:	20000a88 	.word	0x20000a88
 800964c:	20000a84 	.word	0x20000a84

08009650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <vTaskPlaceOnEventList+0x16>
 8009660:	f000 ff12 	bl	800a488 <ulSetInterruptMask>
 8009664:	e7fe      	b.n	8009664 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <vTaskPlaceOnEventList+0x34>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3318      	adds	r3, #24
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff f84f 	bl	8008712 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009674:	2101      	movs	r1, #1
 8009676:	6838      	ldr	r0, [r7, #0]
 8009678:	f000 fa6a 	bl	8009b50 <prvAddCurrentTaskToDelayedList>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20000a84 	.word	0x20000a84

08009688 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <vTaskPlaceOnEventListRestricted+0x18>
 800969a:	f000 fef5 	bl	800a488 <ulSetInterruptMask>
 800969e:	e7fe      	b.n	800969e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	4b16      	ldr	r3, [pc, #88]	; (8009700 <vTaskPlaceOnEventListRestricted+0x78>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	61da      	str	r2, [r3, #28]
 80096ae:	4b14      	ldr	r3, [pc, #80]	; (8009700 <vTaskPlaceOnEventListRestricted+0x78>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	6892      	ldr	r2, [r2, #8]
 80096b6:	621a      	str	r2, [r3, #32]
 80096b8:	4b11      	ldr	r3, [pc, #68]	; (8009700 <vTaskPlaceOnEventListRestricted+0x78>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	3218      	adds	r2, #24
 80096c2:	605a      	str	r2, [r3, #4]
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <vTaskPlaceOnEventListRestricted+0x78>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f103 0218 	add.w	r2, r3, #24
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	609a      	str	r2, [r3, #8]
 80096d0:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <vTaskPlaceOnEventListRestricted+0x78>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	629a      	str	r2, [r3, #40]	; 0x28
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	68b8      	ldr	r0, [r7, #8]
 80096f2:	f000 fa2d 	bl	8009b50 <prvAddCurrentTaskToDelayedList>
    }
 80096f6:	bf00      	nop
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000a84 	.word	0x20000a84

08009704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d102      	bne.n	8009720 <xTaskRemoveFromEventList+0x1c>
 800971a:	f000 feb5 	bl	800a488 <ulSetInterruptMask>
 800971e:	e7fe      	b.n	800971e <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009724:	617b      	str	r3, [r7, #20]
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	6a12      	ldr	r2, [r2, #32]
 800972e:	609a      	str	r2, [r3, #8]
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	69d2      	ldr	r2, [r2, #28]
 8009738:	605a      	str	r2, [r3, #4]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	3318      	adds	r3, #24
 8009742:	429a      	cmp	r2, r3
 8009744:	d103      	bne.n	800974e <xTaskRemoveFromEventList+0x4a>
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	6a1a      	ldr	r2, [r3, #32]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2200      	movs	r2, #0
 8009752:	629a      	str	r2, [r3, #40]	; 0x28
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	1e5a      	subs	r2, r3, #1
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800975e:	4b4a      	ldr	r3, [pc, #296]	; (8009888 <xTaskRemoveFromEventList+0x184>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d15f      	bne.n	8009826 <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	68d2      	ldr	r2, [r2, #12]
 8009774:	609a      	str	r2, [r3, #8]
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	6892      	ldr	r2, [r2, #8]
 800977e:	605a      	str	r2, [r3, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	3304      	adds	r3, #4
 8009788:	429a      	cmp	r2, r3
 800978a:	d103      	bne.n	8009794 <xTaskRemoveFromEventList+0x90>
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	605a      	str	r2, [r3, #4]
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2200      	movs	r2, #0
 8009798:	615a      	str	r2, [r3, #20]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	1e5a      	subs	r2, r3, #1
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4b38      	ldr	r3, [pc, #224]	; (800988c <xTaskRemoveFromEventList+0x188>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d903      	bls.n	80097b8 <xTaskRemoveFromEventList+0xb4>
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	4a35      	ldr	r2, [pc, #212]	; (800988c <xTaskRemoveFromEventList+0x188>)
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	4934      	ldr	r1, [pc, #208]	; (8009890 <xTaskRemoveFromEventList+0x18c>)
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	3304      	adds	r3, #4
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60bb      	str	r3, [r7, #8]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	609a      	str	r2, [r3, #8]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	60da      	str	r2, [r3, #12]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	3204      	adds	r2, #4
 80097e4:	605a      	str	r2, [r3, #4]
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	1d1a      	adds	r2, r3, #4
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	609a      	str	r2, [r3, #8]
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4a25      	ldr	r2, [pc, #148]	; (8009890 <xTaskRemoveFromEventList+0x18c>)
 80097fc:	441a      	add	r2, r3
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	615a      	str	r2, [r3, #20]
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	4922      	ldr	r1, [pc, #136]	; (8009890 <xTaskRemoveFromEventList+0x18c>)
 8009808:	4613      	mov	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	1c59      	adds	r1, r3, #1
 8009816:	481e      	ldr	r0, [pc, #120]	; (8009890 <xTaskRemoveFromEventList+0x18c>)
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4403      	add	r3, r0
 8009822:	6019      	str	r1, [r3, #0]
 8009824:	e01b      	b.n	800985e <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009826:	4b1b      	ldr	r3, [pc, #108]	; (8009894 <xTaskRemoveFromEventList+0x190>)
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	61da      	str	r2, [r3, #28]
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	689a      	ldr	r2, [r3, #8]
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	621a      	str	r2, [r3, #32]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	3218      	adds	r2, #24
 8009842:	605a      	str	r2, [r3, #4]
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	f103 0218 	add.w	r2, r3, #24
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	609a      	str	r2, [r3, #8]
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	4a10      	ldr	r2, [pc, #64]	; (8009894 <xTaskRemoveFromEventList+0x190>)
 8009852:	629a      	str	r2, [r3, #40]	; 0x28
 8009854:	4b0f      	ldr	r3, [pc, #60]	; (8009894 <xTaskRemoveFromEventList+0x190>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3301      	adds	r3, #1
 800985a:	4a0e      	ldr	r2, [pc, #56]	; (8009894 <xTaskRemoveFromEventList+0x190>)
 800985c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009862:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <xTaskRemoveFromEventList+0x194>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	429a      	cmp	r2, r3
 800986a:	d905      	bls.n	8009878 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <xTaskRemoveFromEventList+0x198>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	e001      	b.n	800987c <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800987c:	69fb      	ldr	r3, [r7, #28]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000f80 	.word	0x20000f80
 800988c:	20000f60 	.word	0x20000f60
 8009890:	20000a88 	.word	0x20000a88
 8009894:	20000f18 	.word	0x20000f18
 8009898:	20000a84 	.word	0x20000a84
 800989c:	20000f6c 	.word	0x20000f6c

080098a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <vTaskInternalSetTimeOutState+0x24>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <vTaskInternalSetTimeOutState+0x28>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000f70 	.word	0x20000f70
 80098c8:	20000f5c 	.word	0x20000f5c

080098cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <xTaskCheckForTimeOut+0x16>
 80098dc:	f000 fdd4 	bl	800a488 <ulSetInterruptMask>
 80098e0:	e7fe      	b.n	80098e0 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <xTaskCheckForTimeOut+0x22>
 80098e8:	f000 fdce 	bl	800a488 <ulSetInterruptMask>
 80098ec:	e7fe      	b.n	80098ec <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 80098ee:	f000 fc8d 	bl	800a20c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80098f2:	4b1f      	ldr	r3, [pc, #124]	; (8009970 <xTaskCheckForTimeOut+0xa4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d102      	bne.n	8009912 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e026      	b.n	8009960 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4b17      	ldr	r3, [pc, #92]	; (8009974 <xTaskCheckForTimeOut+0xa8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d00a      	beq.n	8009934 <xTaskCheckForTimeOut+0x68>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	429a      	cmp	r2, r3
 8009926:	d305      	bcc.n	8009934 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	e015      	b.n	8009960 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	429a      	cmp	r2, r3
 800993c:	d20b      	bcs.n	8009956 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	1ad2      	subs	r2, r2, r3
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff ffa8 	bl	80098a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	e004      	b.n	8009960 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8009960:	f000 fc66 	bl	800a230 <vPortExitCritical>

    return xReturn;
 8009964:	697b      	ldr	r3, [r7, #20]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000f5c 	.word	0x20000f5c
 8009974:	20000f70 	.word	0x20000f70

08009978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009978:	b480      	push	{r7}
 800997a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800997c:	4b03      	ldr	r3, [pc, #12]	; (800998c <vTaskMissedYield+0x14>)
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
}
 8009982:	bf00      	nop
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	20000f6c 	.word	0x20000f6c

08009990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009998:	f000 f84a 	bl	8009a30 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800999c:	4b03      	ldr	r3, [pc, #12]	; (80099ac <prvIdleTask+0x1c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d9f9      	bls.n	8009998 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80099a4:	f000 fc20 	bl	800a1e8 <vPortYield>
        prvCheckTasksWaitingTermination();
 80099a8:	e7f6      	b.n	8009998 <prvIdleTask+0x8>
 80099aa:	bf00      	nop
 80099ac:	20000a88 	.word	0x20000a88

080099b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	e00c      	b.n	80099d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4a12      	ldr	r2, [pc, #72]	; (8009a10 <prvInitialiseTaskLists+0x60>)
 80099c8:	4413      	add	r3, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fe74 	bl	80086b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3301      	adds	r3, #1
 80099d4:	607b      	str	r3, [r7, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b37      	cmp	r3, #55	; 0x37
 80099da:	d9ef      	bls.n	80099bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80099dc:	480d      	ldr	r0, [pc, #52]	; (8009a14 <prvInitialiseTaskLists+0x64>)
 80099de:	f7fe fe6b 	bl	80086b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80099e2:	480d      	ldr	r0, [pc, #52]	; (8009a18 <prvInitialiseTaskLists+0x68>)
 80099e4:	f7fe fe68 	bl	80086b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80099e8:	480c      	ldr	r0, [pc, #48]	; (8009a1c <prvInitialiseTaskLists+0x6c>)
 80099ea:	f7fe fe65 	bl	80086b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80099ee:	480c      	ldr	r0, [pc, #48]	; (8009a20 <prvInitialiseTaskLists+0x70>)
 80099f0:	f7fe fe62 	bl	80086b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80099f4:	480b      	ldr	r0, [pc, #44]	; (8009a24 <prvInitialiseTaskLists+0x74>)
 80099f6:	f7fe fe5f 	bl	80086b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80099fa:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <prvInitialiseTaskLists+0x78>)
 80099fc:	4a05      	ldr	r2, [pc, #20]	; (8009a14 <prvInitialiseTaskLists+0x64>)
 80099fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a00:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <prvInitialiseTaskLists+0x7c>)
 8009a02:	4a05      	ldr	r2, [pc, #20]	; (8009a18 <prvInitialiseTaskLists+0x68>)
 8009a04:	601a      	str	r2, [r3, #0]
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000a88 	.word	0x20000a88
 8009a14:	20000ee8 	.word	0x20000ee8
 8009a18:	20000efc 	.word	0x20000efc
 8009a1c:	20000f18 	.word	0x20000f18
 8009a20:	20000f2c 	.word	0x20000f2c
 8009a24:	20000f44 	.word	0x20000f44
 8009a28:	20000f10 	.word	0x20000f10
 8009a2c:	20000f14 	.word	0x20000f14

08009a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a36:	e019      	b.n	8009a6c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009a38:	f000 fbe8 	bl	800a20c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a3c:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <prvCheckTasksWaitingTermination+0x50>)
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fe9b 	bl	8008784 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8009a4e:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <prvCheckTasksWaitingTermination+0x54>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	4a0b      	ldr	r2, [pc, #44]	; (8009a84 <prvCheckTasksWaitingTermination+0x54>)
 8009a56:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <prvCheckTasksWaitingTermination+0x58>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	4a0a      	ldr	r2, [pc, #40]	; (8009a88 <prvCheckTasksWaitingTermination+0x58>)
 8009a60:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8009a62:	f000 fbe5 	bl	800a230 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f810 	bl	8009a8c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a6c:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <prvCheckTasksWaitingTermination+0x58>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1e1      	bne.n	8009a38 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000f2c 	.word	0x20000f2c
 8009a84:	20000f58 	.word	0x20000f58
 8009a88:	20000f40 	.word	0x20000f40

08009a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d108      	bne.n	8009ab0 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fda2 	bl	800a5ec <vPortFree>
                    vPortFree( pxTCB );
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd9f 	bl	800a5ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009aae:	e010      	b.n	8009ad2 <prvDeleteTCB+0x46>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d103      	bne.n	8009ac2 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fd96 	bl	800a5ec <vPortFree>
    }
 8009ac0:	e007      	b.n	8009ad2 <prvDeleteTCB+0x46>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d002      	beq.n	8009ad2 <prvDeleteTCB+0x46>
 8009acc:	f000 fcdc 	bl	800a488 <ulSetInterruptMask>
 8009ad0:	e7fe      	b.n	8009ad0 <prvDeleteTCB+0x44>
    }
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <prvResetNextTaskUnblockTime+0x30>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d104      	bne.n	8009af4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009aea:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <prvResetNextTaskUnblockTime+0x34>)
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009af2:	e005      	b.n	8009b00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009af4:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <prvResetNextTaskUnblockTime+0x30>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <prvResetNextTaskUnblockTime+0x34>)
 8009afe:	6013      	str	r3, [r2, #0]
}
 8009b00:	bf00      	nop
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000f10 	.word	0x20000f10
 8009b10:	20000f78 	.word	0x20000f78

08009b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <xTaskGetSchedulerState+0x34>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009b22:	2301      	movs	r3, #1
 8009b24:	607b      	str	r3, [r7, #4]
 8009b26:	e008      	b.n	8009b3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <xTaskGetSchedulerState+0x38>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009b30:	2302      	movs	r3, #2
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	e001      	b.n	8009b3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009b36:	2300      	movs	r3, #0
 8009b38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009b3a:	687b      	ldr	r3, [r7, #4]
    }
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	20000f64 	.word	0x20000f64
 8009b4c:	20000f80 	.word	0x20000f80

08009b50 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009b5a:	4b2e      	ldr	r3, [pc, #184]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b60:	4b2d      	ldr	r3, [pc, #180]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fe0c 	bl	8008784 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b72:	d124      	bne.n	8009bbe <prvAddCurrentTaskToDelayedList+0x6e>
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d021      	beq.n	8009bbe <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b7a:	4b28      	ldr	r3, [pc, #160]	; (8009c1c <prvAddCurrentTaskToDelayedList+0xcc>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	613b      	str	r3, [r7, #16]
 8009b80:	4b25      	ldr	r3, [pc, #148]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	609a      	str	r2, [r3, #8]
 8009b88:	4b23      	ldr	r3, [pc, #140]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	6892      	ldr	r2, [r2, #8]
 8009b90:	60da      	str	r2, [r3, #12]
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	3204      	adds	r2, #4
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	1d1a      	adds	r2, r3, #4
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	609a      	str	r2, [r3, #8]
 8009ba8:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <prvAddCurrentTaskToDelayedList+0xcc>)
 8009bae:	615a      	str	r2, [r3, #20]
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <prvAddCurrentTaskToDelayedList+0xcc>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <prvAddCurrentTaskToDelayedList+0xcc>)
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009bbc:	e026      	b.n	8009c0c <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bc6:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d209      	bcs.n	8009bea <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bd6:	4b12      	ldr	r3, [pc, #72]	; (8009c20 <prvAddCurrentTaskToDelayedList+0xd0>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fe fd95 	bl	8008712 <vListInsert>
}
 8009be8:	e010      	b.n	8009c0c <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bea:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <prvAddCurrentTaskToDelayedList+0xd4>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7fe fd8b 	bl	8008712 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d202      	bcs.n	8009c0c <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 8009c06:	4a08      	ldr	r2, [pc, #32]	; (8009c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6013      	str	r3, [r2, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000f5c 	.word	0x20000f5c
 8009c18:	20000a84 	.word	0x20000a84
 8009c1c:	20000f44 	.word	0x20000f44
 8009c20:	20000f14 	.word	0x20000f14
 8009c24:	20000f10 	.word	0x20000f10
 8009c28:	20000f78 	.word	0x20000f78

08009c2c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009c36:	f000 fa59 	bl	800a0ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009c3a:	4b18      	ldr	r3, [pc, #96]	; (8009c9c <xTimerCreateTimerTask+0x70>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d020      	beq.n	8009c84 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	1d39      	adds	r1, r7, #4
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fd16 	bl	8008684 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	9202      	str	r2, [sp, #8]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	2302      	movs	r3, #2
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	460a      	mov	r2, r1
 8009c6a:	490d      	ldr	r1, [pc, #52]	; (8009ca0 <xTimerCreateTimerTask+0x74>)
 8009c6c:	480d      	ldr	r0, [pc, #52]	; (8009ca4 <xTimerCreateTimerTask+0x78>)
 8009c6e:	f7ff f853 	bl	8008d18 <xTaskCreateStatic>
 8009c72:	4603      	mov	r3, r0
 8009c74:	4a0c      	ldr	r2, [pc, #48]	; (8009ca8 <xTimerCreateTimerTask+0x7c>)
 8009c76:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8009c78:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <xTimerCreateTimerTask+0x7c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <xTimerCreateTimerTask+0x64>
 8009c8a:	f000 fbfd 	bl	800a488 <ulSetInterruptMask>
 8009c8e:	e7fe      	b.n	8009c8e <xTimerCreateTimerTask+0x62>
        return xReturn;
 8009c90:	68fb      	ldr	r3, [r7, #12]
    }
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000fb4 	.word	0x20000fb4
 8009ca0:	0800b868 	.word	0x0800b868
 8009ca4:	08009d51 	.word	0x08009d51
 8009ca8:	20000fb8 	.word	0x20000fb8

08009cac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009cb8:	e008      	b.n	8009ccc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	18d1      	adds	r1, r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 f8d5 	bl	8009e88 <prvInsertTimerInActiveList>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1ea      	bne.n	8009cba <prvReloadTimer+0xe>
        }
    }
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfa:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <prvProcessExpiredTimer+0x5c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fd3b 	bl	8008784 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d14:	f003 0304 	and.w	r3, r3, #4
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f7ff ffc3 	bl	8009cac <prvReloadTimer>
 8009d26:	e008      	b.n	8009d3a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	4798      	blx	r3
    }
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000fac 	.word	0x20000fac

08009d50 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f84f 	bl	8009e00 <prvGetNextExpireTime>
 8009d62:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	4619      	mov	r1, r3
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 f803 	bl	8009d74 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009d6e:	f000 f8cd 	bl	8009f0c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d72:	e7f1      	b.n	8009d58 <prvTimerTask+0x8>

08009d74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009d7e:	f7ff f9f9 	bl	8009174 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f85e 	bl	8009e48 <prvSampleTimeNow>
 8009d8c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d12a      	bne.n	8009dea <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <prvProcessTimerOrBlockTask+0x3c>
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d806      	bhi.n	8009db0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009da2:	f7ff f9f5 	bl	8009190 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ffa1 	bl	8009cf0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009dae:	e01e      	b.n	8009dee <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009db6:	4b10      	ldr	r3, [pc, #64]	; (8009df8 <prvProcessTimerOrBlockTask+0x84>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <prvProcessTimerOrBlockTask+0x50>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <prvProcessTimerOrBlockTask+0x52>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <prvProcessTimerOrBlockTask+0x88>)
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f7fe ff6b 	bl	8008cb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009dda:	f7ff f9d9 	bl	8009190 <xTaskResumeAll>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8009de4:	f000 fa00 	bl	800a1e8 <vPortYield>
    }
 8009de8:	e001      	b.n	8009dee <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8009dea:	f7ff f9d1 	bl	8009190 <xTaskResumeAll>
    }
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000fb0 	.word	0x20000fb0
 8009dfc:	20000fb4 	.word	0x20000fb4

08009e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e08:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <prvGetNextExpireTime+0x44>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <prvGetNextExpireTime+0x16>
 8009e12:	2201      	movs	r2, #1
 8009e14:	e000      	b.n	8009e18 <prvGetNextExpireTime+0x18>
 8009e16:	2200      	movs	r2, #0
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d105      	bne.n	8009e30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e24:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <prvGetNextExpireTime+0x44>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	e001      	b.n	8009e34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009e34:	68fb      	ldr	r3, [r7, #12]
    }
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	20000fac 	.word	0x20000fac

08009e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009e50:	f7ff fa8a 	bl	8009368 <xTaskGetTickCount>
 8009e54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009e56:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <prvSampleTimeNow+0x3c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d205      	bcs.n	8009e6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009e60:	f000 f91e 	bl	800a0a0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e002      	b.n	8009e72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009e72:	4a04      	ldr	r2, [pc, #16]	; (8009e84 <prvSampleTimeNow+0x3c>)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009e78:	68fb      	ldr	r3, [r7, #12]
    }
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20000fbc 	.word	0x20000fbc

08009e88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d812      	bhi.n	8009ed4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	1ad2      	subs	r2, r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d302      	bcc.n	8009ec2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e01b      	b.n	8009efa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <prvInsertTimerInActiveList+0x7c>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4610      	mov	r0, r2
 8009ece:	f7fe fc20 	bl	8008712 <vListInsert>
 8009ed2:	e012      	b.n	8009efa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d206      	bcs.n	8009eea <prvInsertTimerInActiveList+0x62>
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	e007      	b.n	8009efa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <prvInsertTimerInActiveList+0x80>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	f7fe fc0c 	bl	8008712 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8009efa:	697b      	ldr	r3, [r7, #20]
    }
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	20000fb0 	.word	0x20000fb0
 8009f08:	20000fac 	.word	0x20000fac

08009f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f12:	e0b2      	b.n	800a07a <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	da10      	bge.n	8009f3c <prvProcessReceivedCommands+0x30>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f1a:	1d3b      	adds	r3, r7, #4
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	61fb      	str	r3, [r7, #28]

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <prvProcessReceivedCommands+0x20>
 8009f26:	f000 faaf 	bl	800a488 <ulSetInterruptMask>
 8009f2a:	e7fe      	b.n	8009f2a <prvProcessReceivedCommands+0x1e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	69fa      	ldr	r2, [r7, #28]
 8009f32:	6850      	ldr	r0, [r2, #4]
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	6892      	ldr	r2, [r2, #8]
 8009f38:	4611      	mov	r1, r2
 8009f3a:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f2c0 809b 	blt.w	800a07a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d004      	beq.n	8009f5a <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fc15 	bl	8008784 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f5a:	463b      	mov	r3, r7
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff ff73 	bl	8009e48 <prvSampleTimeNow>
 8009f62:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	f200 8085 	bhi.w	800a078 <prvProcessReceivedCommands+0x16c>
 8009f6e:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <prvProcessReceivedCommands+0x68>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	0800a001 	.word	0x0800a001
 8009f80:	0800a015 	.word	0x0800a015
 8009f84:	0800a04f 	.word	0x0800a04f
 8009f88:	08009f99 	.word	0x08009f99
 8009f8c:	08009f99 	.word	0x08009f99
 8009f90:	0800a001 	.word	0x0800a001
 8009f94:	0800a015 	.word	0x0800a015
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	18d1      	adds	r1, r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	69b8      	ldr	r0, [r7, #24]
 8009fb8:	f7ff ff66 	bl	8009e88 <prvInsertTimerInActiveList>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d05b      	beq.n	800a07a <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	69b8      	ldr	r0, [r7, #24]
 8009fde:	f7ff fe65 	bl	8009cac <prvReloadTimer>
 8009fe2:	e008      	b.n	8009ff6 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	69b8      	ldr	r0, [r7, #24]
 8009ffc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8009ffe:	e03c      	b.n	800a07a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a006:	f023 0301 	bic.w	r3, r3, #1
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800a012:	e032      	b.n	800a07a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <prvProcessReceivedCommands+0x12e>
 800a034:	f000 fa28 	bl	800a488 <ulSetInterruptMask>
 800a038:	e7fe      	b.n	800a038 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	18d1      	adds	r1, r2, r3
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	69b8      	ldr	r0, [r7, #24]
 800a048:	f7ff ff1e 	bl	8009e88 <prvInsertTimerInActiveList>
                        break;
 800a04c:	e015      	b.n	800a07a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <prvProcessReceivedCommands+0x158>
                                {
                                    vPortFree( pxTimer );
 800a05c:	69b8      	ldr	r0, [r7, #24]
 800a05e:	f000 fac5 	bl	800a5ec <vPortFree>
 800a062:	e00a      	b.n	800a07a <prvProcessReceivedCommands+0x16e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a06a:	f023 0301 	bic.w	r3, r3, #1
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a076:	e000      	b.n	800a07a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a078:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a07a:	4b08      	ldr	r3, [pc, #32]	; (800a09c <prvProcessReceivedCommands+0x190>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	1d39      	adds	r1, r7, #4
 800a080:	2200      	movs	r2, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fc88 	bl	8008998 <xQueueReceive>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f47f af42 	bne.w	8009f14 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	3720      	adds	r7, #32
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	20000fb4 	.word	0x20000fb4

0800a0a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0a6:	e009      	b.n	800a0bc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0a8:	4b0e      	ldr	r3, [pc, #56]	; (800a0e4 <prvSwitchTimerLists+0x44>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a0b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a0b6:	6838      	ldr	r0, [r7, #0]
 800a0b8:	f7ff fe1a 	bl	8009cf0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0bc:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <prvSwitchTimerLists+0x44>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1f0      	bne.n	800a0a8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <prvSwitchTimerLists+0x44>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <prvSwitchTimerLists+0x48>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a04      	ldr	r2, [pc, #16]	; (800a0e4 <prvSwitchTimerLists+0x44>)
 800a0d2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a0d4:	4a04      	ldr	r2, [pc, #16]	; (800a0e8 <prvSwitchTimerLists+0x48>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6013      	str	r3, [r2, #0]
    }
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000fac 	.word	0x20000fac
 800a0e8:	20000fb0 	.word	0x20000fb0

0800a0ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a0f2:	f000 f88b 	bl	800a20c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a0f6:	4b15      	ldr	r3, [pc, #84]	; (800a14c <prvCheckForValidListAndQueue+0x60>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d120      	bne.n	800a140 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800a0fe:	4814      	ldr	r0, [pc, #80]	; (800a150 <prvCheckForValidListAndQueue+0x64>)
 800a100:	f7fe fada 	bl	80086b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a104:	4813      	ldr	r0, [pc, #76]	; (800a154 <prvCheckForValidListAndQueue+0x68>)
 800a106:	f7fe fad7 	bl	80086b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a10a:	4b13      	ldr	r3, [pc, #76]	; (800a158 <prvCheckForValidListAndQueue+0x6c>)
 800a10c:	4a10      	ldr	r2, [pc, #64]	; (800a150 <prvCheckForValidListAndQueue+0x64>)
 800a10e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a110:	4b12      	ldr	r3, [pc, #72]	; (800a15c <prvCheckForValidListAndQueue+0x70>)
 800a112:	4a10      	ldr	r2, [pc, #64]	; (800a154 <prvCheckForValidListAndQueue+0x68>)
 800a114:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a116:	2300      	movs	r3, #0
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	4b11      	ldr	r3, [pc, #68]	; (800a160 <prvCheckForValidListAndQueue+0x74>)
 800a11c:	4a11      	ldr	r2, [pc, #68]	; (800a164 <prvCheckForValidListAndQueue+0x78>)
 800a11e:	2110      	movs	r1, #16
 800a120:	200a      	movs	r0, #10
 800a122:	f7fe fbd0 	bl	80088c6 <xQueueGenericCreateStatic>
 800a126:	4603      	mov	r3, r0
 800a128:	4a08      	ldr	r2, [pc, #32]	; (800a14c <prvCheckForValidListAndQueue+0x60>)
 800a12a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800a12c:	4b07      	ldr	r3, [pc, #28]	; (800a14c <prvCheckForValidListAndQueue+0x60>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <prvCheckForValidListAndQueue+0x60>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	490b      	ldr	r1, [pc, #44]	; (800a168 <prvCheckForValidListAndQueue+0x7c>)
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe fd74 	bl	8008c28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a140:	f000 f876 	bl	800a230 <vPortExitCritical>
    }
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20000fb4 	.word	0x20000fb4
 800a150:	20000f84 	.word	0x20000f84
 800a154:	20000f98 	.word	0x20000f98
 800a158:	20000fac 	.word	0x20000fac
 800a15c:	20000fb0 	.word	0x20000fb0
 800a160:	20001060 	.word	0x20001060
 800a164:	20000fc0 	.word	0x20000fc0
 800a168:	0800b870 	.word	0x0800b870

0800a16c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a170:	4b0b      	ldr	r3, [pc, #44]	; (800a1a0 <vPortSetupTimerInterrupt+0x34>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <vPortSetupTimerInterrupt+0x38>)
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <vPortSetupTimerInterrupt+0x3c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a0a      	ldr	r2, [pc, #40]	; (800a1ac <vPortSetupTimerInterrupt+0x40>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	099b      	lsrs	r3, r3, #6
 800a188:	4a09      	ldr	r2, [pc, #36]	; (800a1b0 <vPortSetupTimerInterrupt+0x44>)
 800a18a:	3b01      	subs	r3, #1
 800a18c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a18e:	4b04      	ldr	r3, [pc, #16]	; (800a1a0 <vPortSetupTimerInterrupt+0x34>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	e000e010 	.word	0xe000e010
 800a1a4:	e000e018 	.word	0xe000e018
 800a1a8:	20000000 	.word	0x20000000
 800a1ac:	10624dd3 	.word	0x10624dd3
 800a1b0:	e000e014 	.word	0xe000e014

0800a1b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <prvTaskExitError+0x30>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c6:	d002      	beq.n	800a1ce <prvTaskExitError+0x1a>
 800a1c8:	f000 f95e 	bl	800a488 <ulSetInterruptMask>
 800a1cc:	e7fe      	b.n	800a1cc <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800a1ce:	f000 f95b 	bl	800a488 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800a1d2:	bf00      	nop
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0fc      	beq.n	800a1d4 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20000010 	.word	0x20000010

0800a1e8 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1ec:	4b06      	ldr	r3, [pc, #24]	; (800a208 <vPortYield+0x20>)
 800a1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f2:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800a1f4:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800a1f8:	f3bf 8f6f 	isb	sy
}
 800a1fc:	bf00      	nop
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800a210:	f000 f93a 	bl	800a488 <ulSetInterruptMask>
    ulCriticalNesting++;
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <vPortEnterCritical+0x20>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	4a04      	ldr	r2, [pc, #16]	; (800a22c <vPortEnterCritical+0x20>)
 800a21c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800a21e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800a222:	f3bf 8f6f 	isb	sy
}
 800a226:	bf00      	nop
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000010 	.word	0x20000010

0800a230 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800a234:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <vPortExitCritical+0x30>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <vPortExitCritical+0x12>
 800a23c:	f000 f924 	bl	800a488 <ulSetInterruptMask>
 800a240:	e7fe      	b.n	800a240 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800a242:	4b07      	ldr	r3, [pc, #28]	; (800a260 <vPortExitCritical+0x30>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3b01      	subs	r3, #1
 800a248:	4a05      	ldr	r2, [pc, #20]	; (800a260 <vPortExitCritical+0x30>)
 800a24a:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <vPortExitCritical+0x30>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800a254:	2000      	movs	r0, #0
 800a256:	f000 f924 	bl	800a4a2 <vClearInterruptMask>
    }
}
 800a25a:	bf00      	nop
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20000010 	.word	0x20000010

0800a264 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a26a:	f000 f90d 	bl	800a488 <ulSetInterruptMask>
 800a26e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a270:	f7ff f88a 	bl	8009388 <xTaskIncrementTick>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a27a:	4b05      	ldr	r3, [pc, #20]	; (800a290 <xPortSysTickHandler+0x2c>)
 800a27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a280:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f90d 	bl	800a4a2 <vClearInterruptMask>
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3b02      	subs	r3, #2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d102      	bne.n	800a2b6 <vPortSVCHandler_C+0x22>
                }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800a2b0:	f000 f8b6 	bl	800a420 <vRestoreContextOfFirstTask>
            break;
 800a2b4:	e002      	b.n	800a2bc <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800a2b6:	f000 f8e7 	bl	800a488 <ulSetInterruptMask>
 800a2ba:	e7fe      	b.n	800a2ba <vPortSVCHandler_C+0x26>
    }
}
 800a2bc:	bf00      	nop
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3b04      	subs	r3, #4
 800a2d6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2de:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3b04      	subs	r3, #4
 800a2e4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3b04      	subs	r3, #4
 800a2f0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800a2f2:	4a38      	ldr	r2, [pc, #224]	; (800a3d4 <pxPortInitialiseStack+0x110>)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3b04      	subs	r3, #4
 800a2fc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800a304:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800a312:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3b04      	subs	r3, #4
 800a318:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800a320:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3b04      	subs	r3, #4
 800a326:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800a32e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3b04      	subs	r3, #4
 800a334:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3b04      	subs	r3, #4
 800a340:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800a348:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3b04      	subs	r3, #4
 800a34e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800a356:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3b04      	subs	r3, #4
 800a35c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800a364:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3b04      	subs	r3, #4
 800a36a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800a372:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3b04      	subs	r3, #4
 800a378:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800a380:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3b04      	subs	r3, #4
 800a386:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800a38e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3b04      	subs	r3, #4
 800a394:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800a39c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800a3aa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3b04      	subs	r3, #4
 800a3b0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800a3b8:	601a      	str	r2, [r3, #0]
                        *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
                    }
                }
            #endif /* configENABLE_MPU */

            pxTopOfStack--;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3b04      	subs	r3, #4
 800a3be:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	0800a1b5 	.word	0x0800a1b5

0800a3d8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	; (800a410 <xPortStartScheduler+0x38>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a0b      	ldr	r2, [pc, #44]	; (800a410 <xPortStartScheduler+0x38>)
 800a3e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3e6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a3e8:	4b09      	ldr	r3, [pc, #36]	; (800a410 <xPortStartScheduler+0x38>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a08      	ldr	r2, [pc, #32]	; (800a410 <xPortStartScheduler+0x38>)
 800a3ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f2:	6013      	str	r3, [r2, #0]
        }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a3f4:	f7ff feba 	bl	800a16c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800a3f8:	4b06      	ldr	r3, [pc, #24]	; (800a414 <xPortStartScheduler+0x3c>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800a3fe:	f000 f82f 	bl	800a460 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a402:	f7ff f8d1 	bl	80095a8 <vTaskSwitchContext>
    prvTaskExitError();
 800a406:	f7ff fed5 	bl	800a1b4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	e000ed20 	.word	0xe000ed20
 800a414:	20000010 	.word	0x20000010
	...

0800a420 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a420:	4a0b      	ldr	r2, [pc, #44]	; (800a450 <pxCurrentTCBConst2>)
 800a422:	6811      	ldr	r1, [r2, #0]
 800a424:	6808      	ldr	r0, [r1, #0]
 800a426:	c806      	ldmia	r0!, {r1, r2}
 800a428:	f381 880b 	msr	PSPLIM, r1
 800a42c:	2102      	movs	r1, #2
 800a42e:	f381 8814 	msr	CONTROL, r1
 800a432:	3020      	adds	r0, #32
 800a434:	f380 8809 	msr	PSP, r0
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f04f 0000 	mov.w	r0, #0
 800a440:	f380 8811 	msr	BASEPRI, r0
 800a444:	4710      	bx	r2
 800a446:	bf00      	nop
 800a448:	f3af 8000 	nop.w
 800a44c:	f3af 8000 	nop.w

0800a450 <pxCurrentTCBConst2>:
 800a450:	20000a84 	.word	0x20000a84
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop
	...

0800a460 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a460:	4807      	ldr	r0, [pc, #28]	; (800a480 <xVTORConst>)
 800a462:	6800      	ldr	r0, [r0, #0]
 800a464:	6800      	ldr	r0, [r0, #0]
 800a466:	f380 8808 	msr	MSP, r0
 800a46a:	b662      	cpsie	i
 800a46c:	b661      	cpsie	f
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	df02      	svc	2
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w

0800a480 <xVTORConst>:
 800a480:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop

0800a488 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a488:	f3ef 8011 	mrs	r0, BASEPRI
 800a48c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800a490:	f381 8811 	msr	BASEPRI, r1
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800a49e:	bf00      	nop
 800a4a0:	4618      	mov	r0, r3

0800a4a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a4a2:	f380 8811 	msr	BASEPRI, r0
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800a4b0:	bf00      	nop
	...

0800a4c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a4c0:	f3ef 8009 	mrs	r0, PSP
 800a4c4:	f3ef 820b 	mrs	r2, PSPLIM
 800a4c8:	4673      	mov	r3, lr
 800a4ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a4ce:	4a10      	ldr	r2, [pc, #64]	; (800a510 <pxCurrentTCBConst>)
 800a4d0:	6811      	ldr	r1, [r2, #0]
 800a4d2:	6008      	str	r0, [r1, #0]
 800a4d4:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4d8:	f380 8811 	msr	BASEPRI, r0
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f7ff f860 	bl	80095a8 <vTaskSwitchContext>
 800a4e8:	f04f 0000 	mov.w	r0, #0
 800a4ec:	f380 8811 	msr	BASEPRI, r0
 800a4f0:	4a07      	ldr	r2, [pc, #28]	; (800a510 <pxCurrentTCBConst>)
 800a4f2:	6811      	ldr	r1, [r2, #0]
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a4fa:	f382 880b 	msr	PSPLIM, r2
 800a4fe:	f380 8809 	msr	PSP, r0
 800a502:	4718      	bx	r3
 800a504:	f3af 8000 	nop.w
 800a508:	f3af 8000 	nop.w
 800a50c:	f3af 8000 	nop.w

0800a510 <pxCurrentTCBConst>:
 800a510:	20000a84 	.word	0x20000a84
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop
	...

0800a520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a520:	f01e 0f04 	tst.w	lr, #4
 800a524:	bf0c      	ite	eq
 800a526:	f3ef 8008 	mrseq	r0, MSP
 800a52a:	f3ef 8009 	mrsne	r0, PSP
 800a52e:	4904      	ldr	r1, [pc, #16]	; (800a540 <svchandler_address_const>)
 800a530:	4708      	bx	r1
 800a532:	bf00      	nop
 800a534:	f3af 8000 	nop.w
 800a538:	f3af 8000 	nop.w
 800a53c:	f3af 8000 	nop.w

0800a540 <svchandler_address_const>:
 800a540:	0800a295 	.word	0x0800a295
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop

0800a548 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800a550:	2300      	movs	r3, #0
 800a552:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00e      	beq.n	800a57c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f023 0307 	bic.w	r3, r3, #7
 800a564:	3308      	adds	r3, #8
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d205      	bcs.n	800a578 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f023 0307 	bic.w	r3, r3, #7
 800a572:	3308      	adds	r3, #8
 800a574:	607b      	str	r3, [r7, #4]
 800a576:	e001      	b.n	800a57c <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 800a57c:	f7fe fdfa 	bl	8009174 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800a580:	4b17      	ldr	r3, [pc, #92]	; (800a5e0 <pvPortMalloc+0x98>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d105      	bne.n	800a594 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a588:	4b16      	ldr	r3, [pc, #88]	; (800a5e4 <pvPortMalloc+0x9c>)
 800a58a:	f023 0307 	bic.w	r3, r3, #7
 800a58e:	461a      	mov	r2, r3
 800a590:	4b13      	ldr	r3, [pc, #76]	; (800a5e0 <pvPortMalloc+0x98>)
 800a592:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d01b      	beq.n	800a5d2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800a59a:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <pvPortMalloc+0xa0>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 800a5a2:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d813      	bhi.n	800a5d2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <pvPortMalloc+0xa0>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	441a      	add	r2, r3
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <pvPortMalloc+0xa0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d90b      	bls.n	800a5d2 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <pvPortMalloc+0x98>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <pvPortMalloc+0xa0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800a5c6:	4b08      	ldr	r3, [pc, #32]	; (800a5e8 <pvPortMalloc+0xa0>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4a06      	ldr	r2, [pc, #24]	; (800a5e8 <pvPortMalloc+0xa0>)
 800a5d0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a5d2:	f7fe fddd 	bl	8009190 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	200030b4 	.word	0x200030b4
 800a5e4:	200010b7 	.word	0x200010b7
 800a5e8:	200030b0 	.word	0x200030b0

0800a5ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <vPortFree+0x14>
 800a5fa:	f7ff ff45 	bl	800a488 <ulSetInterruptMask>
 800a5fe:	e7fe      	b.n	800a5fe <vPortFree+0x12>
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <sbrk_aligned>:
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	4e0e      	ldr	r6, [pc, #56]	; (800a644 <sbrk_aligned+0x3c>)
 800a60c:	460c      	mov	r4, r1
 800a60e:	4605      	mov	r5, r0
 800a610:	6831      	ldr	r1, [r6, #0]
 800a612:	b911      	cbnz	r1, 800a61a <sbrk_aligned+0x12>
 800a614:	f000 fb8e 	bl	800ad34 <_sbrk_r>
 800a618:	6030      	str	r0, [r6, #0]
 800a61a:	4621      	mov	r1, r4
 800a61c:	4628      	mov	r0, r5
 800a61e:	f000 fb89 	bl	800ad34 <_sbrk_r>
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	d00a      	beq.n	800a63c <sbrk_aligned+0x34>
 800a626:	1cc4      	adds	r4, r0, #3
 800a628:	f024 0403 	bic.w	r4, r4, #3
 800a62c:	42a0      	cmp	r0, r4
 800a62e:	d007      	beq.n	800a640 <sbrk_aligned+0x38>
 800a630:	1a21      	subs	r1, r4, r0
 800a632:	4628      	mov	r0, r5
 800a634:	f000 fb7e 	bl	800ad34 <_sbrk_r>
 800a638:	3001      	adds	r0, #1
 800a63a:	d101      	bne.n	800a640 <sbrk_aligned+0x38>
 800a63c:	f04f 34ff 	mov.w	r4, #4294967295
 800a640:	4620      	mov	r0, r4
 800a642:	bd70      	pop	{r4, r5, r6, pc}
 800a644:	200030bc 	.word	0x200030bc

0800a648 <_malloc_r>:
 800a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64c:	1ccd      	adds	r5, r1, #3
 800a64e:	4607      	mov	r7, r0
 800a650:	f025 0503 	bic.w	r5, r5, #3
 800a654:	3508      	adds	r5, #8
 800a656:	2d0c      	cmp	r5, #12
 800a658:	bf38      	it	cc
 800a65a:	250c      	movcc	r5, #12
 800a65c:	2d00      	cmp	r5, #0
 800a65e:	db01      	blt.n	800a664 <_malloc_r+0x1c>
 800a660:	42a9      	cmp	r1, r5
 800a662:	d905      	bls.n	800a670 <_malloc_r+0x28>
 800a664:	230c      	movs	r3, #12
 800a666:	2600      	movs	r6, #0
 800a668:	603b      	str	r3, [r7, #0]
 800a66a:	4630      	mov	r0, r6
 800a66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a670:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a744 <_malloc_r+0xfc>
 800a674:	f000 f868 	bl	800a748 <__malloc_lock>
 800a678:	f8d8 3000 	ldr.w	r3, [r8]
 800a67c:	461c      	mov	r4, r3
 800a67e:	bb5c      	cbnz	r4, 800a6d8 <_malloc_r+0x90>
 800a680:	4629      	mov	r1, r5
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff ffc0 	bl	800a608 <sbrk_aligned>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	4604      	mov	r4, r0
 800a68c:	d155      	bne.n	800a73a <_malloc_r+0xf2>
 800a68e:	f8d8 4000 	ldr.w	r4, [r8]
 800a692:	4626      	mov	r6, r4
 800a694:	2e00      	cmp	r6, #0
 800a696:	d145      	bne.n	800a724 <_malloc_r+0xdc>
 800a698:	2c00      	cmp	r4, #0
 800a69a:	d048      	beq.n	800a72e <_malloc_r+0xe6>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	eb04 0903 	add.w	r9, r4, r3
 800a6a6:	f000 fb45 	bl	800ad34 <_sbrk_r>
 800a6aa:	4581      	cmp	r9, r0
 800a6ac:	d13f      	bne.n	800a72e <_malloc_r+0xe6>
 800a6ae:	6821      	ldr	r1, [r4, #0]
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	1a6d      	subs	r5, r5, r1
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	f7ff ffa7 	bl	800a608 <sbrk_aligned>
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d037      	beq.n	800a72e <_malloc_r+0xe6>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	442b      	add	r3, r5
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d038      	beq.n	800a73e <_malloc_r+0xf6>
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	42a2      	cmp	r2, r4
 800a6d0:	d12b      	bne.n	800a72a <_malloc_r+0xe2>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	605a      	str	r2, [r3, #4]
 800a6d6:	e00f      	b.n	800a6f8 <_malloc_r+0xb0>
 800a6d8:	6822      	ldr	r2, [r4, #0]
 800a6da:	1b52      	subs	r2, r2, r5
 800a6dc:	d41f      	bmi.n	800a71e <_malloc_r+0xd6>
 800a6de:	2a0b      	cmp	r2, #11
 800a6e0:	d917      	bls.n	800a712 <_malloc_r+0xca>
 800a6e2:	1961      	adds	r1, r4, r5
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	6025      	str	r5, [r4, #0]
 800a6e8:	bf18      	it	ne
 800a6ea:	6059      	strne	r1, [r3, #4]
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	bf08      	it	eq
 800a6f0:	f8c8 1000 	streq.w	r1, [r8]
 800a6f4:	5162      	str	r2, [r4, r5]
 800a6f6:	604b      	str	r3, [r1, #4]
 800a6f8:	f104 060b 	add.w	r6, r4, #11
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	f000 f829 	bl	800a754 <__malloc_unlock>
 800a702:	1d23      	adds	r3, r4, #4
 800a704:	f026 0607 	bic.w	r6, r6, #7
 800a708:	1af2      	subs	r2, r6, r3
 800a70a:	d0ae      	beq.n	800a66a <_malloc_r+0x22>
 800a70c:	1b9b      	subs	r3, r3, r6
 800a70e:	50a3      	str	r3, [r4, r2]
 800a710:	e7ab      	b.n	800a66a <_malloc_r+0x22>
 800a712:	42a3      	cmp	r3, r4
 800a714:	6862      	ldr	r2, [r4, #4]
 800a716:	d1dd      	bne.n	800a6d4 <_malloc_r+0x8c>
 800a718:	f8c8 2000 	str.w	r2, [r8]
 800a71c:	e7ec      	b.n	800a6f8 <_malloc_r+0xb0>
 800a71e:	4623      	mov	r3, r4
 800a720:	6864      	ldr	r4, [r4, #4]
 800a722:	e7ac      	b.n	800a67e <_malloc_r+0x36>
 800a724:	4634      	mov	r4, r6
 800a726:	6876      	ldr	r6, [r6, #4]
 800a728:	e7b4      	b.n	800a694 <_malloc_r+0x4c>
 800a72a:	4613      	mov	r3, r2
 800a72c:	e7cc      	b.n	800a6c8 <_malloc_r+0x80>
 800a72e:	230c      	movs	r3, #12
 800a730:	4638      	mov	r0, r7
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	f000 f80e 	bl	800a754 <__malloc_unlock>
 800a738:	e797      	b.n	800a66a <_malloc_r+0x22>
 800a73a:	6025      	str	r5, [r4, #0]
 800a73c:	e7dc      	b.n	800a6f8 <_malloc_r+0xb0>
 800a73e:	605b      	str	r3, [r3, #4]
 800a740:	deff      	udf	#255	; 0xff
 800a742:	bf00      	nop
 800a744:	200030b8 	.word	0x200030b8

0800a748 <__malloc_lock>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__malloc_lock+0x8>)
 800a74a:	f000 bb40 	b.w	800adce <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	20003200 	.word	0x20003200

0800a754 <__malloc_unlock>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__malloc_unlock+0x8>)
 800a756:	f000 bb3b 	b.w	800add0 <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	20003200 	.word	0x20003200

0800a760 <_strtol_l.constprop.0>:
 800a760:	2b01      	cmp	r3, #1
 800a762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a766:	d001      	beq.n	800a76c <_strtol_l.constprop.0+0xc>
 800a768:	2b24      	cmp	r3, #36	; 0x24
 800a76a:	d906      	bls.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a76c:	f000 fb04 	bl	800ad78 <__errno>
 800a770:	2316      	movs	r3, #22
 800a772:	6003      	str	r3, [r0, #0]
 800a774:	2000      	movs	r0, #0
 800a776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77a:	460d      	mov	r5, r1
 800a77c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800a860 <_strtol_l.constprop.0+0x100>
 800a780:	462e      	mov	r6, r5
 800a782:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a786:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a78a:	f017 0708 	ands.w	r7, r7, #8
 800a78e:	d1f7      	bne.n	800a780 <_strtol_l.constprop.0+0x20>
 800a790:	2c2d      	cmp	r4, #45	; 0x2d
 800a792:	d132      	bne.n	800a7fa <_strtol_l.constprop.0+0x9a>
 800a794:	782c      	ldrb	r4, [r5, #0]
 800a796:	2701      	movs	r7, #1
 800a798:	1cb5      	adds	r5, r6, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d05b      	beq.n	800a856 <_strtol_l.constprop.0+0xf6>
 800a79e:	2b10      	cmp	r3, #16
 800a7a0:	d109      	bne.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a7a2:	2c30      	cmp	r4, #48	; 0x30
 800a7a4:	d107      	bne.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a7a6:	782c      	ldrb	r4, [r5, #0]
 800a7a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a7ac:	2c58      	cmp	r4, #88	; 0x58
 800a7ae:	d14d      	bne.n	800a84c <_strtol_l.constprop.0+0xec>
 800a7b0:	786c      	ldrb	r4, [r5, #1]
 800a7b2:	2310      	movs	r3, #16
 800a7b4:	3502      	adds	r5, #2
 800a7b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a7ba:	f04f 0e00 	mov.w	lr, #0
 800a7be:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7c2:	4676      	mov	r6, lr
 800a7c4:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7d0:	f1bc 0f09 	cmp.w	ip, #9
 800a7d4:	d816      	bhi.n	800a804 <_strtol_l.constprop.0+0xa4>
 800a7d6:	4664      	mov	r4, ip
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	dd24      	ble.n	800a826 <_strtol_l.constprop.0+0xc6>
 800a7dc:	f1be 3fff 	cmp.w	lr, #4294967295
 800a7e0:	d008      	beq.n	800a7f4 <_strtol_l.constprop.0+0x94>
 800a7e2:	45b1      	cmp	r9, r6
 800a7e4:	d31c      	bcc.n	800a820 <_strtol_l.constprop.0+0xc0>
 800a7e6:	d101      	bne.n	800a7ec <_strtol_l.constprop.0+0x8c>
 800a7e8:	45a2      	cmp	sl, r4
 800a7ea:	db19      	blt.n	800a820 <_strtol_l.constprop.0+0xc0>
 800a7ec:	fb06 4603 	mla	r6, r6, r3, r4
 800a7f0:	f04f 0e01 	mov.w	lr, #1
 800a7f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f8:	e7e8      	b.n	800a7cc <_strtol_l.constprop.0+0x6c>
 800a7fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a7fc:	bf04      	itt	eq
 800a7fe:	782c      	ldrbeq	r4, [r5, #0]
 800a800:	1cb5      	addeq	r5, r6, #2
 800a802:	e7ca      	b.n	800a79a <_strtol_l.constprop.0+0x3a>
 800a804:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a808:	f1bc 0f19 	cmp.w	ip, #25
 800a80c:	d801      	bhi.n	800a812 <_strtol_l.constprop.0+0xb2>
 800a80e:	3c37      	subs	r4, #55	; 0x37
 800a810:	e7e2      	b.n	800a7d8 <_strtol_l.constprop.0+0x78>
 800a812:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a816:	f1bc 0f19 	cmp.w	ip, #25
 800a81a:	d804      	bhi.n	800a826 <_strtol_l.constprop.0+0xc6>
 800a81c:	3c57      	subs	r4, #87	; 0x57
 800a81e:	e7db      	b.n	800a7d8 <_strtol_l.constprop.0+0x78>
 800a820:	f04f 3eff 	mov.w	lr, #4294967295
 800a824:	e7e6      	b.n	800a7f4 <_strtol_l.constprop.0+0x94>
 800a826:	f1be 3fff 	cmp.w	lr, #4294967295
 800a82a:	d105      	bne.n	800a838 <_strtol_l.constprop.0+0xd8>
 800a82c:	2322      	movs	r3, #34	; 0x22
 800a82e:	4646      	mov	r6, r8
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	b942      	cbnz	r2, 800a846 <_strtol_l.constprop.0+0xe6>
 800a834:	4630      	mov	r0, r6
 800a836:	e79e      	b.n	800a776 <_strtol_l.constprop.0+0x16>
 800a838:	b107      	cbz	r7, 800a83c <_strtol_l.constprop.0+0xdc>
 800a83a:	4276      	negs	r6, r6
 800a83c:	2a00      	cmp	r2, #0
 800a83e:	d0f9      	beq.n	800a834 <_strtol_l.constprop.0+0xd4>
 800a840:	f1be 0f00 	cmp.w	lr, #0
 800a844:	d000      	beq.n	800a848 <_strtol_l.constprop.0+0xe8>
 800a846:	1e69      	subs	r1, r5, #1
 800a848:	6011      	str	r1, [r2, #0]
 800a84a:	e7f3      	b.n	800a834 <_strtol_l.constprop.0+0xd4>
 800a84c:	2430      	movs	r4, #48	; 0x30
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1b1      	bne.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a852:	2308      	movs	r3, #8
 800a854:	e7af      	b.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a856:	2c30      	cmp	r4, #48	; 0x30
 800a858:	d0a5      	beq.n	800a7a6 <_strtol_l.constprop.0+0x46>
 800a85a:	230a      	movs	r3, #10
 800a85c:	e7ab      	b.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a85e:	bf00      	nop
 800a860:	0800b9c1 	.word	0x0800b9c1

0800a864 <strtol>:
 800a864:	4613      	mov	r3, r2
 800a866:	460a      	mov	r2, r1
 800a868:	4601      	mov	r1, r0
 800a86a:	4802      	ldr	r0, [pc, #8]	; (800a874 <strtol+0x10>)
 800a86c:	6800      	ldr	r0, [r0, #0]
 800a86e:	f7ff bf77 	b.w	800a760 <_strtol_l.constprop.0>
 800a872:	bf00      	nop
 800a874:	2000006c 	.word	0x2000006c

0800a878 <std>:
 800a878:	2300      	movs	r3, #0
 800a87a:	b510      	push	{r4, lr}
 800a87c:	4604      	mov	r4, r0
 800a87e:	6083      	str	r3, [r0, #8]
 800a880:	8181      	strh	r1, [r0, #12]
 800a882:	4619      	mov	r1, r3
 800a884:	6643      	str	r3, [r0, #100]	; 0x64
 800a886:	81c2      	strh	r2, [r0, #14]
 800a888:	2208      	movs	r2, #8
 800a88a:	6183      	str	r3, [r0, #24]
 800a88c:	e9c0 3300 	strd	r3, r3, [r0]
 800a890:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a894:	305c      	adds	r0, #92	; 0x5c
 800a896:	f000 f9ff 	bl	800ac98 <memset>
 800a89a:	4b0d      	ldr	r3, [pc, #52]	; (800a8d0 <std+0x58>)
 800a89c:	6224      	str	r4, [r4, #32]
 800a89e:	6263      	str	r3, [r4, #36]	; 0x24
 800a8a0:	4b0c      	ldr	r3, [pc, #48]	; (800a8d4 <std+0x5c>)
 800a8a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8a4:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <std+0x60>)
 800a8a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <std+0x64>)
 800a8aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <std+0x68>)
 800a8ae:	429c      	cmp	r4, r3
 800a8b0:	d006      	beq.n	800a8c0 <std+0x48>
 800a8b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8b6:	4294      	cmp	r4, r2
 800a8b8:	d002      	beq.n	800a8c0 <std+0x48>
 800a8ba:	33d0      	adds	r3, #208	; 0xd0
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	d105      	bne.n	800a8cc <std+0x54>
 800a8c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c8:	f000 ba80 	b.w	800adcc <__retarget_lock_init_recursive>
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	bf00      	nop
 800a8d0:	0800aae9 	.word	0x0800aae9
 800a8d4:	0800ab0b 	.word	0x0800ab0b
 800a8d8:	0800ab43 	.word	0x0800ab43
 800a8dc:	0800ab67 	.word	0x0800ab67
 800a8e0:	200030c0 	.word	0x200030c0

0800a8e4 <stdio_exit_handler>:
 800a8e4:	4a02      	ldr	r2, [pc, #8]	; (800a8f0 <stdio_exit_handler+0xc>)
 800a8e6:	4903      	ldr	r1, [pc, #12]	; (800a8f4 <stdio_exit_handler+0x10>)
 800a8e8:	4803      	ldr	r0, [pc, #12]	; (800a8f8 <stdio_exit_handler+0x14>)
 800a8ea:	f000 b869 	b.w	800a9c0 <_fwalk_sglue>
 800a8ee:	bf00      	nop
 800a8f0:	20000014 	.word	0x20000014
 800a8f4:	0800b539 	.word	0x0800b539
 800a8f8:	20000020 	.word	0x20000020

0800a8fc <cleanup_stdio>:
 800a8fc:	6841      	ldr	r1, [r0, #4]
 800a8fe:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <cleanup_stdio+0x34>)
 800a900:	4299      	cmp	r1, r3
 800a902:	b510      	push	{r4, lr}
 800a904:	4604      	mov	r4, r0
 800a906:	d001      	beq.n	800a90c <cleanup_stdio+0x10>
 800a908:	f000 fe16 	bl	800b538 <_fflush_r>
 800a90c:	68a1      	ldr	r1, [r4, #8]
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <cleanup_stdio+0x38>)
 800a910:	4299      	cmp	r1, r3
 800a912:	d002      	beq.n	800a91a <cleanup_stdio+0x1e>
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fe0f 	bl	800b538 <_fflush_r>
 800a91a:	68e1      	ldr	r1, [r4, #12]
 800a91c:	4b06      	ldr	r3, [pc, #24]	; (800a938 <cleanup_stdio+0x3c>)
 800a91e:	4299      	cmp	r1, r3
 800a920:	d004      	beq.n	800a92c <cleanup_stdio+0x30>
 800a922:	4620      	mov	r0, r4
 800a924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a928:	f000 be06 	b.w	800b538 <_fflush_r>
 800a92c:	bd10      	pop	{r4, pc}
 800a92e:	bf00      	nop
 800a930:	200030c0 	.word	0x200030c0
 800a934:	20003128 	.word	0x20003128
 800a938:	20003190 	.word	0x20003190

0800a93c <global_stdio_init.part.0>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <global_stdio_init.part.0+0x30>)
 800a940:	2104      	movs	r1, #4
 800a942:	4c0b      	ldr	r4, [pc, #44]	; (800a970 <global_stdio_init.part.0+0x34>)
 800a944:	4a0b      	ldr	r2, [pc, #44]	; (800a974 <global_stdio_init.part.0+0x38>)
 800a946:	4620      	mov	r0, r4
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7ff ff94 	bl	800a878 <std>
 800a950:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a954:	2201      	movs	r2, #1
 800a956:	2109      	movs	r1, #9
 800a958:	f7ff ff8e 	bl	800a878 <std>
 800a95c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a960:	2202      	movs	r2, #2
 800a962:	2112      	movs	r1, #18
 800a964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a968:	f7ff bf86 	b.w	800a878 <std>
 800a96c:	200031f8 	.word	0x200031f8
 800a970:	200030c0 	.word	0x200030c0
 800a974:	0800a8e5 	.word	0x0800a8e5

0800a978 <__sfp_lock_acquire>:
 800a978:	4801      	ldr	r0, [pc, #4]	; (800a980 <__sfp_lock_acquire+0x8>)
 800a97a:	f000 ba28 	b.w	800adce <__retarget_lock_acquire_recursive>
 800a97e:	bf00      	nop
 800a980:	20003201 	.word	0x20003201

0800a984 <__sfp_lock_release>:
 800a984:	4801      	ldr	r0, [pc, #4]	; (800a98c <__sfp_lock_release+0x8>)
 800a986:	f000 ba23 	b.w	800add0 <__retarget_lock_release_recursive>
 800a98a:	bf00      	nop
 800a98c:	20003201 	.word	0x20003201

0800a990 <__sinit>:
 800a990:	b510      	push	{r4, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	f7ff fff0 	bl	800a978 <__sfp_lock_acquire>
 800a998:	6a23      	ldr	r3, [r4, #32]
 800a99a:	b11b      	cbz	r3, 800a9a4 <__sinit+0x14>
 800a99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a0:	f7ff bff0 	b.w	800a984 <__sfp_lock_release>
 800a9a4:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <__sinit+0x28>)
 800a9a6:	6223      	str	r3, [r4, #32]
 800a9a8:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <__sinit+0x2c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1f5      	bne.n	800a99c <__sinit+0xc>
 800a9b0:	f7ff ffc4 	bl	800a93c <global_stdio_init.part.0>
 800a9b4:	e7f2      	b.n	800a99c <__sinit+0xc>
 800a9b6:	bf00      	nop
 800a9b8:	0800a8fd 	.word	0x0800a8fd
 800a9bc:	200031f8 	.word	0x200031f8

0800a9c0 <_fwalk_sglue>:
 800a9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	4688      	mov	r8, r1
 800a9c8:	4614      	mov	r4, r2
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9d0:	f1b9 0901 	subs.w	r9, r9, #1
 800a9d4:	d505      	bpl.n	800a9e2 <_fwalk_sglue+0x22>
 800a9d6:	6824      	ldr	r4, [r4, #0]
 800a9d8:	2c00      	cmp	r4, #0
 800a9da:	d1f7      	bne.n	800a9cc <_fwalk_sglue+0xc>
 800a9dc:	4630      	mov	r0, r6
 800a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	89ab      	ldrh	r3, [r5, #12]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d907      	bls.n	800a9f8 <_fwalk_sglue+0x38>
 800a9e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	d003      	beq.n	800a9f8 <_fwalk_sglue+0x38>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	47c0      	blx	r8
 800a9f6:	4306      	orrs	r6, r0
 800a9f8:	3568      	adds	r5, #104	; 0x68
 800a9fa:	e7e9      	b.n	800a9d0 <_fwalk_sglue+0x10>

0800a9fc <iprintf>:
 800a9fc:	b40f      	push	{r0, r1, r2, r3}
 800a9fe:	b507      	push	{r0, r1, r2, lr}
 800aa00:	4906      	ldr	r1, [pc, #24]	; (800aa1c <iprintf+0x20>)
 800aa02:	ab04      	add	r3, sp, #16
 800aa04:	6808      	ldr	r0, [r1, #0]
 800aa06:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0a:	6881      	ldr	r1, [r0, #8]
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	f000 fa63 	bl	800aed8 <_vfiprintf_r>
 800aa12:	b003      	add	sp, #12
 800aa14:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa18:	b004      	add	sp, #16
 800aa1a:	4770      	bx	lr
 800aa1c:	2000006c 	.word	0x2000006c

0800aa20 <putchar>:
 800aa20:	4b02      	ldr	r3, [pc, #8]	; (800aa2c <putchar+0xc>)
 800aa22:	4601      	mov	r1, r0
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	6882      	ldr	r2, [r0, #8]
 800aa28:	f000 be0f 	b.w	800b64a <_putc_r>
 800aa2c:	2000006c 	.word	0x2000006c

0800aa30 <_puts_r>:
 800aa30:	6a03      	ldr	r3, [r0, #32]
 800aa32:	b570      	push	{r4, r5, r6, lr}
 800aa34:	4605      	mov	r5, r0
 800aa36:	460e      	mov	r6, r1
 800aa38:	6884      	ldr	r4, [r0, #8]
 800aa3a:	b90b      	cbnz	r3, 800aa40 <_puts_r+0x10>
 800aa3c:	f7ff ffa8 	bl	800a990 <__sinit>
 800aa40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa42:	07db      	lsls	r3, r3, #31
 800aa44:	d405      	bmi.n	800aa52 <_puts_r+0x22>
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	0598      	lsls	r0, r3, #22
 800aa4a:	d402      	bmi.n	800aa52 <_puts_r+0x22>
 800aa4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa4e:	f000 f9be 	bl	800adce <__retarget_lock_acquire_recursive>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	0719      	lsls	r1, r3, #28
 800aa56:	d513      	bpl.n	800aa80 <_puts_r+0x50>
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	b18b      	cbz	r3, 800aa80 <_puts_r+0x50>
 800aa5c:	3e01      	subs	r6, #1
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa64:	3b01      	subs	r3, #1
 800aa66:	60a3      	str	r3, [r4, #8]
 800aa68:	b9e9      	cbnz	r1, 800aaa6 <_puts_r+0x76>
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	da2e      	bge.n	800aacc <_puts_r+0x9c>
 800aa6e:	4622      	mov	r2, r4
 800aa70:	210a      	movs	r1, #10
 800aa72:	4628      	mov	r0, r5
 800aa74:	f000 f87b 	bl	800ab6e <__swbuf_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d007      	beq.n	800aa8c <_puts_r+0x5c>
 800aa7c:	250a      	movs	r5, #10
 800aa7e:	e007      	b.n	800aa90 <_puts_r+0x60>
 800aa80:	4621      	mov	r1, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f8b0 	bl	800abe8 <__swsetup_r>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d0e7      	beq.n	800aa5c <_puts_r+0x2c>
 800aa8c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa92:	07da      	lsls	r2, r3, #31
 800aa94:	d405      	bmi.n	800aaa2 <_puts_r+0x72>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	059b      	lsls	r3, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_puts_r+0x72>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9e:	f000 f997 	bl	800add0 <__retarget_lock_release_recursive>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	bd70      	pop	{r4, r5, r6, pc}
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da04      	bge.n	800aab4 <_puts_r+0x84>
 800aaaa:	69a2      	ldr	r2, [r4, #24]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	dc06      	bgt.n	800aabe <_puts_r+0x8e>
 800aab0:	290a      	cmp	r1, #10
 800aab2:	d004      	beq.n	800aabe <_puts_r+0x8e>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	6022      	str	r2, [r4, #0]
 800aaba:	7019      	strb	r1, [r3, #0]
 800aabc:	e7cf      	b.n	800aa5e <_puts_r+0x2e>
 800aabe:	4622      	mov	r2, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f000 f854 	bl	800ab6e <__swbuf_r>
 800aac6:	3001      	adds	r0, #1
 800aac8:	d1c9      	bne.n	800aa5e <_puts_r+0x2e>
 800aaca:	e7df      	b.n	800aa8c <_puts_r+0x5c>
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	250a      	movs	r5, #10
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	6022      	str	r2, [r4, #0]
 800aad4:	701d      	strb	r5, [r3, #0]
 800aad6:	e7db      	b.n	800aa90 <_puts_r+0x60>

0800aad8 <puts>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <puts+0xc>)
 800aada:	4601      	mov	r1, r0
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f7ff bfa7 	b.w	800aa30 <_puts_r>
 800aae2:	bf00      	nop
 800aae4:	2000006c 	.word	0x2000006c

0800aae8 <__sread>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf0:	f000 f90e 	bl	800ad10 <_read_r>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	bfab      	itete	ge
 800aaf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aafa:	89a3      	ldrhlt	r3, [r4, #12]
 800aafc:	181b      	addge	r3, r3, r0
 800aafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab02:	bfac      	ite	ge
 800ab04:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab06:	81a3      	strhlt	r3, [r4, #12]
 800ab08:	bd10      	pop	{r4, pc}

0800ab0a <__swrite>:
 800ab0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	461f      	mov	r7, r3
 800ab10:	898b      	ldrh	r3, [r1, #12]
 800ab12:	4605      	mov	r5, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	05db      	lsls	r3, r3, #23
 800ab18:	4616      	mov	r6, r2
 800ab1a:	d505      	bpl.n	800ab28 <__swrite+0x1e>
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	f000 f8e2 	bl	800acec <_lseek_r>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	4632      	mov	r2, r6
 800ab2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab30:	4628      	mov	r0, r5
 800ab32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab36:	81a3      	strh	r3, [r4, #12]
 800ab38:	463b      	mov	r3, r7
 800ab3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	f000 b909 	b.w	800ad54 <_write_r>

0800ab42 <__sseek>:
 800ab42:	b510      	push	{r4, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4a:	f000 f8cf 	bl	800acec <_lseek_r>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	bf15      	itete	ne
 800ab54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab5e:	81a3      	strheq	r3, [r4, #12]
 800ab60:	bf18      	it	ne
 800ab62:	81a3      	strhne	r3, [r4, #12]
 800ab64:	bd10      	pop	{r4, pc}

0800ab66 <__sclose>:
 800ab66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6a:	f000 b8af 	b.w	800accc <_close_r>

0800ab6e <__swbuf_r>:
 800ab6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab70:	460e      	mov	r6, r1
 800ab72:	4614      	mov	r4, r2
 800ab74:	4605      	mov	r5, r0
 800ab76:	b118      	cbz	r0, 800ab80 <__swbuf_r+0x12>
 800ab78:	6a03      	ldr	r3, [r0, #32]
 800ab7a:	b90b      	cbnz	r3, 800ab80 <__swbuf_r+0x12>
 800ab7c:	f7ff ff08 	bl	800a990 <__sinit>
 800ab80:	69a3      	ldr	r3, [r4, #24]
 800ab82:	60a3      	str	r3, [r4, #8]
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	071a      	lsls	r2, r3, #28
 800ab88:	d525      	bpl.n	800abd6 <__swbuf_r+0x68>
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	b31b      	cbz	r3, 800abd6 <__swbuf_r+0x68>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	b2f6      	uxtb	r6, r6
 800ab92:	6922      	ldr	r2, [r4, #16]
 800ab94:	4637      	mov	r7, r6
 800ab96:	1a98      	subs	r0, r3, r2
 800ab98:	6963      	ldr	r3, [r4, #20]
 800ab9a:	4283      	cmp	r3, r0
 800ab9c:	dc04      	bgt.n	800aba8 <__swbuf_r+0x3a>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 fcc9 	bl	800b538 <_fflush_r>
 800aba6:	b9e0      	cbnz	r0, 800abe2 <__swbuf_r+0x74>
 800aba8:	68a3      	ldr	r3, [r4, #8]
 800abaa:	3b01      	subs	r3, #1
 800abac:	60a3      	str	r3, [r4, #8]
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	701e      	strb	r6, [r3, #0]
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	6962      	ldr	r2, [r4, #20]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d004      	beq.n	800abc8 <__swbuf_r+0x5a>
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	07db      	lsls	r3, r3, #31
 800abc2:	d506      	bpl.n	800abd2 <__swbuf_r+0x64>
 800abc4:	2e0a      	cmp	r6, #10
 800abc6:	d104      	bne.n	800abd2 <__swbuf_r+0x64>
 800abc8:	4621      	mov	r1, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 fcb4 	bl	800b538 <_fflush_r>
 800abd0:	b938      	cbnz	r0, 800abe2 <__swbuf_r+0x74>
 800abd2:	4638      	mov	r0, r7
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd6:	4621      	mov	r1, r4
 800abd8:	4628      	mov	r0, r5
 800abda:	f000 f805 	bl	800abe8 <__swsetup_r>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d0d5      	beq.n	800ab8e <__swbuf_r+0x20>
 800abe2:	f04f 37ff 	mov.w	r7, #4294967295
 800abe6:	e7f4      	b.n	800abd2 <__swbuf_r+0x64>

0800abe8 <__swsetup_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4b2a      	ldr	r3, [pc, #168]	; (800ac94 <__swsetup_r+0xac>)
 800abec:	4605      	mov	r5, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	6818      	ldr	r0, [r3, #0]
 800abf2:	b118      	cbz	r0, 800abfc <__swsetup_r+0x14>
 800abf4:	6a03      	ldr	r3, [r0, #32]
 800abf6:	b90b      	cbnz	r3, 800abfc <__swsetup_r+0x14>
 800abf8:	f7ff feca 	bl	800a990 <__sinit>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac02:	0718      	lsls	r0, r3, #28
 800ac04:	d422      	bmi.n	800ac4c <__swsetup_r+0x64>
 800ac06:	06d9      	lsls	r1, r3, #27
 800ac08:	d407      	bmi.n	800ac1a <__swsetup_r+0x32>
 800ac0a:	2309      	movs	r3, #9
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac12:	f04f 30ff 	mov.w	r0, #4294967295
 800ac16:	81a3      	strh	r3, [r4, #12]
 800ac18:	e034      	b.n	800ac84 <__swsetup_r+0x9c>
 800ac1a:	0758      	lsls	r0, r3, #29
 800ac1c:	d512      	bpl.n	800ac44 <__swsetup_r+0x5c>
 800ac1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac20:	b141      	cbz	r1, 800ac34 <__swsetup_r+0x4c>
 800ac22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac26:	4299      	cmp	r1, r3
 800ac28:	d002      	beq.n	800ac30 <__swsetup_r+0x48>
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f8de 	bl	800adec <_free_r>
 800ac30:	2300      	movs	r3, #0
 800ac32:	6363      	str	r3, [r4, #52]	; 0x34
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	6023      	str	r3, [r4, #0]
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	f043 0308 	orr.w	r3, r3, #8
 800ac4a:	81a3      	strh	r3, [r4, #12]
 800ac4c:	6923      	ldr	r3, [r4, #16]
 800ac4e:	b94b      	cbnz	r3, 800ac64 <__swsetup_r+0x7c>
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac5a:	d003      	beq.n	800ac64 <__swsetup_r+0x7c>
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 fcb7 	bl	800b5d2 <__smakebuf_r>
 800ac64:	89a0      	ldrh	r0, [r4, #12]
 800ac66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac6a:	f010 0301 	ands.w	r3, r0, #1
 800ac6e:	d00a      	beq.n	800ac86 <__swsetup_r+0x9e>
 800ac70:	2300      	movs	r3, #0
 800ac72:	60a3      	str	r3, [r4, #8]
 800ac74:	6963      	ldr	r3, [r4, #20]
 800ac76:	425b      	negs	r3, r3
 800ac78:	61a3      	str	r3, [r4, #24]
 800ac7a:	6923      	ldr	r3, [r4, #16]
 800ac7c:	b943      	cbnz	r3, 800ac90 <__swsetup_r+0xa8>
 800ac7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac82:	d1c4      	bne.n	800ac0e <__swsetup_r+0x26>
 800ac84:	bd38      	pop	{r3, r4, r5, pc}
 800ac86:	0781      	lsls	r1, r0, #30
 800ac88:	bf58      	it	pl
 800ac8a:	6963      	ldrpl	r3, [r4, #20]
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	e7f4      	b.n	800ac7a <__swsetup_r+0x92>
 800ac90:	2000      	movs	r0, #0
 800ac92:	e7f7      	b.n	800ac84 <__swsetup_r+0x9c>
 800ac94:	2000006c 	.word	0x2000006c

0800ac98 <memset>:
 800ac98:	4402      	add	r2, r0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d100      	bne.n	800aca2 <memset+0xa>
 800aca0:	4770      	bx	lr
 800aca2:	f803 1b01 	strb.w	r1, [r3], #1
 800aca6:	e7f9      	b.n	800ac9c <memset+0x4>

0800aca8 <strncmp>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	b16a      	cbz	r2, 800acc8 <strncmp+0x20>
 800acac:	3901      	subs	r1, #1
 800acae:	1884      	adds	r4, r0, r2
 800acb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800acb8:	429a      	cmp	r2, r3
 800acba:	d103      	bne.n	800acc4 <strncmp+0x1c>
 800acbc:	42a0      	cmp	r0, r4
 800acbe:	d001      	beq.n	800acc4 <strncmp+0x1c>
 800acc0:	2a00      	cmp	r2, #0
 800acc2:	d1f5      	bne.n	800acb0 <strncmp+0x8>
 800acc4:	1ad0      	subs	r0, r2, r3
 800acc6:	bd10      	pop	{r4, pc}
 800acc8:	4610      	mov	r0, r2
 800acca:	e7fc      	b.n	800acc6 <strncmp+0x1e>

0800accc <_close_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	2300      	movs	r3, #0
 800acd0:	4d05      	ldr	r5, [pc, #20]	; (800ace8 <_close_r+0x1c>)
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	f7f6 fbb5 	bl	8001446 <_close>
 800acdc:	1c43      	adds	r3, r0, #1
 800acde:	d102      	bne.n	800ace6 <_close_r+0x1a>
 800ace0:	682b      	ldr	r3, [r5, #0]
 800ace2:	b103      	cbz	r3, 800ace6 <_close_r+0x1a>
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	200031fc 	.word	0x200031fc

0800acec <_lseek_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4604      	mov	r4, r0
 800acf0:	4d06      	ldr	r5, [pc, #24]	; (800ad0c <_lseek_r+0x20>)
 800acf2:	4608      	mov	r0, r1
 800acf4:	4611      	mov	r1, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	602a      	str	r2, [r5, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f7f6 fbca 	bl	8001494 <_lseek>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_lseek_r+0x1e>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_lseek_r+0x1e>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	200031fc 	.word	0x200031fc

0800ad10 <_read_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_read_r+0x20>)
 800ad16:	4608      	mov	r0, r1
 800ad18:	4611      	mov	r1, r2
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	602a      	str	r2, [r5, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f7f6 fb58 	bl	80013d4 <_read>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_read_r+0x1e>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_read_r+0x1e>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	200031fc 	.word	0x200031fc

0800ad34 <_sbrk_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	2300      	movs	r3, #0
 800ad38:	4d05      	ldr	r5, [pc, #20]	; (800ad50 <_sbrk_r+0x1c>)
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	602b      	str	r3, [r5, #0]
 800ad40:	f7f6 fbb6 	bl	80014b0 <_sbrk>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_sbrk_r+0x1a>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_sbrk_r+0x1a>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	200031fc 	.word	0x200031fc

0800ad54 <_write_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4604      	mov	r4, r0
 800ad58:	4d06      	ldr	r5, [pc, #24]	; (800ad74 <_write_r+0x20>)
 800ad5a:	4608      	mov	r0, r1
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	602a      	str	r2, [r5, #0]
 800ad62:	461a      	mov	r2, r3
 800ad64:	f7f6 fb53 	bl	800140e <_write>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d102      	bne.n	800ad72 <_write_r+0x1e>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	b103      	cbz	r3, 800ad72 <_write_r+0x1e>
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	200031fc 	.word	0x200031fc

0800ad78 <__errno>:
 800ad78:	4b01      	ldr	r3, [pc, #4]	; (800ad80 <__errno+0x8>)
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	2000006c 	.word	0x2000006c

0800ad84 <__libc_init_array>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	4d0d      	ldr	r5, [pc, #52]	; (800adbc <__libc_init_array+0x38>)
 800ad88:	2600      	movs	r6, #0
 800ad8a:	4c0d      	ldr	r4, [pc, #52]	; (800adc0 <__libc_init_array+0x3c>)
 800ad8c:	1b64      	subs	r4, r4, r5
 800ad8e:	10a4      	asrs	r4, r4, #2
 800ad90:	42a6      	cmp	r6, r4
 800ad92:	d109      	bne.n	800ada8 <__libc_init_array+0x24>
 800ad94:	4d0b      	ldr	r5, [pc, #44]	; (800adc4 <__libc_init_array+0x40>)
 800ad96:	2600      	movs	r6, #0
 800ad98:	4c0b      	ldr	r4, [pc, #44]	; (800adc8 <__libc_init_array+0x44>)
 800ad9a:	f000 fcbb 	bl	800b714 <_init>
 800ad9e:	1b64      	subs	r4, r4, r5
 800ada0:	10a4      	asrs	r4, r4, #2
 800ada2:	42a6      	cmp	r6, r4
 800ada4:	d105      	bne.n	800adb2 <__libc_init_array+0x2e>
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adac:	3601      	adds	r6, #1
 800adae:	4798      	blx	r3
 800adb0:	e7ee      	b.n	800ad90 <__libc_init_array+0xc>
 800adb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb6:	3601      	adds	r6, #1
 800adb8:	4798      	blx	r3
 800adba:	e7f2      	b.n	800ada2 <__libc_init_array+0x1e>
 800adbc:	0800bafc 	.word	0x0800bafc
 800adc0:	0800bafc 	.word	0x0800bafc
 800adc4:	0800bafc 	.word	0x0800bafc
 800adc8:	0800bb00 	.word	0x0800bb00

0800adcc <__retarget_lock_init_recursive>:
 800adcc:	4770      	bx	lr

0800adce <__retarget_lock_acquire_recursive>:
 800adce:	4770      	bx	lr

0800add0 <__retarget_lock_release_recursive>:
 800add0:	4770      	bx	lr

0800add2 <memcpy>:
 800add2:	440a      	add	r2, r1
 800add4:	1e43      	subs	r3, r0, #1
 800add6:	4291      	cmp	r1, r2
 800add8:	d100      	bne.n	800addc <memcpy+0xa>
 800adda:	4770      	bx	lr
 800addc:	b510      	push	{r4, lr}
 800adde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ade2:	4291      	cmp	r1, r2
 800ade4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ade8:	d1f9      	bne.n	800adde <memcpy+0xc>
 800adea:	bd10      	pop	{r4, pc}

0800adec <_free_r>:
 800adec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adee:	2900      	cmp	r1, #0
 800adf0:	d043      	beq.n	800ae7a <_free_r+0x8e>
 800adf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf6:	1f0c      	subs	r4, r1, #4
 800adf8:	9001      	str	r0, [sp, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bfb8      	it	lt
 800adfe:	18e4      	addlt	r4, r4, r3
 800ae00:	f7ff fca2 	bl	800a748 <__malloc_lock>
 800ae04:	4a1e      	ldr	r2, [pc, #120]	; (800ae80 <_free_r+0x94>)
 800ae06:	9801      	ldr	r0, [sp, #4]
 800ae08:	6813      	ldr	r3, [r2, #0]
 800ae0a:	b933      	cbnz	r3, 800ae1a <_free_r+0x2e>
 800ae0c:	6063      	str	r3, [r4, #4]
 800ae0e:	6014      	str	r4, [r2, #0]
 800ae10:	b003      	add	sp, #12
 800ae12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae16:	f7ff bc9d 	b.w	800a754 <__malloc_unlock>
 800ae1a:	42a3      	cmp	r3, r4
 800ae1c:	d908      	bls.n	800ae30 <_free_r+0x44>
 800ae1e:	6825      	ldr	r5, [r4, #0]
 800ae20:	1961      	adds	r1, r4, r5
 800ae22:	428b      	cmp	r3, r1
 800ae24:	bf01      	itttt	eq
 800ae26:	6819      	ldreq	r1, [r3, #0]
 800ae28:	685b      	ldreq	r3, [r3, #4]
 800ae2a:	1949      	addeq	r1, r1, r5
 800ae2c:	6021      	streq	r1, [r4, #0]
 800ae2e:	e7ed      	b.n	800ae0c <_free_r+0x20>
 800ae30:	461a      	mov	r2, r3
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	b10b      	cbz	r3, 800ae3a <_free_r+0x4e>
 800ae36:	42a3      	cmp	r3, r4
 800ae38:	d9fa      	bls.n	800ae30 <_free_r+0x44>
 800ae3a:	6811      	ldr	r1, [r2, #0]
 800ae3c:	1855      	adds	r5, r2, r1
 800ae3e:	42a5      	cmp	r5, r4
 800ae40:	d10b      	bne.n	800ae5a <_free_r+0x6e>
 800ae42:	6824      	ldr	r4, [r4, #0]
 800ae44:	4421      	add	r1, r4
 800ae46:	1854      	adds	r4, r2, r1
 800ae48:	6011      	str	r1, [r2, #0]
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	d1e0      	bne.n	800ae10 <_free_r+0x24>
 800ae4e:	681c      	ldr	r4, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	440c      	add	r4, r1
 800ae54:	6053      	str	r3, [r2, #4]
 800ae56:	6014      	str	r4, [r2, #0]
 800ae58:	e7da      	b.n	800ae10 <_free_r+0x24>
 800ae5a:	d902      	bls.n	800ae62 <_free_r+0x76>
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	6003      	str	r3, [r0, #0]
 800ae60:	e7d6      	b.n	800ae10 <_free_r+0x24>
 800ae62:	6825      	ldr	r5, [r4, #0]
 800ae64:	1961      	adds	r1, r4, r5
 800ae66:	428b      	cmp	r3, r1
 800ae68:	bf02      	ittt	eq
 800ae6a:	6819      	ldreq	r1, [r3, #0]
 800ae6c:	685b      	ldreq	r3, [r3, #4]
 800ae6e:	1949      	addeq	r1, r1, r5
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	bf08      	it	eq
 800ae74:	6021      	streq	r1, [r4, #0]
 800ae76:	6054      	str	r4, [r2, #4]
 800ae78:	e7ca      	b.n	800ae10 <_free_r+0x24>
 800ae7a:	b003      	add	sp, #12
 800ae7c:	bd30      	pop	{r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	200030b8 	.word	0x200030b8

0800ae84 <__sfputc_r>:
 800ae84:	6893      	ldr	r3, [r2, #8]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	6093      	str	r3, [r2, #8]
 800ae8c:	b410      	push	{r4}
 800ae8e:	da08      	bge.n	800aea2 <__sfputc_r+0x1e>
 800ae90:	6994      	ldr	r4, [r2, #24]
 800ae92:	42a3      	cmp	r3, r4
 800ae94:	db01      	blt.n	800ae9a <__sfputc_r+0x16>
 800ae96:	290a      	cmp	r1, #10
 800ae98:	d103      	bne.n	800aea2 <__sfputc_r+0x1e>
 800ae9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9e:	f7ff be66 	b.w	800ab6e <__swbuf_r>
 800aea2:	6813      	ldr	r3, [r2, #0]
 800aea4:	1c58      	adds	r0, r3, #1
 800aea6:	6010      	str	r0, [r2, #0]
 800aea8:	4608      	mov	r0, r1
 800aeaa:	7019      	strb	r1, [r3, #0]
 800aeac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <__sfputs_r>:
 800aeb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	460f      	mov	r7, r1
 800aeb8:	4614      	mov	r4, r2
 800aeba:	18d5      	adds	r5, r2, r3
 800aebc:	42ac      	cmp	r4, r5
 800aebe:	d101      	bne.n	800aec4 <__sfputs_r+0x12>
 800aec0:	2000      	movs	r0, #0
 800aec2:	e007      	b.n	800aed4 <__sfputs_r+0x22>
 800aec4:	463a      	mov	r2, r7
 800aec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ffda 	bl	800ae84 <__sfputc_r>
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	d1f3      	bne.n	800aebc <__sfputs_r+0xa>
 800aed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aed8 <_vfiprintf_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	460d      	mov	r5, r1
 800aede:	b09d      	sub	sp, #116	; 0x74
 800aee0:	4614      	mov	r4, r2
 800aee2:	4698      	mov	r8, r3
 800aee4:	4606      	mov	r6, r0
 800aee6:	b118      	cbz	r0, 800aef0 <_vfiprintf_r+0x18>
 800aee8:	6a03      	ldr	r3, [r0, #32]
 800aeea:	b90b      	cbnz	r3, 800aef0 <_vfiprintf_r+0x18>
 800aeec:	f7ff fd50 	bl	800a990 <__sinit>
 800aef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	d405      	bmi.n	800af02 <_vfiprintf_r+0x2a>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	059a      	lsls	r2, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_vfiprintf_r+0x2a>
 800aefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefe:	f7ff ff66 	bl	800adce <__retarget_lock_acquire_recursive>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	071b      	lsls	r3, r3, #28
 800af06:	d501      	bpl.n	800af0c <_vfiprintf_r+0x34>
 800af08:	692b      	ldr	r3, [r5, #16]
 800af0a:	b99b      	cbnz	r3, 800af34 <_vfiprintf_r+0x5c>
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff fe6a 	bl	800abe8 <__swsetup_r>
 800af14:	b170      	cbz	r0, 800af34 <_vfiprintf_r+0x5c>
 800af16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af18:	07dc      	lsls	r4, r3, #31
 800af1a:	d504      	bpl.n	800af26 <_vfiprintf_r+0x4e>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b01d      	add	sp, #116	; 0x74
 800af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af26:	89ab      	ldrh	r3, [r5, #12]
 800af28:	0598      	lsls	r0, r3, #22
 800af2a:	d4f7      	bmi.n	800af1c <_vfiprintf_r+0x44>
 800af2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2e:	f7ff ff4f 	bl	800add0 <__retarget_lock_release_recursive>
 800af32:	e7f3      	b.n	800af1c <_vfiprintf_r+0x44>
 800af34:	2300      	movs	r3, #0
 800af36:	f8cd 800c 	str.w	r8, [sp, #12]
 800af3a:	f04f 0901 	mov.w	r9, #1
 800af3e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800b0f8 <_vfiprintf_r+0x220>
 800af42:	9309      	str	r3, [sp, #36]	; 0x24
 800af44:	2320      	movs	r3, #32
 800af46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af4a:	2330      	movs	r3, #48	; 0x30
 800af4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af50:	4623      	mov	r3, r4
 800af52:	469a      	mov	sl, r3
 800af54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af58:	b10a      	cbz	r2, 800af5e <_vfiprintf_r+0x86>
 800af5a:	2a25      	cmp	r2, #37	; 0x25
 800af5c:	d1f9      	bne.n	800af52 <_vfiprintf_r+0x7a>
 800af5e:	ebba 0b04 	subs.w	fp, sl, r4
 800af62:	d00b      	beq.n	800af7c <_vfiprintf_r+0xa4>
 800af64:	465b      	mov	r3, fp
 800af66:	4622      	mov	r2, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ffa1 	bl	800aeb2 <__sfputs_r>
 800af70:	3001      	adds	r0, #1
 800af72:	f000 80a9 	beq.w	800b0c8 <_vfiprintf_r+0x1f0>
 800af76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af78:	445a      	add	r2, fp
 800af7a:	9209      	str	r2, [sp, #36]	; 0x24
 800af7c:	f89a 3000 	ldrb.w	r3, [sl]
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 80a1 	beq.w	800b0c8 <_vfiprintf_r+0x1f0>
 800af86:	2300      	movs	r3, #0
 800af88:	f04f 32ff 	mov.w	r2, #4294967295
 800af8c:	f10a 0a01 	add.w	sl, sl, #1
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	9307      	str	r3, [sp, #28]
 800af94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af98:	931a      	str	r3, [sp, #104]	; 0x68
 800af9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af9e:	4654      	mov	r4, sl
 800afa0:	2205      	movs	r2, #5
 800afa2:	4855      	ldr	r0, [pc, #340]	; (800b0f8 <_vfiprintf_r+0x220>)
 800afa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa8:	f000 fba6 	bl	800b6f8 <memchr>
 800afac:	9a04      	ldr	r2, [sp, #16]
 800afae:	b9d8      	cbnz	r0, 800afe8 <_vfiprintf_r+0x110>
 800afb0:	06d1      	lsls	r1, r2, #27
 800afb2:	bf44      	itt	mi
 800afb4:	2320      	movmi	r3, #32
 800afb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afba:	0713      	lsls	r3, r2, #28
 800afbc:	bf44      	itt	mi
 800afbe:	232b      	movmi	r3, #43	; 0x2b
 800afc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc4:	f89a 3000 	ldrb.w	r3, [sl]
 800afc8:	2b2a      	cmp	r3, #42	; 0x2a
 800afca:	d015      	beq.n	800aff8 <_vfiprintf_r+0x120>
 800afcc:	9a07      	ldr	r2, [sp, #28]
 800afce:	4654      	mov	r4, sl
 800afd0:	2000      	movs	r0, #0
 800afd2:	f04f 0c0a 	mov.w	ip, #10
 800afd6:	4621      	mov	r1, r4
 800afd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afdc:	3b30      	subs	r3, #48	; 0x30
 800afde:	2b09      	cmp	r3, #9
 800afe0:	d94d      	bls.n	800b07e <_vfiprintf_r+0x1a6>
 800afe2:	b1b0      	cbz	r0, 800b012 <_vfiprintf_r+0x13a>
 800afe4:	9207      	str	r2, [sp, #28]
 800afe6:	e014      	b.n	800b012 <_vfiprintf_r+0x13a>
 800afe8:	eba0 0308 	sub.w	r3, r0, r8
 800afec:	46a2      	mov	sl, r4
 800afee:	fa09 f303 	lsl.w	r3, r9, r3
 800aff2:	4313      	orrs	r3, r2
 800aff4:	9304      	str	r3, [sp, #16]
 800aff6:	e7d2      	b.n	800af9e <_vfiprintf_r+0xc6>
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	1d19      	adds	r1, r3, #4
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	9103      	str	r1, [sp, #12]
 800b002:	bfbb      	ittet	lt
 800b004:	425b      	neglt	r3, r3
 800b006:	f042 0202 	orrlt.w	r2, r2, #2
 800b00a:	9307      	strge	r3, [sp, #28]
 800b00c:	9307      	strlt	r3, [sp, #28]
 800b00e:	bfb8      	it	lt
 800b010:	9204      	strlt	r2, [sp, #16]
 800b012:	7823      	ldrb	r3, [r4, #0]
 800b014:	2b2e      	cmp	r3, #46	; 0x2e
 800b016:	d10c      	bne.n	800b032 <_vfiprintf_r+0x15a>
 800b018:	7863      	ldrb	r3, [r4, #1]
 800b01a:	2b2a      	cmp	r3, #42	; 0x2a
 800b01c:	d134      	bne.n	800b088 <_vfiprintf_r+0x1b0>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	3402      	adds	r4, #2
 800b022:	1d1a      	adds	r2, r3, #4
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	9203      	str	r2, [sp, #12]
 800b02a:	bfb8      	it	lt
 800b02c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b030:	9305      	str	r3, [sp, #20]
 800b032:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b108 <_vfiprintf_r+0x230>
 800b036:	2203      	movs	r2, #3
 800b038:	7821      	ldrb	r1, [r4, #0]
 800b03a:	4650      	mov	r0, sl
 800b03c:	f000 fb5c 	bl	800b6f8 <memchr>
 800b040:	b138      	cbz	r0, 800b052 <_vfiprintf_r+0x17a>
 800b042:	eba0 000a 	sub.w	r0, r0, sl
 800b046:	2240      	movs	r2, #64	; 0x40
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	3401      	adds	r4, #1
 800b04c:	4082      	lsls	r2, r0
 800b04e:	4313      	orrs	r3, r2
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	2206      	movs	r2, #6
 800b058:	4828      	ldr	r0, [pc, #160]	; (800b0fc <_vfiprintf_r+0x224>)
 800b05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b05e:	f000 fb4b 	bl	800b6f8 <memchr>
 800b062:	2800      	cmp	r0, #0
 800b064:	d03f      	beq.n	800b0e6 <_vfiprintf_r+0x20e>
 800b066:	4b26      	ldr	r3, [pc, #152]	; (800b100 <_vfiprintf_r+0x228>)
 800b068:	bb1b      	cbnz	r3, 800b0b2 <_vfiprintf_r+0x1da>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	3307      	adds	r3, #7
 800b06e:	f023 0307 	bic.w	r3, r3, #7
 800b072:	3308      	adds	r3, #8
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	443b      	add	r3, r7
 800b07a:	9309      	str	r3, [sp, #36]	; 0x24
 800b07c:	e768      	b.n	800af50 <_vfiprintf_r+0x78>
 800b07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b082:	460c      	mov	r4, r1
 800b084:	2001      	movs	r0, #1
 800b086:	e7a6      	b.n	800afd6 <_vfiprintf_r+0xfe>
 800b088:	2300      	movs	r3, #0
 800b08a:	3401      	adds	r4, #1
 800b08c:	f04f 0c0a 	mov.w	ip, #10
 800b090:	4619      	mov	r1, r3
 800b092:	9305      	str	r3, [sp, #20]
 800b094:	4620      	mov	r0, r4
 800b096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b09a:	3a30      	subs	r2, #48	; 0x30
 800b09c:	2a09      	cmp	r2, #9
 800b09e:	d903      	bls.n	800b0a8 <_vfiprintf_r+0x1d0>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0c6      	beq.n	800b032 <_vfiprintf_r+0x15a>
 800b0a4:	9105      	str	r1, [sp, #20]
 800b0a6:	e7c4      	b.n	800b032 <_vfiprintf_r+0x15a>
 800b0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7f0      	b.n	800b094 <_vfiprintf_r+0x1bc>
 800b0b2:	ab03      	add	r3, sp, #12
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	a904      	add	r1, sp, #16
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	4b11      	ldr	r3, [pc, #68]	; (800b104 <_vfiprintf_r+0x22c>)
 800b0be:	f3af 8000 	nop.w
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	1c78      	adds	r0, r7, #1
 800b0c6:	d1d6      	bne.n	800b076 <_vfiprintf_r+0x19e>
 800b0c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ca:	07d9      	lsls	r1, r3, #31
 800b0cc:	d405      	bmi.n	800b0da <_vfiprintf_r+0x202>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	059a      	lsls	r2, r3, #22
 800b0d2:	d402      	bmi.n	800b0da <_vfiprintf_r+0x202>
 800b0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0d6:	f7ff fe7b 	bl	800add0 <__retarget_lock_release_recursive>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	065b      	lsls	r3, r3, #25
 800b0de:	f53f af1d 	bmi.w	800af1c <_vfiprintf_r+0x44>
 800b0e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e4:	e71c      	b.n	800af20 <_vfiprintf_r+0x48>
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	a904      	add	r1, sp, #16
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	4b04      	ldr	r3, [pc, #16]	; (800b104 <_vfiprintf_r+0x22c>)
 800b0f2:	f000 f87d 	bl	800b1f0 <_printf_i>
 800b0f6:	e7e4      	b.n	800b0c2 <_vfiprintf_r+0x1ea>
 800b0f8:	0800bac1 	.word	0x0800bac1
 800b0fc:	0800bacb 	.word	0x0800bacb
 800b100:	00000000 	.word	0x00000000
 800b104:	0800aeb3 	.word	0x0800aeb3
 800b108:	0800bac7 	.word	0x0800bac7

0800b10c <_printf_common>:
 800b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b110:	4616      	mov	r6, r2
 800b112:	4699      	mov	r9, r3
 800b114:	688a      	ldr	r2, [r1, #8]
 800b116:	4607      	mov	r7, r0
 800b118:	690b      	ldr	r3, [r1, #16]
 800b11a:	460c      	mov	r4, r1
 800b11c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b120:	4293      	cmp	r3, r2
 800b122:	bfb8      	it	lt
 800b124:	4613      	movlt	r3, r2
 800b126:	6033      	str	r3, [r6, #0]
 800b128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b12c:	b10a      	cbz	r2, 800b132 <_printf_common+0x26>
 800b12e:	3301      	adds	r3, #1
 800b130:	6033      	str	r3, [r6, #0]
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	0699      	lsls	r1, r3, #26
 800b136:	bf42      	ittt	mi
 800b138:	6833      	ldrmi	r3, [r6, #0]
 800b13a:	3302      	addmi	r3, #2
 800b13c:	6033      	strmi	r3, [r6, #0]
 800b13e:	6825      	ldr	r5, [r4, #0]
 800b140:	f015 0506 	ands.w	r5, r5, #6
 800b144:	d106      	bne.n	800b154 <_printf_common+0x48>
 800b146:	f104 0a19 	add.w	sl, r4, #25
 800b14a:	68e3      	ldr	r3, [r4, #12]
 800b14c:	6832      	ldr	r2, [r6, #0]
 800b14e:	1a9b      	subs	r3, r3, r2
 800b150:	42ab      	cmp	r3, r5
 800b152:	dc2b      	bgt.n	800b1ac <_printf_common+0xa0>
 800b154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b158:	1e13      	subs	r3, r2, #0
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	bf18      	it	ne
 800b15e:	2301      	movne	r3, #1
 800b160:	0692      	lsls	r2, r2, #26
 800b162:	d430      	bmi.n	800b1c6 <_printf_common+0xba>
 800b164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b168:	4649      	mov	r1, r9
 800b16a:	4638      	mov	r0, r7
 800b16c:	47c0      	blx	r8
 800b16e:	3001      	adds	r0, #1
 800b170:	d023      	beq.n	800b1ba <_printf_common+0xae>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	341a      	adds	r4, #26
 800b176:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b17a:	f003 0306 	and.w	r3, r3, #6
 800b17e:	2b04      	cmp	r3, #4
 800b180:	bf0a      	itet	eq
 800b182:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b186:	2500      	movne	r5, #0
 800b188:	6833      	ldreq	r3, [r6, #0]
 800b18a:	f04f 0600 	mov.w	r6, #0
 800b18e:	bf08      	it	eq
 800b190:	1aed      	subeq	r5, r5, r3
 800b192:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b196:	bf08      	it	eq
 800b198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b19c:	4293      	cmp	r3, r2
 800b19e:	bfc4      	itt	gt
 800b1a0:	1a9b      	subgt	r3, r3, r2
 800b1a2:	18ed      	addgt	r5, r5, r3
 800b1a4:	42b5      	cmp	r5, r6
 800b1a6:	d11a      	bne.n	800b1de <_printf_common+0xd2>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e008      	b.n	800b1be <_printf_common+0xb2>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4652      	mov	r2, sl
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	47c0      	blx	r8
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d103      	bne.n	800b1c2 <_printf_common+0xb6>
 800b1ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c2:	3501      	adds	r5, #1
 800b1c4:	e7c1      	b.n	800b14a <_printf_common+0x3e>
 800b1c6:	18e1      	adds	r1, r4, r3
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	2030      	movs	r0, #48	; 0x30
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	4422      	add	r2, r4
 800b1d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1dc:	e7c2      	b.n	800b164 <_printf_common+0x58>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	47c0      	blx	r8
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d0e6      	beq.n	800b1ba <_printf_common+0xae>
 800b1ec:	3601      	adds	r6, #1
 800b1ee:	e7d9      	b.n	800b1a4 <_printf_common+0x98>

0800b1f0 <_printf_i>:
 800b1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f4:	7e0f      	ldrb	r7, [r1, #24]
 800b1f6:	4691      	mov	r9, r2
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	2f78      	cmp	r7, #120	; 0x78
 800b1fe:	469a      	mov	sl, r3
 800b200:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b206:	d807      	bhi.n	800b218 <_printf_i+0x28>
 800b208:	2f62      	cmp	r7, #98	; 0x62
 800b20a:	d80a      	bhi.n	800b222 <_printf_i+0x32>
 800b20c:	2f00      	cmp	r7, #0
 800b20e:	f000 80d3 	beq.w	800b3b8 <_printf_i+0x1c8>
 800b212:	2f58      	cmp	r7, #88	; 0x58
 800b214:	f000 80bf 	beq.w	800b396 <_printf_i+0x1a6>
 800b218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b21c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b220:	e03a      	b.n	800b298 <_printf_i+0xa8>
 800b222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b226:	2b15      	cmp	r3, #21
 800b228:	d8f6      	bhi.n	800b218 <_printf_i+0x28>
 800b22a:	a101      	add	r1, pc, #4	; (adr r1, 800b230 <_printf_i+0x40>)
 800b22c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b230:	0800b289 	.word	0x0800b289
 800b234:	0800b29d 	.word	0x0800b29d
 800b238:	0800b219 	.word	0x0800b219
 800b23c:	0800b219 	.word	0x0800b219
 800b240:	0800b219 	.word	0x0800b219
 800b244:	0800b219 	.word	0x0800b219
 800b248:	0800b29d 	.word	0x0800b29d
 800b24c:	0800b219 	.word	0x0800b219
 800b250:	0800b219 	.word	0x0800b219
 800b254:	0800b219 	.word	0x0800b219
 800b258:	0800b219 	.word	0x0800b219
 800b25c:	0800b39f 	.word	0x0800b39f
 800b260:	0800b2c9 	.word	0x0800b2c9
 800b264:	0800b35b 	.word	0x0800b35b
 800b268:	0800b219 	.word	0x0800b219
 800b26c:	0800b219 	.word	0x0800b219
 800b270:	0800b3c1 	.word	0x0800b3c1
 800b274:	0800b219 	.word	0x0800b219
 800b278:	0800b2c9 	.word	0x0800b2c9
 800b27c:	0800b219 	.word	0x0800b219
 800b280:	0800b219 	.word	0x0800b219
 800b284:	0800b363 	.word	0x0800b363
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	1d1a      	adds	r2, r3, #4
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	602a      	str	r2, [r5, #0]
 800b290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b298:	2301      	movs	r3, #1
 800b29a:	e09e      	b.n	800b3da <_printf_i+0x1ea>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	0607      	lsls	r7, r0, #24
 800b2a2:	f103 0104 	add.w	r1, r3, #4
 800b2a6:	6029      	str	r1, [r5, #0]
 800b2a8:	d501      	bpl.n	800b2ae <_printf_i+0xbe>
 800b2aa:	681e      	ldr	r6, [r3, #0]
 800b2ac:	e003      	b.n	800b2b6 <_printf_i+0xc6>
 800b2ae:	0646      	lsls	r6, r0, #25
 800b2b0:	d5fb      	bpl.n	800b2aa <_printf_i+0xba>
 800b2b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	da03      	bge.n	800b2c2 <_printf_i+0xd2>
 800b2ba:	232d      	movs	r3, #45	; 0x2d
 800b2bc:	4276      	negs	r6, r6
 800b2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2c2:	4859      	ldr	r0, [pc, #356]	; (800b428 <_printf_i+0x238>)
 800b2c4:	230a      	movs	r3, #10
 800b2c6:	e012      	b.n	800b2ee <_printf_i+0xfe>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	1d19      	adds	r1, r3, #4
 800b2ce:	6029      	str	r1, [r5, #0]
 800b2d0:	0605      	lsls	r5, r0, #24
 800b2d2:	d501      	bpl.n	800b2d8 <_printf_i+0xe8>
 800b2d4:	681e      	ldr	r6, [r3, #0]
 800b2d6:	e002      	b.n	800b2de <_printf_i+0xee>
 800b2d8:	0641      	lsls	r1, r0, #25
 800b2da:	d5fb      	bpl.n	800b2d4 <_printf_i+0xe4>
 800b2dc:	881e      	ldrh	r6, [r3, #0]
 800b2de:	2f6f      	cmp	r7, #111	; 0x6f
 800b2e0:	4851      	ldr	r0, [pc, #324]	; (800b428 <_printf_i+0x238>)
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2308      	moveq	r3, #8
 800b2e6:	230a      	movne	r3, #10
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2ee:	6865      	ldr	r5, [r4, #4]
 800b2f0:	2d00      	cmp	r5, #0
 800b2f2:	60a5      	str	r5, [r4, #8]
 800b2f4:	bfa2      	ittt	ge
 800b2f6:	6821      	ldrge	r1, [r4, #0]
 800b2f8:	f021 0104 	bicge.w	r1, r1, #4
 800b2fc:	6021      	strge	r1, [r4, #0]
 800b2fe:	b90e      	cbnz	r6, 800b304 <_printf_i+0x114>
 800b300:	2d00      	cmp	r5, #0
 800b302:	d04a      	beq.n	800b39a <_printf_i+0x1aa>
 800b304:	4615      	mov	r5, r2
 800b306:	fbb6 f1f3 	udiv	r1, r6, r3
 800b30a:	fb03 6711 	mls	r7, r3, r1, r6
 800b30e:	5dc7      	ldrb	r7, [r0, r7]
 800b310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b314:	4637      	mov	r7, r6
 800b316:	460e      	mov	r6, r1
 800b318:	42bb      	cmp	r3, r7
 800b31a:	d9f4      	bls.n	800b306 <_printf_i+0x116>
 800b31c:	2b08      	cmp	r3, #8
 800b31e:	d10b      	bne.n	800b338 <_printf_i+0x148>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	07de      	lsls	r6, r3, #31
 800b324:	d508      	bpl.n	800b338 <_printf_i+0x148>
 800b326:	6923      	ldr	r3, [r4, #16]
 800b328:	6861      	ldr	r1, [r4, #4]
 800b32a:	4299      	cmp	r1, r3
 800b32c:	bfde      	ittt	le
 800b32e:	2330      	movle	r3, #48	; 0x30
 800b330:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b334:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b338:	1b52      	subs	r2, r2, r5
 800b33a:	6122      	str	r2, [r4, #16]
 800b33c:	464b      	mov	r3, r9
 800b33e:	aa03      	add	r2, sp, #12
 800b340:	4621      	mov	r1, r4
 800b342:	4640      	mov	r0, r8
 800b344:	f8cd a000 	str.w	sl, [sp]
 800b348:	f7ff fee0 	bl	800b10c <_printf_common>
 800b34c:	3001      	adds	r0, #1
 800b34e:	d149      	bne.n	800b3e4 <_printf_i+0x1f4>
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	b004      	add	sp, #16
 800b356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	f043 0320 	orr.w	r3, r3, #32
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	2778      	movs	r7, #120	; 0x78
 800b364:	4831      	ldr	r0, [pc, #196]	; (800b42c <_printf_i+0x23c>)
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b36c:	061f      	lsls	r7, r3, #24
 800b36e:	6829      	ldr	r1, [r5, #0]
 800b370:	f851 6b04 	ldr.w	r6, [r1], #4
 800b374:	d402      	bmi.n	800b37c <_printf_i+0x18c>
 800b376:	065f      	lsls	r7, r3, #25
 800b378:	bf48      	it	mi
 800b37a:	b2b6      	uxthmi	r6, r6
 800b37c:	07df      	lsls	r7, r3, #31
 800b37e:	6029      	str	r1, [r5, #0]
 800b380:	bf44      	itt	mi
 800b382:	f043 0320 	orrmi.w	r3, r3, #32
 800b386:	6023      	strmi	r3, [r4, #0]
 800b388:	b91e      	cbnz	r6, 800b392 <_printf_i+0x1a2>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	f023 0320 	bic.w	r3, r3, #32
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	2310      	movs	r3, #16
 800b394:	e7a8      	b.n	800b2e8 <_printf_i+0xf8>
 800b396:	4824      	ldr	r0, [pc, #144]	; (800b428 <_printf_i+0x238>)
 800b398:	e7e5      	b.n	800b366 <_printf_i+0x176>
 800b39a:	4615      	mov	r5, r2
 800b39c:	e7be      	b.n	800b31c <_printf_i+0x12c>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	6826      	ldr	r6, [r4, #0]
 800b3a2:	1d18      	adds	r0, r3, #4
 800b3a4:	6961      	ldr	r1, [r4, #20]
 800b3a6:	6028      	str	r0, [r5, #0]
 800b3a8:	0635      	lsls	r5, r6, #24
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	d501      	bpl.n	800b3b2 <_printf_i+0x1c2>
 800b3ae:	6019      	str	r1, [r3, #0]
 800b3b0:	e002      	b.n	800b3b8 <_printf_i+0x1c8>
 800b3b2:	0670      	lsls	r0, r6, #25
 800b3b4:	d5fb      	bpl.n	800b3ae <_printf_i+0x1be>
 800b3b6:	8019      	strh	r1, [r3, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4615      	mov	r5, r2
 800b3bc:	6123      	str	r3, [r4, #16]
 800b3be:	e7bd      	b.n	800b33c <_printf_i+0x14c>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	1d1a      	adds	r2, r3, #4
 800b3c6:	602a      	str	r2, [r5, #0]
 800b3c8:	681d      	ldr	r5, [r3, #0]
 800b3ca:	6862      	ldr	r2, [r4, #4]
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	f000 f993 	bl	800b6f8 <memchr>
 800b3d2:	b108      	cbz	r0, 800b3d8 <_printf_i+0x1e8>
 800b3d4:	1b40      	subs	r0, r0, r5
 800b3d6:	6060      	str	r0, [r4, #4]
 800b3d8:	6863      	ldr	r3, [r4, #4]
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3e2:	e7ab      	b.n	800b33c <_printf_i+0x14c>
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	47d0      	blx	sl
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d0ae      	beq.n	800b350 <_printf_i+0x160>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	079b      	lsls	r3, r3, #30
 800b3f6:	d413      	bmi.n	800b420 <_printf_i+0x230>
 800b3f8:	68e0      	ldr	r0, [r4, #12]
 800b3fa:	9b03      	ldr	r3, [sp, #12]
 800b3fc:	4298      	cmp	r0, r3
 800b3fe:	bfb8      	it	lt
 800b400:	4618      	movlt	r0, r3
 800b402:	e7a7      	b.n	800b354 <_printf_i+0x164>
 800b404:	2301      	movs	r3, #1
 800b406:	4632      	mov	r2, r6
 800b408:	4649      	mov	r1, r9
 800b40a:	4640      	mov	r0, r8
 800b40c:	47d0      	blx	sl
 800b40e:	3001      	adds	r0, #1
 800b410:	d09e      	beq.n	800b350 <_printf_i+0x160>
 800b412:	3501      	adds	r5, #1
 800b414:	68e3      	ldr	r3, [r4, #12]
 800b416:	9903      	ldr	r1, [sp, #12]
 800b418:	1a5b      	subs	r3, r3, r1
 800b41a:	42ab      	cmp	r3, r5
 800b41c:	dcf2      	bgt.n	800b404 <_printf_i+0x214>
 800b41e:	e7eb      	b.n	800b3f8 <_printf_i+0x208>
 800b420:	2500      	movs	r5, #0
 800b422:	f104 0619 	add.w	r6, r4, #25
 800b426:	e7f5      	b.n	800b414 <_printf_i+0x224>
 800b428:	0800bad2 	.word	0x0800bad2
 800b42c:	0800bae3 	.word	0x0800bae3

0800b430 <__sflush_r>:
 800b430:	898a      	ldrh	r2, [r1, #12]
 800b432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b436:	4605      	mov	r5, r0
 800b438:	0710      	lsls	r0, r2, #28
 800b43a:	460c      	mov	r4, r1
 800b43c:	d458      	bmi.n	800b4f0 <__sflush_r+0xc0>
 800b43e:	684b      	ldr	r3, [r1, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	dc05      	bgt.n	800b450 <__sflush_r+0x20>
 800b444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	dc02      	bgt.n	800b450 <__sflush_r+0x20>
 800b44a:	2000      	movs	r0, #0
 800b44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b452:	2e00      	cmp	r6, #0
 800b454:	d0f9      	beq.n	800b44a <__sflush_r+0x1a>
 800b456:	2300      	movs	r3, #0
 800b458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b45c:	682f      	ldr	r7, [r5, #0]
 800b45e:	6a21      	ldr	r1, [r4, #32]
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	d032      	beq.n	800b4ca <__sflush_r+0x9a>
 800b464:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b466:	89a3      	ldrh	r3, [r4, #12]
 800b468:	075a      	lsls	r2, r3, #29
 800b46a:	d505      	bpl.n	800b478 <__sflush_r+0x48>
 800b46c:	6863      	ldr	r3, [r4, #4]
 800b46e:	1ac0      	subs	r0, r0, r3
 800b470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b472:	b10b      	cbz	r3, 800b478 <__sflush_r+0x48>
 800b474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b476:	1ac0      	subs	r0, r0, r3
 800b478:	2300      	movs	r3, #0
 800b47a:	4602      	mov	r2, r0
 800b47c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b47e:	4628      	mov	r0, r5
 800b480:	6a21      	ldr	r1, [r4, #32]
 800b482:	47b0      	blx	r6
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	d106      	bne.n	800b498 <__sflush_r+0x68>
 800b48a:	6829      	ldr	r1, [r5, #0]
 800b48c:	291d      	cmp	r1, #29
 800b48e:	d82b      	bhi.n	800b4e8 <__sflush_r+0xb8>
 800b490:	4a28      	ldr	r2, [pc, #160]	; (800b534 <__sflush_r+0x104>)
 800b492:	410a      	asrs	r2, r1
 800b494:	07d6      	lsls	r6, r2, #31
 800b496:	d427      	bmi.n	800b4e8 <__sflush_r+0xb8>
 800b498:	2200      	movs	r2, #0
 800b49a:	04d9      	lsls	r1, r3, #19
 800b49c:	6062      	str	r2, [r4, #4]
 800b49e:	6922      	ldr	r2, [r4, #16]
 800b4a0:	6022      	str	r2, [r4, #0]
 800b4a2:	d504      	bpl.n	800b4ae <__sflush_r+0x7e>
 800b4a4:	1c42      	adds	r2, r0, #1
 800b4a6:	d101      	bne.n	800b4ac <__sflush_r+0x7c>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b903      	cbnz	r3, 800b4ae <__sflush_r+0x7e>
 800b4ac:	6560      	str	r0, [r4, #84]	; 0x54
 800b4ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b0:	602f      	str	r7, [r5, #0]
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	d0c9      	beq.n	800b44a <__sflush_r+0x1a>
 800b4b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d002      	beq.n	800b4c4 <__sflush_r+0x94>
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7ff fc94 	bl	800adec <_free_r>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b4c8:	e7c0      	b.n	800b44c <__sflush_r+0x1c>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	47b0      	blx	r6
 800b4d0:	1c41      	adds	r1, r0, #1
 800b4d2:	d1c8      	bne.n	800b466 <__sflush_r+0x36>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d0c5      	beq.n	800b466 <__sflush_r+0x36>
 800b4da:	2b1d      	cmp	r3, #29
 800b4dc:	d001      	beq.n	800b4e2 <__sflush_r+0xb2>
 800b4de:	2b16      	cmp	r3, #22
 800b4e0:	d101      	bne.n	800b4e6 <__sflush_r+0xb6>
 800b4e2:	602f      	str	r7, [r5, #0]
 800b4e4:	e7b1      	b.n	800b44a <__sflush_r+0x1a>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	e7ad      	b.n	800b44c <__sflush_r+0x1c>
 800b4f0:	690f      	ldr	r7, [r1, #16]
 800b4f2:	2f00      	cmp	r7, #0
 800b4f4:	d0a9      	beq.n	800b44a <__sflush_r+0x1a>
 800b4f6:	0793      	lsls	r3, r2, #30
 800b4f8:	680e      	ldr	r6, [r1, #0]
 800b4fa:	600f      	str	r7, [r1, #0]
 800b4fc:	bf0c      	ite	eq
 800b4fe:	694b      	ldreq	r3, [r1, #20]
 800b500:	2300      	movne	r3, #0
 800b502:	eba6 0807 	sub.w	r8, r6, r7
 800b506:	608b      	str	r3, [r1, #8]
 800b508:	f1b8 0f00 	cmp.w	r8, #0
 800b50c:	dd9d      	ble.n	800b44a <__sflush_r+0x1a>
 800b50e:	4643      	mov	r3, r8
 800b510:	463a      	mov	r2, r7
 800b512:	6a21      	ldr	r1, [r4, #32]
 800b514:	4628      	mov	r0, r5
 800b516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b518:	47b0      	blx	r6
 800b51a:	2800      	cmp	r0, #0
 800b51c:	dc06      	bgt.n	800b52c <__sflush_r+0xfc>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f04f 30ff 	mov.w	r0, #4294967295
 800b524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	e78f      	b.n	800b44c <__sflush_r+0x1c>
 800b52c:	4407      	add	r7, r0
 800b52e:	eba8 0800 	sub.w	r8, r8, r0
 800b532:	e7e9      	b.n	800b508 <__sflush_r+0xd8>
 800b534:	dfbffffe 	.word	0xdfbffffe

0800b538 <_fflush_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	690b      	ldr	r3, [r1, #16]
 800b53c:	4605      	mov	r5, r0
 800b53e:	460c      	mov	r4, r1
 800b540:	b913      	cbnz	r3, 800b548 <_fflush_r+0x10>
 800b542:	2500      	movs	r5, #0
 800b544:	4628      	mov	r0, r5
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	b118      	cbz	r0, 800b552 <_fflush_r+0x1a>
 800b54a:	6a03      	ldr	r3, [r0, #32]
 800b54c:	b90b      	cbnz	r3, 800b552 <_fflush_r+0x1a>
 800b54e:	f7ff fa1f 	bl	800a990 <__sinit>
 800b552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0f3      	beq.n	800b542 <_fflush_r+0xa>
 800b55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b55c:	07d0      	lsls	r0, r2, #31
 800b55e:	d404      	bmi.n	800b56a <_fflush_r+0x32>
 800b560:	0599      	lsls	r1, r3, #22
 800b562:	d402      	bmi.n	800b56a <_fflush_r+0x32>
 800b564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b566:	f7ff fc32 	bl	800adce <__retarget_lock_acquire_recursive>
 800b56a:	4628      	mov	r0, r5
 800b56c:	4621      	mov	r1, r4
 800b56e:	f7ff ff5f 	bl	800b430 <__sflush_r>
 800b572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b574:	4605      	mov	r5, r0
 800b576:	07da      	lsls	r2, r3, #31
 800b578:	d4e4      	bmi.n	800b544 <_fflush_r+0xc>
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	059b      	lsls	r3, r3, #22
 800b57e:	d4e1      	bmi.n	800b544 <_fflush_r+0xc>
 800b580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b582:	f7ff fc25 	bl	800add0 <__retarget_lock_release_recursive>
 800b586:	e7dd      	b.n	800b544 <_fflush_r+0xc>

0800b588 <__swhatbuf_r>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	460c      	mov	r4, r1
 800b58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b590:	b096      	sub	sp, #88	; 0x58
 800b592:	4615      	mov	r5, r2
 800b594:	2900      	cmp	r1, #0
 800b596:	461e      	mov	r6, r3
 800b598:	da0c      	bge.n	800b5b4 <__swhatbuf_r+0x2c>
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	2100      	movs	r1, #0
 800b59e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5a2:	bf0c      	ite	eq
 800b5a4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5a8:	2340      	movne	r3, #64	; 0x40
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	6031      	str	r1, [r6, #0]
 800b5ae:	602b      	str	r3, [r5, #0]
 800b5b0:	b016      	add	sp, #88	; 0x58
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	466a      	mov	r2, sp
 800b5b6:	f000 f87d 	bl	800b6b4 <_fstat_r>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	dbed      	blt.n	800b59a <__swhatbuf_r+0x12>
 800b5be:	9901      	ldr	r1, [sp, #4]
 800b5c0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5c4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b5c8:	4259      	negs	r1, r3
 800b5ca:	4159      	adcs	r1, r3
 800b5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5d0:	e7eb      	b.n	800b5aa <__swhatbuf_r+0x22>

0800b5d2 <__smakebuf_r>:
 800b5d2:	898b      	ldrh	r3, [r1, #12]
 800b5d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5d6:	079d      	lsls	r5, r3, #30
 800b5d8:	4606      	mov	r6, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	d507      	bpl.n	800b5ee <__smakebuf_r+0x1c>
 800b5de:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	6123      	str	r3, [r4, #16]
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	6163      	str	r3, [r4, #20]
 800b5ea:	b002      	add	sp, #8
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	ab01      	add	r3, sp, #4
 800b5f0:	466a      	mov	r2, sp
 800b5f2:	f7ff ffc9 	bl	800b588 <__swhatbuf_r>
 800b5f6:	9900      	ldr	r1, [sp, #0]
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7ff f824 	bl	800a648 <_malloc_r>
 800b600:	b948      	cbnz	r0, 800b616 <__smakebuf_r+0x44>
 800b602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b606:	059a      	lsls	r2, r3, #22
 800b608:	d4ef      	bmi.n	800b5ea <__smakebuf_r+0x18>
 800b60a:	f023 0303 	bic.w	r3, r3, #3
 800b60e:	f043 0302 	orr.w	r3, r3, #2
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	e7e3      	b.n	800b5de <__smakebuf_r+0xc>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	6020      	str	r0, [r4, #0]
 800b61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61e:	6120      	str	r0, [r4, #16]
 800b620:	81a3      	strh	r3, [r4, #12]
 800b622:	9b00      	ldr	r3, [sp, #0]
 800b624:	6163      	str	r3, [r4, #20]
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	b15b      	cbz	r3, 800b642 <__smakebuf_r+0x70>
 800b62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 f852 	bl	800b6d8 <_isatty_r>
 800b634:	b128      	cbz	r0, 800b642 <__smakebuf_r+0x70>
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f023 0303 	bic.w	r3, r3, #3
 800b63c:	f043 0301 	orr.w	r3, r3, #1
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	431d      	orrs	r5, r3
 800b646:	81a5      	strh	r5, [r4, #12]
 800b648:	e7cf      	b.n	800b5ea <__smakebuf_r+0x18>

0800b64a <_putc_r>:
 800b64a:	b570      	push	{r4, r5, r6, lr}
 800b64c:	460d      	mov	r5, r1
 800b64e:	4614      	mov	r4, r2
 800b650:	4606      	mov	r6, r0
 800b652:	b118      	cbz	r0, 800b65c <_putc_r+0x12>
 800b654:	6a03      	ldr	r3, [r0, #32]
 800b656:	b90b      	cbnz	r3, 800b65c <_putc_r+0x12>
 800b658:	f7ff f99a 	bl	800a990 <__sinit>
 800b65c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b65e:	07d8      	lsls	r0, r3, #31
 800b660:	d405      	bmi.n	800b66e <_putc_r+0x24>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	0599      	lsls	r1, r3, #22
 800b666:	d402      	bmi.n	800b66e <_putc_r+0x24>
 800b668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b66a:	f7ff fbb0 	bl	800adce <__retarget_lock_acquire_recursive>
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	3b01      	subs	r3, #1
 800b672:	2b00      	cmp	r3, #0
 800b674:	60a3      	str	r3, [r4, #8]
 800b676:	da05      	bge.n	800b684 <_putc_r+0x3a>
 800b678:	69a2      	ldr	r2, [r4, #24]
 800b67a:	4293      	cmp	r3, r2
 800b67c:	db12      	blt.n	800b6a4 <_putc_r+0x5a>
 800b67e:	b2eb      	uxtb	r3, r5
 800b680:	2b0a      	cmp	r3, #10
 800b682:	d00f      	beq.n	800b6a4 <_putc_r+0x5a>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	6022      	str	r2, [r4, #0]
 800b68a:	701d      	strb	r5, [r3, #0]
 800b68c:	b2ed      	uxtb	r5, r5
 800b68e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b690:	07da      	lsls	r2, r3, #31
 800b692:	d405      	bmi.n	800b6a0 <_putc_r+0x56>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	059b      	lsls	r3, r3, #22
 800b698:	d402      	bmi.n	800b6a0 <_putc_r+0x56>
 800b69a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b69c:	f7ff fb98 	bl	800add0 <__retarget_lock_release_recursive>
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff fa60 	bl	800ab6e <__swbuf_r>
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	e7ed      	b.n	800b68e <_putc_r+0x44>
	...

0800b6b4 <_fstat_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	4d06      	ldr	r5, [pc, #24]	; (800b6d4 <_fstat_r+0x20>)
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	4611      	mov	r1, r2
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	f7f5 fecc 	bl	800145e <_fstat>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d102      	bne.n	800b6d0 <_fstat_r+0x1c>
 800b6ca:	682b      	ldr	r3, [r5, #0]
 800b6cc:	b103      	cbz	r3, 800b6d0 <_fstat_r+0x1c>
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	bd38      	pop	{r3, r4, r5, pc}
 800b6d2:	bf00      	nop
 800b6d4:	200031fc 	.word	0x200031fc

0800b6d8 <_isatty_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	2300      	movs	r3, #0
 800b6dc:	4d05      	ldr	r5, [pc, #20]	; (800b6f4 <_isatty_r+0x1c>)
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	602b      	str	r3, [r5, #0]
 800b6e4:	f7f5 fecb 	bl	800147e <_isatty>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_isatty_r+0x1a>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_isatty_r+0x1a>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	200031fc 	.word	0x200031fc

0800b6f8 <memchr>:
 800b6f8:	b2c9      	uxtb	r1, r1
 800b6fa:	4402      	add	r2, r0
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	4290      	cmp	r0, r2
 800b700:	4603      	mov	r3, r0
 800b702:	d101      	bne.n	800b708 <memchr+0x10>
 800b704:	2300      	movs	r3, #0
 800b706:	e003      	b.n	800b710 <memchr+0x18>
 800b708:	781c      	ldrb	r4, [r3, #0]
 800b70a:	3001      	adds	r0, #1
 800b70c:	428c      	cmp	r4, r1
 800b70e:	d1f6      	bne.n	800b6fe <memchr+0x6>
 800b710:	4618      	mov	r0, r3
 800b712:	bd10      	pop	{r4, pc}

0800b714 <_init>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	bf00      	nop
 800b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71a:	bc08      	pop	{r3}
 800b71c:	469e      	mov	lr, r3
 800b71e:	4770      	bx	lr

0800b720 <_fini>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	bf00      	nop
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr
