
PROJ_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebc0  08000240  08000240  00010240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000309  0800ee00  0800ee00  0001ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f114  0800f114  0001f114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f118  0800f118  0001f118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800f11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000413ae  20000074  0800f190  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000606  20041422  0800f190  00021422  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
 11 .debug_info   000298a1  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000533b  00000000  00000000  0004998e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002410  00000000  00000000  0004ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c01  00000000  00000000  000510e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00008875  00000000  00000000  00052ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002d615  00000000  00000000  0005b556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015e543  00000000  00000000  00088b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a120  00000000  00000000  001e70b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001f11d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	; (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000074 	.word	0x20000074
 800025c:	00000000 	.word	0x00000000
 8000260:	0800ede8 	.word	0x0800ede8

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	; (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000078 	.word	0x20000078
 800027c:	0800ede8 	.word	0x0800ede8

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b982 	b.w	800059c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d146      	bne.n	800034e <__udivmoddi4+0x9e>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d95e      	bls.n	8000384 <__udivmoddi4+0xd4>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	409c      	lsls	r4, r3
 80002d8:	fa20 f202 	lsr.w	r2, r0, r2
 80002dc:	4317      	orrs	r7, r2
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	0c22      	lsrs	r2, r4, #16
 80002e8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	fb01 f005 	mul.w	r0, r1, r5
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x5e>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x5c>
 8000306:	4290      	cmp	r0, r2
 8000308:	f200 8134 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 800030c:	4639      	mov	r1, r7
 800030e:	1a12      	subs	r2, r2, r0
 8000310:	b2a4      	uxth	r4, r4
 8000312:	fbb2 f0fe 	udiv	r0, r2, lr
 8000316:	fb0e 2210 	mls	r2, lr, r0, r2
 800031a:	fb00 f505 	mul.w	r5, r0, r5
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	42a5      	cmp	r5, r4
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x88>
 8000326:	eb1c 0404 	adds.w	r4, ip, r4
 800032a:	f100 32ff 	add.w	r2, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x86>
 8000330:	42a5      	cmp	r5, r4
 8000332:	f200 8119 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 8000336:	4610      	mov	r0, r2
 8000338:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	2100      	movs	r1, #0
 8000340:	b11e      	cbz	r6, 800034a <__udivmoddi4+0x9a>
 8000342:	40dc      	lsrs	r4, r3
 8000344:	2300      	movs	r3, #0
 8000346:	e9c6 4300 	strd	r4, r3, [r6]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0xb4>
 8000352:	2e00      	cmp	r6, #0
 8000354:	f000 80fc 	beq.w	8000550 <__udivmoddi4+0x2a0>
 8000358:	2100      	movs	r1, #0
 800035a:	e9c6 0500 	strd	r0, r5, [r6]
 800035e:	4608      	mov	r0, r1
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	fab3 f183 	clz	r1, r3
 8000368:	2900      	cmp	r1, #0
 800036a:	d14c      	bne.n	8000406 <__udivmoddi4+0x156>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f0c0 80f2 	bcc.w	8000556 <__udivmoddi4+0x2a6>
 8000372:	4282      	cmp	r2, r0
 8000374:	f240 80ef 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000378:	4608      	mov	r0, r1
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e5      	beq.n	800034a <__udivmoddi4+0x9a>
 800037e:	e9c6 4700 	strd	r4, r7, [r6]
 8000382:	e7e2      	b.n	800034a <__udivmoddi4+0x9a>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xd8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f382 	clz	r3, r2
 800038c:	2b00      	cmp	r3, #0
 800038e:	f040 809f 	bne.w	80004d0 <__udivmoddi4+0x220>
 8000392:	1a8a      	subs	r2, r1, r2
 8000394:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000398:	fa1f f78c 	uxth.w	r7, ip
 800039c:	2101      	movs	r1, #1
 800039e:	fbb2 f5fe 	udiv	r5, r2, lr
 80003a2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003a6:	0c22      	lsrs	r2, r4, #16
 80003a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ac:	fb07 f005 	mul.w	r0, r7, r5
 80003b0:	4290      	cmp	r0, r2
 80003b2:	d90f      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003b4:	eb1c 0202 	adds.w	r2, ip, r2
 80003b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003bc:	bf2c      	ite	cs
 80003be:	f04f 0901 	movcs.w	r9, #1
 80003c2:	f04f 0900 	movcc.w	r9, #0
 80003c6:	4290      	cmp	r0, r2
 80003c8:	d903      	bls.n	80003d2 <__udivmoddi4+0x122>
 80003ca:	f1b9 0f00 	cmp.w	r9, #0
 80003ce:	f000 80ce 	beq.w	800056e <__udivmoddi4+0x2be>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003dc:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e0:	fb00 f707 	mul.w	r7, r0, r7
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	42a7      	cmp	r7, r4
 80003f8:	f200 80b3 	bhi.w	8000562 <__udivmoddi4+0x2b2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	1be4      	subs	r4, r4, r7
 8000400:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000404:	e79c      	b.n	8000340 <__udivmoddi4+0x90>
 8000406:	f1c1 0420 	rsb	r4, r1, #32
 800040a:	408b      	lsls	r3, r1
 800040c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000410:	fa22 f704 	lsr.w	r7, r2, r4
 8000414:	40e5      	lsrs	r5, r4
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f304 	lsr.w	r3, r0, r4
 800041e:	4088      	lsls	r0, r1
 8000420:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000430:	fbb5 fef8 	udiv	lr, r5, r8
 8000434:	fb08 551e 	mls	r5, r8, lr, r5
 8000438:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800043c:	fb0e f90c 	mul.w	r9, lr, ip
 8000440:	45a9      	cmp	r9, r5
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1b2>
 8000444:	197d      	adds	r5, r7, r5
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a9      	cmp	r9, r5
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 808d 	beq.w	800057a <__udivmoddi4+0x2ca>
 8000460:	46d6      	mov	lr, sl
 8000462:	eba5 0509 	sub.w	r5, r5, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb5 f3f8 	udiv	r3, r5, r8
 800046e:	fb08 5513 	mls	r5, r8, r3, r5
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800047a:	45ac      	cmp	ip, r5
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1dc>
 800047e:	197d      	adds	r5, r7, r5
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1da>
 8000486:	45ac      	cmp	ip, r5
 8000488:	d87e      	bhi.n	8000588 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000490:	eba5 050c 	sub.w	r5, r5, ip
 8000494:	fba3 9802 	umull	r9, r8, r3, r2
 8000498:	4545      	cmp	r5, r8
 800049a:	46ce      	mov	lr, r9
 800049c:	46c4      	mov	ip, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1f6>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x200>
 80004a2:	4548      	cmp	r0, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x200>
 80004a6:	3b01      	subs	r3, #1
 80004a8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ac:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d06f      	beq.n	8000594 <__udivmoddi4+0x2e4>
 80004b4:	ebb0 020e 	subs.w	r2, r0, lr
 80004b8:	eb65 050c 	sbc.w	r5, r5, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	fa05 f404 	lsl.w	r4, r5, r4
 80004c2:	40cd      	lsrs	r5, r1
 80004c4:	4618      	mov	r0, r3
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2100      	movs	r1, #0
 80004ca:	e9c6 4500 	strd	r4, r5, [r6]
 80004ce:	e73c      	b.n	800034a <__udivmoddi4+0x9a>
 80004d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d4:	f1c3 0220 	rsb	r2, r3, #32
 80004d8:	4099      	lsls	r1, r3
 80004da:	409c      	lsls	r4, r3
 80004dc:	40d5      	lsrs	r5, r2
 80004de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004e2:	fa20 f202 	lsr.w	r2, r0, r2
 80004e6:	fa1f f78c 	uxth.w	r7, ip
 80004ea:	fbb5 f0fe 	udiv	r0, r5, lr
 80004ee:	430a      	orrs	r2, r1
 80004f0:	fb0e 5510 	mls	r5, lr, r0, r5
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f507 	mul.w	r5, r0, r7
 80004fe:	428d      	cmp	r5, r1
 8000500:	d90e      	bls.n	8000520 <__udivmoddi4+0x270>
 8000502:	eb1c 0101 	adds.w	r1, ip, r1
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	bf2c      	ite	cs
 800050c:	f04f 0901 	movcs.w	r9, #1
 8000510:	f04f 0900 	movcc.w	r9, #0
 8000514:	428d      	cmp	r5, r1
 8000516:	d902      	bls.n	800051e <__udivmoddi4+0x26e>
 8000518:	f1b9 0f00 	cmp.w	r9, #0
 800051c:	d031      	beq.n	8000582 <__udivmoddi4+0x2d2>
 800051e:	4640      	mov	r0, r8
 8000520:	1b49      	subs	r1, r1, r5
 8000522:	b292      	uxth	r2, r2
 8000524:	fbb1 f5fe 	udiv	r5, r1, lr
 8000528:	fb0e 1115 	mls	r1, lr, r5, r1
 800052c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000530:	fb05 f107 	mul.w	r1, r5, r7
 8000534:	4291      	cmp	r1, r2
 8000536:	d907      	bls.n	8000548 <__udivmoddi4+0x298>
 8000538:	eb1c 0202 	adds.w	r2, ip, r2
 800053c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x296>
 8000542:	4291      	cmp	r1, r2
 8000544:	d823      	bhi.n	800058e <__udivmoddi4+0x2de>
 8000546:	4645      	mov	r5, r8
 8000548:	1a52      	subs	r2, r2, r1
 800054a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800054e:	e726      	b.n	800039e <__udivmoddi4+0xee>
 8000550:	4631      	mov	r1, r6
 8000552:	4630      	mov	r0, r6
 8000554:	e6f9      	b.n	800034a <__udivmoddi4+0x9a>
 8000556:	1a84      	subs	r4, r0, r2
 8000558:	eb65 0203 	sbc.w	r2, r5, r3
 800055c:	2001      	movs	r0, #1
 800055e:	4617      	mov	r7, r2
 8000560:	e70b      	b.n	800037a <__udivmoddi4+0xca>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e74a      	b.n	80003fe <__udivmoddi4+0x14e>
 8000568:	4464      	add	r4, ip
 800056a:	3802      	subs	r0, #2
 800056c:	e6e4      	b.n	8000338 <__udivmoddi4+0x88>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	3902      	subs	r1, #2
 8000576:	4462      	add	r2, ip
 8000578:	e6c9      	b.n	800030e <__udivmoddi4+0x5e>
 800057a:	f1ae 0e02 	sub.w	lr, lr, #2
 800057e:	443d      	add	r5, r7
 8000580:	e76f      	b.n	8000462 <__udivmoddi4+0x1b2>
 8000582:	3802      	subs	r0, #2
 8000584:	4461      	add	r1, ip
 8000586:	e7cb      	b.n	8000520 <__udivmoddi4+0x270>
 8000588:	3b02      	subs	r3, #2
 800058a:	443d      	add	r5, r7
 800058c:	e77e      	b.n	800048c <__udivmoddi4+0x1dc>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7d9      	b.n	8000548 <__udivmoddi4+0x298>
 8000594:	4618      	mov	r0, r3
 8000596:	4631      	mov	r1, r6
 8000598:	e6d7      	b.n	800034a <__udivmoddi4+0x9a>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <MX_FREERTOS_Init+0x28>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <MX_FREERTOS_Init+0x2c>)
 80005aa:	f00a fd0d 	bl	800afc8 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <MX_FREERTOS_Init+0x30>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // PTH_TaskHandle = osThreadNew(PTH_task, NULL, &PTH_TaskAttributes);
  // IMU_TaskHandle = osThreadNew(IMU_task, NULL, &IMU_TaskAttributes);
  //GPS_TaskHandle = osThreadNew(GPS_task, NULL, &GPS_TaskAttributes);
  GPS_TaskHandle = osThreadNew(SD_task, NULL, &SD_TaskAttributes);
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <MX_FREERTOS_Init+0x34>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <MX_FREERTOS_Init+0x38>)
 80005ba:	f00a fd05 	bl	800afc8 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <MX_FREERTOS_Init+0x3c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	0800ef84 	.word	0x0800ef84
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	20000094 	.word	0x20000094
 80005d4:	0800ef60 	.word	0x0800ef60
 80005d8:	08001f41 	.word	0x08001f41
 80005dc:	20000090 	.word	0x20000090

080005e0 <StartDefaultTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for (;;)
  {

    osDelay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f00a fd7d 	bl	800b0ea <osDelay>
 80005f0:	e7fa      	b.n	80005e8 <StartDefaultTask+0x8>
	...

080005f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <__io_putchar+0x20>)
 8000606:	f007 fd91 	bl	800812c <HAL_UART_Transmit>
  return ch;
 800060a:	687b      	ldr	r3, [r7, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000017c 	.word	0x2000017c

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 fd2e 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f817 	bl	8000652 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000624:	f000 f876 	bl	8000714 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa3e 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f958 	bl	80008e0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000630:	f000 f892 	bl	8000758 <MX_I2C2_Init>
  MX_SPI3_Init();
 8000634:	f000 f8e4 	bl	8000800 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f99e 	bl	8000978 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800063c:	f000 f9e8 	bl	8000a10 <MX_USART3_UART_Init>
  MX_ICACHE_Init();
 8000640:	f000 f8ca 	bl	80007d8 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f00a fc70 	bl	800af28 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000648:	f7ff ffaa 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800064c:	f00a fc92 	bl	800af74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x38>

08000652 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b09e      	sub	sp, #120	; 0x78
 8000656:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	2260      	movs	r2, #96	; 0x60
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00d fe87 	bl	800e374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800067a:	f002 fa39 	bl	8002af0 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000684:	f000 fb50 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000688:	2312      	movs	r3, #18
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800069a:	2310      	movs	r3, #16
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800069e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a8:	2301      	movs	r3, #1
 80006aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006b4:	2350      	movs	r3, #80	; 0x50
 80006b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fb09 	bl	8002ce8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006dc:	f000 fb24 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	231f      	movs	r3, #31
 80006e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	2104      	movs	r1, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 f9cf 	bl	8003aa0 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000708:	f000 fb0e 	bl	8000d28 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3778      	adds	r7, #120	; 0x78
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800071a:	f002 fac5 	bl	8002ca8 <HAL_PWREx_EnableVddIO2>

  PWR_PVDTypeDef sConfigPVD = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]

  /*
   * PVD Configuration
   */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800072e:	463b      	mov	r3, r7
 8000730:	4618      	mov	r0, r3
 8000732:	f002 f95f 	bl	80029f4 <HAL_PWR_ConfigPVD>

  /*
   * Enable the PVD Output
   */
  HAL_PWR_EnablePVD();
 8000736:	f002 f9cb 	bl	8002ad0 <HAL_PWR_EnablePVD>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800073a:	f002 fac5 	bl	8002cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800073e:	2002      	movs	r0, #2
 8000740:	f002 fa62 	bl	8002c08 <HAL_PWREx_ConfigSupply>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemPower_Config+0x3a>
  {
    Error_Handler();
 800074a:	f000 faed 	bl	8000d28 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_I2C2_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_I2C2_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_I2C2_Init+0x74>)
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <MX_I2C2_Init+0x7c>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_I2C2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_I2C2_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_I2C2_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_I2C2_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_I2C2_Init+0x74>)
 8000794:	f001 ffcc 	bl	8002730 <HAL_I2C_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800079e:	f000 fac3 	bl	8000d28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a2:	2100      	movs	r1, #0
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_I2C2_Init+0x74>)
 80007a6:	f002 f85e 	bl	8002866 <HAL_I2CEx_ConfigAnalogFilter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007b0:	f000 faba 	bl	8000d28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_I2C2_Init+0x74>)
 80007b8:	f002 f8a0 	bl	80028fc <HAL_I2CEx_ConfigDigitalFilter>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 fab1 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000098 	.word	0x20000098
 80007d0:	40005800 	.word	0x40005800
 80007d4:	30909dec 	.word	0x30909dec

080007d8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007dc:	2000      	movs	r0, #0
 80007de:	f002 f8d9 	bl	8002994 <HAL_ICACHE_ConfigAssociativityMode>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007e8:	f000 fa9e 	bl	8000d28 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007ec:	f002 f8f2 	bl	80029d4 <HAL_ICACHE_Enable>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007f6:	f000 fa97 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000810:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000812:	4a32      	ldr	r2, [pc, #200]	; (80008dc <MX_SPI3_Init+0xdc>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800081c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000826:	2207      	movs	r2, #7
 8000828:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800083c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000840:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000844:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800085a:	2207      	movs	r2, #7
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000880:	2200      	movs	r2, #0
 8000882:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000886:	2200      	movs	r2, #0
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800088c:	2200      	movs	r2, #0
 800088e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000892:	2200      	movs	r2, #0
 8000894:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_SPI3_Init+0xd8>)
 8000898:	2200      	movs	r2, #0
 800089a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800089c:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_SPI3_Init+0xd8>)
 800089e:	f006 f99f 	bl	8006be0 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 80008a8:	f000 fa3e 	bl	8000d28 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 80008b0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008b4:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_SPI3_Init+0xd8>)
 80008c0:	f006 ffe9 	bl	8007896 <HAL_SPIEx_SetConfigAutonomousMode>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 80008ca:	f000 fa2d 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000ec 	.word	0x200000ec
 80008dc:	46002000 	.word	0x46002000

080008e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_USART1_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_USART1_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_USART1_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_USART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_USART1_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_USART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_USART1_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_USART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_USART1_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x90>)
 800092a:	f007 fbaf 	bl	800808c <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f9f8 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_USART1_UART_Init+0x90>)
 800093c:	f008 f8c3 	bl	8008ac6 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f9ef 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x90>)
 800094e:	f008 f8f8 	bl	8008b42 <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f9e6 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USART1_UART_Init+0x90>)
 800095e:	f008 f879 	bl	8008a54 <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f9de 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000017c 	.word	0x2000017c
 8000974:	40013800 	.word	0x40013800

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_USART2_UART_Init+0x94>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9200;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 8000984:	f242 32f0 	movw	r2, #9200	; 0x23f0
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c0:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009c2:	f007 fb63 	bl	800808c <HAL_UART_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9ac 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009d4:	f008 f877 	bl	8008ac6 <HAL_UARTEx_SetTxFifoThreshold>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f9a3 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009e6:	f008 f8ac 	bl	8008b42 <HAL_UARTEx_SetRxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f0:	f000 f99a 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_USART2_UART_Init+0x90>)
 80009f6:	f007 fff2 	bl	80089de <HAL_UARTEx_EnableFifoMode>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a00:	f000 f992 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000210 	.word	0x20000210
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART3_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a5a:	f007 fb17 	bl	800808c <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f960 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f008 f82b 	bl	8008ac6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f957 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f008 f860 	bl	8008b42 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f94e 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f007 ffe1 	bl	8008a54 <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f946 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200002a4 	.word	0x200002a4
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac4:	4a86      	ldr	r2, [pc, #536]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ace:	4b84      	ldr	r3, [pc, #528]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000adc:	4b80      	ldr	r3, [pc, #512]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ae2:	4a7f      	ldr	r2, [pc, #508]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000ae4:	f043 0320 	orr.w	r3, r3, #32
 8000ae8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000aec:	4b7c      	ldr	r3, [pc, #496]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000af2:	f003 0320 	and.w	r3, r3, #32
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b79      	ldr	r3, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b00:	4a77      	ldr	r2, [pc, #476]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b0a:	4b75      	ldr	r3, [pc, #468]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b18:	4b71      	ldr	r3, [pc, #452]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b1e:	4a70      	ldr	r2, [pc, #448]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b28:	4b6d      	ldr	r3, [pc, #436]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b3c:	4a68      	ldr	r2, [pc, #416]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b46:	4b66      	ldr	r3, [pc, #408]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b62      	ldr	r3, [pc, #392]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b5a:	4a61      	ldr	r2, [pc, #388]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b64:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b78:	4a59      	ldr	r2, [pc, #356]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b82:	4b57      	ldr	r3, [pc, #348]	; (8000ce0 <MX_GPIO_Init+0x238>)
 8000b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_FSYNC_GPIO_Port, IMU_FSYNC_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2108      	movs	r1, #8
 8000b94:	4853      	ldr	r0, [pc, #332]	; (8000ce4 <MX_GPIO_Init+0x23c>)
 8000b96:	f001 fd77 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_nCS_Pin|RPI_nCS_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ba0:	4850      	ldr	r0, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x23c>)
 8000ba2:	f001 fd71 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PTH_nCS_GPIO_Port, PTH_nCS_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bac:	484e      	ldr	r0, [pc, #312]	; (8000ce8 <MX_GPIO_Init+0x240>)
 8000bae:	f001 fd6b 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	484d      	ldr	r0, [pc, #308]	; (8000cec <MX_GPIO_Init+0x244>)
 8000bb8:	f001 fd66 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	484b      	ldr	r0, [pc, #300]	; (8000cf0 <MX_GPIO_Init+0x248>)
 8000bc2:	f001 fd61 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_nCS_GPIO_Port, IMU_nCS_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2104      	movs	r1, #4
 8000bca:	484a      	ldr	r0, [pc, #296]	; (8000cf4 <MX_GPIO_Init+0x24c>)
 8000bcc:	f001 fd5c 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_READY_GPIO_Port, LED_READY_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4848      	ldr	r0, [pc, #288]	; (8000cf8 <MX_GPIO_Init+0x250>)
 8000bd6:	f001 fd57 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT_REF_INT_Pin */
  GPIO_InitStruct.Pin = BUT_REF_INT_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be0:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <MX_GPIO_Init+0x254>)
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUT_REF_INT_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4840      	ldr	r0, [pc, #256]	; (8000cf0 <MX_GPIO_Init+0x248>)
 8000bf0:	f001 fb72 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_FSYNC_Pin SD_nCS_Pin RPI_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_FSYNC_Pin|SD_nCS_Pin|RPI_nCS_Pin;
 8000bf4:	f246 0308 	movw	r3, #24584	; 0x6008
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4835      	ldr	r0, [pc, #212]	; (8000ce4 <MX_GPIO_Init+0x23c>)
 8000c0e:	f001 fb63 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000c12:	2320      	movs	r3, #32
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	4b3a      	ldr	r3, [pc, #232]	; (8000d00 <MX_GPIO_Init+0x258>)
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	482f      	ldr	r0, [pc, #188]	; (8000ce4 <MX_GPIO_Init+0x23c>)
 8000c26:	f001 fb57 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PTH_nCS_Pin */
  GPIO_InitStruct.Pin = PTH_nCS_Pin;
 8000c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PTH_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <MX_GPIO_Init+0x240>)
 8000c44:	f001 fb48 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <MX_GPIO_Init+0x244>)
 8000c60:	f001 fb3a 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	2302      	movs	r3, #2
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0x248>)
 8000c7c:	f001 fb2c 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_nCS_Pin */
  GPIO_InitStruct.Pin = IMU_nCS_Pin;
 8000c80:	2304      	movs	r3, #4
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_nCS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <MX_GPIO_Init+0x24c>)
 8000c98:	f001 fb1e 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_READY_Pin */
  GPIO_InitStruct.Pin = LED_READY_Pin;
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_READY_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <MX_GPIO_Init+0x250>)
 8000cb4:	f001 fb10 	bl	80022d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI5_IRQn, 5, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2105      	movs	r1, #5
 8000cbc:	2010      	movs	r0, #16
 8000cbe:	f001 fae3 	bl	8002288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 8000cc2:	2010      	movs	r0, #16
 8000cc4:	f001 fafa 	bl	80022bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2105      	movs	r1, #5
 8000ccc:	2018      	movs	r0, #24
 8000cce:	f001 fadb 	bl	8002288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000cd2:	2018      	movs	r0, #24
 8000cd4:	f001 faf2 	bl	80022bc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	46020c00 	.word	0x46020c00
 8000ce4:	42021400 	.word	0x42021400
 8000ce8:	42021000 	.word	0x42021000
 8000cec:	42021800 	.word	0x42021800
 8000cf0:	42020800 	.word	0x42020800
 8000cf4:	42020c00 	.word	0x42020c00
 8000cf8:	42020400 	.word	0x42020400
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10110000 	.word	0x10110000

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f001 f9df 	bl	80020d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8000d3c:	f001 f9e0 	bl	8002100 <HAL_GetTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <SPI_Timer_On+0x20>)
 8000d44:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <SPI_Timer_On+0x24>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000033c 	.word	0x2000033c
 8000d58:	20000340 	.word	0x20000340

08000d5c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8000d60:	f001 f9ce 	bl	8002100 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SPI_Timer_Status+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SPI_Timer_Status+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	bf34      	ite	cc
 8000d74:	2301      	movcc	r3, #1
 8000d76:	2300      	movcs	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000033c 	.word	0x2000033c
 8000d84:	20000340 	.word	0x20000340

08000d88 <get_fattime>:


DWORD get_fattime (void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
    fattime |= (timeinfo->tm_mday << 16);        // Day of the month (1 - 31)
    fattime |= (timeinfo->tm_hour << 11);        // Hour (0 - 23)
    fattime |= (timeinfo->tm_min << 5);          // Minute (0 - 59)
    fattime |= (timeinfo->tm_sec >> 1);          // Second divided by 2 (0 - 29)
*/
    return 0x43A62B06;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <get_fattime+0x10>)
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	43a62b06 	.word	0x43a62b06

08000d9c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SPI, &dat, &rxDat, 1, 50);
 8000da6:	f107 020f 	add.w	r2, r7, #15
 8000daa:	1df9      	adds	r1, r7, #7
 8000dac:	2332      	movs	r3, #50	; 0x32
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <xchg_spi+0x28>)
 8000db4:	f006 fa48 	bl	8007248 <HAL_SPI_TransmitReceive>
    return rxDat;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000ec 	.word	0x200000ec

08000dc8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	e00a      	b.n	8000dee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	18d4      	adds	r4, r2, r3
 8000dde:	20ff      	movs	r0, #255	; 0xff
 8000de0:	f7ff ffdc 	bl	8000d9c <xchg_spi>
 8000de4:	4603      	mov	r3, r0
 8000de6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d3f0      	bcc.n	8000dd8 <rcvr_spi_multi+0x10>
	}
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SPI, buff, btx, HAL_MAX_DELAY);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <xmit_spi_multi+0x24>)
 8000e16:	f005 fff9 	bl	8006e0c <HAL_SPI_Transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000ec 	.word	0x200000ec

08000e28 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8000e30:	f001 f966 	bl	8002100 <HAL_GetTick>
 8000e34:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8000e3a:	20ff      	movs	r0, #255	; 0xff
 8000e3c:	f7ff ffae 	bl	8000d9c <xchg_spi>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2bff      	cmp	r3, #255	; 0xff
 8000e48:	d007      	beq.n	8000e5a <wait_ready+0x32>
 8000e4a:	f001 f959 	bl	8002100 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d8ef      	bhi.n	8000e3a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2bff      	cmp	r3, #255	; 0xff
 8000e5e:	bf0c      	ite	eq
 8000e60:	2301      	moveq	r3, #1
 8000e62:	2300      	movne	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <despiselect+0x1c>)
 8000e7c:	f001 fc04 	bl	8002688 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8000e80:	20ff      	movs	r0, #255	; 0xff
 8000e82:	f7ff ff8b 	bl	8000d9c <xchg_spi>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	42021400 	.word	0x42021400

08000e90 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <spiselect+0x34>)
 8000e9c:	f001 fbf4 	bl	8002688 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8000ea0:	20ff      	movs	r0, #255	; 0xff
 8000ea2:	f7ff ff7b 	bl	8000d9c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8000ea6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eaa:	f7ff ffbd 	bl	8000e28 <wait_ready>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <spiselect+0x28>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e002      	b.n	8000ebe <spiselect+0x2e>

	despiselect();
 8000eb8:	f7ff ffda 	bl	8000e70 <despiselect>
	return 0;	/* Timeout */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	42021400 	.word	0x42021400

08000ec8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8000ed2:	20c8      	movs	r0, #200	; 0xc8
 8000ed4:	f7ff ff2e 	bl	8000d34 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8000ed8:	20ff      	movs	r0, #255	; 0xff
 8000eda:	f7ff ff5f 	bl	8000d9c <xchg_spi>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	2bff      	cmp	r3, #255	; 0xff
 8000ee6:	d104      	bne.n	8000ef2 <rcvr_datablock+0x2a>
 8000ee8:	f7ff ff38 	bl	8000d5c <SPI_Timer_Status>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f2      	bne.n	8000ed8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	2bfe      	cmp	r3, #254	; 0xfe
 8000ef6:	d001      	beq.n	8000efc <rcvr_datablock+0x34>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e00a      	b.n	8000f12 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff62 	bl	8000dc8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8000f04:	20ff      	movs	r0, #255	; 0xff
 8000f06:	f7ff ff49 	bl	8000d9c <xchg_spi>
 8000f0a:	20ff      	movs	r0, #255	; 0xff
 8000f0c:	f7ff ff46 	bl	8000d9c <xchg_spi>

	return 1;						/* Function succeeded */
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8000f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2a:	f7ff ff7d 	bl	8000e28 <wait_ready>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <xmit_datablock+0x1e>
 8000f34:	2300      	movs	r3, #0
 8000f36:	e01e      	b.n	8000f76 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff2e 	bl	8000d9c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2bfd      	cmp	r3, #253	; 0xfd
 8000f44:	d016      	beq.n	8000f74 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff58 	bl	8000e00 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8000f50:	20ff      	movs	r0, #255	; 0xff
 8000f52:	f7ff ff23 	bl	8000d9c <xchg_spi>
 8000f56:	20ff      	movs	r0, #255	; 0xff
 8000f58:	f7ff ff20 	bl	8000d9c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8000f5c:	20ff      	movs	r0, #255	; 0xff
 8000f5e:	f7ff ff1d 	bl	8000d9c <xchg_spi>
 8000f62:	4603      	mov	r3, r0
 8000f64:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d001      	beq.n	8000f74 <xmit_datablock+0x5a>
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <xmit_datablock+0x5c>
	}
	return 1;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	6039      	str	r1, [r7, #0]
 8000f88:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da0e      	bge.n	8000fb0 <send_cmd+0x32>
		cmd &= 0x7F;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f98:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2037      	movs	r0, #55	; 0x37
 8000f9e:	f7ff ffee 	bl	8000f7e <send_cmd>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d901      	bls.n	8000fb0 <send_cmd+0x32>
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	e051      	b.n	8001054 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d008      	beq.n	8000fc8 <send_cmd+0x4a>
		despiselect();
 8000fb6:	f7ff ff5b 	bl	8000e70 <despiselect>
		if (!spiselect()) return 0xFF;
 8000fba:	f7ff ff69 	bl	8000e90 <spiselect>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <send_cmd+0x4a>
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	e045      	b.n	8001054 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fee3 	bl	8000d9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	0e1b      	lsrs	r3, r3, #24
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fedd 	bl	8000d9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0c1b      	lsrs	r3, r3, #16
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fed7 	bl	8000d9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fed1 	bl	8000d9c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fecc 	bl	8000d9c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <send_cmd+0x94>
 800100e:	2395      	movs	r3, #149	; 0x95
 8001010:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b08      	cmp	r3, #8
 8001016:	d101      	bne.n	800101c <send_cmd+0x9e>
 8001018:	2387      	movs	r3, #135	; 0x87
 800101a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff febc 	bl	8000d9c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d102      	bne.n	8001030 <send_cmd+0xb2>
 800102a:	20ff      	movs	r0, #255	; 0xff
 800102c:	f7ff feb6 	bl	8000d9c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8001030:	230a      	movs	r3, #10
 8001032:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8001034:	20ff      	movs	r0, #255	; 0xff
 8001036:	f7ff feb1 	bl	8000d9c <xchg_spi>
 800103a:	4603      	mov	r3, r0
 800103c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800103e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001042:	2b00      	cmp	r3, #0
 8001044:	da05      	bge.n	8001052 <send_cmd+0xd4>
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	3b01      	subs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <send_cmd+0xb6>

	return res;							/* Return received response */
 8001052:	7bbb      	ldrb	r3, [r7, #14]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <disk_initialize+0x14>
 800106c:	2301      	movs	r3, #1
 800106e:	e0d6      	b.n	800121e <disk_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8001070:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <disk_initialize+0x1cc>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <disk_initialize+0x2a>
 800107e:	4b6a      	ldr	r3, [pc, #424]	; (8001228 <disk_initialize+0x1cc>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	e0cb      	b.n	800121e <disk_initialize+0x1c2>

	FCLK_SLOW();
 8001086:	4b69      	ldr	r3, [pc, #420]	; (800122c <disk_initialize+0x1d0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <disk_initialize+0x1d0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 8001098:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800109a:	230a      	movs	r3, #10
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e005      	b.n	80010ac <disk_initialize+0x50>
 80010a0:	20ff      	movs	r0, #255	; 0xff
 80010a2:	f7ff fe7b 	bl	8000d9c <xchg_spi>
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f6      	bne.n	80010a0 <disk_initialize+0x44>

	ty = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80010b6:	2100      	movs	r1, #0
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff60 	bl	8000f7e <send_cmd>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	f040 808b 	bne.w	80011dc <disk_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80010c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ca:	f7ff fe33 	bl	8000d34 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80010ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010d2:	2008      	movs	r0, #8
 80010d4:	f7ff ff53 	bl	8000f7e <send_cmd>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d151      	bne.n	8001182 <disk_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e00d      	b.n	8001100 <disk_initialize+0xa4>
 80010e4:	7bfc      	ldrb	r4, [r7, #15]
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	f7ff fe58 	bl	8000d9c <xchg_spi>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	f104 0310 	add.w	r3, r4, #16
 80010f4:	443b      	add	r3, r7
 80010f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d9ee      	bls.n	80010e4 <disk_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8001106:	7abb      	ldrb	r3, [r7, #10]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d167      	bne.n	80011dc <disk_initialize+0x180>
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	2baa      	cmp	r3, #170	; 0xaa
 8001110:	d164      	bne.n	80011dc <disk_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8001112:	bf00      	nop
 8001114:	f7ff fe22 	bl	8000d5c <SPI_Timer_Status>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <disk_initialize+0xd2>
 800111e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001122:	20a9      	movs	r0, #169	; 0xa9
 8001124:	f7ff ff2b 	bl	8000f7e <send_cmd>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f2      	bne.n	8001114 <disk_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800112e:	f7ff fe15 	bl	8000d5c <SPI_Timer_Status>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d051      	beq.n	80011dc <disk_initialize+0x180>
 8001138:	2100      	movs	r1, #0
 800113a:	203a      	movs	r0, #58	; 0x3a
 800113c:	f7ff ff1f 	bl	8000f7e <send_cmd>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d14a      	bne.n	80011dc <disk_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e00d      	b.n	8001168 <disk_initialize+0x10c>
 800114c:	7bfc      	ldrb	r4, [r7, #15]
 800114e:	20ff      	movs	r0, #255	; 0xff
 8001150:	f7ff fe24 	bl	8000d9c <xchg_spi>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	f104 0310 	add.w	r3, r4, #16
 800115c:	443b      	add	r3, r7
 800115e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d9ee      	bls.n	800114c <disk_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800116e:	7a3b      	ldrb	r3, [r7, #8]
 8001170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <disk_initialize+0x120>
 8001178:	230c      	movs	r3, #12
 800117a:	e000      	b.n	800117e <disk_initialize+0x122>
 800117c:	2304      	movs	r3, #4
 800117e:	737b      	strb	r3, [r7, #13]
 8001180:	e02c      	b.n	80011dc <disk_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001182:	2100      	movs	r1, #0
 8001184:	20a9      	movs	r0, #169	; 0xa9
 8001186:	f7ff fefa 	bl	8000f7e <send_cmd>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d804      	bhi.n	800119a <disk_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001190:	2302      	movs	r3, #2
 8001192:	737b      	strb	r3, [r7, #13]
 8001194:	23a9      	movs	r3, #169	; 0xa9
 8001196:	73bb      	strb	r3, [r7, #14]
 8001198:	e003      	b.n	80011a2 <disk_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800119a:	2301      	movs	r3, #1
 800119c:	737b      	strb	r3, [r7, #13]
 800119e:	2301      	movs	r3, #1
 80011a0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80011a2:	bf00      	nop
 80011a4:	f7ff fdda 	bl	8000d5c <SPI_Timer_Status>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <disk_initialize+0x162>
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fee3 	bl	8000f7e <send_cmd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f2      	bne.n	80011a4 <disk_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80011be:	f7ff fdcd 	bl	8000d5c <SPI_Timer_Status>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <disk_initialize+0x17c>
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	2010      	movs	r0, #16
 80011ce:	f7ff fed6 	bl	8000f7e <send_cmd>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <disk_initialize+0x180>
				ty = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <disk_initialize+0x1d4>)
 80011de:	7b7b      	ldrb	r3, [r7, #13]
 80011e0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80011e2:	f7ff fe45 	bl	8000e70 <despiselect>

	if (ty) {			/* OK */
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d012      	beq.n	8001212 <disk_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <disk_initialize+0x1d0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <disk_initialize+0x1d0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011fe:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <disk_initialize+0x1cc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <disk_initialize+0x1cc>)
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e002      	b.n	8001218 <disk_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <disk_initialize+0x1cc>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <disk_initialize+0x1cc>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	20000000 	.word	0x20000000
 800122c:	200000ec 	.word	0x200000ec
 8001230:	20000338 	.word	0x20000338

08001234 <disk_status>:
/*-----------------------------------------------------------------------*/

 DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <disk_status+0x14>
 8001244:	2301      	movs	r3, #1
 8001246:	e002      	b.n	800124e <disk_status+0x1a>

	return Stat;	/* Return disk status */
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <disk_status+0x28>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000000 	.word	0x20000000

08001260 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <disk_read+0x1c>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <disk_read+0x20>
 800127c:	2304      	movs	r3, #4
 800127e:	e04d      	b.n	800131c <disk_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <disk_read+0xc4>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <disk_read+0x32>
 800128e:	2303      	movs	r3, #3
 8001290:	e044      	b.n	800131c <disk_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <disk_read+0xc8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <disk_read+0x44>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d111      	bne.n	80012ce <disk_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	2011      	movs	r0, #17
 80012ae:	f7ff fe66 	bl	8000f7e <send_cmd>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d129      	bne.n	800130c <disk_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80012b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f7ff fe03 	bl	8000ec8 <rcvr_datablock>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d021      	beq.n	800130c <disk_read+0xac>
			count = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	e01e      	b.n	800130c <disk_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	2012      	movs	r0, #18
 80012d2:	f7ff fe54 	bl	8000f7e <send_cmd>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d117      	bne.n	800130c <disk_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80012dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f7ff fdf1 	bl	8000ec8 <rcvr_datablock>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00a      	beq.n	8001302 <disk_read+0xa2>
				buff += 512;
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012f2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ed      	bne.n	80012dc <disk_read+0x7c>
 8001300:	e000      	b.n	8001304 <disk_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8001302:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001304:	2100      	movs	r1, #0
 8001306:	200c      	movs	r0, #12
 8001308:	f7ff fe39 	bl	8000f7e <send_cmd>
		}
	}
	despiselect();
 800130c:	f7ff fdb0 	bl	8000e70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20000338 	.word	0x20000338

0800132c <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <disk_write+0x1c>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <disk_write+0x20>
 8001348:	2304      	movs	r3, #4
 800134a:	e063      	b.n	8001414 <disk_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <disk_write+0xf0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <disk_write+0x32>
 800135a:	2303      	movs	r3, #3
 800135c:	e05a      	b.n	8001414 <disk_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <disk_write+0xf0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <disk_write+0x44>
 800136c:	2302      	movs	r3, #2
 800136e:	e051      	b.n	8001414 <disk_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <disk_write+0xf4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <disk_write+0x56>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d110      	bne.n	80013aa <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	2018      	movs	r0, #24
 800138c:	f7ff fdf7 	bl	8000f7e <send_cmd>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d136      	bne.n	8001404 <disk_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8001396:	21fe      	movs	r1, #254	; 0xfe
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff fdbe 	bl	8000f1a <xmit_datablock>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d02f      	beq.n	8001404 <disk_write+0xd8>
			count = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	e02c      	b.n	8001404 <disk_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <disk_write+0xf4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f003 0306 	and.w	r3, r3, #6
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <disk_write+0x92>
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	2097      	movs	r0, #151	; 0x97
 80013ba:	f7ff fde0 	bl	8000f7e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	2019      	movs	r0, #25
 80013c2:	f7ff fddc 	bl	8000f7e <send_cmd>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d11b      	bne.n	8001404 <disk_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80013cc:	21fc      	movs	r1, #252	; 0xfc
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f7ff fda3 	bl	8000f1a <xmit_datablock>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00a      	beq.n	80013f0 <disk_write+0xc4>
				buff += 512;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013e0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ee      	bne.n	80013cc <disk_write+0xa0>
 80013ee:	e000      	b.n	80013f2 <disk_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80013f0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80013f2:	21fd      	movs	r1, #253	; 0xfd
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff fd90 	bl	8000f1a <xmit_datablock>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <disk_write+0xd8>
 8001400:	2301      	movs	r3, #1
 8001402:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8001404:	f7ff fd34 	bl	8000e70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000338 	.word	0x20000338

08001424 <disk_ioctl>:
 DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	603a      	str	r2, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	460b      	mov	r3, r1
 8001432:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <disk_ioctl+0x1a>
 800143a:	2304      	movs	r3, #4
 800143c:	e15a      	b.n	80016f4 <disk_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800143e:	4baf      	ldr	r3, [pc, #700]	; (80016fc <disk_ioctl+0x2d8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <disk_ioctl+0x2c>
 800144c:	2303      	movs	r3, #3
 800144e:	e151      	b.n	80016f4 <disk_ioctl+0x2d0>

	res = RES_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	2b04      	cmp	r3, #4
 800145a:	f200 8136 	bhi.w	80016ca <disk_ioctl+0x2a6>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <disk_ioctl+0x40>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001479 	.word	0x08001479
 8001468:	0800148d 	.word	0x0800148d
 800146c:	080016cb 	.word	0x080016cb
 8001470:	08001539 	.word	0x08001539
 8001474:	0800162f 	.word	0x0800162f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8001478:	f7ff fd0a 	bl	8000e90 <spiselect>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8127 	beq.w	80016d2 <disk_ioctl+0x2ae>
 8001484:	2300      	movs	r3, #0
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800148a:	e122      	b.n	80016d2 <disk_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800148c:	2100      	movs	r1, #0
 800148e:	2009      	movs	r0, #9
 8001490:	f7ff fd75 	bl	8000f7e <send_cmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 811d 	bne.w	80016d6 <disk_ioctl+0x2b2>
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2110      	movs	r1, #16
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd10 	bl	8000ec8 <rcvr_datablock>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8113 	beq.w	80016d6 <disk_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80014b0:	7b3b      	ldrb	r3, [r7, #12]
 80014b2:	099b      	lsrs	r3, r3, #6
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d111      	bne.n	80014de <disk_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80014ba:	7d7b      	ldrb	r3, [r7, #21]
 80014bc:	461a      	mov	r2, r3
 80014be:	7d3b      	ldrb	r3, [r7, #20]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	4413      	add	r3, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80014ce:	4413      	add	r3, r2
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	029a      	lsls	r2, r3, #10
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e028      	b.n	8001530 <disk_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014de:	7c7b      	ldrb	r3, [r7, #17]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	09db      	lsrs	r3, r3, #7
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	7d7b      	ldrb	r3, [r7, #21]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0306 	and.w	r3, r3, #6
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	3302      	adds	r3, #2
 8001502:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001506:	7d3b      	ldrb	r3, [r7, #20]
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	7cfb      	ldrb	r3, [r7, #19]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	441a      	add	r2, r3
 8001514:	7cbb      	ldrb	r3, [r7, #18]
 8001516:	029b      	lsls	r3, r3, #10
 8001518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800151c:	4413      	add	r3, r2
 800151e:	3301      	adds	r3, #1
 8001520:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8001522:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001526:	3b09      	subs	r3, #9
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	409a      	lsls	r2, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8001536:	e0ce      	b.n	80016d6 <disk_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8001538:	4b71      	ldr	r3, [pc, #452]	; (8001700 <disk_ioctl+0x2dc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d031      	beq.n	80015a8 <disk_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8001544:	2100      	movs	r1, #0
 8001546:	208d      	movs	r0, #141	; 0x8d
 8001548:	f7ff fd19 	bl	8000f7e <send_cmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 80c3 	bne.w	80016da <disk_ioctl+0x2b6>
				xchg_spi(0xFF);
 8001554:	20ff      	movs	r0, #255	; 0xff
 8001556:	f7ff fc21 	bl	8000d9c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2110      	movs	r1, #16
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fcb1 	bl	8000ec8 <rcvr_datablock>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80b6 	beq.w	80016da <disk_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800156e:	2330      	movs	r3, #48	; 0x30
 8001570:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001574:	e007      	b.n	8001586 <disk_ioctl+0x162>
 8001576:	20ff      	movs	r0, #255	; 0xff
 8001578:	f7ff fc10 	bl	8000d9c <xchg_spi>
 800157c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001580:	3b01      	subs	r3, #1
 8001582:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001586:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f3      	bne.n	8001576 <disk_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800158e:	7dbb      	ldrb	r3, [r7, #22]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	2310      	movs	r3, #16
 8001598:	fa03 f202 	lsl.w	r2, r3, r2
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80015a6:	e098      	b.n	80016da <disk_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80015a8:	2100      	movs	r1, #0
 80015aa:	2009      	movs	r0, #9
 80015ac:	f7ff fce7 	bl	8000f7e <send_cmd>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8091 	bne.w	80016da <disk_ioctl+0x2b6>
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2110      	movs	r1, #16
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc82 	bl	8000ec8 <rcvr_datablock>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <disk_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80015cc:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <disk_ioctl+0x2dc>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d012      	beq.n	80015fe <disk_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80015d8:	7dbb      	ldrb	r3, [r7, #22]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80015e0:	7dfa      	ldrb	r2, [r7, #23]
 80015e2:	09d2      	lsrs	r2, r2, #7
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	4413      	add	r3, r2
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	7e7b      	ldrb	r3, [r7, #25]
 80015ec:	099b      	lsrs	r3, r3, #6
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	3b01      	subs	r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e013      	b.n	8001626 <disk_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80015fe:	7dbb      	ldrb	r3, [r7, #22]
 8001600:	109b      	asrs	r3, r3, #2
 8001602:	b29b      	uxth	r3, r3
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	3301      	adds	r3, #1
 800160a:	7dfa      	ldrb	r2, [r7, #23]
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	f002 0218 	and.w	r2, r2, #24
 8001612:	7df9      	ldrb	r1, [r7, #23]
 8001614:	0949      	lsrs	r1, r1, #5
 8001616:	b2c9      	uxtb	r1, r1
 8001618:	440a      	add	r2, r1
 800161a:	3201      	adds	r2, #1
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	461a      	mov	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800162c:	e055      	b.n	80016da <disk_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <disk_ioctl+0x2dc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f003 0306 	and.w	r3, r3, #6
 8001636:	2b00      	cmp	r3, #0
 8001638:	d051      	beq.n	80016de <disk_ioctl+0x2ba>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800163a:	f107 020c 	add.w	r2, r7, #12
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	210b      	movs	r1, #11
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff feee 	bl	8001424 <disk_ioctl>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d149      	bne.n	80016e2 <disk_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800164e:	7b3b      	ldrb	r3, [r7, #12]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d104      	bne.n	8001662 <disk_ioctl+0x23e>
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d041      	beq.n	80016e6 <disk_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <disk_ioctl+0x2dc>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <disk_ioctl+0x266>
			st *= 512; ed *= 512;
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800168a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168c:	2020      	movs	r0, #32
 800168e:	f7ff fc76 	bl	8000f7e <send_cmd>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d128      	bne.n	80016ea <disk_ioctl+0x2c6>
 8001698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800169a:	2021      	movs	r0, #33	; 0x21
 800169c:	f7ff fc6f 	bl	8000f7e <send_cmd>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d121      	bne.n	80016ea <disk_ioctl+0x2c6>
 80016a6:	2100      	movs	r1, #0
 80016a8:	2026      	movs	r0, #38	; 0x26
 80016aa:	f7ff fc68 	bl	8000f7e <send_cmd>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d11a      	bne.n	80016ea <disk_ioctl+0x2c6>
 80016b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80016b8:	f7ff fbb6 	bl	8000e28 <wait_ready>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d013      	beq.n	80016ea <disk_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80016c8:	e00f      	b.n	80016ea <disk_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80016ca:	2304      	movs	r3, #4
 80016cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80016d0:	e00c      	b.n	80016ec <disk_ioctl+0x2c8>
		break;
 80016d2:	bf00      	nop
 80016d4:	e00a      	b.n	80016ec <disk_ioctl+0x2c8>
		break;
 80016d6:	bf00      	nop
 80016d8:	e008      	b.n	80016ec <disk_ioctl+0x2c8>
		break;
 80016da:	bf00      	nop
 80016dc:	e006      	b.n	80016ec <disk_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80016de:	bf00      	nop
 80016e0:	e004      	b.n	80016ec <disk_ioctl+0x2c8>
		if (disk_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80016e2:	bf00      	nop
 80016e4:	e002      	b.n	80016ec <disk_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80016e6:	bf00      	nop
 80016e8:	e000      	b.n	80016ec <disk_ioctl+0x2c8>
		break;
 80016ea:	bf00      	nop
	}

	despiselect();
 80016ec:	f7ff fbc0 	bl	8000e70 <despiselect>

	return res;
 80016f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3730      	adds	r7, #48	; 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000338 	.word	0x20000338

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_MspInit+0x38>)
 800170c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <HAL_MspInit+0x38>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_MspInit+0x38>)
 800171c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	210f      	movs	r1, #15
 800172c:	f06f 0001 	mvn.w	r0, #1
 8001730:	f000 fdaa 	bl	8002288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	46020c00 	.word	0x46020c00

08001740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0ba      	sub	sp, #232	; 0xe8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	22c0      	movs	r2, #192	; 0xc0
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f00c fe07 	bl	800e374 <memset>
  if(hi2c->Instance==I2C2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_I2C_MspInit+0xc4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d144      	bne.n	80017fa <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001770:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800177c:	2300      	movs	r3, #0
 800177e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fd93 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001790:	f7ff faca 	bl	8000d28 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001794:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_I2C_MspInit+0xc8>)
 8001796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800179a:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_I2C_MspInit+0xc8>)
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_I2C_MspInit+0xc8>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017ca:	2304      	movs	r3, #4
 80017cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <HAL_I2C_MspInit+0xcc>)
 80017d8:	f000 fd7e 	bl	80022d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_I2C_MspInit+0xc8>)
 80017de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_I2C_MspInit+0xc8>)
 80017e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_I2C_MspInit+0xc8>)
 80017ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	37e8      	adds	r7, #232	; 0xe8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40005800 	.word	0x40005800
 8001808:	46020c00 	.word	0x46020c00
 800180c:	42021400 	.word	0x42021400

08001810 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0ba      	sub	sp, #232	; 0xe8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	22c0      	movs	r2, #192	; 0xc0
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f00c fd9f 	bl	800e374 <memset>
  if(hspi->Instance==SPI3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_SPI_MspInit+0xc8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d146      	bne.n	80018ce <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 800184c:	2310      	movs	r3, #16
 800184e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fd2a 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001862:	f7ff fa61 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 8001868:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 800186e:	f043 0320 	orr.w	r3, r3, #32
 8001872:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 8001878:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 8001886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_SPI_MspInit+0xcc>)
 8001896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018bc:	2306      	movs	r3, #6
 80018be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_SPI_MspInit+0xd0>)
 80018ca:	f000 fd05 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	37e8      	adds	r7, #232	; 0xe8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	46002000 	.word	0x46002000
 80018dc:	46020c00 	.word	0x46020c00
 80018e0:	42020800 	.word	0x42020800

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0be      	sub	sp, #248	; 0xf8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	22c0      	movs	r2, #192	; 0xc0
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00c fd35 	bl	800e374 <memset>
  if(huart->Instance==USART1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	; (8001ad8 <HAL_UART_MspInit+0x1f4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d146      	bne.n	80019a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001914:	f04f 0201 	mov.w	r2, #1
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001920:	2300      	movs	r3, #0
 8001922:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fcc1 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001934:	f7ff f9f8 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 800193a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800193e:	4a67      	ldr	r2, [pc, #412]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001948:	4b64      	ldr	r3, [pc, #400]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 800194a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800195c:	4a5f      	ldr	r2, [pc, #380]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001974:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800198e:	2307      	movs	r3, #7
 8001990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001998:	4619      	mov	r1, r3
 800199a:	4851      	ldr	r0, [pc, #324]	; (8001ae0 <HAL_UART_MspInit+0x1fc>)
 800199c:	f000 fc9c 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019a0:	e095      	b.n	8001ace <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4f      	ldr	r2, [pc, #316]	; (8001ae4 <HAL_UART_MspInit+0x200>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d145      	bne.n	8001a38 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019ac:	f04f 0202 	mov.w	r2, #2
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fc75 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 80019cc:	f7ff f9ac 	bl	8000d28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d0:	4b42      	ldr	r3, [pc, #264]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 80019d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019d6:	4a41      	ldr	r2, [pc, #260]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 80019e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 80019f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019f4:	4a39      	ldr	r2, [pc, #228]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a24:	2307      	movs	r3, #7
 8001a26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	482b      	ldr	r0, [pc, #172]	; (8001ae0 <HAL_UART_MspInit+0x1fc>)
 8001a32:	f000 fc51 	bl	80022d8 <HAL_GPIO_Init>
}
 8001a36:	e04a      	b.n	8001ace <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <HAL_UART_MspInit+0x204>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d145      	bne.n	8001ace <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a42:	f04f 0204 	mov.w	r2, #4
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fc2a 	bl	80042b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001a62:	f7ff f961 	bl	8000d28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_UART_MspInit+0x1f8>)
 8001a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aa2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abc:	2307      	movs	r3, #7
 8001abe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4808      	ldr	r0, [pc, #32]	; (8001aec <HAL_UART_MspInit+0x208>)
 8001aca:	f000 fc05 	bl	80022d8 <HAL_GPIO_Init>
}
 8001ace:	bf00      	nop
 8001ad0:	37f8      	adds	r7, #248	; 0xf8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	46020c00 	.word	0x46020c00
 8001ae0:	42020000 	.word	0x42020000
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	42020400 	.word	0x42020400

08001af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08e      	sub	sp, #56	; 0x38
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_InitTick+0xcc>)
 8001b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b06:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <HAL_InitTick+0xcc>)
 8001b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_InitTick+0xcc>)
 8001b12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b1e:	f107 0210 	add.w	r2, r7, #16
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fb03 	bl	8004134 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b2e:	f002 fad9 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8001b32:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_InitTick+0xd0>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	0c9b      	lsrs	r3, r3, #18
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_InitTick+0xd8>)
 8001b46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001b62:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b64:	f005 fed8 	bl	8007918 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001b6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b76:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <HAL_InitTick+0xd4>)
 8001b78:	f005 ff30 	bl	80079dc <HAL_TIM_Base_Start_IT>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10e      	bne.n	8001ba8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d808      	bhi.n	8001ba2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM1 global Interrupt */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	202a      	movs	r0, #42	; 0x2a
 8001b96:	f000 fb77 	bl	8002288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_InitTick+0xdc>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e002      	b.n	8001ba8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ba8:	202a      	movs	r0, #42	; 0x2a
 8001baa:	f000 fb87 	bl	80022bc <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001bae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	46020c00 	.word	0x46020c00
 8001bc0:	431bde83 	.word	0x431bde83
 8001bc4:	20000344 	.word	0x20000344
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <print_binary_section>:
/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim1;

/* USER CODE BEGIN EV */
void print_binary_section(unsigned int number, int start_bit, int end_bit)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  if (start_bit < 0 || end_bit < 0 || start_bit > 31 || end_bit > 31 || start_bit > end_bit)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0c      	blt.n	8001bfc <print_binary_section+0x2c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db09      	blt.n	8001bfc <print_binary_section+0x2c>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b1f      	cmp	r3, #31
 8001bec:	dc06      	bgt.n	8001bfc <print_binary_section+0x2c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b1f      	cmp	r3, #31
 8001bf2:	dc03      	bgt.n	8001bfc <print_binary_section+0x2c>
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dd03      	ble.n	8001c04 <print_binary_section+0x34>
  {
    printf("Invalid bit positions\n");
 8001bfc:	481d      	ldr	r0, [pc, #116]	; (8001c74 <print_binary_section+0xa4>)
 8001bfe:	f00c fac9 	bl	800e194 <puts>
    return;
 8001c02:	e033      	b.n	8001c6c <print_binary_section+0x9c>
  }

  unsigned int mask = (1u << (end_bit - start_bit + 1)) - 1;
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
  mask <<= start_bit;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	61bb      	str	r3, [r7, #24]

  unsigned int section = (number & mask) >> start_bit;
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	401a      	ands	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]

  for (int i = end_bit; i >= start_bit; --i)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e014      	b.n	8001c5e <print_binary_section+0x8e>
  {

    printf("%d", (section >> i) & 1);
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	4619      	mov	r1, r3
 8001c42:	480d      	ldr	r0, [pc, #52]	; (8001c78 <print_binary_section+0xa8>)
 8001c44:	f00c fa38 	bl	800e0b8 <iprintf>
    if (i % 8 == 0)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <print_binary_section+0x88>
    {
      printf("'");
 8001c52:	2027      	movs	r0, #39	; 0x27
 8001c54:	f00c fa42 	bl	800e0dc <putchar>
  for (int i = end_bit; i >= start_bit; --i)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dae6      	bge.n	8001c34 <print_binary_section+0x64>
    }
  }
  printf("\n");
 8001c66:	200a      	movs	r0, #10
 8001c68:	f00c fa38 	bl	800e0dc <putchar>
}
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800ee2c 	.word	0x0800ee2c
 8001c78:	0800ee44 	.word	0x0800ee44

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <NMI_Handler+0x4>
	...

08001c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HFSR:");
 8001c88:	4823      	ldr	r0, [pc, #140]	; (8001d18 <HardFault_Handler+0x94>)
 8001c8a:	f00c fa15 	bl	800e0b8 <iprintf>
  print_binary_section(SCB->HFSR, 0, 31);
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <HardFault_Handler+0x98>)
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	221f      	movs	r2, #31
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff9a 	bl	8001bd0 <print_binary_section>
  printf("\n\r");
 8001c9c:	4820      	ldr	r0, [pc, #128]	; (8001d20 <HardFault_Handler+0x9c>)
 8001c9e:	f00c fa0b 	bl	800e0b8 <iprintf>

  if (SCB->HFSR & (1 << 30))
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HardFault_Handler+0x98>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d033      	beq.n	8001d16 <HardFault_Handler+0x92>
  {
    printf("BFAR:");
 8001cae:	481d      	ldr	r0, [pc, #116]	; (8001d24 <HardFault_Handler+0xa0>)
 8001cb0:	f00c fa02 	bl	800e0b8 <iprintf>
    print_binary_section(SCB->BFAR, 0, 31);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HardFault_Handler+0x98>)
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	221f      	movs	r2, #31
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff87 	bl	8001bd0 <print_binary_section>
    printf("\n\r");
 8001cc2:	4817      	ldr	r0, [pc, #92]	; (8001d20 <HardFault_Handler+0x9c>)
 8001cc4:	f00c f9f8 	bl	800e0b8 <iprintf>

    printf("CFSR:");
 8001cc8:	4817      	ldr	r0, [pc, #92]	; (8001d28 <HardFault_Handler+0xa4>)
 8001cca:	f00c f9f5 	bl	800e0b8 <iprintf>
    print_binary_section(SCB->CFSR, 0, 31);
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HardFault_Handler+0x98>)
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff7a 	bl	8001bd0 <print_binary_section>
    printf("\n\r");
 8001cdc:	4810      	ldr	r0, [pc, #64]	; (8001d20 <HardFault_Handler+0x9c>)
 8001cde:	f00c f9eb 	bl	800e0b8 <iprintf>

    printf("DFSR:");
 8001ce2:	4812      	ldr	r0, [pc, #72]	; (8001d2c <HardFault_Handler+0xa8>)
 8001ce4:	f00c f9e8 	bl	800e0b8 <iprintf>
    print_binary_section(SCB->DFSR, 0, 31);
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HardFault_Handler+0x98>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	221f      	movs	r2, #31
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff6d 	bl	8001bd0 <print_binary_section>
    printf("\n\r");
 8001cf6:	480a      	ldr	r0, [pc, #40]	; (8001d20 <HardFault_Handler+0x9c>)
 8001cf8:	f00c f9de 	bl	800e0b8 <iprintf>

    printf("AFSR:");
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <HardFault_Handler+0xac>)
 8001cfe:	f00c f9db 	bl	800e0b8 <iprintf>
    print_binary_section(SCB->AFSR, 0, 31);
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HardFault_Handler+0x98>)
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	221f      	movs	r2, #31
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff60 	bl	8001bd0 <print_binary_section>
    printf("\n\r");
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <HardFault_Handler+0x9c>)
 8001d12:	f00c f9d1 	bl	800e0b8 <iprintf>
  // printf("HFSR:);
  // binary_printf("DFSR = 0x%b\r\n", SCB->DFSR);
  // binary_printf("AFSR = 0x%b\r\n", SCB->AFSR);

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x92>
 8001d18:	0800ee48 	.word	0x0800ee48
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	0800ee50 	.word	0x0800ee50
 8001d24:	0800ee54 	.word	0x0800ee54
 8001d28:	0800ee5c 	.word	0x0800ee5c
 8001d2c:	0800ee64 	.word	0x0800ee64
 8001d30:	0800ee6c 	.word	0x0800ee6c

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001d58:	2020      	movs	r0, #32
 8001d5a:	f000 fcad 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_REF_INT_Pin);
 8001d66:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d6a:	f000 fca5 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <TIM1_UP_IRQHandler+0x10>)
 8001d7a:	f005 fecf 	bl	8007b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000344 	.word	0x20000344

08001d88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00a      	b.n	8001db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	4601      	mov	r1, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <_read+0x12>
  }

  return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e009      	b.n	8001de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fc09 	bl	80005f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <_write+0x12>
  }
  return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_close>:

int _close(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e22:	605a      	str	r2, [r3, #4]
  return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f00c fada 	bl	800e44c <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200c0000 	.word	0x200c0000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000390 	.word	0x20000390
 8001ecc:	20041428 	.word	0x20041428

08001ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <SystemInit+0x68>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <SystemInit+0x68>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <SystemInit+0x6c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <SystemInit+0x6c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <SystemInit+0x6c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <SystemInit+0x6c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <SystemInit+0x6c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <SystemInit+0x6c>)
 8001f02:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f06:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <SystemInit+0x6c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <SystemInit+0x6c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <SystemInit+0x6c>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <SystemInit+0x6c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SystemInit+0x68>)
 8001f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2a:	609a      	str	r2, [r3, #8]
  #endif
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	46020c00 	.word	0x46020c00

08001f40 <SD_task>:
#include "cmsis_os2.h"

char workBuffer[512]; // Work area (should be aligned to the sector size)

void SD_task(void *pvParameters)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001f4c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001f50:	6018      	str	r0, [r3, #0]
    FRESULT mountResult;
    FATFS fs;

    mountResult = f_mount(&fs, "", 1); // Mounts the default drive
 8001f52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f56:	2201      	movs	r2, #1
 8001f58:	492b      	ldr	r1, [pc, #172]	; (8002008 <SD_task+0xc8>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f008 f922 	bl	800a1a4 <f_mount>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 32d7 	strb.w	r3, [r7, #727]	; 0x2d7
    if (mountResult != FR_OK)
 8001f66:	f897 32d7 	ldrb.w	r3, [r7, #727]	; 0x2d7
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01d      	beq.n	8001faa <SD_task+0x6a>
    {
        printf("SD failed to mount. Error: %d\n", mountResult);
 8001f6e:	f897 32d7 	ldrb.w	r3, [r7, #727]	; 0x2d7
 8001f72:	4619      	mov	r1, r3
 8001f74:	4825      	ldr	r0, [pc, #148]	; (800200c <SD_task+0xcc>)
 8001f76:	f00c f89f 	bl	800e0b8 <iprintf>
        // Handle mount failure
        if (mountResult == FR_NO_FILESYSTEM)
 8001f7a:	f897 32d7 	ldrb.w	r3, [r7, #727]	; 0x2d7
 8001f7e:	2b0d      	cmp	r3, #13
 8001f80:	d113      	bne.n	8001faa <SD_task+0x6a>
        {

            FRESULT formatResult = f_mkfs("", NULL, workBuffer, sizeof(workBuffer));
 8001f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f86:	4a22      	ldr	r2, [pc, #136]	; (8002010 <SD_task+0xd0>)
 8001f88:	2100      	movs	r1, #0
 8001f8a:	481f      	ldr	r0, [pc, #124]	; (8002008 <SD_task+0xc8>)
 8001f8c:	f008 facc 	bl	800a528 <f_mkfs>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f887 32d6 	strb.w	r3, [r7, #726]	; 0x2d6
            if (formatResult != FR_OK)
 8001f96:	f897 32d6 	ldrb.w	r3, [r7, #726]	; 0x2d6
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <SD_task+0x6a>
            {
                // Handle formatting error
                printf("SD failed to format. Error: %d\n", formatResult);
 8001f9e:	f897 32d6 	ldrb.w	r3, [r7, #726]	; 0x2d6
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	481b      	ldr	r0, [pc, #108]	; (8002014 <SD_task+0xd4>)
 8001fa6:	f00c f887 	bl	800e0b8 <iprintf>
    }

    FILINFO fileInfo;
    FRESULT statResult;

    statResult = f_stat("/", &fileInfo);
 8001faa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4819      	ldr	r0, [pc, #100]	; (8002018 <SD_task+0xd8>)
 8001fb2:	f008 f955 	bl	800a260 <f_stat>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 32d5 	strb.w	r3, [r7, #725]	; 0x2d5
    if (statResult != FR_OK)
 8001fbc:	f897 32d5 	ldrb.w	r3, [r7, #725]	; 0x2d5
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <SD_task+0x92>
    {
        printf("SD failed to stat. Error: %d\n", statResult);
 8001fc4:	f897 32d5 	ldrb.w	r3, [r7, #725]	; 0x2d5
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4814      	ldr	r0, [pc, #80]	; (800201c <SD_task+0xdc>)
 8001fcc:	f00c f874 	bl	800e0b8 <iprintf>
 8001fd0:	e006      	b.n	8001fe0 <SD_task+0xa0>
        // Handle error
    }
    else
    {
        printf("SD stat result: %s\n", fileInfo.fname);
 8001fd2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fd6:	3309      	adds	r3, #9
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <SD_task+0xe0>)
 8001fdc:	f00c f86c 	bl	800e0b8 <iprintf>
        // Drive is running, proceed to access its contents
    }

    char line[128] = {};
 8001fe0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001fe4:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	3304      	adds	r3, #4
 8001fee:	227c      	movs	r2, #124	; 0x7c
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00c f9be 	bl	800e374 <memset>
    while (1)
    {
        printf("sd_task\n");
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <SD_task+0xe4>)
 8001ffa:	f00c f8cb 	bl	800e194 <puts>
        osDelay(100);
 8001ffe:	2064      	movs	r0, #100	; 0x64
 8002000:	f009 f873 	bl	800b0ea <osDelay>
    {
 8002004:	e7f8      	b.n	8001ff8 <SD_task+0xb8>
 8002006:	bf00      	nop
 8002008:	0800ee74 	.word	0x0800ee74
 800200c:	0800ee78 	.word	0x0800ee78
 8002010:	20000394 	.word	0x20000394
 8002014:	0800ee98 	.word	0x0800ee98
 8002018:	0800eeb8 	.word	0x0800eeb8
 800201c:	0800eebc 	.word	0x0800eebc
 8002020:	0800eedc 	.word	0x0800eedc
 8002024:	0800eef0 	.word	0x0800eef0

08002028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800202c:	f7ff ff50 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002030:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002032:	e003      	b.n	800203c <LoopCopyDataInit>

08002034 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002036:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002038:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800203a:	3104      	adds	r1, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800203c:	480a      	ldr	r0, [pc, #40]	; (8002068 <LoopForever+0xa>)
	ldr	r3, =_edata
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002040:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002042:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002044:	d3f6      	bcc.n	8002034 <CopyDataInit>
	ldr	r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002048:	e002      	b.n	8002050 <LoopFillZerobss>

0800204a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800204a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800204c:	f842 3b04 	str.w	r3, [r2], #4

08002050 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <LoopForever+0x16>)
	cmp	r2, r3
 8002052:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002054:	d3f9      	bcc.n	800204a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002056:	f00c f9ff 	bl	800e458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800205a:	f7fe fadd 	bl	8000618 <main>

0800205e <LoopForever>:

LoopForever:
    b LoopForever
 800205e:	e7fe      	b.n	800205e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002060:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002064:	0800f11c 	.word	0x0800f11c
	ldr	r0, =_sdata
 8002068:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800206c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002070:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002074:	20041422 	.word	0x20041422

08002078 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_IRQHandler>
	...

0800207c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_Init+0x4c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_Init+0x4c>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f8f0 	bl	8002272 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002092:	f001 fef7 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_Init+0x50>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	490b      	ldr	r1, [pc, #44]	; (80020d0 <HAL_Init+0x54>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_Init+0x58>)
 80020aa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ac:	200f      	movs	r0, #15
 80020ae:	f7ff fd1f 	bl	8001af0 <HAL_InitTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e002      	b.n	80020c2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fb22 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	46020c00 	.word	0x46020c00
 80020d0:	0800efa8 	.word	0x0800efa8
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	2000000c 	.word	0x2000000c
 80020fc:	20000594 	.word	0x20000594

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000594 	.word	0x20000594

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff4c 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002296:	f7ff ff63 	bl	8002160 <__NVIC_GetPriorityGrouping>
 800229a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	6978      	ldr	r0, [r7, #20]
 80022a2:	f7ff ffb3 	bl	800220c <NVIC_EncodePriority>
 80022a6:	4602      	mov	r2, r0
 80022a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff82 	bl	80021b8 <__NVIC_SetPriority>
}
 80022b4:	bf00      	nop
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff56 	bl	800217c <__NVIC_EnableIRQ>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022ea:	e1ba      	b.n	8002662 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 81aa 	beq.w	800265c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a55      	ldr	r2, [pc, #340]	; (8002460 <HAL_GPIO_Init+0x188>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d15d      	bne.n	80023cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002316:	2201      	movs	r2, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	4013      	ands	r3, r2
 8002324:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	4313      	orrs	r3, r2
 8002338:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_GPIO_Init+0x18c>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002348:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800234a:	4a46      	ldr	r2, [pc, #280]	; (8002464 <HAL_GPIO_Init+0x18c>)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	4013      	ands	r3, r2
 8002378:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220b      	movs	r2, #11
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	4313      	orrs	r3, r2
 800238c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	3208      	adds	r2, #8
 8002396:	69f9      	ldr	r1, [r7, #28]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2202      	movs	r2, #2
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e067      	b.n	800249c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x104>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b12      	cmp	r3, #18
 80023da:	d145      	bne.n	8002468 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	4313      	orrs	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69f9      	ldr	r1, [r7, #28]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	4013      	ands	r3, r2
 800243e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	4313      	orrs	r3, r2
 8002454:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	e01e      	b.n	800249c <HAL_GPIO_Init+0x1c4>
 800245e:	bf00      	nop
 8002460:	46020000 	.word	0x46020000
 8002464:	0800f000 	.word	0x0800f000
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	4013      	ands	r3, r2
 800247e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	4313      	orrs	r3, r2
 8002494:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d00b      	beq.n	80024bc <HAL_GPIO_Init+0x1e4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d130      	bne.n	800251e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80024f2:	2201      	movs	r2, #1
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	4013      	ands	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0201 	and.w	r2, r3, #1
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	4313      	orrs	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d017      	beq.n	8002556 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	4013      	ands	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	4313      	orrs	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d07c      	beq.n	800265c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002562:	4a47      	ldr	r2, [pc, #284]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3318      	adds	r3, #24
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	4013      	ands	r3, r2
 8002584:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0a9a      	lsrs	r2, r3, #10
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <HAL_GPIO_Init+0x3ac>)
 800258c:	4013      	ands	r3, r2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	f002 0203 	and.w	r2, r2, #3
 8002594:	00d2      	lsls	r2, r2, #3
 8002596:	4093      	lsls	r3, r2
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	4313      	orrs	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800259e:	4938      	ldr	r1, [pc, #224]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3318      	adds	r3, #24
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80025fa:	4a21      	ldr	r2, [pc, #132]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 8002602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002606:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	4013      	ands	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002634:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	4013      	ands	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_GPIO_Init+0x3a8>)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3301      	adds	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	f47f ae3d 	bne.w	80022ec <HAL_GPIO_Init+0x14>
  }
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3724      	adds	r7, #36	; 0x24
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	46022000 	.word	0x46022000
 8002684:	002f7f7f 	.word	0x002f7f7f

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f814 	bl	8002704 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80026e8:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f812 	bl	800271a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	46022000 	.word	0x46022000

08002704 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e08d      	b.n	800285e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fff2 	bl	8001740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e006      	b.n	80027b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d108      	bne.n	80027d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	e007      	b.n	80027e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b20      	cmp	r3, #32
 800287a:	d138      	bne.n	80028ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002886:	2302      	movs	r3, #2
 8002888:	e032      	b.n	80028f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2224      	movs	r2, #36	; 0x24
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	d139      	bne.n	8002986 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800291c:	2302      	movs	r3, #2
 800291e:	e033      	b.n	8002988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800294e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e007      	b.n	80029c2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0204 	bic.w	r2, r3, #4
 80029ba:	4905      	ldr	r1, [pc, #20]	; (80029d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40030400 	.word	0x40030400

080029d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_ICACHE_Enable+0x1c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_ICACHE_Enable+0x1c>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40030400 	.word	0x40030400

080029f4 <HAL_PWR_ConfigPVD>:
  * @param  pConfigPVD : Pointer to a PWR_PVDTypeDef structure that contains the
  *                      PVD configuration information (PVDLevel and EventMode).
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *pConfigPVD)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the PVD parameter */
  if (pConfigPVD == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_PWR_ConfigPVD+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e059      	b.n	8002aba <HAL_PWR_ConfigPVD+0xc6>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(pConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(pConfigPVD->Mode));

  /* Set PVDLS[2:0] bits according to PVDLevel value */
  MODIFY_REG(PWR->SVMCR, PWR_SVMCR_PVDLS, pConfigPVD->PVDLevel);
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_PWR_ConfigPVD+0xd4>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	492d      	ldr	r1, [pc, #180]	; (8002ac8 <HAL_PWR_ConfigPVD+0xd4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	610b      	str	r3, [r1, #16]

  /* Disable PVD Event/Interrupt */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a23      	ldr	r2, [pc, #140]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((pConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the PVD in event mode */
  if ((pConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_PWR_ConfigPVD+0x94>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }

  /* Configure the PVD in rising edge */
  if ((pConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_PWR_ConfigPVD+0xac>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
  }

  /* Configure the PVD in falling edge */
  if ((pConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <HAL_PWR_ConfigPVD+0xd8>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab6:	6053      	str	r3, [r2, #4]
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	46020800 	.word	0x46020800
 8002acc:	46022000 	.word	0x46022000

08002ad0 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_PVDE);
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_PWR_EnablePVD+0x1c>)
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_PWR_EnablePVD+0x1c>)
 8002ada:	f043 0310 	orr.w	r3, r3, #16
 8002ade:	6113      	str	r3, [r2, #16]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	46020800 	.word	0x46020800

08002af0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b00:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d10b      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d905      	bls.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e057      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b28:	d90a      	bls.n	8002b40 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3c:	60d3      	str	r3, [r2, #12]
 8002b3e:	e007      	b.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002b40:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b48:	4925      	ldr	r1, [pc, #148]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b50:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	2232      	movs	r2, #50	; 0x32
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002b6e:	e002      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f3      	bne.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01b      	beq.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	2232      	movs	r2, #50	; 0x32
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002bac:	e002      	b.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f3      	bne.n	8002bae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	46020800 	.word	0x46020800
 8002be4:	20000004 	.word	0x20000004
 8002be8:	10624dd3 	.word	0x10624dd3

08002bec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	46020800 	.word	0x46020800

08002c08 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_PWREx_ConfigSupply+0x94>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_PWREx_ConfigSupply+0x98>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	2232      	movs	r2, #50	; 0x32
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_PWREx_ConfigSupply+0x98>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d113      	bne.n	8002c5c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c3a:	f023 0302 	bic.w	r3, r3, #2
 8002c3e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c40:	e002      	b.n	8002c48 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d116      	bne.n	8002c82 <HAL_PWREx_ConfigSupply+0x7a>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f3      	bne.n	8002c42 <HAL_PWREx_ConfigSupply+0x3a>
 8002c5a:	e012      	b.n	8002c82 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c68:	e002      	b.n	8002c70 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <HAL_PWREx_ConfigSupply+0x7a>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f3      	bne.n	8002c6a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	10624dd3 	.word	0x10624dd3
 8002ca4:	46020800 	.word	0x46020800

08002ca8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002cb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb6:	6113      	str	r3, [r2, #16]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	46020800 	.word	0x46020800

08002cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	46020800 	.word	0x46020800

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f000 bec8 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d02:	4b99      	ldr	r3, [pc, #612]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d0c:	4b96      	ldr	r3, [pc, #600]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 816c 	beq.w	8002ffc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_RCC_OscConfig+0x52>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	f040 80de 	bne.w	8002eee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 80da 	bne.w	8002eee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f000 bea5 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4c:	4b86      	ldr	r3, [pc, #536]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_RCC_OscConfig+0x7a>
 8002d58:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d60:	e005      	b.n	8002d6e <HAL_RCC_OscConfig+0x86>
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d255      	bcs.n	8002e1e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fa11 	bl	80041a4 <RCC_SetFlashLatencyFromMSIRange>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f000 be82 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4a75      	ldr	r2, [pc, #468]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d98:	6093      	str	r3, [r2, #8]
 8002d9a:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	4970      	ldr	r1, [pc, #448]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002db4:	d309      	bcc.n	8002dca <HAL_RCC_OscConfig+0xe2>
 8002db6:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 021f 	bic.w	r2, r3, #31
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4969      	ldr	r1, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
 8002dc8:	e07e      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0a      	bge.n	8002de8 <HAL_RCC_OscConfig+0x100>
 8002dd2:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	015b      	lsls	r3, r3, #5
 8002de0:	4961      	ldr	r1, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
 8002de6:	e06f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d30a      	bcc.n	8002e08 <HAL_RCC_OscConfig+0x120>
 8002df2:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4959      	ldr	r1, [pc, #356]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60cb      	str	r3, [r1, #12]
 8002e06:	e05f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
 8002e08:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	03db      	lsls	r3, r3, #15
 8002e16:	4954      	ldr	r1, [pc, #336]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
 8002e1c:	e054      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002e1e:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4a51      	ldr	r2, [pc, #324]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e28:	6093      	str	r3, [r2, #8]
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	494c      	ldr	r1, [pc, #304]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e44:	d309      	bcc.n	8002e5a <HAL_RCC_OscConfig+0x172>
 8002e46:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f023 021f 	bic.w	r2, r3, #31
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	4945      	ldr	r1, [pc, #276]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e028      	b.n	8002eac <HAL_RCC_OscConfig+0x1c4>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da0a      	bge.n	8002e78 <HAL_RCC_OscConfig+0x190>
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	493d      	ldr	r1, [pc, #244]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]
 8002e76:	e019      	b.n	8002eac <HAL_RCC_OscConfig+0x1c4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d30a      	bcc.n	8002e98 <HAL_RCC_OscConfig+0x1b0>
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	029b      	lsls	r3, r3, #10
 8002e90:	4935      	ldr	r1, [pc, #212]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60cb      	str	r3, [r1, #12]
 8002e96:	e009      	b.n	8002eac <HAL_RCC_OscConfig+0x1c4>
 8002e98:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	03db      	lsls	r3, r3, #15
 8002ea6:	4930      	ldr	r1, [pc, #192]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 f974 	bl	80041a4 <RCC_SetFlashLatencyFromMSIRange>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f000 bde5 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002ec8:	f001 f8de 	bl	8004088 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x284>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fe0d 	bl	8001af0 <HAL_InitTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 808a 	beq.w	8002ffa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eea:	f000 bdd2 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d066      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f02:	f7ff f8fd 	bl	8002100 <HAL_GetTick>
 8002f06:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f0a:	f7ff f8f9 	bl	8002100 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d902      	bls.n	8002f1e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	f000 bdba 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ef      	beq.n	8002f0a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f34:	6093      	str	r3, [r2, #8]
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	4909      	ldr	r1, [pc, #36]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002f50:	d30e      	bcc.n	8002f70 <HAL_RCC_OscConfig+0x288>
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 021f 	bic.w	r2, r3, #31
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4902      	ldr	r1, [pc, #8]	; (8002f68 <HAL_RCC_OscConfig+0x280>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60cb      	str	r3, [r1, #12]
 8002f64:	e04a      	b.n	8002ffc <HAL_RCC_OscConfig+0x314>
 8002f66:	bf00      	nop
 8002f68:	46020c00 	.word	0x46020c00
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da0a      	bge.n	8002f8e <HAL_RCC_OscConfig+0x2a6>
 8002f78:	4b98      	ldr	r3, [pc, #608]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	015b      	lsls	r3, r3, #5
 8002f86:	4995      	ldr	r1, [pc, #596]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60cb      	str	r3, [r1, #12]
 8002f8c:	e036      	b.n	8002ffc <HAL_RCC_OscConfig+0x314>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f96:	d30a      	bcc.n	8002fae <HAL_RCC_OscConfig+0x2c6>
 8002f98:	4b90      	ldr	r3, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	029b      	lsls	r3, r3, #10
 8002fa6:	498d      	ldr	r1, [pc, #564]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
 8002fac:	e026      	b.n	8002ffc <HAL_RCC_OscConfig+0x314>
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	03db      	lsls	r3, r3, #15
 8002fbc:	4987      	ldr	r1, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002fc4:	4b85      	ldr	r3, [pc, #532]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a84      	ldr	r2, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fd0:	f7ff f896 	bl	8002100 <HAL_GetTick>
 8002fd4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002fd6:	e009      	b.n	8002fec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd8:	f7ff f892 	bl	8002100 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d902      	bls.n	8002fec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	f000 bd53 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002fec:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ef      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2f0>
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 808b 	beq.w	8003120 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b08      	cmp	r3, #8
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x334>
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d109      	bne.n	800302a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2b03      	cmp	r3, #3
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d17d      	bne.n	8003120 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f000 bd34 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x35a>
 8003034:	4b69      	ldr	r3, [pc, #420]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a68      	ldr	r2, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800303a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	e041      	b.n	80030c6 <HAL_RCC_OscConfig+0x3de>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x38a>
 800304c:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a62      	ldr	r2, [pc, #392]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5f      	ldr	r2, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800305e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e029      	b.n	80030c6 <HAL_RCC_OscConfig+0x3de>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800307a:	d112      	bne.n	80030a2 <HAL_RCC_OscConfig+0x3ba>
 800307c:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a56      	ldr	r2, [pc, #344]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b54      	ldr	r3, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a53      	ldr	r2, [pc, #332]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b51      	ldr	r3, [pc, #324]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a50      	ldr	r2, [pc, #320]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	e011      	b.n	80030c6 <HAL_RCC_OscConfig+0x3de>
 80030a2:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a4d      	ldr	r2, [pc, #308]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b48      	ldr	r3, [pc, #288]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a47      	ldr	r2, [pc, #284]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d014      	beq.n	80030f8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80030ce:	f7ff f817 	bl	8002100 <HAL_GetTick>
 80030d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d4:	e009      	b.n	80030ea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d6:	f7ff f813 	bl	8002100 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	; 0x64
 80030e2:	d902      	bls.n	80030ea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	f000 bcd4 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ea:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ef      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3ee>
 80030f6:	e013      	b.n	8003120 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80030f8:	f7ff f802 	bl	8002100 <HAL_GetTick>
 80030fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fe:	e009      	b.n	8003114 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fffe 	bl	8002100 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d902      	bls.n	8003114 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f000 bcbf 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003114:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ef      	bne.n	8003100 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05f      	beq.n	80031ec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	2b04      	cmp	r3, #4
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x456>
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d114      	bne.n	8003162 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	2b02      	cmp	r3, #2
 800313c:	d111      	bne.n	8003162 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f000 bca3 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	4920      	ldr	r1, [pc, #128]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003160:	e044      	b.n	80031ec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d024      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003176:	f7fe ffc3 	bl	8002100 <HAL_GetTick>
 800317a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	e009      	b.n	8003192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe ffbf 	bl	8002100 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d902      	bls.n	8003192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	f000 bc80 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ef      	beq.n	800317e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	490b      	ldr	r1, [pc, #44]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	610b      	str	r3, [r1, #16]
 80031b2:	e01b      	b.n	80031ec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a08      	ldr	r2, [pc, #32]	; (80031dc <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80031c0:	f7fe ff9e 	bl	8002100 <HAL_GetTick>
 80031c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe ff9a 	bl	8002100 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d904      	bls.n	80031e0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	f000 bc5b 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
 80031dc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e0:	4baf      	ldr	r3, [pc, #700]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ed      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80c8 	beq.w	800338a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003200:	4ba7      	ldr	r3, [pc, #668]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d111      	bne.n	8003232 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4ba4      	ldr	r3, [pc, #656]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003214:	4aa2      	ldr	r2, [pc, #648]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800321e:	4ba0      	ldr	r3, [pc, #640]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003232:	4b9c      	ldr	r3, [pc, #624]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800323e:	4b99      	ldr	r3, [pc, #612]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	4a98      	ldr	r2, [pc, #608]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324a:	f7fe ff59 	bl	8002100 <HAL_GetTick>
 800324e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003250:	e009      	b.n	8003266 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003252:	f7fe ff55 	bl	8002100 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d902      	bls.n	8003266 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	f000 bc16 	b.w	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003266:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ef      	beq.n	8003252 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d05f      	beq.n	800333a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800327c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003280:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	429a      	cmp	r2, r3
 800328e:	d037      	beq.n	8003300 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e3f4      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01b      	beq.n	80032ea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80032b2:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80032b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032b8:	4a79      	ldr	r2, [pc, #484]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80032ba:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80032be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80032c2:	f7fe ff1d 	bl	8002100 <HAL_GetTick>
 80032c6:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe ff19 	bl	8002100 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e3da      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80032dc:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80032de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ef      	bne.n	80032ca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80032ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4969      	ldr	r1, [pc, #420]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003300:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003306:	4a66      	ldr	r2, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800330c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003310:	f7fe fef6 	bl	8002100 <HAL_GetTick>
 8003314:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fef2 	bl	8002100 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b05      	cmp	r3, #5
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e3b3      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800332a:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800332c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ef      	beq.n	8003318 <HAL_RCC_OscConfig+0x630>
 8003338:	e01b      	b.n	8003372 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800333c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003340:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003342:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003346:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800334a:	f7fe fed9 	bl	8002100 <HAL_GetTick>
 800334e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003352:	f7fe fed5 	bl	8002100 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b05      	cmp	r3, #5
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e396      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003364:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800336a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ef      	bne.n	8003352 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003372:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337a:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003380:	4a47      	ldr	r2, [pc, #284]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8111 	beq.w	80035ba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d111      	bne.n	80033d0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80033bc:	4b38      	ldr	r3, [pc, #224]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033d0:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80033dc:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fe8a 	bl	8002100 <HAL_GetTick>
 80033ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fe fe86 	bl	8002100 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e347      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_RCC_OscConfig+0x7bc>)
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01f      	beq.n	800345a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d010      	beq.n	8003448 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003446:	e018      	b.n	800347a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800344a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003458:	e00f      	b.n	800347a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800345c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 800346c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_RCC_OscConfig+0x7b8>)
 8003472:	f023 0304 	bic.w	r3, r3, #4
 8003476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d057      	beq.n	8003532 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003482:	f7fe fe3d 	bl	8002100 <HAL_GetTick>
 8003486:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003488:	e00e      	b.n	80034a8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fe39 	bl	8002100 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d905      	bls.n	80034a8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e2f8      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
 80034a0:	46020c00 	.word	0x46020c00
 80034a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	4b9c      	ldr	r3, [pc, #624]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80034aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0e9      	beq.n	800348a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01b      	beq.n	80034fa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034c2:	4b96      	ldr	r3, [pc, #600]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80034c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c8:	4a94      	ldr	r2, [pc, #592]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80034ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe fe14 	bl	8002100 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e2d3      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034ea:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80034ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ed      	beq.n	80034d4 <HAL_RCC_OscConfig+0x7ec>
 80034f8:	e053      	b.n	80035a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80034fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003500:	4a86      	ldr	r2, [pc, #536]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003506:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe fdf8 	bl	8002100 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e2b7      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003522:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ed      	bne.n	800350c <HAL_RCC_OscConfig+0x824>
 8003530:	e037      	b.n	80035a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003532:	f7fe fde5 	bl	8002100 <HAL_GetTick>
 8003536:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fde1 	bl	8002100 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e2a0      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	4b72      	ldr	r3, [pc, #456]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ed      	bne.n	800353a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800355e:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01a      	beq.n	80035a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800356c:	4b6b      	ldr	r3, [pc, #428]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 800356e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003572:	4a6a      	ldr	r2, [pc, #424]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003578:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fe fdbf 	bl	8002100 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e27e      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003594:	4b61      	ldr	r3, [pc, #388]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ed      	bne.n	800357e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035aa:	4b5c      	ldr	r3, [pc, #368]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	4a5a      	ldr	r2, [pc, #360]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d036      	beq.n	8003634 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80035d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80035da:	f7fe fd91 	bl	8002100 <HAL_GetTick>
 80035de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e2:	f7fe fd8d 	bl	8002100 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e24e      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80035f4:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x8fa>
 8003600:	e018      	b.n	8003634 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a45      	ldr	r2, [pc, #276]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800360c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800360e:	f7fe fd77 	bl	8002100 <HAL_GetTick>
 8003612:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003616:	f7fe fd73 	bl	8002100 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e234      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003628:	4b3c      	ldr	r3, [pc, #240]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d036      	beq.n	80036ae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	2b00      	cmp	r3, #0
 8003646:	d019      	beq.n	800367c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 800364e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003652:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003654:	f7fe fd54 	bl	8002100 <HAL_GetTick>
 8003658:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800365c:	f7fe fd50 	bl	8002100 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e211      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x974>
 800367a:	e018      	b.n	80036ae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a26      	ldr	r2, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003686:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003688:	f7fe fd3a 	bl	8002100 <HAL_GetTick>
 800368c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003690:	f7fe fd36 	bl	8002100 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1f7      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d07f      	beq.n	80037ba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d062      	beq.n	8003788 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036cc:	6093      	str	r3, [r2, #8]
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	4910      	ldr	r1, [pc, #64]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80036e8:	d309      	bcc.n	80036fe <HAL_RCC_OscConfig+0xa16>
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 021f 	bic.w	r2, r3, #31
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4909      	ldr	r1, [pc, #36]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60cb      	str	r3, [r1, #12]
 80036fc:	e02a      	b.n	8003754 <HAL_RCC_OscConfig+0xa6c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	da0c      	bge.n	8003720 <HAL_RCC_OscConfig+0xa38>
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	015b      	lsls	r3, r3, #5
 8003714:	4901      	ldr	r1, [pc, #4]	; (800371c <HAL_RCC_OscConfig+0xa34>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]
 800371a:	e01b      	b.n	8003754 <HAL_RCC_OscConfig+0xa6c>
 800371c:	46020c00 	.word	0x46020c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d30a      	bcc.n	8003740 <HAL_RCC_OscConfig+0xa58>
 800372a:	4ba1      	ldr	r3, [pc, #644]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	499d      	ldr	r1, [pc, #628]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	60cb      	str	r3, [r1, #12]
 800373e:	e009      	b.n	8003754 <HAL_RCC_OscConfig+0xa6c>
 8003740:	4b9b      	ldr	r3, [pc, #620]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	03db      	lsls	r3, r3, #15
 800374e:	4998      	ldr	r1, [pc, #608]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003754:	4b96      	ldr	r3, [pc, #600]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a95      	ldr	r2, [pc, #596]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800375a:	f043 0310 	orr.w	r3, r3, #16
 800375e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003760:	f7fe fcce 	bl	8002100 <HAL_GetTick>
 8003764:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003768:	f7fe fcca 	bl	8002100 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e18b      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800377a:	4b8d      	ldr	r3, [pc, #564]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xa80>
 8003786:	e018      	b.n	80037ba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003788:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a88      	ldr	r2, [pc, #544]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800378e:	f023 0310 	bic.w	r3, r3, #16
 8003792:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003794:	f7fe fcb4 	bl	8002100 <HAL_GetTick>
 8003798:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800379c:	f7fe fcb0 	bl	8002100 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e171      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80037ae:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8166 	beq.w	8003a90 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ca:	4b79      	ldr	r3, [pc, #484]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	f000 80f2 	beq.w	80039bc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	2b02      	cmp	r3, #2
 80037de:	f040 80c5 	bne.w	800396c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a72      	ldr	r2, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80037e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037ee:	f7fe fc87 	bl	8002100 <HAL_GetTick>
 80037f2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fc83 	bl	8002100 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e144      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003808:	4b69      	ldr	r3, [pc, #420]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003814:	4b66      	ldr	r3, [pc, #408]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d111      	bne.n	8003846 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003828:	4a61      	ldr	r2, [pc, #388]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003832:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003846:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <HAL_RCC_OscConfig+0xccc>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003852:	d102      	bne.n	800385a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800385a:	4b56      	ldr	r3, [pc, #344]	; (80039b4 <HAL_RCC_OscConfig+0xccc>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a55      	ldr	r2, [pc, #340]	; (80039b4 <HAL_RCC_OscConfig+0xccc>)
 8003860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003864:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003866:	4b52      	ldr	r3, [pc, #328]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800387a:	3a01      	subs	r2, #1
 800387c:	0212      	lsls	r2, r2, #8
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003884:	430a      	orrs	r2, r1
 8003886:	494a      	ldr	r1, [pc, #296]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	628b      	str	r3, [r1, #40]	; 0x28
 800388c:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <HAL_RCC_OscConfig+0xcd0>)
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003898:	3a01      	subs	r2, #1
 800389a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038a2:	3a01      	subs	r2, #1
 80038a4:	0252      	lsls	r2, r2, #9
 80038a6:	b292      	uxth	r2, r2
 80038a8:	4311      	orrs	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038ae:	3a01      	subs	r2, #1
 80038b0:	0412      	lsls	r2, r2, #16
 80038b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038bc:	3a01      	subs	r2, #1
 80038be:	0612      	lsls	r2, r2, #24
 80038c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80038c4:	430a      	orrs	r2, r1
 80038c6:	493a      	ldr	r1, [pc, #232]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038d2:	f023 0310 	bic.w	r3, r3, #16
 80038d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	4a34      	ldr	r2, [pc, #208]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80038e2:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	4a32      	ldr	r2, [pc, #200]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038e8:	f043 0310 	orr.w	r3, r3, #16
 80038ec:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	f023 020c 	bic.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	492d      	ldr	r1, [pc, #180]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003900:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_RCC_OscConfig+0xccc>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <HAL_RCC_OscConfig+0xccc>)
 800390e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003912:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003914:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003922:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003924:	f023 0304 	bic.w	r3, r3, #4
 8003928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800392c:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003936:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800393e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003944:	f7fe fbdc 	bl	8002100 <HAL_GetTick>
 8003948:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fbd8 	bl	8002100 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e099      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800395e:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xc64>
 800396a:	e091      	b.n	8003a90 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003976:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003978:	f7fe fbc2 	bl	8002100 <HAL_GetTick>
 800397c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7fe fbbe 	bl	8002100 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	4a03      	ldr	r2, [pc, #12]	; (80039b0 <HAL_RCC_OscConfig+0xcc8>)
 80039a4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80039a8:	f023 0303 	bic.w	r3, r3, #3
 80039ac:	6293      	str	r3, [r2, #40]	; 0x28
 80039ae:	e06f      	b.n	8003a90 <HAL_RCC_OscConfig+0xda8>
 80039b0:	46020c00 	.word	0x46020c00
 80039b4:	46020800 	.word	0x46020800
 80039b8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80039bc:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d039      	beq.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d132      	bne.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d129      	bne.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d122      	bne.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d11a      	bne.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	0a5b      	lsrs	r3, r3, #9
 8003a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d111      	bne.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d108      	bne.n	8003a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	0e1b      	lsrs	r3, r3, #24
 8003a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e024      	b.n	8003a92 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d01a      	beq.n	8003a90 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 8003a60:	f023 0310 	bic.w	r3, r3, #16
 8003a64:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fe fb4b 	bl	8002100 <HAL_GetTick>
 8003a6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003a6c:	bf00      	nop
 8003a6e:	f7fe fb47 	bl	8002100 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d0f9      	beq.n	8003a6e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <HAL_RCC_OscConfig+0xdb4>)
 8003a8a:	f043 0310 	orr.w	r3, r3, #16
 8003a8e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3738      	adds	r7, #56	; 0x38
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	46020c00 	.word	0x46020c00

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e1d9      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b9b      	ldr	r3, [pc, #620]	; (8003d24 <HAL_RCC_ClockConfig+0x284>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d910      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b98      	ldr	r3, [pc, #608]	; (8003d24 <HAL_RCC_ClockConfig+0x284>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 020f 	bic.w	r2, r3, #15
 8003aca:	4996      	ldr	r1, [pc, #600]	; (8003d24 <HAL_RCC_ClockConfig+0x284>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_ClockConfig+0x284>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e1c1      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d010      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	4b8c      	ldr	r3, [pc, #560]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d908      	bls.n	8003b12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003b00:	4b89      	ldr	r3, [pc, #548]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	4986      	ldr	r1, [pc, #536]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d909      	bls.n	8003b44 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003b30:	4b7d      	ldr	r3, [pc, #500]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	497a      	ldr	r1, [pc, #488]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d908      	bls.n	8003b72 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b71      	ldr	r3, [pc, #452]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	496e      	ldr	r1, [pc, #440]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	4b69      	ldr	r3, [pc, #420]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d908      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003b8e:	4b66      	ldr	r3, [pc, #408]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 020f 	bic.w	r2, r3, #15
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4963      	ldr	r1, [pc, #396]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80d2 	beq.w	8003d52 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d143      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b5b      	ldr	r3, [pc, #364]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d110      	bne.n	8003bea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	4a56      	ldr	r2, [pc, #344]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003bd8:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003bea:	f7fe fa89 	bl	8002100 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <HAL_RCC_ClockConfig+0x28c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00f      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003bfe:	f7fe fa7f 	bl	8002100 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e12b      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCC_ClockConfig+0x28c>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c28:	4a3f      	ldr	r2, [pc, #252]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c32:	4b3d      	ldr	r3, [pc, #244]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e112      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e106      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0fa      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0f2      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4926      	ldr	r1, [pc, #152]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003c94:	f7fe fa34 	bl	8002100 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d112      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fe fa2c 	bl	8002100 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0d6      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d1ee      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x204>
 8003cc6:	e044      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d112      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd2:	f7fe fa15 	bl	8002100 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e0bf      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d1ee      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0x232>
 8003cf4:	e02d      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d123      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fe f9fe 	bl	8002100 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0a8      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_RCC_ClockConfig+0x288>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ee      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x260>
 8003d22:	e016      	b.n	8003d52 <HAL_RCC_ClockConfig+0x2b2>
 8003d24:	40022000 	.word	0x40022000
 8003d28:	46020c00 	.word	0x46020c00
 8003d2c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d30:	f7fe f9e6 	bl	8002100 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e090      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d1ee      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d010      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d208      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003d6e:	4b40      	ldr	r3, [pc, #256]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f023 020f 	bic.w	r2, r3, #15
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	493d      	ldr	r1, [pc, #244]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d80:	4b3c      	ldr	r3, [pc, #240]	; (8003e74 <HAL_RCC_ClockConfig+0x3d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d210      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <HAL_RCC_ClockConfig+0x3d4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 020f 	bic.w	r2, r3, #15
 8003d96:	4937      	ldr	r1, [pc, #220]	; (8003e74 <HAL_RCC_ClockConfig+0x3d4>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_RCC_ClockConfig+0x3d4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e05b      	b.n	8003e68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d208      	bcs.n	8003dde <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4925      	ldr	r1, [pc, #148]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d012      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d209      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4919      	ldr	r1, [pc, #100]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d208      	bcs.n	8003e3e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	490d      	ldr	r1, [pc, #52]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003e3e:	f000 f821 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x3d0>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	490a      	ldr	r1, [pc, #40]	; (8003e78 <HAL_RCC_ClockConfig+0x3d8>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x3dc>)
 8003e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_ClockConfig+0x3e0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd fe47 	bl	8001af0 <HAL_InitTick>
 8003e62:	4603      	mov	r3, r0
 8003e64:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	46020c00 	.word	0x46020c00
 8003e74:	40022000 	.word	0x40022000
 8003e78:	0800efa8 	.word	0x0800efa8
 8003e7c:	20000004 	.word	0x20000004
 8003e80:	20000008 	.word	0x20000008

08003e84 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b08b      	sub	sp, #44	; 0x2c
 8003e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e92:	4b78      	ldr	r3, [pc, #480]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e9c:	4b75      	ldr	r3, [pc, #468]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d121      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d11e      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003eb8:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003ec4:	4b6b      	ldr	r3, [pc, #428]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eca:	0b1b      	lsrs	r3, r3, #12
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003ed4:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	0f1b      	lsrs	r3, r3, #28
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d110      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ef4:	e00d      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d102      	bne.n	8003f08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f02:	4b5e      	ldr	r3, [pc, #376]	; (800407c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	e004      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f0e:	4b5b      	ldr	r3, [pc, #364]	; (800407c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003f10:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	f040 80a5 	bne.w	8004064 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	0a1b      	lsrs	r3, r3, #8
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003f32:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d003      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0xe4>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d022      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x128>
 8003f66:	e043      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eddf 6a43 	vldr	s13, [pc, #268]	; 8004080 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f8a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003f8e:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8004084 <HAL_RCC_GetSysClockFreq+0x200>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003faa:	e046      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004080 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fce:	ed97 6a01 	vldr	s12, [r7, #4]
 8003fd2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004084 <HAL_RCC_GetSysClockFreq+0x200>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fee:	e024      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004018:	ed97 6a01 	vldr	s12, [r7, #4]
 800401c:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004084 <HAL_RCC_GetSysClockFreq+0x200>
 8004020:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004024:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004038:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	0e1b      	lsrs	r3, r3, #24
 8004040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004044:	3301      	adds	r3, #1
 8004046:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004052:	edd7 6a07 	vldr	s13, [r7, #28]
 8004056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405e:	ee17 3a90 	vmov	r3, s15
 8004062:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004064:	6a3b      	ldr	r3, [r7, #32]
}
 8004066:	4618      	mov	r0, r3
 8004068:	372c      	adds	r7, #44	; 0x2c
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	46020c00 	.word	0x46020c00
 8004078:	0800efc0 	.word	0x0800efc0
 800407c:	00f42400 	.word	0x00f42400
 8004080:	4b742400 	.word	0x4b742400
 8004084:	46000000 	.word	0x46000000

08004088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800408c:	f7ff fefa 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x28>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	4906      	ldr	r1, [pc, #24]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a05      	ldr	r2, [pc, #20]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80040a4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80040a8:	681b      	ldr	r3, [r3, #0]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	46020c00 	.word	0x46020c00
 80040b4:	0800efa8 	.word	0x0800efa8
 80040b8:	20000004 	.word	0x20000004

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80040c0:	f7ff ffe2 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4903      	ldr	r1, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d8:	4618      	mov	r0, r3
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	46020c00 	.word	0x46020c00
 80040e0:	0800efb8 	.word	0x0800efb8

080040e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80040e8:	f7ff ffce 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4903      	ldr	r1, [pc, #12]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	46020c00 	.word	0x46020c00
 8004108:	0800efb8 	.word	0x0800efb8

0800410c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004110:	f7ff ffba 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	46020c00 	.word	0x46020c00
 8004130:	0800efb8 	.word	0x0800efb8

08004134 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	221f      	movs	r2, #31
 8004142:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_RCC_GetClockConfig+0x68>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 0203 	and.w	r2, r3, #3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_RCC_GetClockConfig+0x68>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800415c:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCC_GetClockConfig+0x68>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCC_GetClockConfig+0x68>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_GetClockConfig+0x68>)
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <HAL_RCC_GetClockConfig+0x6c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	46020c00 	.word	0x46020c00
 80041a0:	40022000 	.word	0x40022000

080041a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041ac:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041ba:	f7fe fd17 	bl	8002bec <HAL_PWREx_GetVoltageRange>
 80041be:	6178      	str	r0, [r7, #20]
 80041c0:	e019      	b.n	80041f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c8:	4a37      	ldr	r2, [pc, #220]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041d2:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041e0:	f7fe fd04 	bl	8002bec <HAL_PWREx_GetVoltageRange>
 80041e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ec:	4a2e      	ldr	r2, [pc, #184]	; (80042a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80041ee:	f023 0304 	bic.w	r3, r3, #4
 80041f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041fc:	d003      	beq.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004204:	d109      	bne.n	800421a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800420c:	d202      	bcs.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800420e:	2301      	movs	r3, #1
 8004210:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004212:	e033      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004218:	e030      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004220:	d208      	bcs.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d102      	bne.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800422a:	2303      	movs	r3, #3
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e025      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e035      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423a:	d90f      	bls.n	800425c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004248:	d902      	bls.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e015      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004250:	2301      	movs	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e012      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e00f      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004262:	d109      	bne.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d102      	bne.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800426c:	2301      	movs	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	e004      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004272:	2302      	movs	r3, #2
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e001      	b.n	800427c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004278:	2301      	movs	r3, #1
 800427a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 020f 	bic.w	r2, r3, #15
 8004284:	4909      	ldr	r1, [pc, #36]	; (80042ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d001      	beq.n	800429e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	46020c00 	.word	0x46020c00
 80042ac:	40022000 	.word	0x40022000

080042b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80042b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b4:	b0b8      	sub	sp, #224	; 0xe0
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c2:	2300      	movs	r3, #0
 80042c4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f002 0401 	and.w	r4, r2, #1
 80042d4:	2500      	movs	r5, #0
 80042d6:	ea54 0305 	orrs.w	r3, r4, r5
 80042da:	d00b      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80042dc:	4bca      	ldr	r3, [pc, #808]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	f023 0103 	bic.w	r1, r3, #3
 80042e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ec:	4ac6      	ldr	r2, [pc, #792]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80042ee:	430b      	orrs	r3, r1
 80042f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f002 0802 	and.w	r8, r2, #2
 8004300:	f04f 0900 	mov.w	r9, #0
 8004304:	ea58 0309 	orrs.w	r3, r8, r9
 8004308:	d00b      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800430a:	4bbf      	ldr	r3, [pc, #764]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800430c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004310:	f023 010c 	bic.w	r1, r3, #12
 8004314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	4abb      	ldr	r2, [pc, #748]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800431c:	430b      	orrs	r3, r1
 800431e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f002 0a04 	and.w	sl, r2, #4
 800432e:	f04f 0b00 	mov.w	fp, #0
 8004332:	ea5a 030b 	orrs.w	r3, sl, fp
 8004336:	d00b      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004338:	4bb3      	ldr	r3, [pc, #716]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800433a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	4aaf      	ldr	r2, [pc, #700]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800434a:	430b      	orrs	r3, r1
 800434c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f002 0308 	and.w	r3, r2, #8
 800435c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d00b      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004370:	4ba5      	ldr	r3, [pc, #660]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800437a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	4aa1      	ldr	r2, [pc, #644]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004382:	430b      	orrs	r3, r1
 8004384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f002 0310 	and.w	r3, r2, #16
 8004394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800439e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80043a8:	4b97      	ldr	r3, [pc, #604]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	4a93      	ldr	r2, [pc, #588]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f002 0320 	and.w	r3, r2, #32
 80043cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d00b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80043e0:	4b89      	ldr	r3, [pc, #548]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043e6:	f023 0107 	bic.w	r1, r3, #7
 80043ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f0:	4a85      	ldr	r2, [pc, #532]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004408:	2300      	movs	r3, #0
 800440a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800440e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d00b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004418:	4b7b      	ldr	r3, [pc, #492]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800441a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800441e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004428:	4a77      	ldr	r2, [pc, #476]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800442a:	430b      	orrs	r3, r1
 800442c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800443c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004446:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d00b      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004450:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800445a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800445e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004460:	4a69      	ldr	r2, [pc, #420]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004462:	430b      	orrs	r3, r1
 8004464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d00b      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004488:	4b5f      	ldr	r3, [pc, #380]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800448a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800448e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a5b      	ldr	r2, [pc, #364]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800449a:	430b      	orrs	r3, r1
 800449c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80044ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044b0:	2300      	movs	r3, #0
 80044b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044ba:	460b      	mov	r3, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	d00b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80044c0:	4b51      	ldr	r3, [pc, #324]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80044ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80044e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d00b      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80044f8:	4b43      	ldr	r3, [pc, #268]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044fe:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800450a:	430b      	orrs	r3, r1
 800450c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800451c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004526:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d00b      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004530:	4b35      	ldr	r3, [pc, #212]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004536:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800453a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800453e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004540:	4a31      	ldr	r2, [pc, #196]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004542:	430b      	orrs	r3, r1
 8004544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004554:	67bb      	str	r3, [r7, #120]	; 0x78
 8004556:	2300      	movs	r3, #0
 8004558:	67fb      	str	r3, [r7, #124]	; 0x7c
 800455a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d00c      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004564:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800456a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800456e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004576:	4a24      	ldr	r2, [pc, #144]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800457e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800458a:	673b      	str	r3, [r7, #112]	; 0x70
 800458c:	2300      	movs	r3, #0
 800458e:	677b      	str	r3, [r7, #116]	; 0x74
 8004590:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d04f      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800459a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d02d      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d827      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045aa:	2b60      	cmp	r3, #96	; 0x60
 80045ac:	d02e      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80045ae:	2b60      	cmp	r3, #96	; 0x60
 80045b0:	d823      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d006      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d81f      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d011      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80045c2:	e01a      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ce:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045d0:	e01d      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045d6:	3308      	adds	r3, #8
 80045d8:	4618      	mov	r0, r3
 80045da:	f002 f9d1 	bl	8006980 <RCCEx_PLL2_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045e4:	e013      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045ea:	332c      	adds	r3, #44	; 0x2c
 80045ec:	4618      	mov	r0, r3
 80045ee:	f002 fa5f 	bl	8006ab0 <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045f8:	e009      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004600:	e005      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004602:	bf00      	nop
 8004604:	e003      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004606:	bf00      	nop
 8004608:	46020c00 	.word	0x46020c00
        break;
 800460c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004616:	4bb6      	ldr	r3, [pc, #728]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800461c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	4ab1      	ldr	r2, [pc, #708]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800462a:	430b      	orrs	r3, r1
 800462c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004636:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800463a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004646:	66bb      	str	r3, [r7, #104]	; 0x68
 8004648:	2300      	movs	r3, #0
 800464a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004650:	460b      	mov	r3, r1
 8004652:	4313      	orrs	r3, r2
 8004654:	d053      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d033      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d82c      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800466a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466e:	d02f      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004674:	d826      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467a:	d008      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d820      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d011      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800468c:	e01a      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800468e:	4b98      	ldr	r3, [pc, #608]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	4a97      	ldr	r2, [pc, #604]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004698:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800469a:	e01a      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800469c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046a0:	3308      	adds	r3, #8
 80046a2:	4618      	mov	r0, r3
 80046a4:	f002 f96c 	bl	8006980 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046ae:	e010      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b4:	332c      	adds	r3, #44	; 0x2c
 80046b6:	4618      	mov	r0, r3
 80046b8:	f002 f9fa 	bl	8006ab0 <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046c2:	e006      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80046ca:	e002      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80046da:	4b85      	ldr	r3, [pc, #532]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80046dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80046e0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80046e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	4a80      	ldr	r2, [pc, #512]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80046f4:	e003      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80046fa:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80046fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800470a:	663b      	str	r3, [r7, #96]	; 0x60
 800470c:	2300      	movs	r3, #0
 800470e:	667b      	str	r3, [r7, #100]	; 0x64
 8004710:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d046      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800471a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800471e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004722:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004726:	d028      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004728:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800472c:	d821      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800472e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004732:	d022      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004738:	d81b      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800473a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800473e:	d01c      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004740:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004744:	d815      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d80f      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d011      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	d00e      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800475c:	e009      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800475e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004762:	3308      	adds	r3, #8
 8004764:	4618      	mov	r0, r3
 8004766:	f002 f90b 	bl	8006980 <RCCEx_PLL2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004770:	e004      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800477a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10d      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004784:	4b5a      	ldr	r3, [pc, #360]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800478a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800478e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004796:	4a56      	ldr	r2, [pc, #344]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004798:	430b      	orrs	r3, r1
 800479a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80047a4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80047a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80047b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047b6:	2300      	movs	r3, #0
 80047b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d03f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80047c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d81e      	bhi.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	08004817 	.word	0x08004817
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	080047fb 	.word	0x080047fb
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004817 	.word	0x08004817
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047ec:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	4a3f      	ldr	r2, [pc, #252]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80047f8:	e00e      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047fe:	332c      	adds	r3, #44	; 0x2c
 8004800:	4618      	mov	r0, r3
 8004802:	f002 f955 	bl	8006ab0 <RCCEx_PLL3_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800480c:	e004      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004816:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004818:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004820:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004826:	f023 0107 	bic.w	r1, r3, #7
 800482a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004834:	430b      	orrs	r3, r1
 8004836:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004840:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004850:	653b      	str	r3, [r7, #80]	; 0x50
 8004852:	2300      	movs	r3, #0
 8004854:	657b      	str	r3, [r7, #84]	; 0x54
 8004856:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d04d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800486c:	d028      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800486e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004872:	d821      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004874:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004878:	d024      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800487a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800487e:	d81b      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004884:	d00e      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800488a:	d815      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d110      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80048a2:	e012      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048a8:	332c      	adds	r3, #44	; 0x2c
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 f900 	bl	8006ab0 <RCCEx_PLL3_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80048c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80048ca:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d110      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80048d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80048dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e4:	4a02      	ldr	r2, [pc, #8]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80048ee:	bf00      	nop
 80048f0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80048f8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004908:	64bb      	str	r3, [r7, #72]	; 0x48
 800490a:	2300      	movs	r3, #0
 800490c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	f000 80b5 	beq.w	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004920:	4b9d      	ldr	r3, [pc, #628]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	4b9a      	ldr	r3, [pc, #616]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004934:	4a98      	ldr	r2, [pc, #608]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800493e:	4b96      	ldr	r3, [pc, #600]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800494c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004956:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	4a90      	ldr	r2, [pc, #576]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004962:	f7fd fbcd 	bl	8002100 <HAL_GetTick>
 8004966:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800496a:	e00b      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fd fbc8 	bl	8002100 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d903      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004982:	e005      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004984:	4b85      	ldr	r3, [pc, #532]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ed      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004990:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004994:	2b00      	cmp	r3, #0
 8004996:	d165      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004998:	4b7f      	ldr	r3, [pc, #508]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800499a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d023      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80049ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049b2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80049b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01b      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049be:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049cc:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049d2:	4a71      	ldr	r2, [pc, #452]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049dc:	4b6e      	ldr	r3, [pc, #440]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049e2:	4a6d      	ldr	r2, [pc, #436]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049ec:	4a6a      	ldr	r2, [pc, #424]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80049ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d019      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd fb7d 	bl	8002100 <HAL_GetTick>
 8004a06:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0a:	e00d      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fb78 	bl	8002100 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a16:	1ad2      	subs	r2, r2, r3
 8004a18:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d903      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8004a26:	e006      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ea      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004a36:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004a3e:	4b56      	ldr	r3, [pc, #344]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a50:	4a51      	ldr	r2, [pc, #324]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a52:	430b      	orrs	r3, r1
 8004a54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a5a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004a5e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8004a62:	e003      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004a68:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a6c:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7a:	4a47      	ldr	r2, [pc, #284]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a90:	643b      	str	r3, [r7, #64]	; 0x40
 8004a92:	2300      	movs	r3, #0
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
 8004a96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d042      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004aac:	d022      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004aae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004ab2:	d81b      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab8:	d011      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abe:	d815      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac8:	d110      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ace:	3308      	adds	r3, #8
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 ff55 	bl	8006980 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004adc:	e00d      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	4a2d      	ldr	r2, [pc, #180]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004aea:	e006      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004af2:	e002      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004af8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004afa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004b02:	4b25      	ldr	r3, [pc, #148]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b08:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b14:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004b22:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b34:	2300      	movs	r3, #0
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d032      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4e:	d00b      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b54:	d804      	bhi.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5e:	d007      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004b66:	e004      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004b68:	bf00      	nop
 8004b6a:	e002      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004b6c:	bf00      	nop
 8004b6e:	e000      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004b70:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b72:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d112      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b8c:	4a02      	ldr	r2, [pc, #8]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b94:	e008      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004b96:	bf00      	nop
 8004b98:	46020c00 	.word	0x46020c00
 8004b9c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004ba4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d019      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd0:	d105      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bd2:	4b88      	ldr	r3, [pc, #544]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	4a87      	ldr	r2, [pc, #540]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004bde:	4b85      	ldr	r3, [pc, #532]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004be4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bf0:	4a80      	ldr	r2, [pc, #512]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c06:	2300      	movs	r3, #0
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004c14:	4b77      	ldr	r3, [pc, #476]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c26:	4973      	ldr	r1, [pc, #460]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004c3a:	623b      	str	r3, [r7, #32]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d00c      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c5c:	4965      	ldr	r1, [pc, #404]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	d00c      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004c80:	4b5c      	ldr	r3, [pc, #368]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c86:	f023 0218 	bic.w	r2, r3, #24
 8004c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c92:	4958      	ldr	r1, [pc, #352]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	d032      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc4:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	4a4a      	ldr	r2, [pc, #296]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cce:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cdc:	d108      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 fe4b 	bl	8006980 <RCCEx_PLL2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 8004cf0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d0a:	493a      	ldr	r1, [pc, #232]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004d18:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d32:	460b      	mov	r3, r1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d03a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d44:	d00e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d4a:	d815      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d54:	d110      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d56:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	4a26      	ldr	r2, [pc, #152]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d60:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004d62:	e00e      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d68:	3308      	adds	r3, #8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fe08 	bl	8006980 <RCCEx_PLL2_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004d80:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d82:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9c:	4915      	ldr	r1, [pc, #84]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8004daa:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d00c      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dd0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ddc:	4905      	ldr	r1, [pc, #20]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004de4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	37e0      	adds	r7, #224	; 0xe0
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	46020c00 	.word	0x46020c00

08004df8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004e00:	4ba6      	ldr	r3, [pc, #664]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e08:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e0a:	4ba4      	ldr	r3, [pc, #656]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004e14:	4ba1      	ldr	r3, [pc, #644]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3301      	adds	r3, #1
 8004e20:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004e22:	4b9e      	ldr	r3, [pc, #632]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e2e:	4b9b      	ldr	r3, [pc, #620]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	08db      	lsrs	r3, r3, #3
 8004e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d062      	beq.n	8004f16 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	f200 8081 	bhi.w	8004f5a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d024      	beq.n	8004ea8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d17a      	bne.n	8004f5a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b89      	ldr	r3, [pc, #548]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e8a:	eddf 5a86 	vldr	s11, [pc, #536]	; 80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ea6:	e08f      	b.n	8004fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004ea8:	4b7c      	ldr	r3, [pc, #496]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004eb4:	4b79      	ldr	r3, [pc, #484]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	0f1b      	lsrs	r3, r3, #28
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	e006      	b.n	8004ece <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004ec0:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	0f1b      	lsrs	r3, r3, #28
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a76      	ldr	r2, [pc, #472]	; (80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	ee07 3a90 	vmov	s15, r3
 8004ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f14:	e058      	b.n	8004fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f20:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f28:	4b5c      	ldr	r3, [pc, #368]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3c:	eddf 5a59 	vldr	s11, [pc, #356]	; 80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f58:	e036      	b.n	8004fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004f5a:	4b50      	ldr	r3, [pc, #320]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004f66:	4b4d      	ldr	r3, [pc, #308]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0f1b      	lsrs	r3, r3, #28
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	0f1b      	lsrs	r3, r3, #28
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	4a49      	ldr	r2, [pc, #292]	; (80050a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004faa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80050a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fc6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004fc8:	4b34      	ldr	r3, [pc, #208]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d017      	beq.n	8005004 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fd4:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffa:	ee17 2a90 	vmov	r2, s15
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e002      	b.n	800500a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005020:	ee07 3a90 	vmov	s15, r3
 8005024:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800502c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005030:	edd7 6a07 	vldr	s13, [r7, #28]
 8005034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503c:	ee17 2a90 	vmov	r2, s15
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	e002      	b.n	800504c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800504c:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	0e1b      	lsrs	r3, r3, #24
 800505e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800506a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800506e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005072:	edd7 6a07 	vldr	s13, [r7, #28]
 8005076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800507a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507e:	ee17 2a90 	vmov	r2, s15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005086:	e002      	b.n	800508e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	609a      	str	r2, [r3, #8]
}
 800508e:	bf00      	nop
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	46020c00 	.word	0x46020c00
 80050a0:	4b742400 	.word	0x4b742400
 80050a4:	46000000 	.word	0x46000000
 80050a8:	0800efc0 	.word	0x0800efc0

080050ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80050b4:	4ba6      	ldr	r3, [pc, #664]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80050be:	4ba4      	ldr	r3, [pc, #656]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80050c8:	4ba1      	ldr	r3, [pc, #644]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3301      	adds	r3, #1
 80050d4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80050d6:	4b9e      	ldr	r3, [pc, #632]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80050e2:	4b9b      	ldr	r3, [pc, #620]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	08db      	lsrs	r3, r3, #3
 80050e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d062      	beq.n	80051ca <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b03      	cmp	r3, #3
 8005108:	f200 8081 	bhi.w	800520e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d024      	beq.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d17a      	bne.n	800520e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512a:	4b89      	ldr	r3, [pc, #548]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800513a:	ed97 6a02 	vldr	s12, [r7, #8]
 800513e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005142:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005146:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800514a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800515a:	e08f      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800515c:	4b7c      	ldr	r3, [pc, #496]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005168:	4b79      	ldr	r3, [pc, #484]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	0f1b      	lsrs	r3, r3, #28
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	e006      	b.n	8005182 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005174:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800517a:	041b      	lsls	r3, r3, #16
 800517c:	0f1b      	lsrs	r3, r3, #28
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	4a76      	ldr	r2, [pc, #472]	; (800535c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ac:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80051b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80051c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051c8:	e058      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80051d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051dc:	4b5c      	ldr	r3, [pc, #368]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e4:	ee07 3a90 	vmov	s15, r3
 80051e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80051ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80051f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80051f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80051fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005200:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800520c:	e036      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800520e:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800521a:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	0f1b      	lsrs	r3, r3, #28
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	e006      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	0f1b      	lsrs	r3, r3, #28
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	4a49      	ldr	r2, [pc, #292]	; (800535c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a02 	vldr	s12, [r7, #8]
 800525e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800527a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800527c:	4b34      	ldr	r3, [pc, #208]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d017      	beq.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	0a5b      	lsrs	r3, r3, #9
 800528e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800529a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800529e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ae:	ee17 2a90 	vmov	r2, s15
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e002      	b.n	80052be <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052ca:	4b21      	ldr	r3, [pc, #132]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80052dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f0:	ee17 2a90 	vmov	r2, s15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005300:	4b13      	ldr	r3, [pc, #76]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d017      	beq.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	0e1b      	lsrs	r3, r3, #24
 8005312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800531e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005322:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005326:	edd7 6a07 	vldr	s13, [r7, #28]
 800532a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800532e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005332:	ee17 2a90 	vmov	r2, s15
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800533a:	e002      	b.n	8005342 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
}
 8005342:	bf00      	nop
 8005344:	3724      	adds	r7, #36	; 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	46020c00 	.word	0x46020c00
 8005354:	4b742400 	.word	0x4b742400
 8005358:	46000000 	.word	0x46000000
 800535c:	0800efc0 	.word	0x0800efc0

08005360 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005368:	4ba6      	ldr	r3, [pc, #664]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005370:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005372:	4ba4      	ldr	r3, [pc, #656]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800537c:	4ba1      	ldr	r3, [pc, #644]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	3301      	adds	r3, #1
 8005388:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800538a:	4b9e      	ldr	r3, [pc, #632]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005396:	4b9b      	ldr	r3, [pc, #620]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d062      	beq.n	800547e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	f200 8081 	bhi.w	80054c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d024      	beq.n	8005410 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d17a      	bne.n	80054c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b89      	ldr	r3, [pc, #548]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80053ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80053f2:	eddf 5a86 	vldr	s11, [pc, #536]	; 800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800540e:	e08f      	b.n	8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005410:	4b7c      	ldr	r3, [pc, #496]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800541c:	4b79      	ldr	r3, [pc, #484]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	0f1b      	lsrs	r3, r3, #28
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	e006      	b.n	8005436 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005428:	4b76      	ldr	r3, [pc, #472]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800542a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	0f1b      	lsrs	r3, r3, #28
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	4a76      	ldr	r2, [pc, #472]	; (8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005460:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005470:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005478:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800547c:	e058      	b.n	8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005488:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800548c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005490:	4b5c      	ldr	r3, [pc, #368]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80054a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a4:	eddf 5a59 	vldr	s11, [pc, #356]	; 800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80054a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80054ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80054b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80054b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054c0:	e036      	b.n	8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80054c2:	4b50      	ldr	r3, [pc, #320]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80054ce:	4b4d      	ldr	r3, [pc, #308]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	0f1b      	lsrs	r3, r3, #28
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	e006      	b.n	80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80054da:	4b4a      	ldr	r3, [pc, #296]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80054dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	0f1b      	lsrs	r3, r3, #28
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	4a49      	ldr	r2, [pc, #292]	; (8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80054ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005512:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005522:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800552e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005530:	4b34      	ldr	r3, [pc, #208]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800553c:	4b31      	ldr	r3, [pc, #196]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	0a5b      	lsrs	r3, r3, #9
 8005542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800554e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005552:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005556:	edd7 6a07 	vldr	s13, [r7, #28]
 800555a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005562:	ee17 2a90 	vmov	r2, s15
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e002      	b.n	8005572 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005572:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800557e:	4b21      	ldr	r3, [pc, #132]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005594:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005598:	edd7 6a07 	vldr	s13, [r7, #28]
 800559c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a4:	ee17 2a90 	vmov	r2, s15
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]
 80055ac:	e002      	b.n	80055b4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055c0:	4b10      	ldr	r3, [pc, #64]	; (8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	0e1b      	lsrs	r3, r3, #24
 80055c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80055d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055da:	edd7 6a07 	vldr	s13, [r7, #28]
 80055de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e6:	ee17 2a90 	vmov	r2, s15
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055ee:	e002      	b.n	80055f6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
}
 80055f6:	bf00      	nop
 80055f8:	3724      	adds	r7, #36	; 0x24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	46020c00 	.word	0x46020c00
 8005608:	4b742400 	.word	0x4b742400
 800560c:	46000000 	.word	0x46000000
 8005610:	0800efc0 	.word	0x0800efc0

08005614 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08e      	sub	sp, #56	; 0x38
 8005618:	af00      	add	r7, sp, #0
 800561a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800561e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005622:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005626:	430b      	orrs	r3, r1
 8005628:	d145      	bne.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800562a:	4baa      	ldr	r3, [pc, #680]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005636:	4ba7      	ldr	r3, [pc, #668]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d108      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564a:	d104      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800564c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	f001 b987 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005656:	4b9f      	ldr	r3, [pc, #636]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800565c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005664:	d114      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566c:	d110      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800566e:	4b99      	ldr	r3, [pc, #612]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567c:	d103      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800567e:	23fa      	movs	r3, #250	; 0xfa
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005682:	f001 b96f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005686:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800568c:	f001 b96a 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005690:	4b90      	ldr	r3, [pc, #576]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800569c:	d107      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a4:	d103      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80056a6:	4b8c      	ldr	r3, [pc, #560]	; (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	f001 b95b 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	f001 b957 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80056b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ba:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80056be:	430b      	orrs	r3, r1
 80056c0:	d151      	bne.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80056c2:	4b84      	ldr	r3, [pc, #528]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80056c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056c8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d035      	beq.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d841      	bhi.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b60      	cmp	r3, #96	; 0x60
 80056de:	d02a      	beq.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	2b60      	cmp	r3, #96	; 0x60
 80056e4:	d83b      	bhi.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d009      	beq.n	8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d835      	bhi.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00c      	beq.n	8005712 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d012      	beq.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80056fe:	e02e      	b.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff fb77 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570e:	f001 b929 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005712:	f107 0318 	add.w	r3, r7, #24
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fcc8 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005720:	f001 b920 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fe19 	bl	8005360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005732:	f001 b917 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005736:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800573c:	f001 b912 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005740:	4b64      	ldr	r3, [pc, #400]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574c:	d103      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800574e:	4b63      	ldr	r3, [pc, #396]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005752:	f001 b907 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800575a:	f001 b903 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005762:	f001 b8ff 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800576a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800576e:	430b      	orrs	r3, r1
 8005770:	d158      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005772:	4b58      	ldr	r3, [pc, #352]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800577c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d03b      	beq.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d846      	bhi.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005794:	d02e      	beq.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579c:	d83e      	bhi.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a4:	d00b      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d836      	bhi.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ba:	d012      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80057bc:	e02e      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fb18 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057cc:	f001 b8ca 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d0:	f107 0318 	add.w	r3, r7, #24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fc69 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057de:	f001 b8c1 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e2:	f107 030c 	add.w	r3, r7, #12
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fdba 	bl	8005360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057f0:	f001 b8b8 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80057f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057fa:	f001 b8b3 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057fe:	4b35      	ldr	r3, [pc, #212]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580a:	d103      	bne.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800580c:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800580e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005810:	f001 b8a8 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005818:	f001 b8a4 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005820:	f001 b8a0 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005828:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800582c:	430b      	orrs	r3, r1
 800582e:	d16e      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005830:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005836:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800583a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005842:	d034      	beq.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800584a:	d85c      	bhi.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005852:	d00b      	beq.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800585a:	d854      	bhi.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	d016      	beq.n	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005868:	d009      	beq.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800586a:	e04c      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800586c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fac1 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800587a:	f001 b873 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800587e:	f107 0318 	add.w	r3, r7, #24
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fc12 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800588c:	f001 b86a 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005890:	4b10      	ldr	r3, [pc, #64]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589c:	d103      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800589e:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058a2:	f001 b85f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058aa:	f001 b85b 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	d121      	bne.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00e      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80058c6:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	e00f      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80058d2:	bf00      	nop
 80058d4:	46020c00 	.word	0x46020c00
 80058d8:	0007a120 	.word	0x0007a120
 80058dc:	00f42400 	.word	0x00f42400
 80058e0:	02dc6c00 	.word	0x02dc6c00
 80058e4:	4ba7      	ldr	r3, [pc, #668]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80058e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	0e1b      	lsrs	r3, r3, #24
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	4aa5      	ldr	r2, [pc, #660]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80058f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058fa:	f001 b833 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005902:	f001 b82f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800590a:	f001 b82b 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800590e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005912:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005916:	430b      	orrs	r3, r1
 8005918:	d17f      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800591a:	4b9a      	ldr	r3, [pc, #616]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800591c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d165      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800592c:	4b95      	ldr	r3, [pc, #596]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800592e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005932:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005936:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800593e:	d034      	beq.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005946:	d853      	bhi.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800594e:	d00b      	beq.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005956:	d84b      	bhi.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005964:	d009      	beq.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005966:	e043      	b.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff fa43 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005976:	f000 bff5 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597a:	f107 0318 	add.w	r3, r7, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fb94 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005988:	f000 bfec 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800598c:	4b7d      	ldr	r3, [pc, #500]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005998:	d103      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800599a:	4b7c      	ldr	r3, [pc, #496]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800599e:	f000 bfe1 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80059a6:	f000 bfdd 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059aa:	4b76      	ldr	r3, [pc, #472]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d118      	bne.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059b6:	4b73      	ldr	r3, [pc, #460]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80059c2:	4b70      	ldr	r3, [pc, #448]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0e1b      	lsrs	r3, r3, #24
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	e006      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80059ce:	4b6d      	ldr	r3, [pc, #436]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80059d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	0e1b      	lsrs	r3, r3, #24
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	4a6a      	ldr	r2, [pc, #424]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80059de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80059e4:	f000 bfbe 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80059ec:	f000 bfba 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80059f4:	f000 bfb6 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059fe:	d108      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff f9f7 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0e:	f000 bfa9 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
 8005a16:	f000 bfa5 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1e:	1e51      	subs	r1, r2, #1
 8005a20:	430b      	orrs	r3, r1
 8005a22:	d136      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005a24:	4b57      	ldr	r3, [pc, #348]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005a36:	f7fe fb55 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8005a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a3c:	f000 bf92 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d104      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a46:	f7fe fa1d 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005a4a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a4c:	f000 bf8a 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005a50:	4b4c      	ldr	r3, [pc, #304]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5c:	d106      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d103      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005a64:	4b4a      	ldr	r3, [pc, #296]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
 8005a68:	f000 bf7c 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005a6c:	4b45      	ldr	r3, [pc, #276]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d107      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d104      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
 8005a86:	f000 bf6d 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8e:	f000 bf69 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a96:	1e91      	subs	r1, r2, #2
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	d136      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005a9c:	4b39      	ldr	r3, [pc, #228]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005aae:	f7fe fb05 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8005ab2:	6378      	str	r0, [r7, #52]	; 0x34
 8005ab4:	f000 bf56 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d104      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fe f9e1 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005ac2:	6378      	str	r0, [r7, #52]	; 0x34
 8005ac4:	f000 bf4e 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005ac8:	4b2e      	ldr	r3, [pc, #184]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad4:	d106      	bne.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d103      	bne.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8005adc:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae0:	f000 bf40 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005ae4:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d107      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d104      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8005af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
 8005afe:	f000 bf31 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	f000 bf2d 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0e:	1f11      	subs	r1, r2, #4
 8005b10:	430b      	orrs	r3, r1
 8005b12:	d13f      	bne.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005b26:	f7fe fac9 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8005b2a:	6378      	str	r0, [r7, #52]	; 0x34
 8005b2c:	f000 bf1a 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d104      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005b36:	f7fe f9a5 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005b3a:	6378      	str	r0, [r7, #52]	; 0x34
 8005b3c:	f000 bf12 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005b40:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d103      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
 8005b58:	f000 bf04 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d107      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	2b30      	cmp	r3, #48	; 0x30
 8005b6e:	d104      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8005b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
 8005b76:	f000 bef5 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7e:	f000 bef1 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005b82:	bf00      	nop
 8005b84:	46020c00 	.word	0x46020c00
 8005b88:	0800efc0 	.word	0x0800efc0
 8005b8c:	02dc6c00 	.word	0x02dc6c00
 8005b90:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b98:	f1a2 0108 	sub.w	r1, r2, #8
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	d136      	bne.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005ba0:	4ba4      	ldr	r3, [pc, #656]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005bb2:	f7fe fa83 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8005bb6:	6378      	str	r0, [r7, #52]	; 0x34
 8005bb8:	f000 bed4 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d104      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005bc2:	f7fe f95f 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005bc6:	6378      	str	r0, [r7, #52]	; 0x34
 8005bc8:	f000 becc 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005bcc:	4b99      	ldr	r3, [pc, #612]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2b80      	cmp	r3, #128	; 0x80
 8005bde:	d103      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8005be0:	4b95      	ldr	r3, [pc, #596]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
 8005be4:	f000 bebe 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005be8:	4b92      	ldr	r3, [pc, #584]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d107      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2bc0      	cmp	r3, #192	; 0xc0
 8005bfa:	d104      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
 8005c02:	f000 beaf 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0a:	f000 beab 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c12:	f1a2 0110 	sub.w	r1, r2, #16
 8005c16:	430b      	orrs	r3, r1
 8005c18:	d139      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005c1a:	4b86      	ldr	r3, [pc, #536]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c24:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f7fe fa46 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8005c30:	6378      	str	r0, [r7, #52]	; 0x34
 8005c32:	f000 be97 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3c:	d104      	bne.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005c3e:	f7fe f921 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005c42:	6378      	str	r0, [r7, #52]	; 0x34
 8005c44:	f000 be8e 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005c48:	4b7a      	ldr	r3, [pc, #488]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d107      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5c:	d103      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8005c5e:	4b76      	ldr	r3, [pc, #472]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
 8005c62:	f000 be7f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005c66:	4b73      	ldr	r3, [pc, #460]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d108      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7a:	d104      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
 8005c82:	f000 be6f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8a:	f000 be6b 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c92:	f1a2 0120 	sub.w	r1, r2, #32
 8005c96:	430b      	orrs	r3, r1
 8005c98:	d158      	bne.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005c9a:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005cac:	f7fe fa2e 	bl	800410c <HAL_RCC_GetPCLK3Freq>
 8005cb0:	6378      	str	r0, [r7, #52]	; 0x34
 8005cb2:	f000 be57 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d104      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005cbc:	f7fe f8e2 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005cc0:	6378      	str	r0, [r7, #52]	; 0x34
 8005cc2:	f000 be4f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005cc6:	4b5b      	ldr	r3, [pc, #364]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d106      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d103      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8005cda:	4b57      	ldr	r3, [pc, #348]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cde:	f000 be41 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005ce2:	4b54      	ldr	r3, [pc, #336]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d107      	bne.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d104      	bne.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfc:	f000 be32 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005d00:	4b4c      	ldr	r3, [pc, #304]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d11b      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d118      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d12:	4b48      	ldr	r3, [pc, #288]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d005      	beq.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8005d1e:	4b45      	ldr	r3, [pc, #276]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	0e1b      	lsrs	r3, r3, #24
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	e006      	b.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005d2a:	4b42      	ldr	r3, [pc, #264]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	0e1b      	lsrs	r3, r3, #24
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d40:	f000 be10 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
 8005d48:	f000 be0c 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d50:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005d54:	430b      	orrs	r3, r1
 8005d56:	d173      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005d58:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6a:	d104      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d6c:	f7fe f88a 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8005d70:	6378      	str	r0, [r7, #52]	; 0x34
 8005d72:	f000 bdf7 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7c:	d108      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d7e:	f107 0318 	add.w	r3, r7, #24
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff f992 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	f000 bdea 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d104      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005d96:	f7fe f977 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8005d9a:	6378      	str	r0, [r7, #52]	; 0x34
 8005d9c:	f000 bde2 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005da6:	d122      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005da8:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d118      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005db4:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	0e1b      	lsrs	r3, r3, #24
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	e006      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
 8005de2:	f000 bdbf 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	f000 bdbb 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dfa:	d107      	bne.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e02:	d103      	bne.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
 8005e08:	f000 bdac 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e18:	d107      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e20:	d103      	bne.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
 8005e26:	f000 bd9d 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2e:	f000 bd99 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005e32:	bf00      	nop
 8005e34:	46020c00 	.word	0x46020c00
 8005e38:	00f42400 	.word	0x00f42400
 8005e3c:	0800efc0 	.word	0x0800efc0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e44:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	d158      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005e4c:	4bad      	ldr	r3, [pc, #692]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005e4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d84b      	bhi.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e9d 	.word	0x08005e9d
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e8b 	.word	0x08005e8b
 8005e70:	08005ea7 	.word	0x08005ea7
 8005e74:	08005eb1 	.word	0x08005eb1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe ffbb 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e86:	f000 bd6d 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fa66 	bl	8005360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e98:	f000 bd64 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005e9c:	f7fe f8f4 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8005ea0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ea2:	f000 bd5f 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005ea6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eac:	f000 bd5a 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005eb0:	4b94      	ldr	r3, [pc, #592]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d118      	bne.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ebc:	4b91      	ldr	r3, [pc, #580]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8005ec8:	4b8e      	ldr	r3, [pc, #568]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	0e1b      	lsrs	r3, r3, #24
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	e006      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8005ed4:	4b8b      	ldr	r3, [pc, #556]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eda:	041b      	lsls	r3, r3, #16
 8005edc:	0e1b      	lsrs	r3, r3, #24
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	4a89      	ldr	r2, [pc, #548]	; (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005eea:	f000 bd3b 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ef2:	f000 bd37 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005efa:	f000 bd33 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f02:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005f06:	430b      	orrs	r3, r1
 8005f08:	d167      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005f0a:	4b7e      	ldr	r3, [pc, #504]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f1c:	d036      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f24:	d855      	bhi.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f2c:	d029      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f34:	d84d      	bhi.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f3c:	d013      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f44:	d845      	bhi.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f52:	d13e      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe ff4d 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f62:	f000 bcff 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff f9f8 	bl	8005360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f74:	f000 bcf6 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005f78:	f7fe f886 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 8005f7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005f7e:	f000 bcf1 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f88:	f000 bcec 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005f8c:	4b5d      	ldr	r3, [pc, #372]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d118      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f98:	4b5a      	ldr	r3, [pc, #360]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8005fa4:	4b57      	ldr	r3, [pc, #348]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	0e1b      	lsrs	r3, r3, #24
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	e006      	b.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005fb0:	4b54      	ldr	r3, [pc, #336]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	0e1b      	lsrs	r3, r3, #24
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	4a52      	ldr	r2, [pc, #328]	; (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8005fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fc6:	f000 bccd 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fce:	f000 bcc9 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd6:	f000 bcc5 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fde:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	d14c      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8005fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ff0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005ff8:	f7fe f860 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8005ffc:	6378      	str	r0, [r7, #52]	; 0x34
 8005ffe:	f000 bcb1 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d104      	bne.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800600a:	f7fd ff3b 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 800600e:	6378      	str	r0, [r7, #52]	; 0x34
 8006010:	f000 bca8 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006014:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800601c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006020:	d107      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006028:	d103      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800602a:	4b38      	ldr	r3, [pc, #224]	; (800610c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	f000 bc99 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006032:	4b34      	ldr	r3, [pc, #208]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b20      	cmp	r3, #32
 800603c:	d11c      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006044:	d118      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006046:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006052:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0e1b      	lsrs	r3, r3, #24
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	e006      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800605e:	4b29      	ldr	r3, [pc, #164]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	0e1b      	lsrs	r3, r3, #24
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	4a26      	ldr	r2, [pc, #152]	; (8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
 8006074:	f000 bc76 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
 800607c:	f000 bc72 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006084:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006088:	430b      	orrs	r3, r1
 800608a:	d152      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800608c:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800608e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006092:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006096:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	d104      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800609e:	f7fe f80d 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 80060a2:	6378      	str	r0, [r7, #52]	; 0x34
 80060a4:	f000 bc5e 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d104      	bne.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060b0:	f7fd fee8 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 80060b4:	6378      	str	r0, [r7, #52]	; 0x34
 80060b6:	f000 bc55 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c6:	d107      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ce:	d103      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80060d0:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
 80060d4:	f000 bc46 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d122      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ea:	d11e      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80060f8:	4b02      	ldr	r3, [pc, #8]	; (8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	0e1b      	lsrs	r3, r3, #24
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	e00c      	b.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006104:	46020c00 	.word	0x46020c00
 8006108:	0800efc0 	.word	0x0800efc0
 800610c:	00f42400 	.word	0x00f42400
 8006110:	4ba1      	ldr	r3, [pc, #644]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006116:	041b      	lsls	r3, r3, #16
 8006118:	0e1b      	lsrs	r3, r3, #24
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	4a9f      	ldr	r2, [pc, #636]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
 8006126:	f000 bc1d 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
 800612e:	f000 bc19 	b.w	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006136:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800613a:	430b      	orrs	r3, r1
 800613c:	d151      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800613e:	4b96      	ldr	r3, [pc, #600]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006144:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006148:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2bc0      	cmp	r3, #192	; 0xc0
 800614e:	d024      	beq.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	2bc0      	cmp	r3, #192	; 0xc0
 8006154:	d842      	bhi.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b80      	cmp	r3, #128	; 0x80
 800615a:	d00d      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d83c      	bhi.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d011      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800616e:	e035      	b.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006170:	f7fd ffcc 	bl	800410c <HAL_RCC_GetPCLK3Freq>
 8006174:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006176:	e3f5      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006178:	4b87      	ldr	r3, [pc, #540]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006184:	d102      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006186:	4b86      	ldr	r3, [pc, #536]	; (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800618a:	e3eb      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006190:	e3e8      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006192:	f7fd fe77 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8006196:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006198:	e3e4      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800619a:	4b7f      	ldr	r3, [pc, #508]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d117      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061a6:	4b7c      	ldr	r3, [pc, #496]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80061b2:	4b79      	ldr	r3, [pc, #484]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0e1b      	lsrs	r3, r3, #24
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80061be:	4b76      	ldr	r3, [pc, #472]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80061c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061c4:	041b      	lsls	r3, r3, #16
 80061c6:	0e1b      	lsrs	r3, r3, #24
 80061c8:	f003 030f 	and.w	r3, r3, #15
 80061cc:	4a73      	ldr	r2, [pc, #460]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80061ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061d4:	e3c6      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061da:	e3c3      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e0:	e3c0      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80061e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e6:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80061ea:	430b      	orrs	r3, r1
 80061ec:	d147      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80061ee:	4b6a      	ldr	r3, [pc, #424]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80061f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061f8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fd ff5c 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8006204:	6378      	str	r0, [r7, #52]	; 0x34
 8006206:	e3ad      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800620e:	d103      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006210:	f7fd fe38 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8006214:	6378      	str	r0, [r7, #52]	; 0x34
 8006216:	e3a5      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006218:	4b5f      	ldr	r3, [pc, #380]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006224:	d106      	bne.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622c:	d102      	bne.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800622e:	4b5c      	ldr	r3, [pc, #368]	; (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
 8006232:	e397      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006234:	4b58      	ldr	r3, [pc, #352]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b20      	cmp	r3, #32
 800623e:	d11b      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006246:	d117      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006248:	4b53      	ldr	r3, [pc, #332]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006254:	4b50      	ldr	r3, [pc, #320]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	0e1b      	lsrs	r3, r3, #24
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	e006      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006260:	4b4d      	ldr	r3, [pc, #308]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	0e1b      	lsrs	r3, r3, #24
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	4a4b      	ldr	r2, [pc, #300]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
 8006276:	e375      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
 800627c:	e372      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800627e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006282:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006286:	430b      	orrs	r3, r1
 8006288:	d164      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800628a:	4b43      	ldr	r3, [pc, #268]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800628c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006294:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2b00      	cmp	r3, #0
 800629a:	d120      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800629c:	4b3e      	ldr	r3, [pc, #248]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d117      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062a8:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	0e1b      	lsrs	r3, r3, #24
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	e006      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80062c0:	4b35      	ldr	r3, [pc, #212]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80062c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	4a33      	ldr	r2, [pc, #204]	; (800639c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80062d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
 80062d6:	e345      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
 80062dc:	e342      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80062de:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80062e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ec:	d112      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f4:	d10e      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80062f6:	4b28      	ldr	r3, [pc, #160]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80062f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006304:	d102      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006306:	23fa      	movs	r3, #250	; 0xfa
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800630a:	e32b      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800630c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006312:	e327      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006314:	4b20      	ldr	r3, [pc, #128]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d106      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006328:	d102      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800632a:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	e319      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006330:	4b19      	ldr	r3, [pc, #100]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d107      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006344:	d103      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
 800634c:	e30a      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
 8006352:	e307      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006358:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800635c:	430b      	orrs	r3, r1
 800635e:	d16b      	bne.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006366:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800636a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2b00      	cmp	r3, #0
 8006370:	d127      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b20      	cmp	r3, #32
 800637c:	d11e      	bne.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800637e:	4b06      	ldr	r3, [pc, #24]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800638a:	4b03      	ldr	r3, [pc, #12]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	0e1b      	lsrs	r3, r3, #24
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	e00d      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8006396:	bf00      	nop
 8006398:	46020c00 	.word	0x46020c00
 800639c:	0800efc0 	.word	0x0800efc0
 80063a0:	00f42400 	.word	0x00f42400
 80063a4:	4b94      	ldr	r3, [pc, #592]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80063a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	0e1b      	lsrs	r3, r3, #24
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	4a92      	ldr	r2, [pc, #584]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80063b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	e2d3      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
 80063c0:	e2d0      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80063c2:	4b8d      	ldr	r3, [pc, #564]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063d0:	d112      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d8:	d10e      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063da:	4b87      	ldr	r3, [pc, #540]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80063dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063e8:	d102      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80063ea:	23fa      	movs	r3, #250	; 0xfa
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063ee:	e2b9      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80063f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063f6:	e2b5      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80063f8:	4b7f      	ldr	r3, [pc, #508]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006404:	d106      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640c:	d102      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800640e:	4b7c      	ldr	r3, [pc, #496]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
 8006412:	e2a7      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006414:	4b78      	ldr	r3, [pc, #480]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d107      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006428:	d103      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
 8006430:	e298      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	e295      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006440:	430b      	orrs	r3, r1
 8006442:	d147      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006444:	4b6c      	ldr	r3, [pc, #432]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800644a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800644e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006456:	f7fd fe31 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 800645a:	6378      	str	r0, [r7, #52]	; 0x34
 800645c:	e282      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800645e:	4b66      	ldr	r3, [pc, #408]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646c:	d112      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006474:	d10e      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006476:	4b60      	ldr	r3, [pc, #384]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800647c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006484:	d102      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006486:	23fa      	movs	r3, #250	; 0xfa
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800648a:	e26b      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800648c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006492:	e267      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006494:	4b58      	ldr	r3, [pc, #352]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a0:	d106      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064a8:	d102      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80064aa:	4b55      	ldr	r3, [pc, #340]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	e259      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80064b0:	4b51      	ldr	r3, [pc, #324]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80064b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d107      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064c4:	d103      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
 80064cc:	e24a      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
 80064d2:	e247      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80064d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80064dc:	430b      	orrs	r3, r1
 80064de:	d12d      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80064e0:	4b45      	ldr	r3, [pc, #276]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80064e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80064ec:	4b42      	ldr	r3, [pc, #264]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f8:	d105      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006500:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
 8006504:	e22e      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800650c:	d107      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800650e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fc70 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	e222      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006524:	d107      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006526:	f107 0318 	add.w	r3, r7, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fdbe 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
 8006534:	e216      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	e213      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800653c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006540:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006544:	430b      	orrs	r3, r1
 8006546:	d15d      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800654a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800654e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800655a:	d028      	beq.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006562:	d845      	bhi.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656a:	d013      	beq.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006572:	d83d      	bhi.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006580:	d004      	beq.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006582:	e035      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fd fdae 	bl	80040e4 <HAL_RCC_GetPCLK2Freq>
 8006588:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800658a:	e1eb      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800658c:	f7fd fc7a 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8006590:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006592:	e1e7      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a0:	d102      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80065a2:	4b17      	ldr	r3, [pc, #92]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065a6:	e1dd      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ac:	e1da      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d117      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065ba:	4b0f      	ldr	r3, [pc, #60]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80065c6:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	0e1b      	lsrs	r3, r3, #24
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	e006      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80065d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	0e1b      	lsrs	r3, r3, #24
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	4a06      	ldr	r2, [pc, #24]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80065e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065e8:	e1bc      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ee:	e1b9      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065f4:	e1b6      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80065f6:	bf00      	nop
 80065f8:	46020c00 	.word	0x46020c00
 80065fc:	0800efc0 	.word	0x0800efc0
 8006600:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006608:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800660c:	430b      	orrs	r3, r1
 800660e:	d156      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006610:	4ba5      	ldr	r3, [pc, #660]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006622:	d028      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800662a:	d845      	bhi.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006632:	d013      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800663a:	d83d      	bhi.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006648:	d004      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800664a:	e035      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800664c:	f7fd fd36 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8006650:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006652:	e187      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006654:	f7fd fc16 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8006658:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800665a:	e183      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800665c:	4b92      	ldr	r3, [pc, #584]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800666a:	4b90      	ldr	r3, [pc, #576]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800666e:	e179      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006674:	e176      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006676:	4b8c      	ldr	r3, [pc, #560]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b20      	cmp	r3, #32
 8006680:	d117      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006682:	4b89      	ldr	r3, [pc, #548]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800668e:	4b86      	ldr	r3, [pc, #536]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	0e1b      	lsrs	r3, r3, #24
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800669a:	4b83      	ldr	r3, [pc, #524]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800669c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	0e1b      	lsrs	r3, r3, #24
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	4a81      	ldr	r2, [pc, #516]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80066aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066b0:	e158      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066b6:	e155      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066bc:	e152      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80066be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80066c6:	430b      	orrs	r3, r1
 80066c8:	d177      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80066ca:	4b77      	ldr	r3, [pc, #476]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80066cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066d0:	f003 0318 	and.w	r3, r3, #24
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b18      	cmp	r3, #24
 80066da:	d86b      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006749 	.word	0x08006749
 80066e8:	080067b5 	.word	0x080067b5
 80066ec:	080067b5 	.word	0x080067b5
 80066f0:	080067b5 	.word	0x080067b5
 80066f4:	080067b5 	.word	0x080067b5
 80066f8:	080067b5 	.word	0x080067b5
 80066fc:	080067b5 	.word	0x080067b5
 8006700:	080067b5 	.word	0x080067b5
 8006704:	08006751 	.word	0x08006751
 8006708:	080067b5 	.word	0x080067b5
 800670c:	080067b5 	.word	0x080067b5
 8006710:	080067b5 	.word	0x080067b5
 8006714:	080067b5 	.word	0x080067b5
 8006718:	080067b5 	.word	0x080067b5
 800671c:	080067b5 	.word	0x080067b5
 8006720:	080067b5 	.word	0x080067b5
 8006724:	08006759 	.word	0x08006759
 8006728:	080067b5 	.word	0x080067b5
 800672c:	080067b5 	.word	0x080067b5
 8006730:	080067b5 	.word	0x080067b5
 8006734:	080067b5 	.word	0x080067b5
 8006738:	080067b5 	.word	0x080067b5
 800673c:	080067b5 	.word	0x080067b5
 8006740:	080067b5 	.word	0x080067b5
 8006744:	08006773 	.word	0x08006773
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006748:	f7fd fce0 	bl	800410c <HAL_RCC_GetPCLK3Freq>
 800674c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800674e:	e109      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006750:	f7fd fb98 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8006754:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006756:	e105      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006758:	4b53      	ldr	r3, [pc, #332]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d102      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006766:	4b51      	ldr	r3, [pc, #324]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800676a:	e0fb      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006770:	e0f8      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006772:	4b4d      	ldr	r3, [pc, #308]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b20      	cmp	r3, #32
 800677c:	d117      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800677e:	4b4a      	ldr	r3, [pc, #296]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800678a:	4b47      	ldr	r3, [pc, #284]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0e1b      	lsrs	r3, r3, #24
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006796:	4b44      	ldr	r3, [pc, #272]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	0e1b      	lsrs	r3, r3, #24
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	4a42      	ldr	r2, [pc, #264]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80067a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067ac:	e0da      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b2:	e0d7      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b8:	e0d4      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80067ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067be:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80067c2:	430b      	orrs	r3, r1
 80067c4:	d155      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80067c6:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80067c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80067d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067d8:	d013      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067e0:	d844      	bhi.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067e8:	d013      	beq.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f0:	d83c      	bhi.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d014      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fe:	d014      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006800:	e034      	b.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006802:	f107 0318 	add.w	r3, r7, #24
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fc50 	bl	80050ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006810:	e0a8      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe faee 	bl	8004df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006820:	e0a0      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006822:	f7fd fb2f 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8006826:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006828:	e09c      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800682a:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d117      	bne.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006836:	4b1c      	ldr	r3, [pc, #112]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006842:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	0e1b      	lsrs	r3, r3, #24
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	e006      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	0e1b      	lsrs	r3, r3, #24
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800685e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006864:	e07e      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800686a:	e07b      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006870:	e078      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006876:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800687a:	430b      	orrs	r3, r1
 800687c:	d138      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006888:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d10d      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800689e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
 80068a4:	e05e      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80068a6:	bf00      	nop
 80068a8:	46020c00 	.word	0x46020c00
 80068ac:	00f42400 	.word	0x00f42400
 80068b0:	0800efc0 	.word	0x0800efc0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80068b4:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80068b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c2:	d112      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ca:	d10e      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068cc:	4b28      	ldr	r3, [pc, #160]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80068ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068da:	d102      	bne.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80068dc:	23fa      	movs	r3, #250	; 0xfa
 80068de:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068e0:	e040      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80068e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068e8:	e03c      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
 80068ee:	e039      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80068f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80068f8:	430b      	orrs	r3, r1
 80068fa:	d131      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80068fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006902:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006906:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006908:	4b19      	ldr	r3, [pc, #100]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006914:	d105      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800691c:	4b15      	ldr	r3, [pc, #84]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
 8006920:	e020      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800692a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692e:	d106      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	d102      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
 800693c:	e012      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d106      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006952:	d102      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006954:	4b09      	ldr	r3, [pc, #36]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
 8006958:	e004      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
 800695e:	e001      	b.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006966:	4618      	mov	r0, r3
 8006968:	3738      	adds	r7, #56	; 0x38
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	46020c00 	.word	0x46020c00
 8006974:	02dc6c00 	.word	0x02dc6c00
 8006978:	016e3600 	.word	0x016e3600
 800697c:	00f42400 	.word	0x00f42400

08006980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006988:	4b47      	ldr	r3, [pc, #284]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a46      	ldr	r2, [pc, #280]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 800698e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006992:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006994:	f7fb fbb4 	bl	8002100 <HAL_GetTick>
 8006998:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800699a:	e008      	b.n	80069ae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800699c:	f7fb fbb0 	bl	8002100 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e077      	b.n	8006a9e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069ae:	4b3e      	ldr	r3, [pc, #248]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80069ba:	4b3b      	ldr	r3, [pc, #236]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069c2:	f023 0303 	bic.w	r3, r3, #3
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6811      	ldr	r1, [r2, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6852      	ldr	r2, [r2, #4]
 80069ce:	3a01      	subs	r2, #1
 80069d0:	0212      	lsls	r2, r2, #8
 80069d2:	430a      	orrs	r2, r1
 80069d4:	4934      	ldr	r1, [pc, #208]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80069da:	4b33      	ldr	r3, [pc, #204]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 80069dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069de:	4b33      	ldr	r3, [pc, #204]	; (8006aac <RCCEx_PLL2_Config+0x12c>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6892      	ldr	r2, [r2, #8]
 80069e6:	3a01      	subs	r2, #1
 80069e8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68d2      	ldr	r2, [r2, #12]
 80069f0:	3a01      	subs	r2, #1
 80069f2:	0252      	lsls	r2, r2, #9
 80069f4:	b292      	uxth	r2, r2
 80069f6:	4311      	orrs	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6912      	ldr	r2, [r2, #16]
 80069fc:	3a01      	subs	r2, #1
 80069fe:	0412      	lsls	r2, r2, #16
 8006a00:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006a04:	4311      	orrs	r1, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6952      	ldr	r2, [r2, #20]
 8006a0a:	3a01      	subs	r2, #1
 8006a0c:	0612      	lsls	r2, r2, #24
 8006a0e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006a12:	430a      	orrs	r2, r1
 8006a14:	4924      	ldr	r1, [pc, #144]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	f023 020c 	bic.w	r2, r3, #12
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	4920      	ldr	r1, [pc, #128]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	491c      	ldr	r1, [pc, #112]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	4a1a      	ldr	r2, [pc, #104]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a40:	f023 0310 	bic.w	r3, r3, #16
 8006a44:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	69d2      	ldr	r2, [r2, #28]
 8006a56:	00d2      	lsls	r2, r2, #3
 8006a58:	4913      	ldr	r1, [pc, #76]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a64:	f043 0310 	orr.w	r3, r3, #16
 8006a68:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a74:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a76:	f7fb fb43 	bl	8002100 <HAL_GetTick>
 8006a7a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a7c:	e008      	b.n	8006a90 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a7e:	f7fb fb3f 	bl	8002100 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e006      	b.n	8006a9e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <RCCEx_PLL2_Config+0x128>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0

}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	46020c00 	.word	0x46020c00
 8006aac:	80800000 	.word	0x80800000

08006ab0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006ab8:	4b47      	ldr	r3, [pc, #284]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a46      	ldr	r2, [pc, #280]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ac2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ac4:	f7fb fb1c 	bl	8002100 <HAL_GetTick>
 8006ac8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aca:	e008      	b.n	8006ade <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006acc:	f7fb fb18 	bl	8002100 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e077      	b.n	8006bce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ade:	4b3e      	ldr	r3, [pc, #248]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006aea:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6811      	ldr	r1, [r2, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6852      	ldr	r2, [r2, #4]
 8006afe:	3a01      	subs	r2, #1
 8006b00:	0212      	lsls	r2, r2, #8
 8006b02:	430a      	orrs	r2, r1
 8006b04:	4934      	ldr	r1, [pc, #208]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	630b      	str	r3, [r1, #48]	; 0x30
 8006b0a:	4b33      	ldr	r3, [pc, #204]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0e:	4b33      	ldr	r3, [pc, #204]	; (8006bdc <RCCEx_PLL3_Config+0x12c>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6892      	ldr	r2, [r2, #8]
 8006b16:	3a01      	subs	r2, #1
 8006b18:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	68d2      	ldr	r2, [r2, #12]
 8006b20:	3a01      	subs	r2, #1
 8006b22:	0252      	lsls	r2, r2, #9
 8006b24:	b292      	uxth	r2, r2
 8006b26:	4311      	orrs	r1, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6912      	ldr	r2, [r2, #16]
 8006b2c:	3a01      	subs	r2, #1
 8006b2e:	0412      	lsls	r2, r2, #16
 8006b30:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006b34:	4311      	orrs	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6952      	ldr	r2, [r2, #20]
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	0612      	lsls	r2, r2, #24
 8006b3e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006b42:	430a      	orrs	r2, r1
 8006b44:	4924      	ldr	r1, [pc, #144]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006b4a:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	f023 020c 	bic.w	r2, r3, #12
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	4920      	ldr	r1, [pc, #128]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	491c      	ldr	r1, [pc, #112]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	4a1a      	ldr	r2, [pc, #104]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b70:	f023 0310 	bic.w	r3, r3, #16
 8006b74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b76:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	69d2      	ldr	r2, [r2, #28]
 8006b86:	00d2      	lsls	r2, r2, #3
 8006b88:	4913      	ldr	r1, [pc, #76]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006b8e:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	4a11      	ldr	r2, [pc, #68]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b94:	f043 0310 	orr.w	r3, r3, #16
 8006b98:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a0e      	ldr	r2, [pc, #56]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ba6:	f7fb faab 	bl	8002100 <HAL_GetTick>
 8006baa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bac:	e008      	b.n	8006bc0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bae:	f7fb faa7 	bl	8002100 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e006      	b.n	8006bce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <RCCEx_PLL3_Config+0x128>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	46020c00 	.word	0x46020c00
 8006bdc:	80800000 	.word	0x80800000

08006be0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e0fb      	b.n	8006dea <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a7f      	ldr	r2, [pc, #508]	; (8006df4 <HAL_SPI_Init+0x214>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <HAL_SPI_Init+0x26>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a7d      	ldr	r2, [pc, #500]	; (8006df8 <HAL_SPI_Init+0x218>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	e000      	b.n	8006c08 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006c06:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a78      	ldr	r2, [pc, #480]	; (8006df4 <HAL_SPI_Init+0x214>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_SPI_Init+0x42>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a76      	ldr	r2, [pc, #472]	; (8006df8 <HAL_SPI_Init+0x218>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d105      	bne.n	8006c2e <HAL_SPI_Init+0x4e>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d901      	bls.n	8006c2e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e0dd      	b.n	8006dea <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fe16 	bl	8007860 <SPI_GetPacketSize>
 8006c34:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6e      	ldr	r2, [pc, #440]	; (8006df4 <HAL_SPI_Init+0x214>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_SPI_Init+0x6a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6c      	ldr	r2, [pc, #432]	; (8006df8 <HAL_SPI_Init+0x218>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d102      	bne.n	8006c50 <HAL_SPI_Init+0x70>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d816      	bhi.n	8006c7e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c54:	4a69      	ldr	r2, [pc, #420]	; (8006dfc <HAL_SPI_Init+0x21c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a68      	ldr	r2, [pc, #416]	; (8006e00 <HAL_SPI_Init+0x220>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d009      	beq.n	8006c78 <HAL_SPI_Init+0x98>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a66      	ldr	r2, [pc, #408]	; (8006e04 <HAL_SPI_Init+0x224>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_SPI_Init+0x98>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a65      	ldr	r2, [pc, #404]	; (8006e08 <HAL_SPI_Init+0x228>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d104      	bne.n	8006c82 <HAL_SPI_Init+0xa2>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d901      	bls.n	8006c82 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0b3      	b.n	8006dea <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fa fdba 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006cbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cc8:	d119      	bne.n	8006cfe <HAL_SPI_Init+0x11e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd2:	d103      	bne.n	8006cdc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10c      	bne.n	8006cfe <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cec:	d107      	bne.n	8006cfe <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cfc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00f      	beq.n	8006d2a <HAL_SPI_Init+0x14a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d90b      	bls.n	8006d2a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e007      	b.n	8006d3a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69da      	ldr	r2, [r3, #28]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	431a      	orrs	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	ea42 0103 	orr.w	r1, r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da6:	ea42 0103 	orr.w	r1, r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	46002000 	.word	0x46002000
 8006df8:	56002000 	.word	0x56002000
 8006dfc:	40013000 	.word	0x40013000
 8006e00:	50013000 	.word	0x50013000
 8006e04:	40003800 	.word	0x40003800
 8006e08:	50003800 	.word	0x50003800

08006e0c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3320      	adds	r3, #32
 8006e22:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_SPI_Transmit+0x2a>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e203      	b.n	800723e <HAL_SPI_Transmit+0x432>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e3e:	f7fb f95f 	bl	8002100 <HAL_GetTick>
 8006e42:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d007      	beq.n	8006e60 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8006e5c:	7efb      	ldrb	r3, [r7, #27]
 8006e5e:	e1ee      	b.n	800723e <HAL_SPI_Transmit+0x432>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_SPI_Transmit+0x60>
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8006e78:	7efb      	ldrb	r3, [r7, #27]
 8006e7a:	e1e0      	b.n	800723e <HAL_SPI_Transmit+0x432>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2203      	movs	r2, #3
 8006e80:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006ecc:	d108      	bne.n	8006ee0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e009      	b.n	8006ef4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006ef2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	0c1b      	lsrs	r3, r3, #16
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	88f9      	ldrh	r1, [r7, #6]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10c      	bne.n	8006f40 <HAL_SPI_Transmit+0x134>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f2e:	d107      	bne.n	8006f40 <HAL_SPI_Transmit+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b0f      	cmp	r3, #15
 8006f46:	d95b      	bls.n	8007000 <HAL_SPI_Transmit+0x1f4>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a8f      	ldr	r2, [pc, #572]	; (800718c <HAL_SPI_Transmit+0x380>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d04f      	beq.n	8006ff2 <HAL_SPI_Transmit+0x1e6>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a8e      	ldr	r2, [pc, #568]	; (8007190 <HAL_SPI_Transmit+0x384>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d04a      	beq.n	8006ff2 <HAL_SPI_Transmit+0x1e6>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a8c      	ldr	r2, [pc, #560]	; (8007194 <HAL_SPI_Transmit+0x388>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d045      	beq.n	8006ff2 <HAL_SPI_Transmit+0x1e6>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a8b      	ldr	r2, [pc, #556]	; (8007198 <HAL_SPI_Transmit+0x38c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d147      	bne.n	8007000 <HAL_SPI_Transmit+0x1f4>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006f70:	e03f      	b.n	8006ff2 <HAL_SPI_Transmit+0x1e6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d114      	bne.n	8006faa <HAL_SPI_Transmit+0x19e>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f90:	1d1a      	adds	r2, r3, #4
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006fa8:	e023      	b.n	8006ff2 <HAL_SPI_Transmit+0x1e6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006faa:	f7fb f8a9 	bl	8002100 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d803      	bhi.n	8006fc2 <HAL_SPI_Transmit+0x1b6>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d102      	bne.n	8006fc8 <HAL_SPI_Transmit+0x1bc>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d114      	bne.n	8006ff2 <HAL_SPI_Transmit+0x1e6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fb7b 	bl	80076c4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e125      	b.n	800723e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1b9      	bne.n	8006f72 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006ffe:	e0f8      	b.n	80071f2 <HAL_SPI_Transmit+0x3e6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	2b07      	cmp	r3, #7
 8007006:	f240 80ed 	bls.w	80071e4 <HAL_SPI_Transmit+0x3d8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800700a:	e05d      	b.n	80070c8 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d132      	bne.n	8007080 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d918      	bls.n	8007058 <HAL_SPI_Transmit+0x24c>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d014      	beq.n	8007058 <HAL_SPI_Transmit+0x24c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b02      	subs	r3, #2
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007056:	e037      	b.n	80070c8 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007066:	1c9a      	adds	r2, r3, #2
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800707e:	e023      	b.n	80070c8 <HAL_SPI_Transmit+0x2bc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007080:	f7fb f83e 	bl	8002100 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d803      	bhi.n	8007098 <HAL_SPI_Transmit+0x28c>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007096:	d102      	bne.n	800709e <HAL_SPI_Transmit+0x292>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d114      	bne.n	80070c8 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fb10 	bl	80076c4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e0ba      	b.n	800723e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d19b      	bne.n	800700c <HAL_SPI_Transmit+0x200>
 80070d4:	e08d      	b.n	80071f2 <HAL_SPI_Transmit+0x3e6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d15b      	bne.n	800719c <HAL_SPI_Transmit+0x390>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d918      	bls.n	8007122 <HAL_SPI_Transmit+0x316>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d914      	bls.n	8007122 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007108:	1d1a      	adds	r2, r3, #4
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b04      	subs	r3, #4
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007120:	e060      	b.n	80071e4 <HAL_SPI_Transmit+0x3d8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d917      	bls.n	800715e <HAL_SPI_Transmit+0x352>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d013      	beq.n	800715e <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007144:	1c9a      	adds	r2, r3, #2
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b02      	subs	r3, #2
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800715c:	e042      	b.n	80071e4 <HAL_SPI_Transmit+0x3d8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3320      	adds	r3, #32
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007188:	e02c      	b.n	80071e4 <HAL_SPI_Transmit+0x3d8>
 800718a:	bf00      	nop
 800718c:	40013000 	.word	0x40013000
 8007190:	50013000 	.word	0x50013000
 8007194:	40003800 	.word	0x40003800
 8007198:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800719c:	f7fa ffb0 	bl	8002100 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d803      	bhi.n	80071b4 <HAL_SPI_Transmit+0x3a8>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d102      	bne.n	80071ba <HAL_SPI_Transmit+0x3ae>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d114      	bne.n	80071e4 <HAL_SPI_Transmit+0x3d8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fa82 	bl	80076c4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e02c      	b.n	800723e <HAL_SPI_Transmit+0x432>
    while (hspi->TxXferCount > 0UL)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f47f af72 	bne.w	80070d6 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2200      	movs	r2, #0
 80071fa:	2108      	movs	r1, #8
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 fb01 	bl	8007804 <SPI_WaitOnFlagUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <HAL_SPI_Transmit+0x40c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720e:	f043 0220 	orr.w	r2, r3, #32
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fa53 	bl	80076c4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <HAL_SPI_Transmit+0x430>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <HAL_SPI_Transmit+0x432>
  }
  return errorcode;
 800723c:	7efb      	ldrb	r3, [r7, #27]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop

08007248 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	; 0x30
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3320      	adds	r3, #32
 8007262:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3330      	adds	r3, #48	; 0x30
 800726a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_SPI_TransmitReceive+0x32>
 8007276:	2302      	movs	r3, #2
 8007278:	e21f      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007282:	f7fa ff3d 	bl	8002100 <HAL_GetTick>
 8007286:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8007288:	887b      	ldrh	r3, [r7, #2]
 800728a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800728c:	887b      	ldrh	r3, [r7, #2]
 800728e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	d009      	beq.n	80072b0 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800729c:	2302      	movs	r3, #2
 800729e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80072aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ae:	e204      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_SPI_TransmitReceive+0x7a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <HAL_SPI_TransmitReceive+0x7a>
 80072bc:	887b      	ldrh	r3, [r7, #2]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80072d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072d4:	e1f1      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2205      	movs	r2, #5
 80072da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	887a      	ldrh	r2, [r7, #2]
 80072f8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	887a      	ldrh	r2, [r7, #2]
 8007306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	887a      	ldrh	r2, [r7, #2]
 800730e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800732c:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	8879      	ldrh	r1, [r7, #2]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	430b      	orrs	r3, r1
 8007340:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0201 	orr.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <HAL_SPI_TransmitReceive+0x132>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007368:	d107      	bne.n	800737a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007378:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	2b0f      	cmp	r3, #15
 8007380:	f240 8085 	bls.w	800748e <HAL_SPI_TransmitReceive+0x246>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a7b      	ldr	r2, [pc, #492]	; (8007578 <HAL_SPI_TransmitReceive+0x330>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d078      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x238>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a7a      	ldr	r2, [pc, #488]	; (800757c <HAL_SPI_TransmitReceive+0x334>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d073      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x238>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a78      	ldr	r2, [pc, #480]	; (8007580 <HAL_SPI_TransmitReceive+0x338>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d06e      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x238>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a77      	ldr	r2, [pc, #476]	; (8007584 <HAL_SPI_TransmitReceive+0x33c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d170      	bne.n	800748e <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80073ac:	e068      	b.n	8007480 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d11a      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x1aa>
 80073bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d017      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80073f0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	f248 0308 	movw	r3, #32776	; 0x8008
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01a      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x1f0>
 8007402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	d017      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007410:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007412:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007418:	1d1a      	adds	r2, r3, #4
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007436:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007438:	f7fa fe62 	bl	8002100 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007444:	429a      	cmp	r2, r3
 8007446:	d803      	bhi.n	8007450 <HAL_SPI_TransmitReceive+0x208>
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d102      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x20e>
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	2b00      	cmp	r3, #0
 8007454:	d114      	bne.n	8007480 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 f934 	bl	80076c4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e11c      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007482:	2b00      	cmp	r3, #0
 8007484:	d193      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x166>
 8007486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d190      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800748c:	e0ee      	b.n	800766c <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b07      	cmp	r3, #7
 8007494:	f240 80e4 	bls.w	8007660 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007498:	e066      	b.n	8007568 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d119      	bne.n	80074dc <HAL_SPI_TransmitReceive+0x294>
 80074a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b2:	881a      	ldrh	r2, [r3, #0]
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80074da:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d11a      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x2d8>
 80074ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d017      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	8812      	ldrh	r2, [r2, #0]
 80074f8:	b292      	uxth	r2, r2
 80074fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007500:	1c9a      	adds	r2, r3, #2
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800751e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007520:	f7fa fdee 	bl	8002100 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752c:	429a      	cmp	r2, r3
 800752e:	d803      	bhi.n	8007538 <HAL_SPI_TransmitReceive+0x2f0>
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d102      	bne.n	800753e <HAL_SPI_TransmitReceive+0x2f6>
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2b00      	cmp	r3, #0
 800753c:	d114      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f8c0 	bl	80076c4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007552:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e0a8      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800756a:	2b00      	cmp	r3, #0
 800756c:	d195      	bne.n	800749a <HAL_SPI_TransmitReceive+0x252>
 800756e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d192      	bne.n	800749a <HAL_SPI_TransmitReceive+0x252>
 8007574:	e07a      	b.n	800766c <HAL_SPI_TransmitReceive+0x424>
 8007576:	bf00      	nop
 8007578:	40013000 	.word	0x40013000
 800757c:	50013000 	.word	0x50013000
 8007580:	40003800 	.word	0x40003800
 8007584:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b02      	cmp	r3, #2
 8007594:	d11b      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x386>
 8007596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007598:	2b00      	cmp	r3, #0
 800759a:	d018      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3320      	adds	r3, #32
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80075cc:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d11d      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x3d0>
 80075dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01a      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8007616:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007618:	f7fa fd72 	bl	8002100 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007624:	429a      	cmp	r2, r3
 8007626:	d803      	bhi.n	8007630 <HAL_SPI_TransmitReceive+0x3e8>
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d102      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x3ee>
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	2b00      	cmp	r3, #0
 8007634:	d114      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f844 	bl	80076c4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800764a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e02c      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007660:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007662:	2b00      	cmp	r3, #0
 8007664:	d190      	bne.n	8007588 <HAL_SPI_TransmitReceive+0x340>
 8007666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d18d      	bne.n	8007588 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	2200      	movs	r2, #0
 8007674:	2108      	movs	r1, #8
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f8c4 	bl	8007804 <SPI_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f816 	bl	80076c4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e001      	b.n	80076ba <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 80076b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop

080076c4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0208 	orr.w	r2, r2, #8
 80076e2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0210 	orr.w	r2, r2, #16
 80076f2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007726:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b04      	cmp	r3, #4
 8007732:	d014      	beq.n	800775e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00f      	beq.n	800775e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007744:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699a      	ldr	r2, [r3, #24]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0220 	orr.w	r2, r2, #32
 800775c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b03      	cmp	r3, #3
 8007768:	d014      	beq.n	8007794 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00f      	beq.n	8007794 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777a:	f043 0204 	orr.w	r2, r3, #4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007792:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00f      	beq.n	80077be <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a4:	f043 0201 	orr.w	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699a      	ldr	r2, [r3, #24]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00f      	beq.n	80077e8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ce:	f043 0208 	orr.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007814:	e010      	b.n	8007838 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007816:	f7fa fc73 	bl	8002100 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d803      	bhi.n	800782e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d102      	bne.n	8007834 <SPI_WaitOnFlagUntilTimeout+0x30>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e00f      	b.n	8007858 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	4013      	ands	r3, r2
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	429a      	cmp	r2, r3
 8007846:	bf0c      	ite	eq
 8007848:	2301      	moveq	r3, #1
 800784a:	2300      	movne	r3, #0
 800784c:	b2db      	uxtb	r3, r3
 800784e:	461a      	mov	r2, r3
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	429a      	cmp	r2, r3
 8007854:	d0df      	beq.n	8007816 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	3301      	adds	r3, #1
 8007878:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3307      	adds	r3, #7
 800787e:	08db      	lsrs	r3, r3, #3
 8007880:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	fb02 f303 	mul.w	r3, r2, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d12e      	bne.n	800790a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e028      	b.n	800790c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0201 	bic.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80078e6:	ea42 0103 	orr.w	r1, r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	689a      	ldr	r2, [r3, #8]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e049      	b.n	80079be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d106      	bne.n	8007944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f841 	bl	80079c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	4619      	mov	r1, r3
 8007956:	4610      	mov	r0, r2
 8007958:	f000 fa58 	bl	8007e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d001      	beq.n	80079f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e072      	b.n	8007ada <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68da      	ldr	r2, [r3, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0201 	orr.w	r2, r2, #1
 8007a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a35      	ldr	r2, [pc, #212]	; (8007ae8 <HAL_TIM_Base_Start_IT+0x10c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d040      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a34      	ldr	r2, [pc, #208]	; (8007aec <HAL_TIM_Base_Start_IT+0x110>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d03b      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a28:	d036      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a32:	d031      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a2d      	ldr	r2, [pc, #180]	; (8007af0 <HAL_TIM_Base_Start_IT+0x114>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d02c      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a2c      	ldr	r2, [pc, #176]	; (8007af4 <HAL_TIM_Base_Start_IT+0x118>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d027      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <HAL_TIM_Base_Start_IT+0x11c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d022      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a29      	ldr	r2, [pc, #164]	; (8007afc <HAL_TIM_Base_Start_IT+0x120>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d01d      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a27      	ldr	r2, [pc, #156]	; (8007b00 <HAL_TIM_Base_Start_IT+0x124>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d018      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <HAL_TIM_Base_Start_IT+0x128>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d013      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a24      	ldr	r2, [pc, #144]	; (8007b08 <HAL_TIM_Base_Start_IT+0x12c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00e      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a23      	ldr	r2, [pc, #140]	; (8007b0c <HAL_TIM_Base_Start_IT+0x130>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d009      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <HAL_TIM_Base_Start_IT+0x134>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d004      	beq.n	8007a98 <HAL_TIM_Base_Start_IT+0xbc>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <HAL_TIM_Base_Start_IT+0x138>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d115      	bne.n	8007ac4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	; (8007b18 <HAL_TIM_Base_Start_IT+0x13c>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b06      	cmp	r3, #6
 8007aa8:	d015      	beq.n	8007ad6 <HAL_TIM_Base_Start_IT+0xfa>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab0:	d011      	beq.n	8007ad6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0201 	orr.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac2:	e008      	b.n	8007ad6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e000      	b.n	8007ad8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	50012c00 	.word	0x50012c00
 8007af0:	40000400 	.word	0x40000400
 8007af4:	50000400 	.word	0x50000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	50000800 	.word	0x50000800
 8007b00:	40000c00 	.word	0x40000c00
 8007b04:	50000c00 	.word	0x50000c00
 8007b08:	40013400 	.word	0x40013400
 8007b0c:	50013400 	.word	0x50013400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	50014000 	.word	0x50014000
 8007b18:	00010007 	.word	0x00010007

08007b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d020      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01b      	beq.n	8007b80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0202 	mvn.w	r2, #2
 8007b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f931 	bl	8007dce <HAL_TIM_IC_CaptureCallback>
 8007b6c:	e005      	b.n	8007b7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f923 	bl	8007dba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f934 	bl	8007de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 0304 	and.w	r3, r3, #4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d020      	beq.n	8007bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01b      	beq.n	8007bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0204 	mvn.w	r2, #4
 8007b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f90b 	bl	8007dce <HAL_TIM_IC_CaptureCallback>
 8007bb8:	e005      	b.n	8007bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8fd 	bl	8007dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f90e 	bl	8007de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01b      	beq.n	8007c18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0208 	mvn.w	r2, #8
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2204      	movs	r2, #4
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8e5 	bl	8007dce <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8d7 	bl	8007dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f8e8 	bl	8007de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d020      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0210 	mvn.w	r2, #16
 8007c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2208      	movs	r2, #8
 8007c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f8bf 	bl	8007dce <HAL_TIM_IC_CaptureCallback>
 8007c50:	e005      	b.n	8007c5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8b1 	bl	8007dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8c2 	bl	8007de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00c      	beq.n	8007c88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0201 	mvn.w	r2, #1
 8007c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7f9 f83e 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00c      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f9af 	bl	8008014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00c      	beq.n	8007cda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f9a7 	bl	8008028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00c      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d007      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f87c 	bl	8007df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00c      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f06f 0220 	mvn.w	r2, #32
 8007d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f96f 	bl	8008000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00c      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f97b 	bl	800803c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00c      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f973 	bl	8008050 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00c      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f96b 	bl	8008064 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00c      	beq.n	8007db2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f963 	bl	8008078 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
	...

08007e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a68      	ldr	r2, [pc, #416]	; (8007fc0 <TIM_Base_SetConfig+0x1b4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d02b      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a67      	ldr	r2, [pc, #412]	; (8007fc4 <TIM_Base_SetConfig+0x1b8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d027      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e32:	d023      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e3a:	d01f      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a62      	ldr	r2, [pc, #392]	; (8007fc8 <TIM_Base_SetConfig+0x1bc>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d01b      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a61      	ldr	r2, [pc, #388]	; (8007fcc <TIM_Base_SetConfig+0x1c0>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d017      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a60      	ldr	r2, [pc, #384]	; (8007fd0 <TIM_Base_SetConfig+0x1c4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d013      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a5f      	ldr	r2, [pc, #380]	; (8007fd4 <TIM_Base_SetConfig+0x1c8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a5e      	ldr	r2, [pc, #376]	; (8007fd8 <TIM_Base_SetConfig+0x1cc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a5d      	ldr	r2, [pc, #372]	; (8007fdc <TIM_Base_SetConfig+0x1d0>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a5c      	ldr	r2, [pc, #368]	; (8007fe0 <TIM_Base_SetConfig+0x1d4>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_Base_SetConfig+0x70>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a5b      	ldr	r2, [pc, #364]	; (8007fe4 <TIM_Base_SetConfig+0x1d8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d108      	bne.n	8007e8e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a4b      	ldr	r2, [pc, #300]	; (8007fc0 <TIM_Base_SetConfig+0x1b4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d043      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a4a      	ldr	r2, [pc, #296]	; (8007fc4 <TIM_Base_SetConfig+0x1b8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d03f      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea4:	d03b      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eac:	d037      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a45      	ldr	r2, [pc, #276]	; (8007fc8 <TIM_Base_SetConfig+0x1bc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d033      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a44      	ldr	r2, [pc, #272]	; (8007fcc <TIM_Base_SetConfig+0x1c0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d02f      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a43      	ldr	r2, [pc, #268]	; (8007fd0 <TIM_Base_SetConfig+0x1c4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d02b      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a42      	ldr	r2, [pc, #264]	; (8007fd4 <TIM_Base_SetConfig+0x1c8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d027      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a41      	ldr	r2, [pc, #260]	; (8007fd8 <TIM_Base_SetConfig+0x1cc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d023      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a40      	ldr	r2, [pc, #256]	; (8007fdc <TIM_Base_SetConfig+0x1d0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01f      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a3f      	ldr	r2, [pc, #252]	; (8007fe0 <TIM_Base_SetConfig+0x1d4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d01b      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a3e      	ldr	r2, [pc, #248]	; (8007fe4 <TIM_Base_SetConfig+0x1d8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d017      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a3d      	ldr	r2, [pc, #244]	; (8007fe8 <TIM_Base_SetConfig+0x1dc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d013      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a3c      	ldr	r2, [pc, #240]	; (8007fec <TIM_Base_SetConfig+0x1e0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00f      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a3b      	ldr	r2, [pc, #236]	; (8007ff0 <TIM_Base_SetConfig+0x1e4>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00b      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a3a      	ldr	r2, [pc, #232]	; (8007ff4 <TIM_Base_SetConfig+0x1e8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a39      	ldr	r2, [pc, #228]	; (8007ff8 <TIM_Base_SetConfig+0x1ec>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d003      	beq.n	8007f1e <TIM_Base_SetConfig+0x112>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a38      	ldr	r2, [pc, #224]	; (8007ffc <TIM_Base_SetConfig+0x1f0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d108      	bne.n	8007f30 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <TIM_Base_SetConfig+0x1b4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d023      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <TIM_Base_SetConfig+0x1b8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01f      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <TIM_Base_SetConfig+0x1d4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01b      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <TIM_Base_SetConfig+0x1d8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d017      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a1c      	ldr	r2, [pc, #112]	; (8007fe8 <TIM_Base_SetConfig+0x1dc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d013      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <TIM_Base_SetConfig+0x1e0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00f      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a1a      	ldr	r2, [pc, #104]	; (8007ff0 <TIM_Base_SetConfig+0x1e4>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d00b      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <TIM_Base_SetConfig+0x1e8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d007      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <TIM_Base_SetConfig+0x1ec>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d003      	beq.n	8007fa4 <TIM_Base_SetConfig+0x198>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <TIM_Base_SetConfig+0x1f0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d103      	bne.n	8007fac <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	615a      	str	r2, [r3, #20]
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	50012c00 	.word	0x50012c00
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	50000400 	.word	0x50000400
 8007fd0:	40000800 	.word	0x40000800
 8007fd4:	50000800 	.word	0x50000800
 8007fd8:	40000c00 	.word	0x40000c00
 8007fdc:	50000c00 	.word	0x50000c00
 8007fe0:	40013400 	.word	0x40013400
 8007fe4:	50013400 	.word	0x50013400
 8007fe8:	40014000 	.word	0x40014000
 8007fec:	50014000 	.word	0x50014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	50014400 	.word	0x50014400
 8007ff8:	40014800 	.word	0x40014800
 8007ffc:	50014800 	.word	0x50014800

08008000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e042      	b.n	8008124 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7f9 fc17 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2224      	movs	r2, #36	; 0x24
 80080ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0201 	bic.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa68 	bl	80085ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f8c3 	bl	8008268 <UART_SetConfig>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e01b      	b.n	8008124 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800810a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fae7 	bl	80086f0 <UART_CheckIdleState>
 8008122:	4603      	mov	r3, r0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	; 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	2b20      	cmp	r3, #32
 8008144:	f040 808b 	bne.w	800825e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_UART_Transmit+0x28>
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e083      	b.n	8008260 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b80      	cmp	r3, #128	; 0x80
 8008164:	d107      	bne.n	8008176 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008174:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2221      	movs	r2, #33	; 0x21
 8008182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008186:	f7f9 ffbb 	bl	8002100 <HAL_GetTick>
 800818a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a4:	d108      	bne.n	80081b8 <HAL_UART_Transmit+0x8c>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	e003      	b.n	80081c0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081c0:	e030      	b.n	8008224 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2200      	movs	r2, #0
 80081ca:	2180      	movs	r1, #128	; 0x80
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fb39 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e03d      	b.n	8008260 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	3302      	adds	r3, #2
 80081fe:	61bb      	str	r3, [r7, #24]
 8008200:	e007      	b.n	8008212 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	3301      	adds	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1c8      	bne.n	80081c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	2140      	movs	r1, #64	; 0x40
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fb02 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e006      	b.n	8008260 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	e000      	b.n	8008260 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800825e:	2302      	movs	r3, #2
  }
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800826c:	b094      	sub	sp, #80	; 0x50
 800826e:	af00      	add	r7, sp, #0
 8008270:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	4b7e      	ldr	r3, [pc, #504]	; (8008478 <UART_SetConfig+0x210>)
 800827e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	431a      	orrs	r2, r3
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	431a      	orrs	r2, r3
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	4313      	orrs	r3, r2
 8008296:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4977      	ldr	r1, [pc, #476]	; (800847c <UART_SetConfig+0x214>)
 80082a0:	4019      	ands	r1, r3
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a8:	430b      	orrs	r3, r1
 80082aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	68d9      	ldr	r1, [r3, #12]
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	ea40 0301 	orr.w	r3, r0, r1
 80082c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4b6a      	ldr	r3, [pc, #424]	; (8008478 <UART_SetConfig+0x210>)
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d009      	beq.n	80082e8 <UART_SetConfig+0x80>
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b69      	ldr	r3, [pc, #420]	; (8008480 <UART_SetConfig+0x218>)
 80082da:	429a      	cmp	r2, r3
 80082dc:	d004      	beq.n	80082e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	6a1a      	ldr	r2, [r3, #32]
 80082e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e4:	4313      	orrs	r3, r2
 80082e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80082f2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	f023 000f 	bic.w	r0, r3, #15
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	ea40 0301 	orr.w	r3, r0, r1
 8008316:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b59      	ldr	r3, [pc, #356]	; (8008484 <UART_SetConfig+0x21c>)
 800831e:	429a      	cmp	r2, r3
 8008320:	d102      	bne.n	8008328 <UART_SetConfig+0xc0>
 8008322:	2301      	movs	r3, #1
 8008324:	64bb      	str	r3, [r7, #72]	; 0x48
 8008326:	e029      	b.n	800837c <UART_SetConfig+0x114>
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	4b56      	ldr	r3, [pc, #344]	; (8008488 <UART_SetConfig+0x220>)
 800832e:	429a      	cmp	r2, r3
 8008330:	d102      	bne.n	8008338 <UART_SetConfig+0xd0>
 8008332:	2302      	movs	r3, #2
 8008334:	64bb      	str	r3, [r7, #72]	; 0x48
 8008336:	e021      	b.n	800837c <UART_SetConfig+0x114>
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	4b53      	ldr	r3, [pc, #332]	; (800848c <UART_SetConfig+0x224>)
 800833e:	429a      	cmp	r2, r3
 8008340:	d102      	bne.n	8008348 <UART_SetConfig+0xe0>
 8008342:	2304      	movs	r3, #4
 8008344:	64bb      	str	r3, [r7, #72]	; 0x48
 8008346:	e019      	b.n	800837c <UART_SetConfig+0x114>
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4b50      	ldr	r3, [pc, #320]	; (8008490 <UART_SetConfig+0x228>)
 800834e:	429a      	cmp	r2, r3
 8008350:	d102      	bne.n	8008358 <UART_SetConfig+0xf0>
 8008352:	2308      	movs	r3, #8
 8008354:	64bb      	str	r3, [r7, #72]	; 0x48
 8008356:	e011      	b.n	800837c <UART_SetConfig+0x114>
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	4b4d      	ldr	r3, [pc, #308]	; (8008494 <UART_SetConfig+0x22c>)
 800835e:	429a      	cmp	r2, r3
 8008360:	d102      	bne.n	8008368 <UART_SetConfig+0x100>
 8008362:	2310      	movs	r3, #16
 8008364:	64bb      	str	r3, [r7, #72]	; 0x48
 8008366:	e009      	b.n	800837c <UART_SetConfig+0x114>
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	4b42      	ldr	r3, [pc, #264]	; (8008478 <UART_SetConfig+0x210>)
 800836e:	429a      	cmp	r2, r3
 8008370:	d102      	bne.n	8008378 <UART_SetConfig+0x110>
 8008372:	2320      	movs	r3, #32
 8008374:	64bb      	str	r3, [r7, #72]	; 0x48
 8008376:	e001      	b.n	800837c <UART_SetConfig+0x114>
 8008378:	2300      	movs	r3, #0
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <UART_SetConfig+0x210>)
 8008382:	429a      	cmp	r2, r3
 8008384:	d005      	beq.n	8008392 <UART_SetConfig+0x12a>
 8008386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b3d      	ldr	r3, [pc, #244]	; (8008480 <UART_SetConfig+0x218>)
 800838c:	429a      	cmp	r2, r3
 800838e:	f040 8085 	bne.w	800849c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008394:	2200      	movs	r2, #0
 8008396:	623b      	str	r3, [r7, #32]
 8008398:	627a      	str	r2, [r7, #36]	; 0x24
 800839a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800839e:	f7fd f939 	bl	8005614 <HAL_RCCEx_GetPeriphCLKFreq>
 80083a2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80083a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 80e8 	beq.w	800857c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	4a39      	ldr	r2, [pc, #228]	; (8008498 <UART_SetConfig+0x230>)
 80083b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b6:	461a      	mov	r2, r3
 80083b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80083be:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	4413      	add	r3, r2
 80083ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d305      	bcc.n	80083dc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d8:	429a      	cmp	r2, r3
 80083da:	d903      	bls.n	80083e4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80083e2:	e048      	b.n	8008476 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083e6:	2200      	movs	r2, #0
 80083e8:	61bb      	str	r3, [r7, #24]
 80083ea:	61fa      	str	r2, [r7, #28]
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	4a29      	ldr	r2, [pc, #164]	; (8008498 <UART_SetConfig+0x230>)
 80083f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	2200      	movs	r2, #0
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	617a      	str	r2, [r7, #20]
 80083fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008402:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008406:	f7f7 ff3b 	bl	8000280 <__aeabi_uldivmod>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4610      	mov	r0, r2
 8008410:	4619      	mov	r1, r3
 8008412:	f04f 0200 	mov.w	r2, #0
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	020b      	lsls	r3, r1, #8
 800841c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008420:	0202      	lsls	r2, r0, #8
 8008422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008424:	6849      	ldr	r1, [r1, #4]
 8008426:	0849      	lsrs	r1, r1, #1
 8008428:	2000      	movs	r0, #0
 800842a:	460c      	mov	r4, r1
 800842c:	4605      	mov	r5, r0
 800842e:	eb12 0804 	adds.w	r8, r2, r4
 8008432:	eb43 0905 	adc.w	r9, r3, r5
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	60bb      	str	r3, [r7, #8]
 800843e:	60fa      	str	r2, [r7, #12]
 8008440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008444:	4640      	mov	r0, r8
 8008446:	4649      	mov	r1, r9
 8008448:	f7f7 ff1a 	bl	8000280 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4613      	mov	r3, r2
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800845a:	d308      	bcc.n	800846e <UART_SetConfig+0x206>
 800845c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008462:	d204      	bcs.n	800846e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800846a:	60da      	str	r2, [r3, #12]
 800846c:	e003      	b.n	8008476 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008474:	e082      	b.n	800857c <UART_SetConfig+0x314>
 8008476:	e081      	b.n	800857c <UART_SetConfig+0x314>
 8008478:	46002400 	.word	0x46002400
 800847c:	cfff69f3 	.word	0xcfff69f3
 8008480:	56002400 	.word	0x56002400
 8008484:	40013800 	.word	0x40013800
 8008488:	40004400 	.word	0x40004400
 800848c:	40004800 	.word	0x40004800
 8008490:	40004c00 	.word	0x40004c00
 8008494:	40005000 	.word	0x40005000
 8008498:	0800f080 	.word	0x0800f080
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	d13c      	bne.n	8008520 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a8:	2200      	movs	r2, #0
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084b2:	f7fd f8af 	bl	8005614 <HAL_RCCEx_GetPeriphCLKFreq>
 80084b6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d05e      	beq.n	800857c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	4a39      	ldr	r2, [pc, #228]	; (80085a8 <UART_SetConfig+0x340>)
 80084c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c8:	461a      	mov	r2, r3
 80084ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d0:	005a      	lsls	r2, r3, #1
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	441a      	add	r2, r3
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e6:	2b0f      	cmp	r3, #15
 80084e8:	d916      	bls.n	8008518 <UART_SetConfig+0x2b0>
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f0:	d212      	bcs.n	8008518 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f023 030f 	bic.w	r3, r3, #15
 80084fa:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fe:	085b      	lsrs	r3, r3, #1
 8008500:	b29b      	uxth	r3, r3
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	b29a      	uxth	r2, r3
 8008508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800850a:	4313      	orrs	r3, r2
 800850c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	e031      	b.n	800857c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800851e:	e02d      	b.n	800857c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008522:	2200      	movs	r2, #0
 8008524:	469a      	mov	sl, r3
 8008526:	4693      	mov	fp, r2
 8008528:	4650      	mov	r0, sl
 800852a:	4659      	mov	r1, fp
 800852c:	f7fd f872 	bl	8005614 <HAL_RCCEx_GetPeriphCLKFreq>
 8008530:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d021      	beq.n	800857c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	4a1a      	ldr	r2, [pc, #104]	; (80085a8 <UART_SetConfig+0x340>)
 800853e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008542:	461a      	mov	r2, r3
 8008544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008546:	fbb3 f2f2 	udiv	r2, r3, r2
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	085b      	lsrs	r3, r3, #1
 8008550:	441a      	add	r2, r3
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d909      	bls.n	8008576 <UART_SetConfig+0x30e>
 8008562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008568:	d205      	bcs.n	8008576 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800856a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856c:	b29a      	uxth	r2, r3
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	e002      	b.n	800857c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	2201      	movs	r2, #1
 8008580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	2200      	movs	r2, #0
 8008590:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	2200      	movs	r2, #0
 8008596:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008598:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800859c:	4618      	mov	r0, r3
 800859e:	3750      	adds	r7, #80	; 0x50
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	0800f080 	.word	0x0800f080

080085ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	f003 0308 	and.w	r3, r3, #8
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00a      	beq.n	80085d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00a      	beq.n	800865e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01a      	beq.n	80086c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086aa:	d10a      	bne.n	80086c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	605a      	str	r2, [r3, #4]
  }
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b098      	sub	sp, #96	; 0x60
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008700:	f7f9 fcfe 	bl	8002100 <HAL_GetTick>
 8008704:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0308 	and.w	r3, r3, #8
 8008710:	2b08      	cmp	r3, #8
 8008712:	d12f      	bne.n	8008774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800871c:	2200      	movs	r2, #0
 800871e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f88e 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d022      	beq.n	8008774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008742:	653b      	str	r3, [r7, #80]	; 0x50
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
 800874e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e6      	bne.n	800872e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e063      	b.n	800883c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b04      	cmp	r3, #4
 8008780:	d149      	bne.n	8008816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008782:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800878a:	2200      	movs	r2, #0
 800878c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f857 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d03c      	beq.n	8008816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	623b      	str	r3, [r7, #32]
   return(result);
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30
 80087bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e6      	bne.n	800879c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ee:	61fa      	str	r2, [r7, #28]
 80087f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	69b9      	ldr	r1, [r7, #24]
 80087f4:	69fa      	ldr	r2, [r7, #28]
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	617b      	str	r3, [r7, #20]
   return(result);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e5      	bne.n	80087ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e012      	b.n	800883c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3758      	adds	r7, #88	; 0x58
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008854:	e049      	b.n	80088ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d045      	beq.n	80088ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885e:	f7f9 fc4f 	bl	8002100 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <UART_WaitOnFlagUntilTimeout+0x30>
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e048      	b.n	800890a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d031      	beq.n	80088ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	f003 0308 	and.w	r3, r3, #8
 8008890:	2b08      	cmp	r3, #8
 8008892:	d110      	bne.n	80088b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2208      	movs	r2, #8
 800889a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f838 	bl	8008912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2208      	movs	r2, #8
 80088a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e029      	b.n	800890a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088c4:	d111      	bne.n	80088ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f81e 	bl	8008912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e00f      	b.n	800890a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	69da      	ldr	r2, [r3, #28]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	4013      	ands	r3, r2
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	461a      	mov	r2, r3
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	429a      	cmp	r2, r3
 8008906:	d0a6      	beq.n	8008856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008912:	b480      	push	{r7}
 8008914:	b095      	sub	sp, #84	; 0x54
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008938:	643b      	str	r3, [r7, #64]	; 0x40
 800893a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800893e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e6      	bne.n	800891a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3308      	adds	r3, #8
 8008952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	61fb      	str	r3, [r7, #28]
   return(result);
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	64bb      	str	r3, [r7, #72]	; 0x48
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e3      	bne.n	800894c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d118      	bne.n	80089be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	60bb      	str	r3, [r7, #8]
   return(result);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f023 0310 	bic.w	r3, r3, #16
 80089a0:	647b      	str	r3, [r7, #68]	; 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089aa:	61bb      	str	r3, [r7, #24]
 80089ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ae:	6979      	ldr	r1, [r7, #20]
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	613b      	str	r3, [r7, #16]
   return(result);
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e6      	bne.n	800898c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80089d2:	bf00      	nop
 80089d4:	3754      	adds	r7, #84	; 0x54
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_UARTEx_EnableFifoMode+0x16>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e02b      	b.n	8008a4c <HAL_UARTEx_EnableFifoMode+0x6e>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2224      	movs	r2, #36	; 0x24
 8008a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008a2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f8c3 	bl	8008bc0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_UARTEx_DisableFifoMode+0x16>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e027      	b.n	8008aba <HAL_UARTEx_DisableFifoMode+0x66>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2224      	movs	r2, #36	; 0x24
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0201 	bic.w	r2, r2, #1
 8008a90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e02d      	b.n	8008b3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2224      	movs	r2, #36	; 0x24
 8008aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0201 	bic.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f850 	bl	8008bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e02d      	b.n	8008bb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2224      	movs	r2, #36	; 0x24
 8008b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 0201 	bic.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f812 	bl	8008bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d108      	bne.n	8008be2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008be0:	e031      	b.n	8008c46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008be2:	2308      	movs	r3, #8
 8008be4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008be6:	2308      	movs	r3, #8
 8008be8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	0e5b      	lsrs	r3, r3, #25
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	0f5b      	lsrs	r3, r3, #29
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 0307 	and.w	r3, r3, #7
 8008c08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	7b3a      	ldrb	r2, [r7, #12]
 8008c0e:	4911      	ldr	r1, [pc, #68]	; (8008c54 <UARTEx_SetNbDataToProcess+0x94>)
 8008c10:	5c8a      	ldrb	r2, [r1, r2]
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c16:	7b3a      	ldrb	r2, [r7, #12]
 8008c18:	490f      	ldr	r1, [pc, #60]	; (8008c58 <UARTEx_SetNbDataToProcess+0x98>)
 8008c1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	7b7a      	ldrb	r2, [r7, #13]
 8008c2c:	4909      	ldr	r1, [pc, #36]	; (8008c54 <UARTEx_SetNbDataToProcess+0x94>)
 8008c2e:	5c8a      	ldrb	r2, [r1, r2]
 8008c30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c34:	7b7a      	ldrb	r2, [r7, #13]
 8008c36:	4908      	ldr	r1, [pc, #32]	; (8008c58 <UARTEx_SetNbDataToProcess+0x98>)
 8008c38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	0800f098 	.word	0x0800f098
 8008c58:	0800f0a0 	.word	0x0800f0a0

08008c5c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3301      	adds	r3, #1
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	021b      	lsls	r3, r3, #8
 8008c70:	b21a      	sxth	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b21b      	sxth	r3, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	b21b      	sxth	r3, r3
 8008c7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c7e:	89fb      	ldrh	r3, [r7, #14]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3303      	adds	r3, #3
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	3202      	adds	r2, #2
 8008ca4:	7812      	ldrb	r2, [r2, #0]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	3201      	adds	r2, #1
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	7812      	ldrb	r2, [r2, #0]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
	return rv;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	887a      	ldrh	r2, [r7, #2]
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	0a1b      	lsrs	r3, r3, #8
 8008cee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	887a      	ldrh	r2, [r7, #2]
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	701a      	strb	r2, [r3, #0]
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	b2d2      	uxtb	r2, r2
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	0a1b      	lsrs	r3, r3, #8
 8008d34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	0a1b      	lsrs	r3, r3, #8
 8008d46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	607a      	str	r2, [r7, #4]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	701a      	strb	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8008d6a:	2281      	movs	r2, #129	; 0x81
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d30f      	bcc.n	8008d92 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8008d72:	229f      	movs	r2, #159	; 0x9f
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d801      	bhi.n	8008d7e <dbc_1st+0x1e>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e00a      	b.n	8008d94 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8008d7e:	22e0      	movs	r2, #224	; 0xe0
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d305      	bcc.n	8008d92 <dbc_1st+0x32>
 8008d86:	22fc      	movs	r2, #252	; 0xfc
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d801      	bhi.n	8008d92 <dbc_1st+0x32>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8008daa:	2240      	movs	r2, #64	; 0x40
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d319      	bcc.n	8008de6 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8008db2:	227e      	movs	r2, #126	; 0x7e
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d801      	bhi.n	8008dbe <dbc_2nd+0x1e>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e014      	b.n	8008de8 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8008dbe:	2280      	movs	r2, #128	; 0x80
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d305      	bcc.n	8008dd2 <dbc_2nd+0x32>
 8008dc6:	22fc      	movs	r2, #252	; 0xfc
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d801      	bhi.n	8008dd2 <dbc_2nd+0x32>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e00a      	b.n	8008de8 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d305      	bcc.n	8008de6 <dbc_2nd+0x46>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d801      	bhi.n	8008de6 <dbc_2nd+0x46>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <lock_volume>:

static int lock_volume (	/* 1:Ok, 0:timeout */
	FATFS* fs,				/* Filesystem object to lock */
	int syslock				/* System lock required */
)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
		} else {
			ff_mutex_give(fs->ldrv);	/* Failed system lock */
		}
	}
#else
	rv = syslock ? ff_mutex_take(fs->ldrv) : ff_mutex_take(fs->ldrv);	/* Lock the volume (this is to prevent compiler warning) */
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d006      	beq.n	8008e12 <lock_volume+0x1e>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	789b      	ldrb	r3, [r3, #2]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 fff7 	bl	800adfc <ff_mutex_take>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	e005      	b.n	8008e1e <lock_volume+0x2a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	789b      	ldrb	r3, [r3, #2]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fff0 	bl	800adfc <ff_mutex_take>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	60fb      	str	r3, [r7, #12]
#endif
	return rv;
 8008e20:	68fb      	ldr	r3, [r7, #12]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <unlock_volume>:

static void unlock_volume (
	FATFS* fs,		/* Filesystem object */
	FRESULT res		/* Result code to be returned */
)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00d      	beq.n	8008e58 <unlock_volume+0x2e>
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	2b0c      	cmp	r3, #12
 8008e40:	d00a      	beq.n	8008e58 <unlock_volume+0x2e>
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	2b0b      	cmp	r3, #11
 8008e46:	d007      	beq.n	8008e58 <unlock_volume+0x2e>
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	2b0f      	cmp	r3, #15
 8008e4c:	d004      	beq.n	8008e58 <unlock_volume+0x2e>
		if (SysLock == 2) {	/* Is the system locked? */
			SysLock = 1;
			ff_mutex_give(FF_VOLUMES);
		}
#endif
		ff_mutex_give(fs->ldrv);	/* Unlock the volume */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	789b      	ldrb	r3, [r3, #2]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 ffec 	bl	800ae30 <ff_mutex_give>
	}
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	791b      	ldrb	r3, [r3, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d02c      	beq.n	8008ece <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7858      	ldrb	r0, [r3, #1]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e82:	2301      	movs	r3, #1
 8008e84:	f7f8 fa52 	bl	800132c <disk_write>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d11d      	bne.n	8008eca <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	1ad2      	subs	r2, r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d213      	bcs.n	8008ece <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	78db      	ldrb	r3, [r3, #3]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d10f      	bne.n	8008ece <sync_window+0x6e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7858      	ldrb	r0, [r3, #1]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	441a      	add	r2, r3
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f7f8 fa32 	bl	800132c <disk_write>
 8008ec8:	e001      	b.n	8008ece <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d01b      	beq.n	8008f28 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ffb5 	bl	8008e60 <sync_window>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d113      	bne.n	8008f28 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7858      	ldrb	r0, [r3, #1]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	f7f8 f9a7 	bl	8001260 <disk_read>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d004      	beq.n	8008f22 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b083      	sub	sp, #12
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	3b02      	subs	r3, #2
 8008f40:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	3b02      	subs	r3, #2
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d301      	bcc.n	8008f52 <clst2sect+0x20>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e008      	b.n	8008f64 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	895b      	ldrh	r3, [r3, #10]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	4413      	add	r3, r2
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d904      	bls.n	8008f90 <get_fat+0x20>
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d302      	bcc.n	8008f96 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008f90:	2301      	movs	r3, #1
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e08f      	b.n	80090b6 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d062      	beq.n	800906a <get_fat+0xfa>
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	dc7c      	bgt.n	80090a2 <get_fat+0x132>
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d002      	beq.n	8008fb2 <get_fat+0x42>
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d042      	beq.n	8009036 <get_fat+0xc6>
 8008fb0:	e077      	b.n	80090a2 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	6a1a      	ldr	r2, [r3, #32]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	0a5b      	lsrs	r3, r3, #9
 8008fc8:	4413      	add	r3, r2
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6938      	ldr	r0, [r7, #16]
 8008fce:	f7ff ff83 	bl	8008ed8 <move_window>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d167      	bne.n	80090a8 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	60fa      	str	r2, [r7, #12]
 8008fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6a1a      	ldr	r2, [r3, #32]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	0a5b      	lsrs	r3, r3, #9
 8008ff4:	4413      	add	r3, r2
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6938      	ldr	r0, [r7, #16]
 8008ffa:	f7ff ff6d 	bl	8008ed8 <move_window>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d153      	bne.n	80090ac <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4413      	add	r3, r2
 800900e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	461a      	mov	r2, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	4313      	orrs	r3, r2
 800901a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <get_fat+0xbc>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	091b      	lsrs	r3, r3, #4
 800902a:	e002      	b.n	8009032 <get_fat+0xc2>
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009032:	617b      	str	r3, [r7, #20]
			break;
 8009034:	e03f      	b.n	80090b6 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6a1a      	ldr	r2, [r3, #32]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	0a1b      	lsrs	r3, r3, #8
 800903e:	4413      	add	r3, r2
 8009040:	4619      	mov	r1, r3
 8009042:	6938      	ldr	r0, [r7, #16]
 8009044:	f7ff ff48 	bl	8008ed8 <move_window>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d130      	bne.n	80090b0 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800905c:	4413      	add	r3, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff fdfc 	bl	8008c5c <ld_word>
 8009064:	4603      	mov	r3, r0
 8009066:	617b      	str	r3, [r7, #20]
			break;
 8009068:	e025      	b.n	80090b6 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	6a1a      	ldr	r2, [r3, #32]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	09db      	lsrs	r3, r3, #7
 8009072:	4413      	add	r3, r2
 8009074:	4619      	mov	r1, r3
 8009076:	6938      	ldr	r0, [r7, #16]
 8009078:	f7ff ff2e 	bl	8008ed8 <move_window>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d118      	bne.n	80090b4 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009090:	4413      	add	r3, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff fdfa 	bl	8008c8c <ld_dword>
 8009098:	4603      	mov	r3, r0
 800909a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800909e:	617b      	str	r3, [r7, #20]
			break;
 80090a0:	e009      	b.n	80090b6 <get_fat+0x146>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80090a2:	2301      	movs	r3, #1
 80090a4:	617b      	str	r3, [r7, #20]
 80090a6:	e006      	b.n	80090b6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090a8:	bf00      	nop
 80090aa:	e004      	b.n	80090b6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090ac:	bf00      	nop
 80090ae:	e002      	b.n	80090b6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090b0:	bf00      	nop
 80090b2:	e000      	b.n	80090b6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090b4:	bf00      	nop
		}
	}

	return val;
 80090b6:	697b      	ldr	r3, [r7, #20]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80090c0:	b590      	push	{r4, r7, lr}
 80090c2:	b089      	sub	sp, #36	; 0x24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80090cc:	2302      	movs	r3, #2
 80090ce:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	f240 80d9 	bls.w	800928a <put_fat+0x1ca>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	429a      	cmp	r2, r3
 80090e0:	f080 80d3 	bcs.w	800928a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	f000 8096 	beq.w	800921a <put_fat+0x15a>
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	f300 80cb 	bgt.w	800928a <put_fat+0x1ca>
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d002      	beq.n	80090fe <put_fat+0x3e>
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d06e      	beq.n	80091da <put_fat+0x11a>
 80090fc:	e0c5      	b.n	800928a <put_fat+0x1ca>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	085b      	lsrs	r3, r3, #1
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	4413      	add	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a1a      	ldr	r2, [r3, #32]
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	0a5b      	lsrs	r3, r3, #9
 8009114:	4413      	add	r3, r2
 8009116:	4619      	mov	r1, r3
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fedd 	bl	8008ed8 <move_window>
 800911e:	4603      	mov	r3, r0
 8009120:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009122:	7ffb      	ldrb	r3, [r7, #31]
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 80a9 	bne.w	800927c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	1c59      	adds	r1, r3, #1
 8009134:	61b9      	str	r1, [r7, #24]
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	4413      	add	r3, r2
 800913c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00d      	beq.n	8009164 <put_fat+0xa4>
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	b25b      	sxtb	r3, r3
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	b25a      	sxtb	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	b2db      	uxtb	r3, r3
 8009158:	011b      	lsls	r3, r3, #4
 800915a:	b25b      	sxtb	r3, r3
 800915c:	4313      	orrs	r3, r2
 800915e:	b25b      	sxtb	r3, r3
 8009160:	b2db      	uxtb	r3, r3
 8009162:	e001      	b.n	8009168 <put_fat+0xa8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	0a5b      	lsrs	r3, r3, #9
 800917a:	4413      	add	r3, r2
 800917c:	4619      	mov	r1, r3
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff feaa 	bl	8008ed8 <move_window>
 8009184:	4603      	mov	r3, r0
 8009186:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009188:	7ffb      	ldrb	r3, [r7, #31]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d178      	bne.n	8009280 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919a:	4413      	add	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <put_fat+0xf0>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	091b      	lsrs	r3, r3, #4
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e00e      	b.n	80091ce <put_fat+0x10e>
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	b25b      	sxtb	r3, r3
 80091b6:	f023 030f 	bic.w	r3, r3, #15
 80091ba:	b25a      	sxtb	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	b25b      	sxtb	r3, r3
 80091c8:	4313      	orrs	r3, r2
 80091ca:	b25b      	sxtb	r3, r3
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2201      	movs	r2, #1
 80091d6:	711a      	strb	r2, [r3, #4]
			break;
 80091d8:	e057      	b.n	800928a <put_fat+0x1ca>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a1a      	ldr	r2, [r3, #32]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	4413      	add	r3, r2
 80091e4:	4619      	mov	r1, r3
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7ff fe76 	bl	8008ed8 <move_window>
 80091ec:	4603      	mov	r3, r0
 80091ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091f0:	7ffb      	ldrb	r3, [r7, #31]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d146      	bne.n	8009284 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009204:	4413      	add	r3, r2
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	b292      	uxth	r2, r2
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fd60 	bl	8008cd2 <st_word>
			fs->wflag = 1;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	711a      	strb	r2, [r3, #4]
			break;
 8009218:	e037      	b.n	800928a <put_fat+0x1ca>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	09db      	lsrs	r3, r3, #7
 8009222:	4413      	add	r3, r2
 8009224:	4619      	mov	r1, r3
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fe56 	bl	8008ed8 <move_window>
 800922c:	4603      	mov	r3, r0
 800922e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009230:	7ffb      	ldrb	r3, [r7, #31]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d128      	bne.n	8009288 <put_fat+0x1c8>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800924a:	4413      	add	r3, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff fd1d 	bl	8008c8c <ld_dword>
 8009252:	4603      	mov	r3, r0
 8009254:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009258:	4323      	orrs	r3, r4
 800925a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800926a:	4413      	add	r3, r2
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fd4a 	bl	8008d08 <st_dword>
			fs->wflag = 1;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	711a      	strb	r2, [r3, #4]
			break;
 800927a:	e006      	b.n	800928a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800927c:	bf00      	nop
 800927e:	e004      	b.n	800928a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009280:	bf00      	nop
 8009282:	e002      	b.n	800928a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009288:	bf00      	nop
		}
	}
	return res;
 800928a:	7ffb      	ldrb	r3, [r7, #31]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3724      	adds	r7, #36	; 0x24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd90      	pop	{r4, r7, pc}

08009294 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d004      	beq.n	80092c0 <create_chain+0x2c>
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d31b      	bcc.n	80092f8 <create_chain+0x64>
 80092c0:	2301      	movs	r3, #1
 80092c2:	61bb      	str	r3, [r7, #24]
 80092c4:	e018      	b.n	80092f8 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff fe51 	bl	8008f70 <get_fat>
 80092ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d801      	bhi.n	80092da <create_chain+0x46>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e0a9      	b.n	800942e <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e0:	d101      	bne.n	80092e6 <create_chain+0x52>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	e0a3      	b.n	800942e <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d201      	bcs.n	80092f4 <create_chain+0x60>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	e09c      	b.n	800942e <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <create_chain+0x70>
 8009300:	2300      	movs	r3, #0
 8009302:	e094      	b.n	800942e <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d129      	bne.n	8009364 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	3301      	adds	r3, #1
 8009314:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	429a      	cmp	r2, r3
 800931e:	d301      	bcc.n	8009324 <create_chain+0x90>
 8009320:	2302      	movs	r3, #2
 8009322:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff fe22 	bl	8008f70 <get_fat>
 800932c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d003      	beq.n	800933c <create_chain+0xa8>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933a:	d101      	bne.n	8009340 <create_chain+0xac>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	e076      	b.n	800942e <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00e      	beq.n	8009364 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d906      	bls.n	8009360 <create_chain+0xcc>
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	429a      	cmp	r2, r3
 800935a:	d201      	bcs.n	8009360 <create_chain+0xcc>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d129      	bne.n	80093be <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	3301      	adds	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	69fa      	ldr	r2, [r7, #28]
 800937a:	429a      	cmp	r2, r3
 800937c:	d307      	bcc.n	800938e <create_chain+0xfa>
					ncl = 2;
 800937e:	2302      	movs	r3, #2
 8009380:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	429a      	cmp	r2, r3
 8009388:	d901      	bls.n	800938e <create_chain+0xfa>
 800938a:	2300      	movs	r3, #0
 800938c:	e04f      	b.n	800942e <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800938e:	69f9      	ldr	r1, [r7, #28]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff fded 	bl	8008f70 <get_fat>
 8009396:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00e      	beq.n	80093bc <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d003      	beq.n	80093ac <create_chain+0x118>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093aa:	d101      	bne.n	80093b0 <create_chain+0x11c>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	e03e      	b.n	800942e <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d1da      	bne.n	800936e <create_chain+0xda>
 80093b8:	2300      	movs	r3, #0
 80093ba:	e038      	b.n	800942e <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80093bc:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	69f9      	ldr	r1, [r7, #28]
 80093c4:	6938      	ldr	r0, [r7, #16]
 80093c6:	f7ff fe7b 	bl	80090c0 <put_fat>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <create_chain+0x154>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d006      	beq.n	80093e8 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80093da:	69fa      	ldr	r2, [r7, #28]
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6938      	ldr	r0, [r7, #16]
 80093e0:	f7ff fe6e 	bl	80090c0 <put_fat>
 80093e4:	4603      	mov	r3, r0
 80093e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d116      	bne.n	800941c <create_chain+0x188>
		fs->last_clst = ncl;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	3b02      	subs	r3, #2
 80093fe:	429a      	cmp	r2, r3
 8009400:	d804      	bhi.n	800940c <create_chain+0x178>
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	1e5a      	subs	r2, r3, #1
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	795b      	ldrb	r3, [r3, #5]
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	715a      	strb	r2, [r3, #5]
 800941a:	e007      	b.n	800942c <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d102      	bne.n	8009428 <create_chain+0x194>
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	e000      	b.n	800942a <create_chain+0x196>
 8009428:	2301      	movs	r3, #1
 800942a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800942c:	69fb      	ldr	r3, [r7, #28]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3720      	adds	r7, #32
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff fd0d 	bl	8008e60 <sync_window>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <dir_clear+0x1a>
 800944c:	2301      	movs	r3, #1
 800944e:	e036      	b.n	80094be <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fd6d 	bl	8008f32 <clst2sect>
 8009458:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3330      	adds	r3, #48	; 0x30
 8009464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f004 ff82 	bl	800e374 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3330      	adds	r3, #48	; 0x30
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	2301      	movs	r3, #1
 8009478:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	e003      	b.n	8009488 <dir_clear+0x52>
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4413      	add	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	895b      	ldrh	r3, [r3, #10]
 800948c:	461a      	mov	r2, r3
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	4293      	cmp	r3, r2
 8009492:	d20b      	bcs.n	80094ac <dir_clear+0x76>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	7858      	ldrb	r0, [r3, #1]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	441a      	add	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	f7f7 ff43 	bl	800132c <disk_write>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0e9      	beq.n	8009480 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	895b      	ldrh	r3, [r3, #10]
 80094b0:	461a      	mov	r2, r3
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	4293      	cmp	r3, r2
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b086      	sub	sp, #24
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094dc:	d204      	bcs.n	80094e8 <dir_sdi+0x22>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	f003 031f 	and.w	r3, r3, #31
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <dir_sdi+0x26>
		return FR_INT_ERR;
 80094e8:	2302      	movs	r3, #2
 80094ea:	e063      	b.n	80095b4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d106      	bne.n	800950c <dir_sdi+0x46>
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d902      	bls.n	800950c <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10c      	bne.n	800952c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	8912      	ldrh	r2, [r2, #8]
 800951a:	4293      	cmp	r3, r2
 800951c:	d301      	bcc.n	8009522 <dir_sdi+0x5c>
 800951e:	2302      	movs	r3, #2
 8009520:	e048      	b.n	80095b4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	619a      	str	r2, [r3, #24]
 800952a:	e029      	b.n	8009580 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	895b      	ldrh	r3, [r3, #10]
 8009530:	025b      	lsls	r3, r3, #9
 8009532:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009534:	e019      	b.n	800956a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6979      	ldr	r1, [r7, #20]
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fd18 	bl	8008f70 <get_fat>
 8009540:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d101      	bne.n	800954e <dir_sdi+0x88>
 800954a:	2301      	movs	r3, #1
 800954c:	e032      	b.n	80095b4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d904      	bls.n	800955e <dir_sdi+0x98>
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	429a      	cmp	r2, r3
 800955c:	d301      	bcc.n	8009562 <dir_sdi+0x9c>
 800955e:	2302      	movs	r3, #2
 8009560:	e028      	b.n	80095b4 <dir_sdi+0xee>
			ofs -= csz;
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	429a      	cmp	r2, r3
 8009570:	d2e1      	bcs.n	8009536 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8009572:	6979      	ldr	r1, [r7, #20]
 8009574:	6938      	ldr	r0, [r7, #16]
 8009576:	f7ff fcdc 	bl	8008f32 <clst2sect>
 800957a:	4602      	mov	r2, r0
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <dir_sdi+0xcc>
 800958e:	2302      	movs	r3, #2
 8009590:	e010      	b.n	80095b4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699a      	ldr	r2, [r3, #24]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	0a5b      	lsrs	r3, r3, #9
 800959a:	441a      	add	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ac:	441a      	add	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	3320      	adds	r3, #32
 80095d2:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095da:	d302      	bcc.n	80095e2 <dir_next+0x26>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <dir_next+0x32>
 80095ea:	2304      	movs	r3, #4
 80095ec:	e078      	b.n	80096e0 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d166      	bne.n	80096c6 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	8912      	ldrh	r2, [r2, #8]
 8009612:	4293      	cmp	r3, r2
 8009614:	d357      	bcc.n	80096c6 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	619a      	str	r2, [r3, #24]
 800961c:	2304      	movs	r3, #4
 800961e:	e05f      	b.n	80096e0 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	0a5b      	lsrs	r3, r3, #9
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	8952      	ldrh	r2, [r2, #10]
 8009628:	3a01      	subs	r2, #1
 800962a:	4013      	ands	r3, r2
 800962c:	2b00      	cmp	r3, #0
 800962e:	d14a      	bne.n	80096c6 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7ff fc99 	bl	8008f70 <get_fat>
 800963e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d801      	bhi.n	800964a <dir_next+0x8e>
 8009646:	2302      	movs	r3, #2
 8009648:	e04a      	b.n	80096e0 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d101      	bne.n	8009656 <dir_next+0x9a>
 8009652:	2301      	movs	r3, #1
 8009654:	e044      	b.n	80096e0 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	429a      	cmp	r2, r3
 800965e:	d328      	bcc.n	80096b2 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	619a      	str	r2, [r3, #24]
 800966c:	2304      	movs	r3, #4
 800966e:	e037      	b.n	80096e0 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4619      	mov	r1, r3
 8009678:	4610      	mov	r0, r2
 800967a:	f7ff fe0b 	bl	8009294 <create_chain>
 800967e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <dir_next+0xce>
 8009686:	2307      	movs	r3, #7
 8009688:	e02a      	b.n	80096e0 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <dir_next+0xd8>
 8009690:	2302      	movs	r3, #2
 8009692:	e025      	b.n	80096e0 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d101      	bne.n	80096a0 <dir_next+0xe4>
 800969c:	2301      	movs	r3, #1
 800969e:	e01f      	b.n	80096e0 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 80096a0:	6979      	ldr	r1, [r7, #20]
 80096a2:	6938      	ldr	r0, [r7, #16]
 80096a4:	f7ff fec7 	bl	8009436 <dir_clear>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <dir_next+0xf6>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e016      	b.n	80096e0 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80096b8:	6979      	ldr	r1, [r7, #20]
 80096ba:	6938      	ldr	r0, [r7, #16]
 80096bc:	f7ff fc39 	bl	8008f32 <clst2sect>
 80096c0:	4602      	mov	r2, r0
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d8:	441a      	add	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	331a      	adds	r3, #26
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff fab0 	bl	8008c5c <ld_word>
 80096fc:	4603      	mov	r3, r0
 80096fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b03      	cmp	r3, #3
 8009706:	d109      	bne.n	800971c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	3314      	adds	r3, #20
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff faa5 	bl	8008c5c <ld_word>
 8009712:	4603      	mov	r3, r0
 8009714:	041b      	lsls	r3, r3, #16
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800971c:	68fb      	ldr	r3, [r7, #12]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b086      	sub	sp, #24
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009734:	2100      	movs	r1, #0
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff fec5 	bl	80094c6 <dir_sdi>
 800973c:	4603      	mov	r3, r0
 800973e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <dir_find+0x24>
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	e03e      	b.n	80097c8 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	4619      	mov	r1, r3
 8009750:	6938      	ldr	r0, [r7, #16]
 8009752:	f7ff fbc1 	bl	8008ed8 <move_window>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d12f      	bne.n	80097c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d102      	bne.n	8009774 <dir_find+0x4e>
 800976e:	2304      	movs	r3, #4
 8009770:	75fb      	strb	r3, [r7, #23]
 8009772:	e028      	b.n	80097c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	330b      	adds	r3, #11
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009780:	b2da      	uxtb	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	330b      	adds	r3, #11
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f003 0308 	and.w	r3, r3, #8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <dir_find+0x86>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69d8      	ldr	r0, [r3, #28]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	3320      	adds	r3, #32
 800979e:	220b      	movs	r2, #11
 80097a0:	4619      	mov	r1, r3
 80097a2:	f004 fdd7 	bl	800e354 <memcmp>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80097ac:	2100      	movs	r1, #0
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff ff04 	bl	80095bc <dir_next>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c5      	beq.n	800974a <dir_find+0x24>
 80097be:	e002      	b.n	80097c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80097c0:	bf00      	nop
 80097c2:	e000      	b.n	80097c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80097c4:	bf00      	nop

	return res;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2200      	movs	r2, #0
 80097de:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d056      	beq.n	8009896 <get_fileinfo+0xc6>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 80097f0:	e021      	b.n	8009836 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69da      	ldr	r2, [r3, #28]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	1c59      	adds	r1, r3, #1
 80097fa:	6179      	str	r1, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b20      	cmp	r3, #32
 8009806:	d100      	bne.n	800980a <get_fileinfo+0x3a>
 8009808:	e015      	b.n	8009836 <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	2b05      	cmp	r3, #5
 800980e:	d101      	bne.n	8009814 <get_fileinfo+0x44>
 8009810:	23e5      	movs	r3, #229	; 0xe5
 8009812:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b09      	cmp	r3, #9
 8009818:	d106      	bne.n	8009828 <get_fileinfo+0x58>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	613a      	str	r2, [r7, #16]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	4413      	add	r3, r2
 8009824:	222e      	movs	r2, #46	; 0x2e
 8009826:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	613a      	str	r2, [r7, #16]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4413      	add	r3, r2
 8009832:	7bfa      	ldrb	r2, [r7, #15]
 8009834:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b0a      	cmp	r3, #10
 800983a:	d9da      	bls.n	80097f2 <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	4413      	add	r3, r2
 8009842:	3309      	adds	r3, #9
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	330b      	adds	r3, #11
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009854:	b2da      	uxtb	r2, r3
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	331c      	adds	r3, #28
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fa13 	bl	8008c8c <ld_dword>
 8009866:	4602      	mov	r2, r0
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	3316      	adds	r3, #22
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff f9f2 	bl	8008c5c <ld_word>
 8009878:	4603      	mov	r3, r0
 800987a:	461a      	mov	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	3318      	adds	r3, #24
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff f9e8 	bl	8008c5c <ld_word>
 800988c:	4603      	mov	r3, r0
 800988e:	461a      	mov	r2, r3
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	809a      	strh	r2, [r3, #4]
 8009894:	e000      	b.n	8009898 <get_fileinfo+0xc8>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8009896:	bf00      	nop
}
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b08a      	sub	sp, #40	; 0x28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3320      	adds	r3, #32
 80098b4:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 80098b6:	220b      	movs	r2, #11
 80098b8:	2120      	movs	r1, #32
 80098ba:	6938      	ldr	r0, [r7, #16]
 80098bc:	f004 fd5a 	bl	800e374 <memset>
	si = i = 0; ni = 8;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61bb      	str	r3, [r7, #24]
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	2308      	movs	r3, #8
 80098ca:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	61fa      	str	r2, [r7, #28]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	4413      	add	r3, r2
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80098dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	d97c      	bls.n	80099de <create_name+0x13e>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 80098e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e8:	2b2f      	cmp	r3, #47	; 0x2f
 80098ea:	d007      	beq.n	80098fc <create_name+0x5c>
 80098ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098f0:	2b5c      	cmp	r3, #92	; 0x5c
 80098f2:	d110      	bne.n	8009916 <create_name+0x76>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 80098f4:	e002      	b.n	80098fc <create_name+0x5c>
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	3301      	adds	r3, #1
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b2f      	cmp	r3, #47	; 0x2f
 8009906:	d0f6      	beq.n	80098f6 <create_name+0x56>
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b5c      	cmp	r3, #92	; 0x5c
 8009912:	d0f0      	beq.n	80098f6 <create_name+0x56>
			break;
 8009914:	e064      	b.n	80099e0 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8009916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800991a:	2b2e      	cmp	r3, #46	; 0x2e
 800991c:	d003      	beq.n	8009926 <create_name+0x86>
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	429a      	cmp	r2, r3
 8009924:	d30d      	bcc.n	8009942 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	2b0b      	cmp	r3, #11
 800992a:	d003      	beq.n	8009934 <create_name+0x94>
 800992c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009930:	2b2e      	cmp	r3, #46	; 0x2e
 8009932:	d001      	beq.n	8009938 <create_name+0x98>
 8009934:	2306      	movs	r3, #6
 8009936:	e075      	b.n	8009a24 <create_name+0x184>
			i = 8; ni = 11;				/* Enter file extension field */
 8009938:	2308      	movs	r3, #8
 800993a:	61bb      	str	r3, [r7, #24]
 800993c:	230b      	movs	r3, #11
 800993e:	623b      	str	r3, [r7, #32]
			continue;
 8009940:	e04c      	b.n	80099dc <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8009942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fa0a 	bl	8008d60 <dbc_1st>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d024      	beq.n	800999c <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	61fa      	str	r2, [r7, #28]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	4413      	add	r3, r2
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff fa1c 	bl	8008da0 <dbc_2nd>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <create_name+0xd8>
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	3b01      	subs	r3, #1
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	429a      	cmp	r2, r3
 8009976:	d301      	bcc.n	800997c <create_name+0xdc>
 8009978:	2306      	movs	r3, #6
 800997a:	e053      	b.n	8009a24 <create_name+0x184>
			sfn[i++] = c;
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	61ba      	str	r2, [r7, #24]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4413      	add	r3, r2
 8009986:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800998a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	61ba      	str	r2, [r7, #24]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4413      	add	r3, r2
 8009996:	7bfa      	ldrb	r2, [r7, #15]
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	e797      	b.n	80098cc <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800999c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a0:	4619      	mov	r1, r3
 80099a2:	4822      	ldr	r0, [pc, #136]	; (8009a2c <create_name+0x18c>)
 80099a4:	f004 fcee 	bl	800e384 <strchr>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <create_name+0x112>
 80099ae:	2306      	movs	r3, #6
 80099b0:	e038      	b.n	8009a24 <create_name+0x184>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80099b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099b6:	2b60      	cmp	r3, #96	; 0x60
 80099b8:	d908      	bls.n	80099cc <create_name+0x12c>
 80099ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099be:	2b7a      	cmp	r3, #122	; 0x7a
 80099c0:	d804      	bhi.n	80099cc <create_name+0x12c>
 80099c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099c6:	3b20      	subs	r3, #32
 80099c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	61ba      	str	r2, [r7, #24]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4413      	add	r3, r2
 80099d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80099da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 80099dc:	e776      	b.n	80098cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80099de:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	441a      	add	r2, r3
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <create_name+0x154>
 80099f0:	2306      	movs	r3, #6
 80099f2:	e017      	b.n	8009a24 <create_name+0x184>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2be5      	cmp	r3, #229	; 0xe5
 80099fa:	d102      	bne.n	8009a02 <create_name+0x162>
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2205      	movs	r2, #5
 8009a00:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8009a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d905      	bls.n	8009a16 <create_name+0x176>
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d801      	bhi.n	8009a1a <create_name+0x17a>
 8009a16:	2204      	movs	r2, #4
 8009a18:	e000      	b.n	8009a1c <create_name+0x17c>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	330b      	adds	r3, #11
 8009a20:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009a22:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3728      	adds	r7, #40	; 0x28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	0800eef8 	.word	0x0800eef8

08009a30 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8009a40:	e002      	b.n	8009a48 <follow_path+0x18>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8009a4e:	d0f8      	beq.n	8009a42 <follow_path+0x12>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b5c      	cmp	r3, #92	; 0x5c
 8009a56:	d0f4      	beq.n	8009a42 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b1f      	cmp	r3, #31
 8009a64:	d80a      	bhi.n	8009a7c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2280      	movs	r2, #128	; 0x80
 8009a6a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff fd28 	bl	80094c6 <dir_sdi>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]
 8009a7a:	e043      	b.n	8009b04 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff ff0d 	bl	80098a0 <create_name>
 8009a86:	4603      	mov	r3, r0
 8009a88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d134      	bne.n	8009afa <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff fe48 	bl	8009726 <dir_find>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009aa0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d127      	bne.n	8009afe <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d122      	bne.n	8009afe <follow_path+0xce>
 8009ab8:	2305      	movs	r3, #5
 8009aba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009abc:	e01f      	b.n	8009afe <follow_path+0xce>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11c      	bne.n	8009b02 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	799b      	ldrb	r3, [r3, #6]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8009ad4:	2305      	movs	r3, #5
 8009ad6:	75fb      	strb	r3, [r7, #23]
 8009ad8:	e014      	b.n	8009b04 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae8:	4413      	add	r3, r2
 8009aea:	4619      	mov	r1, r3
 8009aec:	6938      	ldr	r0, [r7, #16]
 8009aee:	f7ff fdfb 	bl	80096e8 <ld_clust>
 8009af2:	4602      	mov	r2, r0
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009af8:	e7c0      	b.n	8009a7c <follow_path+0x4c>
			if (res != FR_OK) break;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <follow_path+0xd4>
				break;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <follow_path+0xd4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8009b02:	bf00      	nop
			}
		}
	}

	return res;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b089      	sub	sp, #36	; 0x24
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1a:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <get_ldnumber+0x22>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e02d      	b.n	8009b8c <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	61fa      	str	r2, [r7, #28]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d902      	bls.n	8009b46 <get_ldnumber+0x38>
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	2b3a      	cmp	r3, #58	; 0x3a
 8009b44:	d1f4      	bne.n	8009b30 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	2b3a      	cmp	r3, #58	; 0x3a
 8009b4a:	d11c      	bne.n	8009b86 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b2f      	cmp	r3, #47	; 0x2f
 8009b56:	d90c      	bls.n	8009b72 <get_ldnumber+0x64>
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b39      	cmp	r3, #57	; 0x39
 8009b5e:	d808      	bhi.n	8009b72 <get_ldnumber+0x64>
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	3302      	adds	r3, #2
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d103      	bne.n	8009b72 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	3b30      	subs	r3, #48	; 0x30
 8009b70:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dc04      	bgt.n	8009b82 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	e002      	b.n	8009b8c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8009b8a:	697b      	ldr	r3, [r7, #20]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3724      	adds	r7, #36	; 0x24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	711a      	strb	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff f990 	bl	8008ed8 <move_window>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <check_fs+0x2a>
 8009bbe:	2304      	movs	r3, #4
 8009bc0:	e088      	b.n	8009cd4 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3330      	adds	r3, #48	; 0x30
 8009bc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff f846 	bl	8008c5c <ld_word>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bda:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8009bdc:	7b7b      	ldrb	r3, [r7, #13]
 8009bde:	2beb      	cmp	r3, #235	; 0xeb
 8009be0:	d005      	beq.n	8009bee <check_fs+0x56>
 8009be2:	7b7b      	ldrb	r3, [r7, #13]
 8009be4:	2be9      	cmp	r3, #233	; 0xe9
 8009be6:	d002      	beq.n	8009bee <check_fs+0x56>
 8009be8:	7b7b      	ldrb	r3, [r7, #13]
 8009bea:	2be8      	cmp	r3, #232	; 0xe8
 8009bec:	d16a      	bne.n	8009cc4 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8009bee:	89fb      	ldrh	r3, [r7, #14]
 8009bf0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d10c      	bne.n	8009c12 <check_fs+0x7a>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3330      	adds	r3, #48	; 0x30
 8009bfc:	3352      	adds	r3, #82	; 0x52
 8009bfe:	2208      	movs	r2, #8
 8009c00:	4936      	ldr	r1, [pc, #216]	; (8009cdc <check_fs+0x144>)
 8009c02:	4618      	mov	r0, r3
 8009c04:	f004 fba6 	bl	800e354 <memcmp>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e060      	b.n	8009cd4 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3330      	adds	r3, #48	; 0x30
 8009c16:	330b      	adds	r3, #11
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff f81f 	bl	8008c5c <ld_word>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c28:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8009c2a:	897a      	ldrh	r2, [r7, #10]
 8009c2c:	897b      	ldrh	r3, [r7, #10]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	4013      	ands	r3, r2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d146      	bne.n	8009cc4 <check_fs+0x12c>
 8009c36:	897b      	ldrh	r3, [r7, #10]
 8009c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c3c:	d342      	bcc.n	8009cc4 <check_fs+0x12c>
 8009c3e:	897b      	ldrh	r3, [r7, #10]
 8009c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c44:	d83e      	bhi.n	8009cc4 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8009c46:	7b7b      	ldrb	r3, [r7, #13]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d03b      	beq.n	8009cc4 <check_fs+0x12c>
 8009c4c:	7b7a      	ldrb	r2, [r7, #13]
 8009c4e:	7b7b      	ldrb	r3, [r7, #13]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d135      	bne.n	8009cc4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3330      	adds	r3, #48	; 0x30
 8009c5c:	330e      	adds	r3, #14
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fffc 	bl	8008c5c <ld_word>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d02c      	beq.n	8009cc4 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c70:	3b01      	subs	r3, #1
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d826      	bhi.n	8009cc4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	3330      	adds	r3, #48	; 0x30
 8009c7a:	3311      	adds	r3, #17
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe ffed 	bl	8008c5c <ld_word>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01d      	beq.n	8009cc4 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3330      	adds	r3, #48	; 0x30
 8009c8c:	3313      	adds	r3, #19
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe ffe4 	bl	8008c5c <ld_word>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b7f      	cmp	r3, #127	; 0x7f
 8009c98:	d809      	bhi.n	8009cae <check_fs+0x116>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3330      	adds	r3, #48	; 0x30
 8009c9e:	3320      	adds	r3, #32
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fe fff3 	bl	8008c8c <ld_dword>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cac:	d30a      	bcc.n	8009cc4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3330      	adds	r3, #48	; 0x30
 8009cb2:	3316      	adds	r3, #22
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe ffd1 	bl	8008c5c <ld_word>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e007      	b.n	8009cd4 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8009cc4:	89fb      	ldrh	r3, [r7, #14]
 8009cc6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d101      	bne.n	8009cd2 <check_fs+0x13a>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e000      	b.n	8009cd4 <check_fs+0x13c>
 8009cd2:	2303      	movs	r3, #3
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	0800ef08 	.word	0x0800ef08

08009ce0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8009cea:	2100      	movs	r1, #0
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff ff53 	bl	8009b98 <check_fs>
 8009cf2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d007      	beq.n	8009d0a <find_volume+0x2a>
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d802      	bhi.n	8009d06 <find_volume+0x26>
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <find_volume+0x2a>
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	e045      	b.n	8009d96 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	e014      	b.n	8009d3a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	011b      	lsls	r3, r3, #4
 8009d1a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8009d1e:	4413      	add	r3, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe ffb3 	bl	8008c8c <ld_dword>
 8009d26:	4602      	mov	r2, r0
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	3320      	adds	r3, #32
 8009d2e:	443b      	add	r3, r7
 8009d30:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	3301      	adds	r3, #1
 8009d38:	61fb      	str	r3, [r7, #28]
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d9e7      	bls.n	8009d10 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <find_volume+0x6c>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	e000      	b.n	8009d4e <find_volume+0x6e>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	3320      	adds	r3, #32
 8009d56:	443b      	add	r3, r7
 8009d58:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <find_volume+0x98>
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	3320      	adds	r3, #32
 8009d66:	443b      	add	r3, r7
 8009d68:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff ff12 	bl	8009b98 <check_fs>
 8009d74:	4603      	mov	r3, r0
 8009d76:	e000      	b.n	8009d7a <find_volume+0x9a>
 8009d78:	2303      	movs	r3, #3
 8009d7a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d108      	bne.n	8009d94 <find_volume+0xb4>
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d905      	bls.n	8009d94 <find_volume+0xb4>
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	61fb      	str	r3, [r7, #28]
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d9dd      	bls.n	8009d50 <find_volume+0x70>
	return fmt;
 8009d94:	69bb      	ldr	r3, [r7, #24]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b090      	sub	sp, #64	; 0x40
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	4613      	mov	r3, r2
 8009dac:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f7ff feaa 	bl	8009b0e <get_ldnumber>
 8009dba:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	da01      	bge.n	8009dc6 <mount_volume+0x26>
 8009dc2:	230b      	movs	r3, #11
 8009dc4:	e1e4      	b.n	800a190 <mount_volume+0x3f0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8009dc6:	4aa1      	ldr	r2, [pc, #644]	; (800a04c <mount_volume+0x2ac>)
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <mount_volume+0x3a>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	e1da      	b.n	800a190 <mount_volume+0x3f0>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
 8009dda:	2101      	movs	r1, #1
 8009ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dde:	f7ff f809 	bl	8008df4 <lock_volume>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <mount_volume+0x4c>
 8009de8:	230f      	movs	r3, #15
 8009dea:	e1d1      	b.n	800a190 <mount_volume+0x3f0>
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	f023 0301 	bic.w	r3, r3, #1
 8009df8:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d01a      	beq.n	8009e38 <mount_volume+0x98>
		stat = disk_status(fs->pdrv);
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f7 fa14 	bl	8001234 <disk_status>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10c      	bne.n	8009e38 <mount_volume+0x98>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d007      	beq.n	8009e34 <mount_volume+0x94>
 8009e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <mount_volume+0x94>
				return FR_WRITE_PROTECTED;
 8009e30:	230a      	movs	r3, #10
 8009e32:	e1ad      	b.n	800a190 <mount_volume+0x3f0>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8009e34:	2300      	movs	r3, #0
 8009e36:	e1ab      	b.n	800a190 <mount_volume+0x3f0>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	785b      	ldrb	r3, [r3, #1]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f7 f90a 	bl	800105c <disk_initialize>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <mount_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e198      	b.n	800a190 <mount_volume+0x3f0>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <mount_volume+0xd4>
 8009e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <mount_volume+0xd4>
		return FR_WRITE_PROTECTED;
 8009e70:	230a      	movs	r3, #10
 8009e72:	e18d      	b.n	800a190 <mount_volume+0x3f0>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8009e74:	2100      	movs	r1, #0
 8009e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e78:	f7ff ff32 	bl	8009ce0 <find_volume>
 8009e7c:	6338      	str	r0, [r7, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	d101      	bne.n	8009e88 <mount_volume+0xe8>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e183      	b.n	800a190 <mount_volume+0x3f0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d901      	bls.n	8009e92 <mount_volume+0xf2>
 8009e8e:	230d      	movs	r3, #13
 8009e90:	e17e      	b.n	800a190 <mount_volume+0x3f0>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	3330      	adds	r3, #48	; 0x30
 8009e9c:	330b      	adds	r3, #11
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fedc 	bl	8008c5c <ld_word>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eaa:	d001      	beq.n	8009eb0 <mount_volume+0x110>
 8009eac:	230d      	movs	r3, #13
 8009eae:	e16f      	b.n	800a190 <mount_volume+0x3f0>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	3330      	adds	r3, #48	; 0x30
 8009eb4:	3316      	adds	r3, #22
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fed0 	bl	8008c5c <ld_word>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	63bb      	str	r3, [r7, #56]	; 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <mount_volume+0x134>
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	3330      	adds	r3, #48	; 0x30
 8009eca:	3324      	adds	r3, #36	; 0x24
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe fedd 	bl	8008c8c <ld_dword>
 8009ed2:	63b8      	str	r0, [r7, #56]	; 0x38
		fs->fsize = fasize;
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ed8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	78db      	ldrb	r3, [r3, #3]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d005      	beq.n	8009ef8 <mount_volume+0x158>
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	78db      	ldrb	r3, [r3, #3]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d001      	beq.n	8009ef8 <mount_volume+0x158>
 8009ef4:	230d      	movs	r3, #13
 8009ef6:	e14b      	b.n	800a190 <mount_volume+0x3f0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	78db      	ldrb	r3, [r3, #3]
 8009efc:	461a      	mov	r2, r3
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	fb02 f303 	mul.w	r3, r2, r3
 8009f04:	63bb      	str	r3, [r7, #56]	; 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f10:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	895b      	ldrh	r3, [r3, #10]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d008      	beq.n	8009f2c <mount_volume+0x18c>
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	895b      	ldrh	r3, [r3, #10]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f22:	895b      	ldrh	r3, [r3, #10]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <mount_volume+0x190>
 8009f2c:	230d      	movs	r3, #13
 8009f2e:	e12f      	b.n	800a190 <mount_volume+0x3f0>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	3330      	adds	r3, #48	; 0x30
 8009f34:	3311      	adds	r3, #17
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fe fe90 	bl	8008c5c <ld_word>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	891b      	ldrh	r3, [r3, #8]
 8009f48:	f003 030f 	and.w	r3, r3, #15
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <mount_volume+0x1b6>
 8009f52:	230d      	movs	r3, #13
 8009f54:	e11c      	b.n	800a190 <mount_volume+0x3f0>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	3330      	adds	r3, #48	; 0x30
 8009f5a:	3313      	adds	r3, #19
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fe7d 	bl	8008c5c <ld_word>
 8009f62:	4603      	mov	r3, r0
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d106      	bne.n	8009f7a <mount_volume+0x1da>
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	3330      	adds	r3, #48	; 0x30
 8009f70:	3320      	adds	r3, #32
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fe8a 	bl	8008c8c <ld_dword>
 8009f78:	63f8      	str	r0, [r7, #60]	; 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	3330      	adds	r3, #48	; 0x30
 8009f7e:	330e      	adds	r3, #14
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fe fe6b 	bl	8008c5c <ld_word>
 8009f86:	4603      	mov	r3, r0
 8009f88:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f8a:	8bfb      	ldrh	r3, [r7, #30]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <mount_volume+0x1f4>
 8009f90:	230d      	movs	r3, #13
 8009f92:	e0fd      	b.n	800a190 <mount_volume+0x3f0>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f94:	8bfa      	ldrh	r2, [r7, #30]
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	4413      	add	r3, r2
 8009f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f9c:	8912      	ldrh	r2, [r2, #8]
 8009f9e:	0912      	lsrs	r2, r2, #4
 8009fa0:	b292      	uxth	r2, r2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d201      	bcs.n	8009fb2 <mount_volume+0x212>
 8009fae:	230d      	movs	r3, #13
 8009fb0:	e0ee      	b.n	800a190 <mount_volume+0x3f0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009fb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fba:	8952      	ldrh	r2, [r2, #10]
 8009fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <mount_volume+0x22c>
 8009fc8:	230d      	movs	r3, #13
 8009fca:	e0e1      	b.n	800a190 <mount_volume+0x3f0>
		fmt = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	; (800a050 <mount_volume+0x2b0>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d801      	bhi.n	8009fdc <mount_volume+0x23c>
 8009fd8:	2303      	movs	r3, #3
 8009fda:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d801      	bhi.n	8009fea <mount_volume+0x24a>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d801      	bhi.n	8009ff8 <mount_volume+0x258>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	633b      	str	r3, [r7, #48]	; 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <mount_volume+0x262>
 8009ffe:	230d      	movs	r3, #13
 800a000:	e0c6      	b.n	800a190 <mount_volume+0x3f0>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	1c9a      	adds	r2, r3, #2
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	6a3a      	ldr	r2, [r7, #32]
 800a00e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a010:	8bfa      	ldrh	r2, [r7, #30]
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	441a      	add	r2, r3
 800a016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a018:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a01a:	6a3a      	ldr	r2, [r7, #32]
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	441a      	add	r2, r3
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	2b03      	cmp	r3, #3
 800a028:	d122      	bne.n	800a070 <mount_volume+0x2d0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	3330      	adds	r3, #48	; 0x30
 800a02e:	332a      	adds	r3, #42	; 0x2a
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fe13 	bl	8008c5c <ld_word>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <mount_volume+0x2a0>
 800a03c:	230d      	movs	r3, #13
 800a03e:	e0a7      	b.n	800a190 <mount_volume+0x3f0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	891b      	ldrh	r3, [r3, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <mount_volume+0x2b4>
 800a048:	230d      	movs	r3, #13
 800a04a:	e0a1      	b.n	800a190 <mount_volume+0x3f0>
 800a04c:	20000598 	.word	0x20000598
 800a050:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	3330      	adds	r3, #48	; 0x30
 800a058:	332c      	adds	r3, #44	; 0x2c
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fe16 	bl	8008c8c <ld_dword>
 800a060:	4602      	mov	r2, r0
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	637b      	str	r3, [r7, #52]	; 0x34
 800a06e:	e01e      	b.n	800a0ae <mount_volume+0x30e>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	891b      	ldrh	r3, [r3, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <mount_volume+0x2dc>
 800a078:	230d      	movs	r3, #13
 800a07a:	e089      	b.n	800a190 <mount_volume+0x3f0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	6a1a      	ldr	r2, [r3, #32]
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	441a      	add	r2, r3
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d103      	bne.n	800a096 <mount_volume+0x2f6>
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	e00a      	b.n	800a0ac <mount_volume+0x30c>
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	695a      	ldr	r2, [r3, #20]
 800a09a:	4613      	mov	r3, r2
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4413      	add	r3, r2
 800a0a0:	085a      	lsrs	r2, r3, #1
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	699a      	ldr	r2, [r3, #24]
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a0b8:	0a5b      	lsrs	r3, r3, #9
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d201      	bcs.n	800a0c2 <mount_volume+0x322>
 800a0be:	230d      	movs	r3, #13
 800a0c0:	e066      	b.n	800a190 <mount_volume+0x3f0>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	611a      	str	r2, [r3, #16]
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d4:	2280      	movs	r2, #128	; 0x80
 800a0d6:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	2b03      	cmp	r3, #3
 800a0dc:	d149      	bne.n	800a172 <mount_volume+0x3d2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	3330      	adds	r3, #48	; 0x30
 800a0e2:	3330      	adds	r3, #48	; 0x30
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe fdb9 	bl	8008c5c <ld_word>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d140      	bne.n	800a172 <mount_volume+0x3d2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f8:	f7fe feee 	bl	8008ed8 <move_window>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d137      	bne.n	800a172 <mount_volume+0x3d2>
		{
			fs->fsi_flag = 0;
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	2200      	movs	r2, #0
 800a106:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	3330      	adds	r3, #48	; 0x30
 800a10c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fda3 	bl	8008c5c <ld_word>
 800a116:	4603      	mov	r3, r0
 800a118:	461a      	mov	r2, r3
 800a11a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a11e:	429a      	cmp	r2, r3
 800a120:	d127      	bne.n	800a172 <mount_volume+0x3d2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	3330      	adds	r3, #48	; 0x30
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fdb0 	bl	8008c8c <ld_dword>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4a1a      	ldr	r2, [pc, #104]	; (800a198 <mount_volume+0x3f8>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d11e      	bne.n	800a172 <mount_volume+0x3d2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	3330      	adds	r3, #48	; 0x30
 800a138:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fe fda5 	bl	8008c8c <ld_dword>
 800a142:	4603      	mov	r3, r0
 800a144:	4a15      	ldr	r2, [pc, #84]	; (800a19c <mount_volume+0x3fc>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d113      	bne.n	800a172 <mount_volume+0x3d2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	3330      	adds	r3, #48	; 0x30
 800a14e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fd9a 	bl	8008c8c <ld_dword>
 800a158:	4602      	mov	r2, r0
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	3330      	adds	r3, #48	; 0x30
 800a162:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe fd90 	bl	8008c8c <ld_dword>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	b2da      	uxtb	r2, r3
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <mount_volume+0x400>)
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	3301      	adds	r3, #1
 800a180:	b29a      	uxth	r2, r3
 800a182:	4b07      	ldr	r3, [pc, #28]	; (800a1a0 <mount_volume+0x400>)
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <mount_volume+0x400>)
 800a188:	881a      	ldrh	r2, [r3, #0]
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3740      	adds	r7, #64	; 0x40
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	41615252 	.word	0x41615252
 800a19c:	61417272 	.word	0x61417272
 800a1a0:	2000059c 	.word	0x2000059c

0800a1a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800a1b6:	f107 0310 	add.w	r3, r7, #16
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff fca7 	bl	8009b0e <get_ldnumber>
 800a1c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	da01      	bge.n	800a1cc <f_mount+0x28>
 800a1c8:	230b      	movs	r3, #11
 800a1ca:	e043      	b.n	800a254 <f_mount+0xb0>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800a1cc:	4a23      	ldr	r2, [pc, #140]	; (800a25c <f_mount+0xb8>)
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00a      	beq.n	800a1f2 <f_mount+0x4e>
		FatFs[vol] = 0;
 800a1dc:	4a1f      	ldr	r2, [pc, #124]	; (800a25c <f_mount+0xb8>)
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if FF_FS_LOCK
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
 800a1e6:	69f8      	ldr	r0, [r7, #28]
 800a1e8:	f000 fdf6 	bl	800add8 <ff_mutex_delete>
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d017      	beq.n	800a228 <f_mount+0x84>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	b2d2      	uxtb	r2, r2
 800a1fe:	705a      	strb	r2, [r3, #1]
#if FF_FS_REENTRANT				/* Create a volume mutex */
		fs->ldrv = (BYTE)vol;	/* Owner volume ID */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	709a      	strb	r2, [r3, #2]
		if (!ff_mutex_create(vol)) return FR_INT_ERR;
 800a208:	69f8      	ldr	r0, [r7, #28]
 800a20a:	f000 fdc9 	bl	800ada0 <ff_mutex_create>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <f_mount+0x74>
 800a214:	2302      	movs	r3, #2
 800a216:	e01d      	b.n	800a254 <f_mount+0xb0>
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	490e      	ldr	r1, [pc, #56]	; (800a25c <f_mount+0xb8>)
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <f_mount+0x8e>
 800a22e:	2300      	movs	r3, #0
 800a230:	e010      	b.n	800a254 <f_mount+0xb0>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a232:	f107 010c 	add.w	r1, r7, #12
 800a236:	f107 0308 	add.w	r3, r7, #8
 800a23a:	2200      	movs	r2, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff fdaf 	bl	8009da0 <mount_volume>
 800a242:	4603      	mov	r3, r0
 800a244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	7dfa      	ldrb	r2, [r7, #23]
 800a24a:	4611      	mov	r1, r2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe fdec 	bl	8008e2a <unlock_volume>
 800a252:	7dfb      	ldrb	r3, [r7, #23]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3720      	adds	r7, #32
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20000598 	.word	0x20000598

0800a260 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08e      	sub	sp, #56	; 0x38
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 800a26a:	f107 0108 	add.w	r1, r7, #8
 800a26e:	1d3b      	adds	r3, r7, #4
 800a270:	2200      	movs	r2, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fd94 	bl	8009da0 <mount_volume>
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 800a27e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a282:	2b00      	cmp	r3, #0
 800a284:	d11f      	bne.n	800a2c6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	f107 0308 	add.w	r3, r7, #8
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fbce 	bl	8009a30 <follow_path>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {				/* Follow completed */
 800a29a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d111      	bne.n	800a2c6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800a2a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2a6:	b25b      	sxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	da03      	bge.n	800a2b4 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800a2ac:	2306      	movs	r3, #6
 800a2ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a2b2:	e008      	b.n	800a2c6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <f_stat+0x66>
 800a2ba:	f107 0308 	add.w	r3, r7, #8
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff fa85 	bl	80097d0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fdab 	bl	8008e2a <unlock_volume>
 800a2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3738      	adds	r7, #56	; 0x38
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08e      	sub	sp, #56	; 0x38
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	607b      	str	r3, [r7, #4]
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a2f2:	f107 0210 	add.w	r2, r7, #16
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f7 f892 	bl	8001424 <disk_ioctl>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <create_partition+0x2a>
 800a306:	2301      	movs	r3, #1
 800a308:	e108      	b.n	800a51c <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a30e:	233f      	movs	r3, #63	; 0x3f
 800a310:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a312:	2308      	movs	r3, #8
 800a314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a318:	e004      	b.n	800a324 <create_partition+0x44>
 800a31a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00a      	beq.n	800a342 <create_partition+0x62>
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a330:	6a3a      	ldr	r2, [r7, #32]
 800a332:	fbb2 f2f3 	udiv	r2, r2, r3
 800a336:	7ffb      	ldrb	r3, [r7, #31]
 800a338:	fbb2 f3f3 	udiv	r3, r2, r3
 800a33c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a340:	d8eb      	bhi.n	800a31a <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a346:	2b00      	cmp	r3, #0
 800a348:	d102      	bne.n	800a350 <create_partition+0x70>
 800a34a:	23ff      	movs	r3, #255	; 0xff
 800a34c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a350:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a354:	2100      	movs	r1, #0
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f004 f80c 	bl	800e374 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a364:	2300      	movs	r3, #0
 800a366:	637b      	str	r3, [r7, #52]	; 0x34
 800a368:	7ffb      	ldrb	r3, [r7, #31]
 800a36a:	633b      	str	r3, [r7, #48]	; 0x30
 800a36c:	e0b5      	b.n	800a4da <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	4413      	add	r3, r2
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	2b64      	cmp	r3, #100	; 0x64
 800a37e:	d80d      	bhi.n	800a39c <create_partition+0xbc>
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	2b64      	cmp	r3, #100	; 0x64
 800a384:	d008      	beq.n	800a398 <create_partition+0xb8>
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	4a66      	ldr	r2, [pc, #408]	; (800a524 <create_partition+0x244>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	095b      	lsrs	r3, r3, #5
 800a390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a392:	fb02 f303 	mul.w	r3, r2, r3
 800a396:	e000      	b.n	800a39a <create_partition+0xba>
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	4413      	add	r3, r2
 800a3a2:	6a3a      	ldr	r2, [r7, #32]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d305      	bcc.n	800a3b4 <create_partition+0xd4>
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	4413      	add	r3, r2
 800a3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d903      	bls.n	800a3bc <create_partition+0xdc>
 800a3b4:	6a3a      	ldr	r2, [r7, #32]
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 8097 	beq.w	800a4f2 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fc9c 	bl	8008d08 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	330c      	adds	r3, #12
 800a3d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fc96 	bl	8008d08 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	3304      	adds	r3, #4
 800a3e0:	7bba      	ldrb	r2, [r7, #14]
 800a3e2:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a3e4:	7ffb      	ldrb	r3, [r7, #31]
 800a3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f4:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a3f6:	7ffb      	ldrb	r3, [r7, #31]
 800a3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a402:	fbb3 f1f2 	udiv	r1, r3, r2
 800a406:	fb01 f202 	mul.w	r2, r1, r2
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a40e:	7ffa      	ldrb	r2, [r7, #31]
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	fbb3 f1f2 	udiv	r1, r3, r2
 800a416:	fb01 f202 	mul.w	r2, r1, r2
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	3301      	adds	r3, #1
 800a420:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	3301      	adds	r3, #1
 800a426:	7dfa      	ldrb	r2, [r7, #23]
 800a428:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	089b      	lsrs	r3, r3, #2
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a434:	b2d9      	uxtb	r1, r3
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	3302      	adds	r3, #2
 800a43a:	7dba      	ldrb	r2, [r7, #22]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	b2d2      	uxtb	r2, r2
 800a440:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	3303      	adds	r3, #3
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	b2d2      	uxtb	r2, r2
 800a44a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	4413      	add	r3, r2
 800a452:	1e5a      	subs	r2, r3, #1
 800a454:	7ffb      	ldrb	r3, [r7, #31]
 800a456:	fbb2 f2f3 	udiv	r2, r2, r3
 800a45a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a462:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	4413      	add	r3, r2
 800a46a:	1e5a      	subs	r2, r3, #1
 800a46c:	7ffb      	ldrb	r3, [r7, #31]
 800a46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a472:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a476:	fbb3 f1f2 	udiv	r1, r3, r2
 800a47a:	fb01 f202 	mul.w	r2, r1, r2
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	4413      	add	r3, r2
 800a488:	3b01      	subs	r3, #1
 800a48a:	7ffa      	ldrb	r2, [r7, #31]
 800a48c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a490:	fb01 f202 	mul.w	r2, r1, r2
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	b2db      	uxtb	r3, r3
 800a498:	3301      	adds	r3, #1
 800a49a:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	3305      	adds	r3, #5
 800a4a0:	7dfa      	ldrb	r2, [r7, #23]
 800a4a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	089b      	lsrs	r3, r3, #2
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a4ae:	b2d9      	uxtb	r1, r3
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	3306      	adds	r3, #6
 800a4b4:	7dba      	ldrb	r2, [r7, #22]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	b2d2      	uxtb	r2, r2
 800a4ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	3307      	adds	r3, #7
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	3310      	adds	r3, #16
 800a4ca:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	4413      	add	r3, r2
 800a4d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4dc:	2b03      	cmp	r3, #3
 800a4de:	d809      	bhi.n	800a4f4 <create_partition+0x214>
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d006      	beq.n	800a4f4 <create_partition+0x214>
 800a4e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	f4ff af3f 	bcc.w	800a36e <create_partition+0x8e>
 800a4f0:	e000      	b.n	800a4f4 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a4f2:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fbe7 	bl	8008cd2 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a504:	7bf8      	ldrb	r0, [r7, #15]
 800a506:	2301      	movs	r3, #1
 800a508:	2200      	movs	r2, #0
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	f7f6 ff0e 	bl	800132c <disk_write>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <create_partition+0x23a>
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <create_partition+0x23c>
	}

	return FR_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3738      	adds	r7, #56	; 0x38
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	51eb851f 	.word	0x51eb851f

0800a528 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b0a0      	sub	sp, #128	; 0x80
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a536:	f107 030c 	add.w	r3, r7, #12
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7ff fae7 	bl	8009b0e <get_ldnumber>
 800a540:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a544:	2b00      	cmp	r3, #0
 800a546:	da02      	bge.n	800a54e <f_mkfs+0x26>
 800a548:	230b      	movs	r3, #11
 800a54a:	f000 bc1b 	b.w	800ad84 <f_mkfs+0x85c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a54e:	4aa2      	ldr	r2, [pc, #648]	; (800a7d8 <f_mkfs+0x2b0>)
 800a550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <f_mkfs+0x3e>
 800a55a:	4a9f      	ldr	r2, [pc, #636]	; (800a7d8 <f_mkfs+0x2b0>)
 800a55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a568:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a572:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a576:	4618      	mov	r0, r3
 800a578:	f7f6 fd70 	bl	800105c <disk_initialize>
 800a57c:	4603      	mov	r3, r0
 800a57e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a582:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <f_mkfs+0x6a>
 800a58e:	2303      	movs	r3, #3
 800a590:	e3f8      	b.n	800ad84 <f_mkfs+0x85c>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a592:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <f_mkfs+0x7a>
 800a59e:	230a      	movs	r3, #10
 800a5a0:	e3f0      	b.n	800ad84 <f_mkfs+0x85c>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <f_mkfs+0x84>
 800a5a8:	4b8c      	ldr	r3, [pc, #560]	; (800a7dc <f_mkfs+0x2b4>)
 800a5aa:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	623b      	str	r3, [r7, #32]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d107      	bne.n	800a5c8 <f_mkfs+0xa0>
 800a5b8:	f107 0220 	add.w	r2, r7, #32
 800a5bc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a5c0:	2103      	movs	r1, #3
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f6 ff2e 	bl	8001424 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d009      	beq.n	800a5e2 <f_mkfs+0xba>
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5d4:	d805      	bhi.n	800a5e2 <f_mkfs+0xba>
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	1e5a      	subs	r2, r3, #1
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <f_mkfs+0xbe>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	623b      	str	r3, [r7, #32]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
 800a5e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	f003 030f 	and.w	r3, r3, #15
 800a5f6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d006      	beq.n	800a610 <f_mkfs+0xe8>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	785b      	ldrb	r3, [r3, #1]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d802      	bhi.n	800a610 <f_mkfs+0xe8>
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	e000      	b.n	800a612 <f_mkfs+0xea>
 800a610:	2301      	movs	r3, #1
 800a612:	643b      	str	r3, [r7, #64]	; 0x40
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d014      	beq.n	800a646 <f_mkfs+0x11e>
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a624:	d80f      	bhi.n	800a646 <f_mkfs+0x11e>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a62e:	0952      	lsrs	r2, r2, #5
 800a630:	b292      	uxth	r2, r2
 800a632:	fbb3 f1f2 	udiv	r1, r3, r2
 800a636:	fb01 f202 	mul.w	r2, r1, r2
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d102      	bne.n	800a646 <f_mkfs+0x11e>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	e001      	b.n	800a64a <f_mkfs+0x122>
 800a646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a654:	d80a      	bhi.n	800a66c <f_mkfs+0x144>
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	68da      	ldr	r2, [r3, #12]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	3b01      	subs	r3, #1
 800a660:	4013      	ands	r3, r2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <f_mkfs+0x144>
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	e000      	b.n	800a66e <f_mkfs+0x146>
 800a66c:	2300      	movs	r3, #0
 800a66e:	657b      	str	r3, [r7, #84]	; 0x54
	sz_au /= ss;	/* Byte --> Sector */
 800a670:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a676:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67a:	657b      	str	r3, [r7, #84]	; 0x54

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a67c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	fbb2 f3f3 	udiv	r3, r2, r3
 800a686:	63bb      	str	r3, [r7, #56]	; 0x38
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <f_mkfs+0x16a>
 800a68e:	2311      	movs	r3, #17
 800a690:	e378      	b.n	800ad84 <f_mkfs+0x85c>
	buf = (BYTE*)work;		/* Working buffer */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <f_mkfs+0x178>
 800a69c:	2311      	movs	r3, #17
 800a69e:	e371      	b.n	800ad84 <f_mkfs+0x85c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	61fb      	str	r3, [r7, #28]
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	677b      	str	r3, [r7, #116]	; 0x74
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a6a8:	f107 021c 	add.w	r2, r7, #28
 800a6ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7f6 feb6 	bl	8001424 <disk_ioctl>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <f_mkfs+0x19a>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e360      	b.n	800ad84 <f_mkfs+0x85c>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a6c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a6c6:	f003 0308 	and.w	r3, r3, #8
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d108      	bne.n	800a6e0 <f_mkfs+0x1b8>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	2b3f      	cmp	r3, #63	; 0x3f
 800a6d2:	d905      	bls.n	800a6e0 <f_mkfs+0x1b8>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a6d4:	233f      	movs	r3, #63	; 0x3f
 800a6d6:	677b      	str	r3, [r7, #116]	; 0x74
 800a6d8:	69fa      	ldr	r2, [r7, #28]
 800a6da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	61fb      	str	r3, [r7, #28]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6e4:	d801      	bhi.n	800a6ea <f_mkfs+0x1c2>
 800a6e6:	230e      	movs	r3, #14
 800a6e8:	e34c      	b.n	800ad84 <f_mkfs+0x85c>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ec:	2b80      	cmp	r3, #128	; 0x80
 800a6ee:	d901      	bls.n	800a6f4 <f_mkfs+0x1cc>
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	657b      	str	r3, [r7, #84]	; 0x54
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a6f4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <f_mkfs+0x1ec>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a700:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d103      	bne.n	800a714 <f_mkfs+0x1ec>
				fsty = FS_FAT32; break;
 800a70c:	2303      	movs	r3, #3
 800a70e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800a712:	e00a      	b.n	800a72a <f_mkfs+0x202>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a714:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <f_mkfs+0x1fc>
 800a720:	2313      	movs	r3, #19
 800a722:	e32f      	b.n	800ad84 <f_mkfs+0x85c>
		fsty = FS_FAT16;
 800a724:	2302      	movs	r3, #2
 800a726:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a72a:	f7f6 fb2d 	bl	8000d88 <get_fattime>
 800a72e:	4602      	mov	r2, r0
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	4413      	add	r3, r2
 800a734:	633b      	str	r3, [r7, #48]	; 0x30

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a738:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a73a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d13e      	bne.n	800a7c0 <f_mkfs+0x298>
				if (pau == 0) {	/* AU auto-selection */
 800a742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a744:	2b00      	cmp	r3, #0
 800a746:	d11b      	bne.n	800a780 <f_mkfs+0x258>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	0c5b      	lsrs	r3, r3, #17
 800a74c:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a74e:	2300      	movs	r3, #0
 800a750:	653b      	str	r3, [r7, #80]	; 0x50
 800a752:	2301      	movs	r3, #1
 800a754:	66bb      	str	r3, [r7, #104]	; 0x68
 800a756:	e005      	b.n	800a764 <f_mkfs+0x23c>
 800a758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a75a:	3301      	adds	r3, #1
 800a75c:	653b      	str	r3, [r7, #80]	; 0x50
 800a75e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	66bb      	str	r3, [r7, #104]	; 0x68
 800a764:	4a1e      	ldr	r2, [pc, #120]	; (800a7e0 <f_mkfs+0x2b8>)
 800a766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d007      	beq.n	800a780 <f_mkfs+0x258>
 800a770:	4a1b      	ldr	r2, [pc, #108]	; (800a7e0 <f_mkfs+0x2b8>)
 800a772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a778:	461a      	mov	r2, r3
 800a77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d2eb      	bcs.n	800a758 <f_mkfs+0x230>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a784:	fbb2 f3f3 	udiv	r3, r2, r3
 800a788:	62fb      	str	r3, [r7, #44]	; 0x2c
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	3302      	adds	r3, #2
 800a78e:	009a      	lsls	r2, r3, #2
 800a790:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a794:	4413      	add	r3, r2
 800a796:	1e5a      	subs	r2, r3, #1
 800a798:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a0:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 32;	/* Number of reserved sectors */
 800a7a2:	2320      	movs	r3, #32
 800a7a4:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = 0;		/* No static directory */
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	65bb      	str	r3, [r7, #88]	; 0x58
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d903      	bls.n	800a7bc <f_mkfs+0x294>
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	4a0b      	ldr	r2, [pc, #44]	; (800a7e4 <f_mkfs+0x2bc>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d956      	bls.n	800a86a <f_mkfs+0x342>
 800a7bc:	230e      	movs	r3, #14
 800a7be:	e2e1      	b.n	800ad84 <f_mkfs+0x85c>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a7c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d124      	bne.n	800a810 <f_mkfs+0x2e8>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	0b1b      	lsrs	r3, r3, #12
 800a7ca:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	653b      	str	r3, [r7, #80]	; 0x50
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7d4:	e00e      	b.n	800a7f4 <f_mkfs+0x2cc>
 800a7d6:	bf00      	nop
 800a7d8:	20000598 	.word	0x20000598
 800a7dc:	0800f0a8 	.word	0x0800f0a8
 800a7e0:	0800f0b8 	.word	0x0800f0b8
 800a7e4:	0ffffff5 	.word	0x0ffffff5
 800a7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	653b      	str	r3, [r7, #80]	; 0x50
 800a7ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7f4:	4a99      	ldr	r2, [pc, #612]	; (800aa5c <f_mkfs+0x534>)
 800a7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <f_mkfs+0x2e8>
 800a800:	4a96      	ldr	r2, [pc, #600]	; (800aa5c <f_mkfs+0x534>)
 800a802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a808:	461a      	mov	r2, r3
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d2eb      	bcs.n	800a7e8 <f_mkfs+0x2c0>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a810:	69fa      	ldr	r2, [r7, #28]
 800a812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a814:	fbb2 f3f3 	udiv	r3, r2, r3
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (n_clst > MAX_FAT12) {
 800a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a820:	4293      	cmp	r3, r2
 800a822:	d904      	bls.n	800a82e <f_mkfs+0x306>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a826:	3302      	adds	r3, #2
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a82c:	e00a      	b.n	800a844 <f_mkfs+0x31c>
				} else {
					fsty = FS_FAT12;
 800a82e:	2301      	movs	r3, #1
 800a830:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a836:	4613      	mov	r3, r2
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	4413      	add	r3, r2
 800a83c:	3301      	adds	r3, #1
 800a83e:	085b      	lsrs	r3, r3, #1
 800a840:	3303      	adds	r3, #3
 800a842:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a844:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84a:	4413      	add	r3, r2
 800a84c:	1e5a      	subs	r2, r3, #1
 800a84e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a852:	fbb2 f3f3 	udiv	r3, r2, r3
 800a856:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 1;						/* Number of reserved sectors */
 800a858:	2301      	movs	r3, #1
 800a85a:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800a85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a864:	fbb2 f3f3 	udiv	r3, r2, r3
 800a868:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a86a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a86c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a86e:	4413      	add	r3, r2
 800a870:	673b      	str	r3, [r7, #112]	; 0x70
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800a872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a876:	fb03 f202 	mul.w	r2, r3, r2
 800a87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a87c:	4413      	add	r3, r2
 800a87e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a880:	4413      	add	r3, r2
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800a884:	6a3a      	ldr	r2, [r7, #32]
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	4413      	add	r3, r2
 800a88a:	1e5a      	subs	r2, r3, #1
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	425b      	negs	r3, r3
 800a890:	401a      	ands	r2, r3
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800a898:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d108      	bne.n	800a8b2 <f_mkfs+0x38a>
				sz_rsv += n; b_fat += n;
 800a8a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a4:	4413      	add	r3, r2
 800a8a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ac:	4413      	add	r3, r2
 800a8ae:	673b      	str	r3, [r7, #112]	; 0x70
 800a8b0:	e019      	b.n	800a8e6 <f_mkfs+0x3be>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800a8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8bc:	fb01 f202 	mul.w	r2, r1, r2
 800a8c0:	1a9b      	subs	r3, r3, r2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d008      	beq.n	800a8d8 <f_mkfs+0x3b0>
					n--; sz_rsv++; b_fat++;
 800a8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a8d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	673b      	str	r3, [r7, #112]	; 0x70
				}
				sz_fat += n / n_fat;
 800a8d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8e2:	4413      	add	r3, r2
 800a8e4:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800a8e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a8e8:	011a      	lsls	r2, r3, #4
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	441a      	add	r2, r3
 800a8ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8f0:	1ad2      	subs	r2, r2, r3
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d901      	bls.n	800a8fc <f_mkfs+0x3d4>
 800a8f8:	230e      	movs	r3, #14
 800a8fa:	e243      	b.n	800ad84 <f_mkfs+0x85c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800a8fc:	69fa      	ldr	r2, [r7, #28]
 800a8fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a900:	1ad2      	subs	r2, r2, r3
 800a902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a90e:	1ad2      	subs	r2, r2, r3
 800a910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a912:	fbb2 f3f3 	udiv	r3, r2, r3
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (fsty == FS_FAT32) {
 800a918:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d10f      	bne.n	800a940 <f_mkfs+0x418>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a926:	4293      	cmp	r3, r2
 800a928:	d80a      	bhi.n	800a940 <f_mkfs+0x418>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d105      	bne.n	800a93c <f_mkfs+0x414>
 800a930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a932:	085b      	lsrs	r3, r3, #1
 800a934:	657b      	str	r3, [r7, #84]	; 0x54
 800a936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d145      	bne.n	800a9c8 <f_mkfs+0x4a0>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a93c:	230e      	movs	r3, #14
 800a93e:	e221      	b.n	800ad84 <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT16) {
 800a940:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a944:	2b02      	cmp	r3, #2
 800a946:	d134      	bne.n	800a9b2 <f_mkfs+0x48a>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a94e:	4293      	cmp	r3, r2
 800a950:	d91f      	bls.n	800a992 <f_mkfs+0x46a>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800a952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a954:	2b00      	cmp	r3, #0
 800a956:	d107      	bne.n	800a968 <f_mkfs+0x440>
 800a958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	2b40      	cmp	r3, #64	; 0x40
 800a95e:	d803      	bhi.n	800a968 <f_mkfs+0x440>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800a960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	657b      	str	r3, [r7, #84]	; 0x54
 800a966:	e034      	b.n	800a9d2 <f_mkfs+0x4aa>
					}
					if ((fsopt & FM_FAT32)) {
 800a968:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <f_mkfs+0x454>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a974:	2303      	movs	r3, #3
 800a976:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800a97a:	e02a      	b.n	800a9d2 <f_mkfs+0x4aa>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d105      	bne.n	800a98e <f_mkfs+0x466>
 800a982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	657b      	str	r3, [r7, #84]	; 0x54
 800a988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a98a:	2b80      	cmp	r3, #128	; 0x80
 800a98c:	d91e      	bls.n	800a9cc <f_mkfs+0x4a4>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a98e:	230e      	movs	r3, #14
 800a990:	e1f8      	b.n	800ad84 <f_mkfs+0x85c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a998:	4293      	cmp	r3, r2
 800a99a:	d80a      	bhi.n	800a9b2 <f_mkfs+0x48a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d105      	bne.n	800a9ae <f_mkfs+0x486>
 800a9a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9aa:	2b80      	cmp	r3, #128	; 0x80
 800a9ac:	d910      	bls.n	800a9d0 <f_mkfs+0x4a8>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a9ae:	230e      	movs	r3, #14
 800a9b0:	e1e8      	b.n	800ad84 <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800a9b2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d10c      	bne.n	800a9d4 <f_mkfs+0x4ac>
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d907      	bls.n	800a9d4 <f_mkfs+0x4ac>
 800a9c4:	230e      	movs	r3, #14
 800a9c6:	e1dd      	b.n	800ad84 <f_mkfs+0x85c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a9c8:	bf00      	nop
 800a9ca:	e6b4      	b.n	800a736 <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a9cc:	bf00      	nop
 800a9ce:	e6b2      	b.n	800a736 <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a9d0:	bf00      	nop
			pau = sz_au;
 800a9d2:	e6b0      	b.n	800a736 <f_mkfs+0x20e>

			/* Ok, it is the valid cluster configuration */
			break;
 800a9d4:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800a9d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a9da:	461a      	mov	r2, r3
 800a9dc:	2100      	movs	r1, #0
 800a9de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a9e0:	f003 fcc8 	bl	800e374 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800a9e4:	220b      	movs	r2, #11
 800a9e6:	491e      	ldr	r1, [pc, #120]	; (800aa60 <f_mkfs+0x538>)
 800a9e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a9ea:	f003 fd5c 	bl	800e4a6 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f0:	330b      	adds	r3, #11
 800a9f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe f96a 	bl	8008cd2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa00:	330d      	adds	r3, #13
 800aa02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800aa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0a:	330e      	adds	r3, #14
 800aa0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa0e:	b292      	uxth	r2, r2
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe f95d 	bl	8008cd2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800aa18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1a:	3310      	adds	r3, #16
 800aa1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800aa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa24:	f103 0211 	add.w	r2, r3, #17
 800aa28:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d002      	beq.n	800aa36 <f_mkfs+0x50e>
 800aa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	e000      	b.n	800aa38 <f_mkfs+0x510>
 800aa36:	2300      	movs	r3, #0
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f7fe f949 	bl	8008cd2 <st_word>
		if (sz_vol < 0x10000) {
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa46:	d20d      	bcs.n	800aa64 <f_mkfs+0x53c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800aa48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4a:	3313      	adds	r3, #19
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	b292      	uxth	r2, r2
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe f93d 	bl	8008cd2 <st_word>
 800aa58:	e00b      	b.n	800aa72 <f_mkfs+0x54a>
 800aa5a:	bf00      	nop
 800aa5c:	0800f0c8 	.word	0x0800f0c8
 800aa60:	0800ef14 	.word	0x0800ef14
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800aa64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa66:	3320      	adds	r3, #32
 800aa68:	69fa      	ldr	r2, [r7, #28]
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe f94b 	bl	8008d08 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800aa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa74:	3315      	adds	r3, #21
 800aa76:	22f8      	movs	r2, #248	; 0xf8
 800aa78:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800aa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7c:	3318      	adds	r3, #24
 800aa7e:	213f      	movs	r1, #63	; 0x3f
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe f926 	bl	8008cd2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800aa86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa88:	331a      	adds	r3, #26
 800aa8a:	21ff      	movs	r1, #255	; 0xff
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe f920 	bl	8008cd2 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800aa92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa94:	331c      	adds	r3, #28
 800aa96:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe f935 	bl	8008d08 <st_dword>
		if (fsty == FS_FAT32) {
 800aa9e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d12d      	bne.n	800ab02 <f_mkfs+0x5da>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	3343      	adds	r3, #67	; 0x43
 800aaaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe f92b 	bl	8008d08 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	3324      	adds	r3, #36	; 0x24
 800aab6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe f925 	bl	8008d08 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800aabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac0:	332c      	adds	r3, #44	; 0x2c
 800aac2:	2102      	movs	r1, #2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fe f91f 	bl	8008d08 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800aaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aacc:	3330      	adds	r3, #48	; 0x30
 800aace:	2101      	movs	r1, #1
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe f8fe 	bl	8008cd2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800aad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad8:	3332      	adds	r3, #50	; 0x32
 800aada:	2106      	movs	r1, #6
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe f8f8 	bl	8008cd2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800aae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae4:	3340      	adds	r3, #64	; 0x40
 800aae6:	2280      	movs	r2, #128	; 0x80
 800aae8:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800aaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaec:	3342      	adds	r3, #66	; 0x42
 800aaee:	2229      	movs	r2, #41	; 0x29
 800aaf0:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800aaf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf4:	3347      	adds	r3, #71	; 0x47
 800aaf6:	2213      	movs	r2, #19
 800aaf8:	49a4      	ldr	r1, [pc, #656]	; (800ad8c <f_mkfs+0x864>)
 800aafa:	4618      	mov	r0, r3
 800aafc:	f003 fcd3 	bl	800e4a6 <memcpy>
 800ab00:	e01c      	b.n	800ab3c <f_mkfs+0x614>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800ab02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab04:	3327      	adds	r3, #39	; 0x27
 800ab06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe f8fd 	bl	8008d08 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800ab0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab10:	3316      	adds	r3, #22
 800ab12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab14:	b292      	uxth	r2, r2
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fe f8da 	bl	8008cd2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ab1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab20:	3324      	adds	r3, #36	; 0x24
 800ab22:	2280      	movs	r2, #128	; 0x80
 800ab24:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ab26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab28:	3326      	adds	r3, #38	; 0x26
 800ab2a:	2229      	movs	r2, #41	; 0x29
 800ab2c:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab30:	332b      	adds	r3, #43	; 0x2b
 800ab32:	2213      	movs	r2, #19
 800ab34:	4996      	ldr	r1, [pc, #600]	; (800ad90 <f_mkfs+0x868>)
 800ab36:	4618      	mov	r0, r3
 800ab38:	f003 fcb5 	bl	800e4a6 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab42:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe f8c3 	bl	8008cd2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800ab4c:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ab50:	2301      	movs	r3, #1
 800ab52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ab54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab56:	f7f6 fbe9 	bl	800132c <disk_write>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <f_mkfs+0x63c>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e10f      	b.n	800ad84 <f_mkfs+0x85c>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800ab64:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d141      	bne.n	800abf0 <f_mkfs+0x6c8>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ab6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab6e:	1d9a      	adds	r2, r3, #6
 800ab70:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ab74:	2301      	movs	r3, #1
 800ab76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab78:	f7f6 fbd8 	bl	800132c <disk_write>
			memset(buf, 0, ss);
 800ab7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab80:	461a      	mov	r2, r3
 800ab82:	2100      	movs	r1, #0
 800ab84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab86:	f003 fbf5 	bl	800e374 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ab8a:	4982      	ldr	r1, [pc, #520]	; (800ad94 <f_mkfs+0x86c>)
 800ab8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab8e:	f7fe f8bb 	bl	8008d08 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ab92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab98:	497f      	ldr	r1, [pc, #508]	; (800ad98 <f_mkfs+0x870>)
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe f8b4 	bl	8008d08 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800aba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	3b01      	subs	r3, #1
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7fe f8ab 	bl	8008d08 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800abb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800abb8:	2102      	movs	r1, #2
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe f8a4 	bl	8008d08 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800abc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800abc6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe f881 	bl	8008cd2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800abd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abd2:	1dda      	adds	r2, r3, #7
 800abd4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800abd8:	2301      	movs	r3, #1
 800abda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abdc:	f7f6 fba6 	bl	800132c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800abe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800abe8:	2301      	movs	r3, #1
 800abea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abec:	f7f6 fb9e 	bl	800132c <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800abf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800abf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abf6:	fb02 f303 	mul.w	r3, r2, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	2100      	movs	r1, #0
 800abfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac00:	f003 fbb8 	bl	800e374 <memset>
		sect = b_fat;		/* FAT start sector */
 800ac04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac06:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800ac08:	2300      	movs	r3, #0
 800ac0a:	653b      	str	r3, [r7, #80]	; 0x50
 800ac0c:	e04c      	b.n	800aca8 <f_mkfs+0x780>
			if (fsty == FS_FAT32) {
 800ac0e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d113      	bne.n	800ac3e <f_mkfs+0x716>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800ac16:	f06f 0107 	mvn.w	r1, #7
 800ac1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac1c:	f7fe f874 	bl	8008d08 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800ac20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac22:	3304      	adds	r3, #4
 800ac24:	f04f 31ff 	mov.w	r1, #4294967295
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe f86d 	bl	8008d08 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800ac2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac30:	3308      	adds	r3, #8
 800ac32:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe f866 	bl	8008d08 <st_dword>
 800ac3c:	e00b      	b.n	800ac56 <f_mkfs+0x72e>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800ac3e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d101      	bne.n	800ac4a <f_mkfs+0x722>
 800ac46:	4b55      	ldr	r3, [pc, #340]	; (800ad9c <f_mkfs+0x874>)
 800ac48:	e001      	b.n	800ac4e <f_mkfs+0x726>
 800ac4a:	f06f 0307 	mvn.w	r3, #7
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac52:	f7fe f859 	bl	8008d08 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ac56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac58:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ac5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	bf28      	it	cs
 800ac62:	4613      	movcs	r3, r2
 800ac64:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ac66:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ac6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac70:	f7f6 fb5c 	bl	800132c <disk_write>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <f_mkfs+0x756>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e082      	b.n	800ad84 <f_mkfs+0x85c>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800ac7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ac82:	461a      	mov	r2, r3
 800ac84:	2100      	movs	r1, #0
 800ac86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac88:	f003 fb74 	bl	800e374 <memset>
				sect += n; nsect -= n;
 800ac8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac90:	4413      	add	r3, r2
 800ac92:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800ac9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1db      	bne.n	800ac5a <f_mkfs+0x732>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800aca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca4:	3301      	adds	r3, #1
 800aca6:	653b      	str	r3, [r7, #80]	; 0x50
 800aca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acac:	429a      	cmp	r2, r3
 800acae:	d3ae      	bcc.n	800ac0e <f_mkfs+0x6e6>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800acb0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d101      	bne.n	800acbc <f_mkfs+0x794>
 800acb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acba:	e000      	b.n	800acbe <f_mkfs+0x796>
 800acbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acbe:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800acc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	4293      	cmp	r3, r2
 800acc6:	bf28      	it	cs
 800acc8:	4613      	movcs	r3, r2
 800acca:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800accc:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800acd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800acd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acd6:	f7f6 fb29 	bl	800132c <disk_write>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <f_mkfs+0x7bc>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e04f      	b.n	800ad84 <f_mkfs+0x85c>
			sect += n; nsect -= n;
 800ace4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ace6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace8:	4413      	add	r3, r2
 800acea:	67bb      	str	r3, [r7, #120]	; 0x78
 800acec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800acf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e2      	bne.n	800acc0 <f_mkfs+0x798>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800acfa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800acfe:	2b03      	cmp	r3, #3
 800ad00:	d103      	bne.n	800ad0a <f_mkfs+0x7e2>
		sys = 0x0C;		/* FAT32X */
 800ad02:	230c      	movs	r3, #12
 800ad04:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800ad08:	e012      	b.n	800ad30 <f_mkfs+0x808>
	} else if (sz_vol >= 0x10000) {
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad10:	d303      	bcc.n	800ad1a <f_mkfs+0x7f2>
		sys = 0x06;		/* FAT12/16 (large) */
 800ad12:	2306      	movs	r3, #6
 800ad14:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800ad18:	e00a      	b.n	800ad30 <f_mkfs+0x808>
	} else if (fsty == FS_FAT16) {
 800ad1a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d103      	bne.n	800ad2a <f_mkfs+0x802>
		sys = 0x04;		/* FAT16 */
 800ad22:	2304      	movs	r3, #4
 800ad24:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800ad28:	e002      	b.n	800ad30 <f_mkfs+0x808>
	} else {
		sys = 0x01;		/* FAT12 */
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800ad30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ad34:	f003 0308 	and.w	r3, r3, #8
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d116      	bne.n	800ad6a <f_mkfs+0x842>
			lba[0] = sz_vol; lba[1] = 0;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	2300      	movs	r3, #0
 800ad42:	61bb      	str	r3, [r7, #24]
			res = create_partition(pdrv, lba, sys, buf);
 800ad44:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800ad48:	f107 0114 	add.w	r1, r7, #20
 800ad4c:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ad50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad52:	f7ff fac5 	bl	800a2e0 <create_partition>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) LEAVE_MKFS(res);
 800ad5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <f_mkfs+0x842>
 800ad64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad68:	e00c      	b.n	800ad84 <f_mkfs+0x85c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ad6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2100      	movs	r1, #0
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7f6 fb56 	bl	8001424 <disk_ioctl>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <f_mkfs+0x85a>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <f_mkfs+0x85c>

	LEAVE_MKFS(FR_OK);
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3780      	adds	r7, #128	; 0x80
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	0800ef20 	.word	0x0800ef20
 800ad90:	0800ef34 	.word	0x0800ef34
 800ad94:	41615252 	.word	0x41615252
 800ad98:	61417272 	.word	0x61417272
 800ad9c:	00fffff8 	.word	0x00fffff8

0800ada0 <ff_mutex_create>:
*/

int ff_mutex_create(		/* Returns 1:Function succeeded or 0:Could not create the mutex */
					int vol /* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
	Mutex[vol] = xSemaphoreCreateMutex();
	return (int)(Mutex[vol] != NULL);

#elif OS_TYPE == 4 /* CMSIS-RTOS */

	Mutex[vol] = osMutexNew(NULL);
 800ada8:	2000      	movs	r0, #0
 800adaa:	f000 f9b8 	bl	800b11e <osMutexNew>
 800adae:	4602      	mov	r2, r0
 800adb0:	4908      	ldr	r1, [pc, #32]	; (800add4 <ff_mutex_create+0x34>)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return (int)(Mutex[vol] != NULL);
 800adb8:	4a06      	ldr	r2, [pc, #24]	; (800add4 <ff_mutex_create+0x34>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bf14      	ite	ne
 800adc4:	2301      	movne	r3, #1
 800adc6:	2300      	moveq	r3, #0
 800adc8:	b2db      	uxtb	r3, r3

#endif
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	200005a0 	.word	0x200005a0

0800add8 <ff_mutex_delete>:
*/

void ff_mutex_delete(		 /* Returns 1:Function succeeded or 0:Could not delete due to an error */
					 int vol /* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]

#elif OS_TYPE == 3 /* FreeRTOS */
	vSemaphoreDelete(Mutex[vol]);

#elif OS_TYPE == 4 /* CMSIS-RTOS */
	osMutexDelete(Mutex[vol]);
 800ade0:	4a05      	ldr	r2, [pc, #20]	; (800adf8 <ff_mutex_delete+0x20>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 faa3 	bl	800b334 <osMutexDelete>

#endif
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	200005a0 	.word	0x200005a0

0800adfc <ff_mutex_take>:
*/

int ff_mutex_take(		  /* Returns 1:Succeeded or 0:Timeout */
				  int vol /* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]

#elif OS_TYPE == 3 /* FreeRTOS */
	return (int)(xSemaphoreTake(Mutex[vol], FF_FS_TIMEOUT) == pdTRUE);

#elif OS_TYPE == 4 /* CMSIS-RTOS */
	return (int)(osMutexAcquire(Mutex[vol], FF_FS_TIMEOUT) == osOK);
 800ae04:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <ff_mutex_take+0x30>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fa09 	bl	800b228 <osMutexAcquire>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	2300      	movne	r3, #0
 800ae20:	b2db      	uxtb	r3, r3

#endif
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200005a0 	.word	0x200005a0

0800ae30 <ff_mutex_give>:
 */

void ff_mutex_give(
	int vol /* Mutex ID: Volume mutex (0 to FF_VOLUMES - 1) or system mutex (FF_VOLUMES) */
)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

#elif OS_TYPE == 3 /* FreeRTOS */
	xSemaphoreGive(Mutex[vol]);

#elif OS_TYPE == 4 /* CMSIS-RTOS */
	osMutexRelease(Mutex[vol]);
 800ae38:	4a05      	ldr	r2, [pc, #20]	; (800ae50 <ff_mutex_give+0x20>)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f000 fa3b 	bl	800b2bc <osMutexRelease>

#endif
}
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	200005a0 	.word	0x200005a0

0800ae54 <__NVIC_SetPriority>:
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6039      	str	r1, [r7, #0]
 800ae5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	db0a      	blt.n	800ae7e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	490c      	ldr	r1, [pc, #48]	; (800aea0 <__NVIC_SetPriority+0x4c>)
 800ae6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae72:	0112      	lsls	r2, r2, #4
 800ae74:	b2d2      	uxtb	r2, r2
 800ae76:	440b      	add	r3, r1
 800ae78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ae7c:	e00a      	b.n	800ae94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	4908      	ldr	r1, [pc, #32]	; (800aea4 <__NVIC_SetPriority+0x50>)
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	3b04      	subs	r3, #4
 800ae8c:	0112      	lsls	r2, r2, #4
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	440b      	add	r3, r1
 800ae92:	761a      	strb	r2, [r3, #24]
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	e000e100 	.word	0xe000e100
 800aea4:	e000ed00 	.word	0xe000ed00

0800aea8 <SysTick_Handler>:
extern void xPortSysTickHandler (void);

/*
  SysTick handler implementation that also clears overflow flag.
*/
void SysTick_Handler (void) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <SysTick_Handler+0x1c>)
 800aeae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aeb0:	f002 f852 	bl	800cf58 <xTaskGetSchedulerState>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d001      	beq.n	800aebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aeba:	f002 fdb9 	bl	800da30 <xPortSysTickHandler>
  }
}
 800aebe:	bf00      	nop
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	e000e010 	.word	0xe000e010

0800aec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800aecc:	2100      	movs	r1, #0
 800aece:	f06f 0004 	mvn.w	r0, #4
 800aed2:	f7ff ffbf 	bl	800ae54 <__NVIC_SetPriority>
#endif
}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b086      	sub	sp, #24
 800aede:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aee4:	f3ef 8305 	mrs	r3, IPSR
 800aee8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeea:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800aef0:	2301      	movs	r3, #1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e013      	b.n	800af1e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800aef6:	f002 f82f 	bl	800cf58 <xTaskGetSchedulerState>
 800aefa:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d00d      	beq.n	800af1e <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800af02:	f3ef 8310 	mrs	r3, PRIMASK
 800af06:	60bb      	str	r3, [r7, #8]
  return(result);
 800af08:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d105      	bne.n	800af1a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af0e:	f3ef 8311 	mrs	r3, BASEPRI
 800af12:	607b      	str	r3, [r7, #4]
  return(result);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d001      	beq.n	800af1e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800af1a:	2301      	movs	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800af1e:	697b      	ldr	r3, [r7, #20]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800af2e:	f7ff ffd4 	bl	800aeda <IRQ_Context>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800af38:	f06f 0305 	mvn.w	r3, #5
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	e012      	b.n	800af66 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800af40:	f002 f80a 	bl	800cf58 <xTaskGetSchedulerState>
 800af44:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d109      	bne.n	800af60 <osKernelInitialize+0x38>
 800af4c:	4b08      	ldr	r3, [pc, #32]	; (800af70 <osKernelInitialize+0x48>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d105      	bne.n	800af60 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800af54:	4b06      	ldr	r3, [pc, #24]	; (800af70 <osKernelInitialize+0x48>)
 800af56:	2201      	movs	r2, #1
 800af58:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	e002      	b.n	800af66 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800af60:	f04f 33ff 	mov.w	r3, #4294967295
 800af64:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800af66:	687b      	ldr	r3, [r7, #4]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	200005a8 	.word	0x200005a8

0800af74 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800af7a:	f7ff ffae 	bl	800aeda <IRQ_Context>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <osKernelStart+0x18>
    stat = osErrorISR;
 800af84:	f06f 0305 	mvn.w	r3, #5
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	e016      	b.n	800afba <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800af8c:	f001 ffe4 	bl	800cf58 <xTaskGetSchedulerState>
 800af90:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d10d      	bne.n	800afb4 <osKernelStart+0x40>
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <osKernelStart+0x50>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d109      	bne.n	800afb4 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800afa0:	f7ff ff92 	bl	800aec8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <osKernelStart+0x50>)
 800afa6:	2202      	movs	r2, #2
 800afa8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800afaa:	f001 fa9b 	bl	800c4e4 <vTaskStartScheduler>
      stat = osOK;
 800afae:	2300      	movs	r3, #0
 800afb0:	607b      	str	r3, [r7, #4]
 800afb2:	e002      	b.n	800afba <osKernelStart+0x46>
    } else {
      stat = osError;
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295
 800afb8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800afba:	687b      	ldr	r3, [r7, #4]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	200005a8 	.word	0x200005a8

0800afc8 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08e      	sub	sp, #56	; 0x38
 800afcc:	af04      	add	r7, sp, #16
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800afd8:	f7ff ff7f 	bl	800aeda <IRQ_Context>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d17e      	bne.n	800b0e0 <osThreadNew+0x118>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d07b      	beq.n	800b0e0 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800afe8:	2380      	movs	r3, #128	; 0x80
 800afea:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800afec:	2318      	movs	r3, #24
 800afee:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aff4:	f04f 33ff 	mov.w	r3, #4294967295
 800aff8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d045      	beq.n	800b08c <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <osThreadNew+0x46>
        name = attr->name;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d008      	beq.n	800b034 <osThreadNew+0x6c>
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	2b38      	cmp	r3, #56	; 0x38
 800b026:	d805      	bhi.n	800b034 <osThreadNew+0x6c>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800b034:	2300      	movs	r3, #0
 800b036:	e054      	b.n	800b0e2 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	089b      	lsrs	r3, r3, #2
 800b046:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00e      	beq.n	800b06e <osThreadNew+0xa6>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	2b5b      	cmp	r3, #91	; 0x5b
 800b056:	d90a      	bls.n	800b06e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d006      	beq.n	800b06e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800b068:	2301      	movs	r3, #1
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	e010      	b.n	800b090 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10c      	bne.n	800b090 <osThreadNew+0xc8>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d108      	bne.n	800b090 <osThreadNew+0xc8>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d104      	bne.n	800b090 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	61bb      	str	r3, [r7, #24]
 800b08a:	e001      	b.n	800b090 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d110      	bne.n	800b0b8 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b09e:	9202      	str	r2, [sp, #8]
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6a3a      	ldr	r2, [r7, #32]
 800b0aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f001 f845 	bl	800c13c <xTaskCreateStatic>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	e013      	b.n	800b0e0 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d110      	bne.n	800b0e0 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	f107 0314 	add.w	r3, r7, #20
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f001 f878 	bl	800c1c6 <xTaskCreate>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d001      	beq.n	800b0e0 <osThreadNew+0x118>
            hTask = NULL;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800b0e0:	697b      	ldr	r3, [r7, #20]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3728      	adds	r7, #40	; 0x28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800b0f2:	f7ff fef2 	bl	800aeda <IRQ_Context>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <osDelay+0x1a>
    stat = osErrorISR;
 800b0fc:	f06f 0305 	mvn.w	r3, #5
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	e007      	b.n	800b114 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d002      	beq.n	800b114 <osDelay+0x2a>
      vTaskDelay(ticks);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f001 f9c4 	bl	800c49c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800b114:	68fb      	ldr	r3, [r7, #12]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b11e:	b580      	push	{r7, lr}
 800b120:	b086      	sub	sp, #24
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 800b12a:	f7ff fed6 	bl	800aeda <IRQ_Context>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d174      	bne.n	800b21e <osMutexNew+0x100>
    if (attr != NULL) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <osMutexNew+0x24>
      type = attr->attr_bits;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	613b      	str	r3, [r7, #16]
 800b140:	e001      	b.n	800b146 <osMutexNew+0x28>
    } else {
      type = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <osMutexNew+0x38>
      rmtx = 1U;
 800b150:	2301      	movs	r3, #1
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e001      	b.n	800b15a <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f003 0308 	and.w	r3, r3, #8
 800b160:	2b00      	cmp	r3, #0
 800b162:	d15c      	bne.n	800b21e <osMutexNew+0x100>
      mem = -1;
 800b164:	f04f 33ff 	mov.w	r3, #4294967295
 800b168:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d015      	beq.n	800b19c <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d006      	beq.n	800b186 <osMutexNew+0x68>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	2b4f      	cmp	r3, #79	; 0x4f
 800b17e:	d902      	bls.n	800b186 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 800b180:	2301      	movs	r3, #1
 800b182:	60bb      	str	r3, [r7, #8]
 800b184:	e00c      	b.n	800b1a0 <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d108      	bne.n	800b1a0 <osMutexNew+0x82>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d104      	bne.n	800b1a0 <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	60bb      	str	r3, [r7, #8]
 800b19a:	e001      	b.n	800b1a0 <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d112      	bne.n	800b1cc <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	2004      	movs	r0, #4
 800b1b4:	f000 fb04 	bl	800b7c0 <xQueueCreateMutexStatic>
 800b1b8:	6178      	str	r0, [r7, #20]
 800b1ba:	e016      	b.n	800b1ea <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	f000 fafc 	bl	800b7c0 <xQueueCreateMutexStatic>
 800b1c8:	6178      	str	r0, [r7, #20]
 800b1ca:	e00e      	b.n	800b1ea <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10b      	bne.n	800b1ea <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b1d8:	2004      	movs	r0, #4
 800b1da:	f000 fad9 	bl	800b790 <xQueueCreateMutex>
 800b1de:	6178      	str	r0, [r7, #20]
 800b1e0:	e003      	b.n	800b1ea <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	f000 fad4 	bl	800b790 <xQueueCreateMutex>
 800b1e8:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00c      	beq.n	800b20a <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <osMutexNew+0xec>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d005      	beq.n	800b20a <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4619      	mov	r1, r3
 800b204:	6978      	ldr	r0, [r7, #20]
 800b206:	f000 fef3 	bl	800bff0 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d006      	beq.n	800b21e <osMutexNew+0x100>
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f043 0301 	orr.w	r3, r3, #1
 800b21c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 800b21e:	697b      	ldr	r3, [r7, #20]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f023 0301 	bic.w	r3, r3, #1
 800b238:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f003 0301 	and.w	r3, r3, #1
 800b240:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 800b246:	f7ff fe48 	bl	800aeda <IRQ_Context>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <osMutexAcquire+0x30>
    stat = osErrorISR;
 800b250:	f06f 0305 	mvn.w	r3, #5
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e02c      	b.n	800b2b2 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 800b25e:	f06f 0303 	mvn.w	r3, #3
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	e025      	b.n	800b2b2 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d011      	beq.n	800b290 <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6938      	ldr	r0, [r7, #16]
 800b270:	f000 faed 	bl	800b84e <xQueueTakeMutexRecursive>
 800b274:	4603      	mov	r3, r0
 800b276:	2b01      	cmp	r3, #1
 800b278:	d01b      	beq.n	800b2b2 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <osMutexAcquire+0x60>
          stat = osErrorTimeout;
 800b280:	f06f 0301 	mvn.w	r3, #1
 800b284:	617b      	str	r3, [r7, #20]
 800b286:	e014      	b.n	800b2b2 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 800b288:	f06f 0302 	mvn.w	r3, #2
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	e010      	b.n	800b2b2 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b290:	6839      	ldr	r1, [r7, #0]
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f000 fc8b 	bl	800bbae <xQueueSemaphoreTake>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d009      	beq.n	800b2b2 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <osMutexAcquire+0x84>
          stat = osErrorTimeout;
 800b2a4:	f06f 0301 	mvn.w	r3, #1
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	e002      	b.n	800b2b2 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 800b2ac:	f06f 0302 	mvn.w	r3, #2
 800b2b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800b2b2:	697b      	ldr	r3, [r7, #20]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f023 0301 	bic.w	r3, r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 800b2d8:	f7ff fdff 	bl	800aeda <IRQ_Context>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <osMutexRelease+0x2e>
    stat = osErrorISR;
 800b2e2:	f06f 0305 	mvn.w	r3, #5
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	e01f      	b.n	800b32a <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d103      	bne.n	800b2f8 <osMutexRelease+0x3c>
    stat = osErrorParameter;
 800b2f0:	f06f 0303 	mvn.w	r3, #3
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	e018      	b.n	800b32a <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b2fe:	6938      	ldr	r0, [r7, #16]
 800b300:	f000 fa79 	bl	800b7f6 <xQueueGiveMutexRecursive>
 800b304:	4603      	mov	r3, r0
 800b306:	2b01      	cmp	r3, #1
 800b308:	d00f      	beq.n	800b32a <osMutexRelease+0x6e>
        stat = osErrorResource;
 800b30a:	f06f 0302 	mvn.w	r3, #2
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	e00b      	b.n	800b32a <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b312:	2300      	movs	r3, #0
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	6938      	ldr	r0, [r7, #16]
 800b31a:	f000 fac6 	bl	800b8aa <xQueueGenericSend>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b01      	cmp	r3, #1
 800b322:	d002      	beq.n	800b32a <osMutexRelease+0x6e>
        stat = osErrorResource;
 800b324:	f06f 0302 	mvn.w	r3, #2
 800b328:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800b32a:	697b      	ldr	r3, [r7, #20]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <osMutexDelete>:
}

/*
  Delete a Mutex object.
*/
osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f023 0301 	bic.w	r3, r3, #1
 800b342:	60bb      	str	r3, [r7, #8]

  if (IRQ_Context() != 0U) {
 800b344:	f7ff fdc9 	bl	800aeda <IRQ_Context>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <osMutexDelete+0x22>
    stat = osErrorISR;
 800b34e:	f06f 0305 	mvn.w	r3, #5
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e00e      	b.n	800b374 <osMutexDelete+0x40>
  }
  else if (hMutex == NULL) {
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <osMutexDelete+0x30>
    stat = osErrorParameter;
 800b35c:	f06f 0303 	mvn.w	r3, #3
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e007      	b.n	800b374 <osMutexDelete+0x40>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800b364:	68b8      	ldr	r0, [r7, #8]
 800b366:	f000 fe87 	bl	800c078 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60fb      	str	r3, [r7, #12]
    vSemaphoreDelete (hMutex);
 800b36e:	68b8      	ldr	r0, [r7, #8]
 800b370:	f000 fcfa 	bl	800bd68 <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 800b374:	68fb      	ldr	r3, [r7, #12]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
	...

0800b380 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	4a07      	ldr	r2, [pc, #28]	; (800b3ac <vApplicationGetIdleTaskMemory+0x2c>)
 800b390:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	4a06      	ldr	r2, [pc, #24]	; (800b3b0 <vApplicationGetIdleTaskMemory+0x30>)
 800b396:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2280      	movs	r2, #128	; 0x80
 800b39c:	601a      	str	r2, [r3, #0]
}
 800b39e:	bf00      	nop
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	200005ac 	.word	0x200005ac
 800b3b0:	20000608 	.word	0x20000608

0800b3b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a07      	ldr	r2, [pc, #28]	; (800b3e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b3c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	4a06      	ldr	r2, [pc, #24]	; (800b3e4 <vApplicationGetTimerTaskMemory+0x30>)
 800b3ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3d2:	601a      	str	r2, [r3, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	20000808 	.word	0x20000808
 800b3e4:	20000864 	.word	0x20000864

0800b3e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f103 0208 	add.w	r2, r3, #8
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b400:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f103 0208 	add.w	r2, r3, #8
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f103 0208 	add.w	r2, r3, #8
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800b442:	b480      	push	{r7}
 800b444:	b085      	sub	sp, #20
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b458:	d103      	bne.n	800b462 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	e00c      	b.n	800b47c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3308      	adds	r3, #8
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	e002      	b.n	800b470 <vListInsert+0x2e>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d2f6      	bcs.n	800b46a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	1c5a      	adds	r2, r3, #1
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]
}
 800b4a8:	bf00      	nop
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	6892      	ldr	r2, [r2, #8]
 800b4ca:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6852      	ldr	r2, [r2, #4]
 800b4d4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d103      	bne.n	800b4e8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689a      	ldr	r2, [r3, #8]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	1e5a      	subs	r2, r3, #1
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800b512:	2301      	movs	r3, #1
 800b514:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <xQueueGenericReset+0x1e>
 800b520:	f002 fb9a 	bl	800dc58 <ulSetInterruptMask>
 800b524:	e7fe      	b.n	800b524 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d057      	beq.n	800b5dc <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800b530:	2b00      	cmp	r3, #0
 800b532:	d053      	beq.n	800b5dc <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53c:	2100      	movs	r1, #0
 800b53e:	fba3 2302 	umull	r2, r3, r3, r2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d000      	beq.n	800b548 <xQueueGenericReset+0x40>
 800b546:	2101      	movs	r1, #1
 800b548:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d146      	bne.n	800b5dc <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800b54e:	f002 fa43 	bl	800d9d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b55e:	fb01 f303 	mul.w	r3, r1, r3
 800b562:	441a      	add	r2, r3
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2200      	movs	r2, #0
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57e:	3b01      	subs	r3, #1
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	441a      	add	r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	22ff      	movs	r2, #255	; 0xff
 800b592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	22ff      	movs	r2, #255	; 0xff
 800b59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10e      	bne.n	800b5c2 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d014      	beq.n	800b5d6 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 fab9 	bl	800cb28 <xTaskRemoveFromEventList>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00c      	beq.n	800b5d6 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b5bc:	f002 f9fa 	bl	800d9b4 <vPortYield>
 800b5c0:	e009      	b.n	800b5d6 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	3310      	adds	r3, #16
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff ff0e 	bl	800b3e8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3324      	adds	r3, #36	; 0x24
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff ff09 	bl	800b3e8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800b5d6:	f002 fa11 	bl	800d9fc <vPortExitCritical>
 800b5da:	e001      	b.n	800b5e0 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d102      	bne.n	800b5ec <xQueueGenericReset+0xe4>
 800b5e6:	f002 fb37 	bl	800dc58 <ulSetInterruptMask>
 800b5ea:	e7fe      	b.n	800b5ea <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b088      	sub	sp, #32
 800b5fa:	af02      	add	r7, sp, #8
 800b5fc:	60f8      	str	r0, [r7, #12]
 800b5fe:	60b9      	str	r1, [r7, #8]
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d102      	bne.n	800b614 <xQueueGenericCreateStatic+0x1e>
 800b60e:	f002 fb23 	bl	800dc58 <ulSetInterruptMask>
 800b612:	e7fe      	b.n	800b612 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d028      	beq.n	800b66c <xQueueGenericCreateStatic+0x76>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d025      	beq.n	800b66c <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d01f      	beq.n	800b66c <xQueueGenericCreateStatic+0x76>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d102      	bne.n	800b638 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d119      	bne.n	800b66c <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
                {
                    /* Sanity check that the size of the structure used to declare a
                     * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                     * the real queue and semaphore structures. */
                    volatile size_t xSize = sizeof( StaticQueue_t );
 800b638:	2350      	movs	r3, #80	; 0x50
 800b63a:	613b      	str	r3, [r7, #16]

                    /* This assertion cannot be branch covered in unit tests */
                    configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2b50      	cmp	r3, #80	; 0x50
 800b640:	d002      	beq.n	800b648 <xQueueGenericCreateStatic+0x52>
 800b642:	f002 fb09 	bl	800dc58 <ulSetInterruptMask>
 800b646:	e7fe      	b.n	800b646 <xQueueGenericCreateStatic+0x50>
                    ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800b648:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b656:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	4613      	mov	r3, r2
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f856 	bl	800b716 <prvInitialiseNewQueue>
 800b66a:	e005      	b.n	800b678 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d102      	bne.n	800b678 <xQueueGenericCreateStatic+0x82>
 800b672:	f002 faf1 	bl	800dc58 <ulSetInterruptMask>
 800b676:	e7fe      	b.n	800b676 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800b678:	697b      	ldr	r3, [r7, #20]
    }
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800b682:	b580      	push	{r7, lr}
 800b684:	b08a      	sub	sp, #40	; 0x28
 800b686:	af02      	add	r7, sp, #8
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	4613      	mov	r3, r2
 800b68e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d032      	beq.n	800b700 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800b69a:	2100      	movs	r1, #0
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	fba3 2302 	umull	r2, r3, r3, r2
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d000      	beq.n	800b6aa <xQueueGenericCreate+0x28>
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d127      	bne.n	800b700 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800b6b8:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800b6bc:	d820      	bhi.n	800b700 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	fb02 f303 	mul.w	r3, r2, r3
 800b6c6:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	3350      	adds	r3, #80	; 0x50
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f002 fb23 	bl	800dd18 <pvPortMalloc>
 800b6d2:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d018      	beq.n	800b70c <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	3350      	adds	r3, #80	; 0x50
 800b6e2:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                    {
                        /* Queues can be created either statically or dynamically, so
                         * note this task was created dynamically in case it is later
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6ec:	79fa      	ldrb	r2, [r7, #7]
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f80c 	bl	800b716 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800b6fe:	e005      	b.n	800b70c <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <xQueueGenericCreate+0x8a>
 800b706:	f002 faa7 	bl	800dc58 <ulSetInterruptMask>
 800b70a:	e7fe      	b.n	800b70a <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800b70c:	69fb      	ldr	r3, [r7, #28]
    }
 800b70e:	4618      	mov	r0, r3
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
 800b722:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d103      	bne.n	800b732 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	e002      	b.n	800b738 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b744:	2101      	movs	r1, #1
 800b746:	69b8      	ldr	r0, [r7, #24]
 800b748:	f7ff fede 	bl	800b508 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00e      	beq.n	800b788 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b77c:	2300      	movs	r3, #0
 800b77e:	2200      	movs	r2, #0
 800b780:	2100      	movs	r1, #0
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f891 	bl	800b8aa <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800b788:	bf00      	nop
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b79a:	2301      	movs	r3, #1
 800b79c:	617b      	str	r3, [r7, #20]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6939      	ldr	r1, [r7, #16]
 800b7a8:	6978      	ldr	r0, [r7, #20]
 800b7aa:	f7ff ff6a 	bl	800b682 <xQueueGenericCreate>
 800b7ae:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7ff ffd3 	bl	800b75c <prvInitialiseMutex>

        return xNewQueue;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
    }
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6939      	ldr	r1, [r7, #16]
 800b7de:	6978      	ldr	r0, [r7, #20]
 800b7e0:	f7ff ff09 	bl	800b5f6 <xQueueGenericCreateStatic>
 800b7e4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f7ff ffb8 	bl	800b75c <prvInitialiseMutex>

        return xNewQueue;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
    }
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800b7f6:	b590      	push	{r4, r7, lr}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <xQueueGiveMutexRecursive+0x18>
 800b808:	f002 fa26 	bl	800dc58 <ulSetInterruptMask>
 800b80c:	e7fe      	b.n	800b80c <xQueueGiveMutexRecursive+0x16>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	689c      	ldr	r4, [r3, #8]
 800b812:	f001 fb91 	bl	800cf38 <xTaskGetCurrentTaskHandle>
 800b816:	4603      	mov	r3, r0
 800b818:	429c      	cmp	r4, r3
 800b81a:	d111      	bne.n	800b840 <xQueueGiveMutexRecursive+0x4a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	1e5a      	subs	r2, r3, #1
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d105      	bne.n	800b83a <xQueueGiveMutexRecursive+0x44>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b82e:	2300      	movs	r3, #0
 800b830:	2200      	movs	r2, #0
 800b832:	2100      	movs	r1, #0
 800b834:	68b8      	ldr	r0, [r7, #8]
 800b836:	f000 f838 	bl	800b8aa <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800b83a:	2301      	movs	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	e001      	b.n	800b844 <xQueueGiveMutexRecursive+0x4e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 800b844:	68fb      	ldr	r3, [r7, #12]
    }
 800b846:	4618      	mov	r0, r3
 800b848:	3714      	adds	r7, #20
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd90      	pop	{r4, r7, pc}

0800b84e <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800b84e:	b590      	push	{r4, r7, lr}
 800b850:	b085      	sub	sp, #20
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <xQueueTakeMutexRecursive+0x1a>
 800b862:	f002 f9f9 	bl	800dc58 <ulSetInterruptMask>
 800b866:	e7fe      	b.n	800b866 <xQueueTakeMutexRecursive+0x18>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	689c      	ldr	r4, [r3, #8]
 800b86c:	f001 fb64 	bl	800cf38 <xTaskGetCurrentTaskHandle>
 800b870:	4603      	mov	r3, r0
 800b872:	429c      	cmp	r4, r3
 800b874:	d107      	bne.n	800b886 <xQueueTakeMutexRecursive+0x38>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800b880:	2301      	movs	r3, #1
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e00c      	b.n	800b8a0 <xQueueTakeMutexRecursive+0x52>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	68b8      	ldr	r0, [r7, #8]
 800b88a:	f000 f990 	bl	800bbae <xQueueSemaphoreTake>
 800b88e:	60f8      	str	r0, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <xQueueTakeMutexRecursive+0x52>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
    }
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd90      	pop	{r4, r7, pc}

0800b8aa <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b08a      	sub	sp, #40	; 0x28
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	60f8      	str	r0, [r7, #12]
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	607a      	str	r2, [r7, #4]
 800b8b6:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <xQueueGenericSend+0x22>
 800b8c6:	f002 f9c7 	bl	800dc58 <ulSetInterruptMask>
 800b8ca:	e7fe      	b.n	800b8ca <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d103      	bne.n	800b8da <xQueueGenericSend+0x30>
 800b8d2:	6a3b      	ldr	r3, [r7, #32]
 800b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <xQueueGenericSend+0x34>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e000      	b.n	800b8e0 <xQueueGenericSend+0x36>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <xQueueGenericSend+0x40>
 800b8e4:	f002 f9b8 	bl	800dc58 <ulSetInterruptMask>
 800b8e8:	e7fe      	b.n	800b8e8 <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d103      	bne.n	800b8f8 <xQueueGenericSend+0x4e>
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d101      	bne.n	800b8fc <xQueueGenericSend+0x52>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e000      	b.n	800b8fe <xQueueGenericSend+0x54>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d102      	bne.n	800b908 <xQueueGenericSend+0x5e>
 800b902:	f002 f9a9 	bl	800dc58 <ulSetInterruptMask>
 800b906:	e7fe      	b.n	800b906 <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b908:	f001 fb26 	bl	800cf58 <xTaskGetSchedulerState>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d102      	bne.n	800b918 <xQueueGenericSend+0x6e>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <xQueueGenericSend+0x72>
 800b918:	2301      	movs	r3, #1
 800b91a:	e000      	b.n	800b91e <xQueueGenericSend+0x74>
 800b91c:	2300      	movs	r3, #0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <xQueueGenericSend+0x7e>
 800b922:	f002 f999 	bl	800dc58 <ulSetInterruptMask>
 800b926:	e7fe      	b.n	800b926 <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b928:	f002 f856 	bl	800d9d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b934:	429a      	cmp	r2, r3
 800b936:	d302      	bcc.n	800b93e <xQueueGenericSend+0x94>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d11d      	bne.n	800b97a <xQueueGenericSend+0xd0>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	68b9      	ldr	r1, [r7, #8]
 800b942:	6a38      	ldr	r0, [r7, #32]
 800b944:	f000 fa43 	bl	800bdce <prvCopyDataToQueue>
 800b948:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <xQueueGenericSend+0xbe>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	3324      	adds	r3, #36	; 0x24
 800b956:	4618      	mov	r0, r3
 800b958:	f001 f8e6 	bl	800cb28 <xTaskRemoveFromEventList>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d007      	beq.n	800b972 <xQueueGenericSend+0xc8>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800b962:	f002 f827 	bl	800d9b4 <vPortYield>
 800b966:	e004      	b.n	800b972 <xQueueGenericSend+0xc8>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <xQueueGenericSend+0xc8>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800b96e:	f002 f821 	bl	800d9b4 <vPortYield>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800b972:	f002 f843 	bl	800d9fc <vPortExitCritical>
                return pdPASS;
 800b976:	2301      	movs	r3, #1
 800b978:	e05c      	b.n	800ba34 <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d103      	bne.n	800b988 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800b980:	f002 f83c 	bl	800d9fc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800b984:	2300      	movs	r3, #0
 800b986:	e055      	b.n	800ba34 <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d106      	bne.n	800b99c <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b98e:	f107 0314 	add.w	r3, r7, #20
 800b992:	4618      	mov	r0, r3
 800b994:	f001 f996 	bl	800ccc4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b998:	2301      	movs	r3, #1
 800b99a:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b99c:	f002 f82e 	bl	800d9fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b9a0:	f000 fdfa 	bl	800c598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b9a4:	f002 f818 	bl	800d9d8 <vPortEnterCritical>
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b4:	d103      	bne.n	800b9be <xQueueGenericSend+0x114>
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ca:	d103      	bne.n	800b9d4 <xQueueGenericSend+0x12a>
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9d4:	f002 f812 	bl	800d9fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9d8:	1d3a      	adds	r2, r7, #4
 800b9da:	f107 0314 	add.w	r3, r7, #20
 800b9de:	4611      	mov	r1, r2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 f985 	bl	800ccf0 <xTaskCheckForTimeOut>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d11d      	bne.n	800ba28 <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9ec:	6a38      	ldr	r0, [r7, #32]
 800b9ee:	f000 fae6 	bl	800bfbe <prvIsQueueFull>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d011      	beq.n	800ba1c <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	3310      	adds	r3, #16
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 f837 	bl	800ca74 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800ba06:	6a38      	ldr	r0, [r7, #32]
 800ba08:	f000 fa71 	bl	800beee <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800ba0c:	f000 fdd2 	bl	800c5b4 <xTaskResumeAll>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d188      	bne.n	800b928 <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 800ba16:	f001 ffcd 	bl	800d9b4 <vPortYield>
 800ba1a:	e785      	b.n	800b928 <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800ba1c:	6a38      	ldr	r0, [r7, #32]
 800ba1e:	f000 fa66 	bl	800beee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800ba22:	f000 fdc7 	bl	800c5b4 <xTaskResumeAll>
 800ba26:	e77f      	b.n	800b928 <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800ba28:	6a38      	ldr	r0, [r7, #32]
 800ba2a:	f000 fa60 	bl	800beee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800ba2e:	f000 fdc1 	bl	800c5b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800ba32:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3728      	adds	r7, #40	; 0x28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08a      	sub	sp, #40	; 0x28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <xQueueReceive+0x20>
 800ba56:	f002 f8ff 	bl	800dc58 <ulSetInterruptMask>
 800ba5a:	e7fe      	b.n	800ba5a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d103      	bne.n	800ba6a <xQueueReceive+0x2e>
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <xQueueReceive+0x32>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e000      	b.n	800ba70 <xQueueReceive+0x34>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <xQueueReceive+0x3e>
 800ba74:	f002 f8f0 	bl	800dc58 <ulSetInterruptMask>
 800ba78:	e7fe      	b.n	800ba78 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba7a:	f001 fa6d 	bl	800cf58 <xTaskGetSchedulerState>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <xQueueReceive+0x4e>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <xQueueReceive+0x52>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <xQueueReceive+0x54>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <xQueueReceive+0x5e>
 800ba94:	f002 f8e0 	bl	800dc58 <ulSetInterruptMask>
 800ba98:	e7fe      	b.n	800ba98 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800ba9a:	f001 ff9d 	bl	800d9d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d019      	beq.n	800bade <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800baaa:	68b9      	ldr	r1, [r7, #8]
 800baac:	6a38      	ldr	r0, [r7, #32]
 800baae:	f000 f9f8 	bl	800bea2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	1e5a      	subs	r2, r3, #1
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	3310      	adds	r3, #16
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 f82e 	bl	800cb28 <xTaskRemoveFromEventList>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800bad2:	f001 ff6f 	bl	800d9b4 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800bad6:	f001 ff91 	bl	800d9fc <vPortExitCritical>
                return pdPASS;
 800bada:	2301      	movs	r3, #1
 800badc:	e063      	b.n	800bba6 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d103      	bne.n	800baec <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800bae4:	f001 ff8a 	bl	800d9fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800bae8:	2300      	movs	r3, #0
 800baea:	e05c      	b.n	800bba6 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800baf2:	f107 0314 	add.w	r3, r7, #20
 800baf6:	4618      	mov	r0, r3
 800baf8:	f001 f8e4 	bl	800ccc4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800bafc:	2301      	movs	r3, #1
 800bafe:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800bb00:	f001 ff7c 	bl	800d9fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800bb04:	f000 fd48 	bl	800c598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800bb08:	f001 ff66 	bl	800d9d8 <vPortEnterCritical>
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb12:	b25b      	sxtb	r3, r3
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d103      	bne.n	800bb22 <xQueueReceive+0xe6>
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb28:	b25b      	sxtb	r3, r3
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d103      	bne.n	800bb38 <xQueueReceive+0xfc>
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb38:	f001 ff60 	bl	800d9fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb3c:	1d3a      	adds	r2, r7, #4
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	4611      	mov	r1, r2
 800bb44:	4618      	mov	r0, r3
 800bb46:	f001 f8d3 	bl	800ccf0 <xTaskCheckForTimeOut>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d11d      	bne.n	800bb8c <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb50:	6a38      	ldr	r0, [r7, #32]
 800bb52:	f000 fa1e 	bl	800bf92 <prvIsQueueEmpty>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d011      	beq.n	800bb80 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	3324      	adds	r3, #36	; 0x24
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	4611      	mov	r1, r2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 ff85 	bl	800ca74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800bb6a:	6a38      	ldr	r0, [r7, #32]
 800bb6c:	f000 f9bf 	bl	800beee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800bb70:	f000 fd20 	bl	800c5b4 <xTaskResumeAll>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d18f      	bne.n	800ba9a <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800bb7a:	f001 ff1b 	bl	800d9b4 <vPortYield>
 800bb7e:	e78c      	b.n	800ba9a <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800bb80:	6a38      	ldr	r0, [r7, #32]
 800bb82:	f000 f9b4 	bl	800beee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800bb86:	f000 fd15 	bl	800c5b4 <xTaskResumeAll>
 800bb8a:	e786      	b.n	800ba9a <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800bb8c:	6a38      	ldr	r0, [r7, #32]
 800bb8e:	f000 f9ae 	bl	800beee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800bb92:	f000 fd0f 	bl	800c5b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb96:	6a38      	ldr	r0, [r7, #32]
 800bb98:	f000 f9fb 	bl	800bf92 <prvIsQueueEmpty>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f43f af7b 	beq.w	800ba9a <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800bba4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3728      	adds	r7, #40	; 0x28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b08a      	sub	sp, #40	; 0x28
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <xQueueSemaphoreTake+0x22>
 800bbca:	f002 f845 	bl	800dc58 <ulSetInterruptMask>
 800bbce:	e7fe      	b.n	800bbce <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <xQueueSemaphoreTake+0x30>
 800bbd8:	f002 f83e 	bl	800dc58 <ulSetInterruptMask>
 800bbdc:	e7fe      	b.n	800bbdc <xQueueSemaphoreTake+0x2e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbde:	f001 f9bb 	bl	800cf58 <xTaskGetSchedulerState>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <xQueueSemaphoreTake+0x40>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <xQueueSemaphoreTake+0x44>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <xQueueSemaphoreTake+0x46>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d102      	bne.n	800bbfe <xQueueSemaphoreTake+0x50>
 800bbf8:	f002 f82e 	bl	800dc58 <ulSetInterruptMask>
 800bbfc:	e7fe      	b.n	800bbfc <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800bbfe:	f001 feeb 	bl	800d9d8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d01e      	beq.n	800bc4c <xQueueSemaphoreTake+0x9e>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	1e5a      	subs	r2, r3, #1
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d104      	bne.n	800bc28 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc1e:	f001 fb69 	bl	800d2f4 <pvTaskIncrementMutexHeldCount>
 800bc22:	4602      	mov	r2, r0
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <xQueueSemaphoreTake+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	3310      	adds	r3, #16
 800bc34:	4618      	mov	r0, r3
 800bc36:	f000 ff77 	bl	800cb28 <xTaskRemoveFromEventList>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <xQueueSemaphoreTake+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800bc40:	f001 feb8 	bl	800d9b4 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800bc44:	f001 feda 	bl	800d9fc <vPortExitCritical>
                return pdPASS;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e089      	b.n	800bd60 <xQueueSemaphoreTake+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d109      	bne.n	800bc66 <xQueueSemaphoreTake+0xb8>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <xQueueSemaphoreTake+0xb0>
 800bc58:	f001 fffe 	bl	800dc58 <ulSetInterruptMask>
 800bc5c:	e7fe      	b.n	800bc5c <xQueueSemaphoreTake+0xae>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800bc5e:	f001 fecd 	bl	800d9fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800bc62:	2300      	movs	r3, #0
 800bc64:	e07c      	b.n	800bd60 <xQueueSemaphoreTake+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d106      	bne.n	800bc7a <xQueueSemaphoreTake+0xcc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	4618      	mov	r0, r3
 800bc72:	f001 f827 	bl	800ccc4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800bc76:	2301      	movs	r3, #1
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800bc7a:	f001 febf 	bl	800d9fc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800bc7e:	f000 fc8b 	bl	800c598 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800bc82:	f001 fea9 	bl	800d9d8 <vPortEnterCritical>
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc8c:	b25b      	sxtb	r3, r3
 800bc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc92:	d103      	bne.n	800bc9c <xQueueSemaphoreTake+0xee>
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca2:	b25b      	sxtb	r3, r3
 800bca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca8:	d103      	bne.n	800bcb2 <xQueueSemaphoreTake+0x104>
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcb2:	f001 fea3 	bl	800d9fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcb6:	463a      	mov	r2, r7
 800bcb8:	f107 030c 	add.w	r3, r7, #12
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f001 f816 	bl	800ccf0 <xTaskCheckForTimeOut>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d12c      	bne.n	800bd24 <xQueueSemaphoreTake+0x176>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcca:	69f8      	ldr	r0, [r7, #28]
 800bccc:	f000 f961 	bl	800bf92 <prvIsQueueEmpty>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d020      	beq.n	800bd18 <xQueueSemaphoreTake+0x16a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d109      	bne.n	800bcf2 <xQueueSemaphoreTake+0x144>
                        {
                            taskENTER_CRITICAL();
 800bcde:	f001 fe7b 	bl	800d9d8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 f954 	bl	800cf94 <xTaskPriorityInherit>
 800bcec:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 800bcee:	f001 fe85 	bl	800d9fc <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	3324      	adds	r3, #36	; 0x24
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 feba 	bl	800ca74 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800bd00:	69f8      	ldr	r0, [r7, #28]
 800bd02:	f000 f8f4 	bl	800beee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800bd06:	f000 fc55 	bl	800c5b4 <xTaskResumeAll>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f47f af76 	bne.w	800bbfe <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 800bd12:	f001 fe4f 	bl	800d9b4 <vPortYield>
 800bd16:	e772      	b.n	800bbfe <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800bd18:	69f8      	ldr	r0, [r7, #28]
 800bd1a:	f000 f8e8 	bl	800beee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800bd1e:	f000 fc49 	bl	800c5b4 <xTaskResumeAll>
 800bd22:	e76c      	b.n	800bbfe <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800bd24:	69f8      	ldr	r0, [r7, #28]
 800bd26:	f000 f8e2 	bl	800beee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800bd2a:	f000 fc43 	bl	800c5b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd2e:	69f8      	ldr	r0, [r7, #28]
 800bd30:	f000 f92f 	bl	800bf92 <prvIsQueueEmpty>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f43f af61 	beq.w	800bbfe <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00d      	beq.n	800bd5e <xQueueSemaphoreTake+0x1b0>
                        {
                            taskENTER_CRITICAL();
 800bd42:	f001 fe49 	bl	800d9d8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bd46:	69f8      	ldr	r0, [r7, #28]
 800bd48:	f000 f829 	bl	800bd9e <prvGetDisinheritPriorityAfterTimeout>
 800bd4c:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	6979      	ldr	r1, [r7, #20]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 fa33 	bl	800d1c0 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800bd5a:	f001 fe4f 	bl	800d9fc <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800bd5e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3728      	adds	r7, #40	; 0x28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <vQueueDelete+0x18>
 800bd7a:	f001 ff6d 	bl	800dc58 <ulSetInterruptMask>
 800bd7e:	e7fe      	b.n	800bd7e <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            vQueueUnregisterQueue( pxQueue );
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 f979 	bl	800c078 <vQueueUnregisterQueue>
        }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
        {
            /* The queue could have been allocated statically or dynamically, so
             * check before attempting to free the memory. */
            if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <vQueueDelete+0x2e>
            {
                vPortFree( pxQueue );
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f002 f815 	bl	800ddc0 <vPortFree>
            /* The queue must have been statically allocated, so is not going to be
             * deleted.  Avoid compiler warnings about the unused parameter. */
            ( void ) pxQueue;
        }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bd96:	bf00      	nop
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d006      	beq.n	800bdbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	e001      	b.n	800bdc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
    }
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b086      	sub	sp, #24
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800bdda:	2300      	movs	r3, #0
 800bddc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10d      	bne.n	800be08 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d14d      	bne.n	800be90 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f001 f95b 	bl	800d0b4 <xTaskPriorityDisinherit>
 800bdfe:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	609a      	str	r2, [r3, #8]
 800be06:	e043      	b.n	800be90 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d119      	bne.n	800be42 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6858      	ldr	r0, [r3, #4]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	461a      	mov	r2, r3
 800be18:	68b9      	ldr	r1, [r7, #8]
 800be1a:	f002 fb44 	bl	800e4a6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	441a      	add	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	429a      	cmp	r2, r3
 800be36:	d32b      	bcc.n	800be90 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	605a      	str	r2, [r3, #4]
 800be40:	e026      	b.n	800be90 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	68d8      	ldr	r0, [r3, #12]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	461a      	mov	r2, r3
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	f002 fb2a 	bl	800e4a6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5a:	425b      	negs	r3, r3
 800be5c:	441a      	add	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	68da      	ldr	r2, [r3, #12]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d207      	bcs.n	800be7e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	689a      	ldr	r2, [r3, #8]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be76:	425b      	negs	r3, r3
 800be78:	441a      	add	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b02      	cmp	r3, #2
 800be82:	d105      	bne.n	800be90 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d002      	beq.n	800be90 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800be98:	697b      	ldr	r3, [r7, #20]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d018      	beq.n	800bee6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	68da      	ldr	r2, [r3, #12]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	441a      	add	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68da      	ldr	r2, [r3, #12]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	429a      	cmp	r2, r3
 800becc:	d303      	bcc.n	800bed6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68d9      	ldr	r1, [r3, #12]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bede:	461a      	mov	r2, r3
 800bee0:	6838      	ldr	r0, [r7, #0]
 800bee2:	f002 fae0 	bl	800e4a6 <memcpy>
    }
}
 800bee6:	bf00      	nop
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800bef6:	f001 fd6f 	bl	800d9d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf00:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf02:	e011      	b.n	800bf28 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d012      	beq.n	800bf32 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	3324      	adds	r3, #36	; 0x24
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 fe09 	bl	800cb28 <xTaskRemoveFromEventList>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800bf1c:	f000 ff3e 	bl	800cd9c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	dce9      	bgt.n	800bf04 <prvUnlockQueue+0x16>
 800bf30:	e000      	b.n	800bf34 <prvUnlockQueue+0x46>
                        break;
 800bf32:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	22ff      	movs	r2, #255	; 0xff
 800bf38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800bf3c:	f001 fd5e 	bl	800d9fc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800bf40:	f001 fd4a 	bl	800d9d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf4a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf4c:	e011      	b.n	800bf72 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d012      	beq.n	800bf7c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	3310      	adds	r3, #16
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fde4 	bl	800cb28 <xTaskRemoveFromEventList>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800bf66:	f000 ff19 	bl	800cd9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dce9      	bgt.n	800bf4e <prvUnlockQueue+0x60>
 800bf7a:	e000      	b.n	800bf7e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800bf7c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	22ff      	movs	r2, #255	; 0xff
 800bf82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800bf86:	f001 fd39 	bl	800d9fc <vPortExitCritical>
}
 800bf8a:	bf00      	nop
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b084      	sub	sp, #16
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800bf9a:	f001 fd1d 	bl	800d9d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d102      	bne.n	800bfac <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e001      	b.n	800bfb0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800bfb0:	f001 fd24 	bl	800d9fc <vPortExitCritical>

    return xReturn;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800bfc6:	f001 fd07 	bl	800d9d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d102      	bne.n	800bfdc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	60fb      	str	r3, [r7, #12]
 800bfda:	e001      	b.n	800bfe0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800bfe0:	f001 fd0c 	bl	800d9fc <vPortExitCritical>

    return xReturn;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <vQueueAddToRegistry+0x16>
 800c000:	f001 fe2a 	bl	800dc58 <ulSetInterruptMask>
 800c004:	e7fe      	b.n	800c004 <vQueueAddToRegistry+0x14>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d024      	beq.n	800c05a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	e01e      	b.n	800c054 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800c016:	4a17      	ldr	r2, [pc, #92]	; (800c074 <vQueueAddToRegistry+0x84>)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	4413      	add	r3, r2
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	429a      	cmp	r2, r3
 800c024:	d105      	bne.n	800c032 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	00db      	lsls	r3, r3, #3
 800c02a:	4a12      	ldr	r2, [pc, #72]	; (800c074 <vQueueAddToRegistry+0x84>)
 800c02c:	4413      	add	r3, r2
 800c02e:	60bb      	str	r3, [r7, #8]
                    break;
 800c030:	e013      	b.n	800c05a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <vQueueAddToRegistry+0x5e>
 800c038:	4a0e      	ldr	r2, [pc, #56]	; (800c074 <vQueueAddToRegistry+0x84>)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	4a0a      	ldr	r2, [pc, #40]	; (800c074 <vQueueAddToRegistry+0x84>)
 800c04a:	4413      	add	r3, r2
 800c04c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b07      	cmp	r3, #7
 800c058:	d9dd      	bls.n	800c016 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800c06c:	bf00      	nop
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	20000c64 	.word	0x20000c64

0800c078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <vQueueUnregisterQueue+0x14>
 800c086:	f001 fde7 	bl	800dc58 <ulSetInterruptMask>
 800c08a:	e7fe      	b.n	800c08a <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c08c:	2300      	movs	r3, #0
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e016      	b.n	800c0c0 <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c092:	4a0f      	ldr	r2, [pc, #60]	; (800c0d0 <vQueueUnregisterQueue+0x58>)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	4413      	add	r3, r2
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d10b      	bne.n	800c0ba <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0a2:	4a0b      	ldr	r2, [pc, #44]	; (800c0d0 <vQueueUnregisterQueue+0x58>)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0ac:	4a08      	ldr	r2, [pc, #32]	; (800c0d0 <vQueueUnregisterQueue+0x58>)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	4413      	add	r3, r2
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]
                break;
 800c0b8:	e006      	b.n	800c0c8 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b07      	cmp	r3, #7
 800c0c4:	d9e5      	bls.n	800c092 <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	20000c64 	.word	0x20000c64

0800c0d4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800c0e4:	f001 fc78 	bl	800d9d8 <vPortEnterCritical>
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ee:	b25b      	sxtb	r3, r3
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d103      	bne.n	800c0fe <vQueueWaitForMessageRestricted+0x2a>
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c104:	b25b      	sxtb	r3, r3
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d103      	bne.n	800c114 <vQueueWaitForMessageRestricted+0x40>
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c114:	f001 fc72 	bl	800d9fc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d106      	bne.n	800c12e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3324      	adds	r3, #36	; 0x24
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	68b9      	ldr	r1, [r7, #8]
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fcbf 	bl	800caac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800c12e:	6978      	ldr	r0, [r7, #20]
 800c130:	f7ff fedd 	bl	800beee <prvUnlockQueue>
    }
 800c134:	bf00      	nop
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08c      	sub	sp, #48	; 0x30
 800c140:	af04      	add	r7, sp, #16
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d102      	bne.n	800c156 <xTaskCreateStatic+0x1a>
 800c150:	f001 fd82 	bl	800dc58 <ulSetInterruptMask>
 800c154:	e7fe      	b.n	800c154 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d102      	bne.n	800c162 <xTaskCreateStatic+0x26>
 800c15c:	f001 fd7c 	bl	800dc58 <ulSetInterruptMask>
 800c160:	e7fe      	b.n	800c160 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800c162:	235c      	movs	r3, #92	; 0x5c
 800c164:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b5c      	cmp	r3, #92	; 0x5c
 800c16a:	d002      	beq.n	800c172 <xTaskCreateStatic+0x36>
 800c16c:	f001 fd74 	bl	800dc58 <ulSetInterruptMask>
 800c170:	e7fe      	b.n	800c170 <xTaskCreateStatic+0x34>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c172:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c176:	2b00      	cmp	r3, #0
 800c178:	d01e      	beq.n	800c1b8 <xTaskCreateStatic+0x7c>
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01b      	beq.n	800c1b8 <xTaskCreateStatic+0x7c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c182:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c188:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	2202      	movs	r2, #2
 800c18e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c192:	2300      	movs	r3, #0
 800c194:	9303      	str	r3, [sp, #12]
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	9302      	str	r3, [sp, #8]
 800c19a:	f107 0318 	add.w	r3, r7, #24
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 f850 	bl	800c250 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800c1b0:	69f8      	ldr	r0, [r7, #28]
 800c1b2:	f000 f8e3 	bl	800c37c <prvAddNewTaskToReadyList>
 800c1b6:	e001      	b.n	800c1bc <xTaskCreateStatic+0x80>
        }
        else
        {
            xReturn = NULL;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800c1bc:	69bb      	ldr	r3, [r7, #24]
    }
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b08c      	sub	sp, #48	; 0x30
 800c1ca:	af04      	add	r7, sp, #16
 800c1cc:	60f8      	str	r0, [r7, #12]
 800c1ce:	60b9      	str	r1, [r7, #8]
 800c1d0:	603b      	str	r3, [r7, #0]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1d6:	88fb      	ldrh	r3, [r7, #6]
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 fd9c 	bl	800dd18 <pvPortMalloc>
 800c1e0:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00e      	beq.n	800c206 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1e8:	205c      	movs	r0, #92	; 0x5c
 800c1ea:	f001 fd95 	bl	800dd18 <pvPortMalloc>
 800c1ee:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	697a      	ldr	r2, [r7, #20]
 800c1fa:	631a      	str	r2, [r3, #48]	; 0x30
 800c1fc:	e005      	b.n	800c20a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800c1fe:	6978      	ldr	r0, [r7, #20]
 800c200:	f001 fdde 	bl	800ddc0 <vPortFree>
 800c204:	e001      	b.n	800c20a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d017      	beq.n	800c240 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c218:	88fa      	ldrh	r2, [r7, #6]
 800c21a:	2300      	movs	r3, #0
 800c21c:	9303      	str	r3, [sp, #12]
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	9302      	str	r3, [sp, #8]
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f000 f80e 	bl	800c250 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800c234:	69f8      	ldr	r0, [r7, #28]
 800c236:	f000 f8a1 	bl	800c37c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800c23a:	2301      	movs	r3, #1
 800c23c:	61bb      	str	r3, [r7, #24]
 800c23e:	e002      	b.n	800c246 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c240:	f04f 33ff 	mov.w	r3, #4294967295
 800c244:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800c246:	69bb      	ldr	r3, [r7, #24]
    }
 800c248:	4618      	mov	r0, r3
 800c24a:	3720      	adds	r7, #32
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	461a      	mov	r2, r3
 800c268:	21a5      	movs	r1, #165	; 0xa5
 800c26a:	f002 f883 	bl	800e374 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c278:	3b01      	subs	r3, #1
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f023 0307 	bic.w	r3, r3, #7
 800c286:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	f003 0307 	and.w	r3, r3, #7
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <prvInitialiseNewTask+0x48>
 800c292:	f001 fce1 	bl	800dc58 <ulSetInterruptMask>
 800c296:	e7fe      	b.n	800c296 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d01f      	beq.n	800c2de <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	e012      	b.n	800c2ca <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	7819      	ldrb	r1, [r3, #0]
 800c2ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	3334      	adds	r3, #52	; 0x34
 800c2b4:	460a      	mov	r2, r1
 800c2b6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	4413      	add	r3, r2
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d006      	beq.n	800c2d2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2b0f      	cmp	r3, #15
 800c2ce:	d9e9      	bls.n	800c2a4 <prvInitialiseNewTask+0x54>
 800c2d0:	e000      	b.n	800c2d4 <prvInitialiseNewTask+0x84>
            {
                break;
 800c2d2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2dc:	e003      	b.n	800c2e6 <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	2b37      	cmp	r3, #55	; 0x37
 800c2ea:	d902      	bls.n	800c2f2 <prvInitialiseNewTask+0xa2>
 800c2ec:	f001 fcb4 	bl	800dc58 <ulSetInterruptMask>
 800c2f0:	e7fe      	b.n	800c2f0 <prvInitialiseNewTask+0xa0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	2b37      	cmp	r3, #55	; 0x37
 800c2f6:	d901      	bls.n	800c2fc <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2f8:	2337      	movs	r3, #55	; 0x37
 800c2fa:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	6a3a      	ldr	r2, [r7, #32]
 800c300:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	6a3a      	ldr	r2, [r7, #32]
 800c306:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	2200      	movs	r2, #0
 800c30c:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c310:	3304      	adds	r3, #4
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff f888 	bl	800b428 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	3318      	adds	r3, #24
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f883 	bl	800b428 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c326:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c336:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	3354      	adds	r3, #84	; 0x54
 800c33c:	2204      	movs	r2, #4
 800c33e:	2100      	movs	r1, #0
 800c340:	4618      	mov	r0, r3
 800c342:	f002 f817 	bl	800e374 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	3358      	adds	r3, #88	; 0x58
 800c34a:	2201      	movs	r2, #1
 800c34c:	2100      	movs	r1, #0
 800c34e:	4618      	mov	r0, r3
 800c350:	f002 f810 	bl	800e374 <memset>
             * function as well. */
            #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
                {
                    #if ( portSTACK_GROWTH < 0 )
                        {
                            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	6938      	ldr	r0, [r7, #16]
 800c35e:	f001 fb97 	bl	800da90 <pxPortInitialiseStack>
 800c362:	4602      	mov	r2, r0
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c372:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c374:	bf00      	nop
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800c384:	f001 fb28 	bl	800d9d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800c388:	4b3e      	ldr	r3, [pc, #248]	; (800c484 <prvAddNewTaskToReadyList+0x108>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	4a3d      	ldr	r2, [pc, #244]	; (800c484 <prvAddNewTaskToReadyList+0x108>)
 800c390:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800c392:	4b3d      	ldr	r3, [pc, #244]	; (800c488 <prvAddNewTaskToReadyList+0x10c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d109      	bne.n	800c3ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800c39a:	4a3b      	ldr	r2, [pc, #236]	; (800c488 <prvAddNewTaskToReadyList+0x10c>)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3a0:	4b38      	ldr	r3, [pc, #224]	; (800c484 <prvAddNewTaskToReadyList+0x108>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d110      	bne.n	800c3ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800c3a8:	f000 fd14 	bl	800cdd4 <prvInitialiseTaskLists>
 800c3ac:	e00d      	b.n	800c3ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800c3ae:	4b37      	ldr	r3, [pc, #220]	; (800c48c <prvAddNewTaskToReadyList+0x110>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d109      	bne.n	800c3ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3b6:	4b34      	ldr	r3, [pc, #208]	; (800c488 <prvAddNewTaskToReadyList+0x10c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d802      	bhi.n	800c3ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800c3c4:	4a30      	ldr	r2, [pc, #192]	; (800c488 <prvAddNewTaskToReadyList+0x10c>)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800c3ca:	4b31      	ldr	r3, [pc, #196]	; (800c490 <prvAddNewTaskToReadyList+0x114>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	4a2f      	ldr	r2, [pc, #188]	; (800c490 <prvAddNewTaskToReadyList+0x114>)
 800c3d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c3d4:	4b2e      	ldr	r3, [pc, #184]	; (800c490 <prvAddNewTaskToReadyList+0x114>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e0:	4b2c      	ldr	r3, [pc, #176]	; (800c494 <prvAddNewTaskToReadyList+0x118>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d903      	bls.n	800c3f0 <prvAddNewTaskToReadyList+0x74>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	4a29      	ldr	r2, [pc, #164]	; (800c494 <prvAddNewTaskToReadyList+0x118>)
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f4:	4928      	ldr	r1, [pc, #160]	; (800c498 <prvAddNewTaskToReadyList+0x11c>)
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	440b      	add	r3, r1
 800c400:	3304      	adds	r3, #4
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	609a      	str	r2, [r3, #8]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	689a      	ldr	r2, [r3, #8]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	60da      	str	r2, [r3, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	3204      	adds	r2, #4
 800c41c:	605a      	str	r2, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	1d1a      	adds	r2, r3, #4
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	609a      	str	r2, [r3, #8]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42a:	4613      	mov	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4a19      	ldr	r2, [pc, #100]	; (800c498 <prvAddNewTaskToReadyList+0x11c>)
 800c434:	441a      	add	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	615a      	str	r2, [r3, #20]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43e:	4916      	ldr	r1, [pc, #88]	; (800c498 <prvAddNewTaskToReadyList+0x11c>)
 800c440:	4613      	mov	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	440b      	add	r3, r1
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	1c59      	adds	r1, r3, #1
 800c44e:	4812      	ldr	r0, [pc, #72]	; (800c498 <prvAddNewTaskToReadyList+0x11c>)
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4403      	add	r3, r0
 800c45a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800c45c:	f001 face 	bl	800d9fc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <prvAddNewTaskToReadyList+0x110>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d008      	beq.n	800c47a <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c468:	4b07      	ldr	r3, [pc, #28]	; (800c488 <prvAddNewTaskToReadyList+0x10c>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c472:	429a      	cmp	r2, r3
 800c474:	d201      	bcs.n	800c47a <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800c476:	f001 fa9d 	bl	800d9b4 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c47a:	bf00      	nop
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20001178 	.word	0x20001178
 800c488:	20000ca4 	.word	0x20000ca4
 800c48c:	20001184 	.word	0x20001184
 800c490:	20001194 	.word	0x20001194
 800c494:	20001180 	.word	0x20001180
 800c498:	20000ca8 	.word	0x20000ca8

0800c49c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00f      	beq.n	800c4ce <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <vTaskDelay+0x44>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <vTaskDelay+0x20>
 800c4b6:	f001 fbcf 	bl	800dc58 <ulSetInterruptMask>
 800c4ba:	e7fe      	b.n	800c4ba <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800c4bc:	f000 f86c 	bl	800c598 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 ff2a 	bl	800d31c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800c4c8:	f000 f874 	bl	800c5b4 <xTaskResumeAll>
 800c4cc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 800c4d4:	f001 fa6e 	bl	800d9b4 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800c4d8:	bf00      	nop
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	200011a0 	.word	0x200011a0

0800c4e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b088      	sub	sp, #32
 800c4e8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	607b      	str	r3, [r7, #4]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4f2:	463a      	mov	r2, r7
 800c4f4:	1d39      	adds	r1, r7, #4
 800c4f6:	f107 0308 	add.w	r3, r7, #8
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fe ff40 	bl	800b380 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	9202      	str	r2, [sp, #8]
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	2300      	movs	r3, #0
 800c50c:	9300      	str	r3, [sp, #0]
 800c50e:	2300      	movs	r3, #0
 800c510:	460a      	mov	r2, r1
 800c512:	491a      	ldr	r1, [pc, #104]	; (800c57c <vTaskStartScheduler+0x98>)
 800c514:	481a      	ldr	r0, [pc, #104]	; (800c580 <vTaskStartScheduler+0x9c>)
 800c516:	f7ff fe11 	bl	800c13c <xTaskCreateStatic>
 800c51a:	4603      	mov	r3, r0
 800c51c:	4a19      	ldr	r2, [pc, #100]	; (800c584 <vTaskStartScheduler+0xa0>)
 800c51e:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 800c520:	4b18      	ldr	r3, [pc, #96]	; (800c584 <vTaskStartScheduler+0xa0>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <vTaskStartScheduler+0x4a>
            {
                xReturn = pdPASS;
 800c528:	2301      	movs	r3, #1
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	e001      	b.n	800c532 <vTaskStartScheduler+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
 800c52e:	2300      	movs	r3, #0
 800c530:	60fb      	str	r3, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d102      	bne.n	800c53e <vTaskStartScheduler+0x5a>
            {
                xReturn = xTimerCreateTimerTask();
 800c538:	f000 ff5e 	bl	800d3f8 <xTimerCreateTimerTask>
 800c53c:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d10e      	bne.n	800c562 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800c544:	f001 fb88 	bl	800dc58 <ulSetInterruptMask>
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800c548:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <vTaskStartScheduler+0xa4>)
 800c54a:	f04f 32ff 	mov.w	r2, #4294967295
 800c54e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800c550:	4b0e      	ldr	r3, [pc, #56]	; (800c58c <vTaskStartScheduler+0xa8>)
 800c552:	2201      	movs	r2, #1
 800c554:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c556:	4b0e      	ldr	r3, [pc, #56]	; (800c590 <vTaskStartScheduler+0xac>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800c55c:	f001 fb22 	bl	800dba4 <xPortStartScheduler>
 800c560:	e006      	b.n	800c570 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d102      	bne.n	800c570 <vTaskStartScheduler+0x8c>
 800c56a:	f001 fb75 	bl	800dc58 <ulSetInterruptMask>
 800c56e:	e7fe      	b.n	800c56e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800c570:	4b08      	ldr	r3, [pc, #32]	; (800c594 <vTaskStartScheduler+0xb0>)
 800c572:	681b      	ldr	r3, [r3, #0]
}
 800c574:	bf00      	nop
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	0800ef48 	.word	0x0800ef48
 800c580:	0800cdb5 	.word	0x0800cdb5
 800c584:	2000119c 	.word	0x2000119c
 800c588:	20001198 	.word	0x20001198
 800c58c:	20001184 	.word	0x20001184
 800c590:	2000117c 	.word	0x2000117c
 800c594:	20000010 	.word	0x20000010

0800c598 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c598:	b480      	push	{r7}
 800c59a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800c59c:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <vTaskSuspendAll+0x18>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	4a03      	ldr	r2, [pc, #12]	; (800c5b0 <vTaskSuspendAll+0x18>)
 800c5a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800c5a6:	bf00      	nop
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	200011a0 	.word	0x200011a0

0800c5b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800c5c2:	4b6a      	ldr	r3, [pc, #424]	; (800c76c <xTaskResumeAll+0x1b8>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <xTaskResumeAll+0x1c>
 800c5ca:	f001 fb45 	bl	800dc58 <ulSetInterruptMask>
 800c5ce:	e7fe      	b.n	800c5ce <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800c5d0:	f001 fa02 	bl	800d9d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800c5d4:	4b65      	ldr	r3, [pc, #404]	; (800c76c <xTaskResumeAll+0x1b8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	4a64      	ldr	r2, [pc, #400]	; (800c76c <xTaskResumeAll+0x1b8>)
 800c5dc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5de:	4b63      	ldr	r3, [pc, #396]	; (800c76c <xTaskResumeAll+0x1b8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f040 80bb 	bne.w	800c75e <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5e8:	4b61      	ldr	r3, [pc, #388]	; (800c770 <xTaskResumeAll+0x1bc>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 80b6 	beq.w	800c75e <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5f2:	e08b      	b.n	800c70c <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5f4:	4b5f      	ldr	r3, [pc, #380]	; (800c774 <xTaskResumeAll+0x1c0>)
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c600:	60bb      	str	r3, [r7, #8]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	6a12      	ldr	r2, [r2, #32]
 800c60a:	609a      	str	r2, [r3, #8]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	69d2      	ldr	r2, [r2, #28]
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	3318      	adds	r3, #24
 800c61e:	429a      	cmp	r2, r3
 800c620:	d103      	bne.n	800c62a <xTaskResumeAll+0x76>
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	6a1a      	ldr	r2, [r3, #32]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	605a      	str	r2, [r3, #4]
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2200      	movs	r2, #0
 800c62e:	629a      	str	r2, [r3, #40]	; 0x28
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	1e5a      	subs	r2, r3, #1
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	607b      	str	r3, [r7, #4]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	68d2      	ldr	r2, [r2, #12]
 800c648:	609a      	str	r2, [r3, #8]
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	6892      	ldr	r2, [r2, #8]
 800c652:	605a      	str	r2, [r3, #4]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	3304      	adds	r3, #4
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d103      	bne.n	800c668 <xTaskResumeAll+0xb4>
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	68da      	ldr	r2, [r3, #12]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	605a      	str	r2, [r3, #4]
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2200      	movs	r2, #0
 800c66c:	615a      	str	r2, [r3, #20]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	1e5a      	subs	r2, r3, #1
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67c:	4b3e      	ldr	r3, [pc, #248]	; (800c778 <xTaskResumeAll+0x1c4>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	429a      	cmp	r2, r3
 800c682:	d903      	bls.n	800c68c <xTaskResumeAll+0xd8>
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	4a3b      	ldr	r2, [pc, #236]	; (800c778 <xTaskResumeAll+0x1c4>)
 800c68a:	6013      	str	r3, [r2, #0]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c690:	493a      	ldr	r1, [pc, #232]	; (800c77c <xTaskResumeAll+0x1c8>)
 800c692:	4613      	mov	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	440b      	add	r3, r1
 800c69c:	3304      	adds	r3, #4
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	603b      	str	r3, [r7, #0]
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	609a      	str	r2, [r3, #8]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	60da      	str	r2, [r3, #12]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	3204      	adds	r2, #4
 800c6b8:	605a      	str	r2, [r3, #4]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	1d1a      	adds	r2, r3, #4
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	609a      	str	r2, [r3, #8]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4a2b      	ldr	r2, [pc, #172]	; (800c77c <xTaskResumeAll+0x1c8>)
 800c6d0:	441a      	add	r2, r3
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	615a      	str	r2, [r3, #20]
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6da:	4928      	ldr	r1, [pc, #160]	; (800c77c <xTaskResumeAll+0x1c8>)
 800c6dc:	4613      	mov	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	440b      	add	r3, r1
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	1c59      	adds	r1, r3, #1
 800c6ea:	4824      	ldr	r0, [pc, #144]	; (800c77c <xTaskResumeAll+0x1c8>)
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4403      	add	r3, r0
 800c6f6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6fc:	4b20      	ldr	r3, [pc, #128]	; (800c780 <xTaskResumeAll+0x1cc>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	429a      	cmp	r2, r3
 800c704:	d302      	bcc.n	800c70c <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800c706:	4b1f      	ldr	r3, [pc, #124]	; (800c784 <xTaskResumeAll+0x1d0>)
 800c708:	2201      	movs	r2, #1
 800c70a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c70c:	4b19      	ldr	r3, [pc, #100]	; (800c774 <xTaskResumeAll+0x1c0>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	f47f af6f 	bne.w	800c5f4 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800c71c:	f000 fbf0 	bl	800cf00 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c720:	4b19      	ldr	r3, [pc, #100]	; (800c788 <xTaskResumeAll+0x1d4>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d010      	beq.n	800c74e <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800c72c:	f000 f83e 	bl	800c7ac <xTaskIncrementTick>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d002      	beq.n	800c73c <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800c736:	4b13      	ldr	r3, [pc, #76]	; (800c784 <xTaskResumeAll+0x1d0>)
 800c738:	2201      	movs	r2, #1
 800c73a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3b01      	subs	r3, #1
 800c740:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1f1      	bne.n	800c72c <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800c748:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <xTaskResumeAll+0x1d4>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800c74e:	4b0d      	ldr	r3, [pc, #52]	; (800c784 <xTaskResumeAll+0x1d0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d003      	beq.n	800c75e <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800c756:	2301      	movs	r3, #1
 800c758:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800c75a:	f001 f92b 	bl	800d9b4 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800c75e:	f001 f94d 	bl	800d9fc <vPortExitCritical>

    return xAlreadyYielded;
 800c762:	693b      	ldr	r3, [r7, #16]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3718      	adds	r7, #24
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	200011a0 	.word	0x200011a0
 800c770:	20001178 	.word	0x20001178
 800c774:	20001138 	.word	0x20001138
 800c778:	20001180 	.word	0x20001180
 800c77c:	20000ca8 	.word	0x20000ca8
 800c780:	20000ca4 	.word	0x20000ca4
 800c784:	2000118c 	.word	0x2000118c
 800c788:	20001188 	.word	0x20001188

0800c78c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <xTaskGetTickCount+0x1c>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800c798:	687b      	ldr	r3, [r7, #4]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	2000117c 	.word	0x2000117c

0800c7ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7b6:	4b7a      	ldr	r3, [pc, #488]	; (800c9a0 <xTaskIncrementTick+0x1f4>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f040 80e5 	bne.w	800c98a <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c7c0:	4b78      	ldr	r3, [pc, #480]	; (800c9a4 <xTaskIncrementTick+0x1f8>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800c7c8:	4a76      	ldr	r2, [pc, #472]	; (800c9a4 <xTaskIncrementTick+0x1f8>)
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d118      	bne.n	800c806 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800c7d4:	4b74      	ldr	r3, [pc, #464]	; (800c9a8 <xTaskIncrementTick+0x1fc>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <xTaskIncrementTick+0x38>
 800c7de:	f001 fa3b 	bl	800dc58 <ulSetInterruptMask>
 800c7e2:	e7fe      	b.n	800c7e2 <xTaskIncrementTick+0x36>
 800c7e4:	4b70      	ldr	r3, [pc, #448]	; (800c9a8 <xTaskIncrementTick+0x1fc>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	4b70      	ldr	r3, [pc, #448]	; (800c9ac <xTaskIncrementTick+0x200>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a6e      	ldr	r2, [pc, #440]	; (800c9a8 <xTaskIncrementTick+0x1fc>)
 800c7f0:	6013      	str	r3, [r2, #0]
 800c7f2:	4a6e      	ldr	r2, [pc, #440]	; (800c9ac <xTaskIncrementTick+0x200>)
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	4b6d      	ldr	r3, [pc, #436]	; (800c9b0 <xTaskIncrementTick+0x204>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	4a6c      	ldr	r2, [pc, #432]	; (800c9b0 <xTaskIncrementTick+0x204>)
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	f000 fb7d 	bl	800cf00 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800c806:	4b6b      	ldr	r3, [pc, #428]	; (800c9b4 <xTaskIncrementTick+0x208>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	f0c0 80a7 	bcc.w	800c960 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c812:	4b65      	ldr	r3, [pc, #404]	; (800c9a8 <xTaskIncrementTick+0x1fc>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d104      	bne.n	800c826 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c81c:	4b65      	ldr	r3, [pc, #404]	; (800c9b4 <xTaskIncrementTick+0x208>)
 800c81e:	f04f 32ff 	mov.w	r2, #4294967295
 800c822:	601a      	str	r2, [r3, #0]
                    break;
 800c824:	e09c      	b.n	800c960 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c826:	4b60      	ldr	r3, [pc, #384]	; (800c9a8 <xTaskIncrementTick+0x1fc>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d203      	bcs.n	800c846 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800c83e:	4a5d      	ldr	r2, [pc, #372]	; (800c9b4 <xTaskIncrementTick+0x208>)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800c844:	e08c      	b.n	800c960 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	60bb      	str	r3, [r7, #8]
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	68d2      	ldr	r2, [r2, #12]
 800c854:	609a      	str	r2, [r3, #8]
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	6892      	ldr	r2, [r2, #8]
 800c85e:	605a      	str	r2, [r3, #4]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3304      	adds	r3, #4
 800c868:	429a      	cmp	r2, r3
 800c86a:	d103      	bne.n	800c874 <xTaskIncrementTick+0xc8>
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	68da      	ldr	r2, [r3, #12]
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	605a      	str	r2, [r3, #4]
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2200      	movs	r2, #0
 800c878:	615a      	str	r2, [r3, #20]
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	1e5a      	subs	r2, r3, #1
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d01e      	beq.n	800c8ca <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c890:	607b      	str	r3, [r7, #4]
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	6a12      	ldr	r2, [r2, #32]
 800c89a:	609a      	str	r2, [r3, #8]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	6a1b      	ldr	r3, [r3, #32]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	69d2      	ldr	r2, [r2, #28]
 800c8a4:	605a      	str	r2, [r3, #4]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	3318      	adds	r3, #24
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d103      	bne.n	800c8ba <xTaskIncrementTick+0x10e>
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	6a1a      	ldr	r2, [r3, #32]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	605a      	str	r2, [r3, #4]
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	629a      	str	r2, [r3, #40]	; 0x28
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	1e5a      	subs	r2, r3, #1
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ce:	4b3a      	ldr	r3, [pc, #232]	; (800c9b8 <xTaskIncrementTick+0x20c>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d903      	bls.n	800c8de <xTaskIncrementTick+0x132>
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8da:	4a37      	ldr	r2, [pc, #220]	; (800c9b8 <xTaskIncrementTick+0x20c>)
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e2:	4936      	ldr	r1, [pc, #216]	; (800c9bc <xTaskIncrementTick+0x210>)
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	440b      	add	r3, r1
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	609a      	str	r2, [r3, #8]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	689a      	ldr	r2, [r3, #8]
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	60da      	str	r2, [r3, #12]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	3204      	adds	r2, #4
 800c90a:	605a      	str	r2, [r3, #4]
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	1d1a      	adds	r2, r3, #4
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	609a      	str	r2, [r3, #8]
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c918:	4613      	mov	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4a26      	ldr	r2, [pc, #152]	; (800c9bc <xTaskIncrementTick+0x210>)
 800c922:	441a      	add	r2, r3
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	615a      	str	r2, [r3, #20]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92c:	4923      	ldr	r1, [pc, #140]	; (800c9bc <xTaskIncrementTick+0x210>)
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	440b      	add	r3, r1
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	1c59      	adds	r1, r3, #1
 800c93c:	481f      	ldr	r0, [pc, #124]	; (800c9bc <xTaskIncrementTick+0x210>)
 800c93e:	4613      	mov	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4413      	add	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4403      	add	r3, r0
 800c948:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94e:	4b1c      	ldr	r3, [pc, #112]	; (800c9c0 <xTaskIncrementTick+0x214>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c954:	429a      	cmp	r2, r3
 800c956:	f4ff af5c 	bcc.w	800c812 <xTaskIncrementTick+0x66>
                            {
                                xSwitchRequired = pdTRUE;
 800c95a:	2301      	movs	r3, #1
 800c95c:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c95e:	e758      	b.n	800c812 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c960:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <xTaskIncrementTick+0x214>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c966:	4915      	ldr	r1, [pc, #84]	; (800c9bc <xTaskIncrementTick+0x210>)
 800c968:	4613      	mov	r3, r2
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	440b      	add	r3, r1
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d901      	bls.n	800c97c <xTaskIncrementTick+0x1d0>
                {
                    xSwitchRequired = pdTRUE;
 800c978:	2301      	movs	r3, #1
 800c97a:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800c97c:	4b11      	ldr	r3, [pc, #68]	; (800c9c4 <xTaskIncrementTick+0x218>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d007      	beq.n	800c994 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 800c984:	2301      	movs	r3, #1
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	e004      	b.n	800c994 <xTaskIncrementTick+0x1e8>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800c98a:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <xTaskIncrementTick+0x21c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3301      	adds	r3, #1
 800c990:	4a0d      	ldr	r2, [pc, #52]	; (800c9c8 <xTaskIncrementTick+0x21c>)
 800c992:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800c994:	69fb      	ldr	r3, [r7, #28]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	200011a0 	.word	0x200011a0
 800c9a4:	2000117c 	.word	0x2000117c
 800c9a8:	20001130 	.word	0x20001130
 800c9ac:	20001134 	.word	0x20001134
 800c9b0:	20001190 	.word	0x20001190
 800c9b4:	20001198 	.word	0x20001198
 800c9b8:	20001180 	.word	0x20001180
 800c9bc:	20000ca8 	.word	0x20000ca8
 800c9c0:	20000ca4 	.word	0x20000ca4
 800c9c4:	2000118c 	.word	0x2000118c
 800c9c8:	20001188 	.word	0x20001188

0800c9cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9d2:	4b23      	ldr	r3, [pc, #140]	; (800ca60 <vTaskSwitchContext+0x94>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d003      	beq.n	800c9e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800c9da:	4b22      	ldr	r3, [pc, #136]	; (800ca64 <vTaskSwitchContext+0x98>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800c9e0:	e039      	b.n	800ca56 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800c9e2:	4b20      	ldr	r3, [pc, #128]	; (800ca64 <vTaskSwitchContext+0x98>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e8:	4b1f      	ldr	r3, [pc, #124]	; (800ca68 <vTaskSwitchContext+0x9c>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	607b      	str	r3, [r7, #4]
 800c9ee:	e008      	b.n	800ca02 <vTaskSwitchContext+0x36>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <vTaskSwitchContext+0x30>
 800c9f6:	f001 f92f 	bl	800dc58 <ulSetInterruptMask>
 800c9fa:	e7fe      	b.n	800c9fa <vTaskSwitchContext+0x2e>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	607b      	str	r3, [r7, #4]
 800ca02:	491a      	ldr	r1, [pc, #104]	; (800ca6c <vTaskSwitchContext+0xa0>)
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	440b      	add	r3, r1
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0ec      	beq.n	800c9f0 <vTaskSwitchContext+0x24>
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4a12      	ldr	r2, [pc, #72]	; (800ca6c <vTaskSwitchContext+0xa0>)
 800ca22:	4413      	add	r3, r2
 800ca24:	603b      	str	r3, [r7, #0]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	605a      	str	r2, [r3, #4]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	3308      	adds	r3, #8
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d104      	bne.n	800ca46 <vTaskSwitchContext+0x7a>
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	605a      	str	r2, [r3, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	4a08      	ldr	r2, [pc, #32]	; (800ca70 <vTaskSwitchContext+0xa4>)
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	4a05      	ldr	r2, [pc, #20]	; (800ca68 <vTaskSwitchContext+0x9c>)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6013      	str	r3, [r2, #0]
}
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	200011a0 	.word	0x200011a0
 800ca64:	2000118c 	.word	0x2000118c
 800ca68:	20001180 	.word	0x20001180
 800ca6c:	20000ca8 	.word	0x20000ca8
 800ca70:	20000ca4 	.word	0x20000ca4

0800ca74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <vTaskPlaceOnEventList+0x16>
 800ca84:	f001 f8e8 	bl	800dc58 <ulSetInterruptMask>
 800ca88:	e7fe      	b.n	800ca88 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ca8a:	4b07      	ldr	r3, [pc, #28]	; (800caa8 <vTaskPlaceOnEventList+0x34>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	3318      	adds	r3, #24
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7fe fcd5 	bl	800b442 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca98:	2101      	movs	r1, #1
 800ca9a:	6838      	ldr	r0, [r7, #0]
 800ca9c:	f000 fc3e 	bl	800d31c <prvAddCurrentTaskToDelayedList>
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20000ca4 	.word	0x20000ca4

0800caac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d102      	bne.n	800cac4 <vTaskPlaceOnEventListRestricted+0x18>
 800cabe:	f001 f8cb 	bl	800dc58 <ulSetInterruptMask>
 800cac2:	e7fe      	b.n	800cac2 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	617b      	str	r3, [r7, #20]
 800caca:	4b16      	ldr	r3, [pc, #88]	; (800cb24 <vTaskPlaceOnEventListRestricted+0x78>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	61da      	str	r2, [r3, #28]
 800cad2:	4b14      	ldr	r3, [pc, #80]	; (800cb24 <vTaskPlaceOnEventListRestricted+0x78>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	6892      	ldr	r2, [r2, #8]
 800cada:	621a      	str	r2, [r3, #32]
 800cadc:	4b11      	ldr	r3, [pc, #68]	; (800cb24 <vTaskPlaceOnEventListRestricted+0x78>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	3218      	adds	r2, #24
 800cae6:	605a      	str	r2, [r3, #4]
 800cae8:	4b0e      	ldr	r3, [pc, #56]	; (800cb24 <vTaskPlaceOnEventListRestricted+0x78>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f103 0218 	add.w	r2, r3, #24
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	609a      	str	r2, [r3, #8]
 800caf4:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <vTaskPlaceOnEventListRestricted+0x78>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	629a      	str	r2, [r3, #40]	; 0x28
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800cb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb10:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	68b8      	ldr	r0, [r7, #8]
 800cb16:	f000 fc01 	bl	800d31c <prvAddCurrentTaskToDelayedList>
    }
 800cb1a:	bf00      	nop
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20000ca4 	.word	0x20000ca4

0800cb28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d102      	bne.n	800cb44 <xTaskRemoveFromEventList+0x1c>
 800cb3e:	f001 f88b 	bl	800dc58 <ulSetInterruptMask>
 800cb42:	e7fe      	b.n	800cb42 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb48:	617b      	str	r3, [r7, #20]
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	69db      	ldr	r3, [r3, #28]
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	6a12      	ldr	r2, [r2, #32]
 800cb52:	609a      	str	r2, [r3, #8]
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	69d2      	ldr	r2, [r2, #28]
 800cb5c:	605a      	str	r2, [r3, #4]
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	3318      	adds	r3, #24
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d103      	bne.n	800cb72 <xTaskRemoveFromEventList+0x4a>
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	6a1a      	ldr	r2, [r3, #32]
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	605a      	str	r2, [r3, #4]
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	2200      	movs	r2, #0
 800cb76:	629a      	str	r2, [r3, #40]	; 0x28
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	1e5a      	subs	r2, r3, #1
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb82:	4b4a      	ldr	r3, [pc, #296]	; (800ccac <xTaskRemoveFromEventList+0x184>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d15f      	bne.n	800cc4a <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	68d2      	ldr	r2, [r2, #12]
 800cb98:	609a      	str	r2, [r3, #8]
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	6892      	ldr	r2, [r2, #8]
 800cba2:	605a      	str	r2, [r3, #4]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	3304      	adds	r3, #4
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d103      	bne.n	800cbb8 <xTaskRemoveFromEventList+0x90>
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	68da      	ldr	r2, [r3, #12]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	605a      	str	r2, [r3, #4]
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	615a      	str	r2, [r3, #20]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	1e5a      	subs	r2, r3, #1
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbcc:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <xTaskRemoveFromEventList+0x188>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d903      	bls.n	800cbdc <xTaskRemoveFromEventList+0xb4>
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd8:	4a35      	ldr	r2, [pc, #212]	; (800ccb0 <xTaskRemoveFromEventList+0x188>)
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe0:	4934      	ldr	r1, [pc, #208]	; (800ccb4 <xTaskRemoveFromEventList+0x18c>)
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	440b      	add	r3, r1
 800cbec:	3304      	adds	r3, #4
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	60bb      	str	r3, [r7, #8]
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	609a      	str	r2, [r3, #8]
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	689a      	ldr	r2, [r3, #8]
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	60da      	str	r2, [r3, #12]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	69ba      	ldr	r2, [r7, #24]
 800cc06:	3204      	adds	r2, #4
 800cc08:	605a      	str	r2, [r3, #4]
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	1d1a      	adds	r2, r3, #4
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	609a      	str	r2, [r3, #8]
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4a25      	ldr	r2, [pc, #148]	; (800ccb4 <xTaskRemoveFromEventList+0x18c>)
 800cc20:	441a      	add	r2, r3
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	615a      	str	r2, [r3, #20]
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2a:	4922      	ldr	r1, [pc, #136]	; (800ccb4 <xTaskRemoveFromEventList+0x18c>)
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	440b      	add	r3, r1
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	1c59      	adds	r1, r3, #1
 800cc3a:	481e      	ldr	r0, [pc, #120]	; (800ccb4 <xTaskRemoveFromEventList+0x18c>)
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	4413      	add	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4403      	add	r3, r0
 800cc46:	6019      	str	r1, [r3, #0]
 800cc48:	e01b      	b.n	800cc82 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc4a:	4b1b      	ldr	r3, [pc, #108]	; (800ccb8 <xTaskRemoveFromEventList+0x190>)
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	613b      	str	r3, [r7, #16]
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	61da      	str	r2, [r3, #28]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	689a      	ldr	r2, [r3, #8]
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	621a      	str	r2, [r3, #32]
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	3218      	adds	r2, #24
 800cc66:	605a      	str	r2, [r3, #4]
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	f103 0218 	add.w	r2, r3, #24
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	609a      	str	r2, [r3, #8]
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	4a10      	ldr	r2, [pc, #64]	; (800ccb8 <xTaskRemoveFromEventList+0x190>)
 800cc76:	629a      	str	r2, [r3, #40]	; 0x28
 800cc78:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <xTaskRemoveFromEventList+0x190>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	4a0e      	ldr	r2, [pc, #56]	; (800ccb8 <xTaskRemoveFromEventList+0x190>)
 800cc80:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc86:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <xTaskRemoveFromEventList+0x194>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d905      	bls.n	800cc9c <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800cc90:	2301      	movs	r3, #1
 800cc92:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800cc94:	4b0a      	ldr	r3, [pc, #40]	; (800ccc0 <xTaskRemoveFromEventList+0x198>)
 800cc96:	2201      	movs	r2, #1
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	e001      	b.n	800cca0 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800cca0:	69fb      	ldr	r3, [r7, #28]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3720      	adds	r7, #32
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	200011a0 	.word	0x200011a0
 800ccb0:	20001180 	.word	0x20001180
 800ccb4:	20000ca8 	.word	0x20000ca8
 800ccb8:	20001138 	.word	0x20001138
 800ccbc:	20000ca4 	.word	0x20000ca4
 800ccc0:	2000118c 	.word	0x2000118c

0800ccc4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cccc:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <vTaskInternalSetTimeOutState+0x24>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800ccd4:	4b05      	ldr	r3, [pc, #20]	; (800ccec <vTaskInternalSetTimeOutState+0x28>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	605a      	str	r2, [r3, #4]
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	20001190 	.word	0x20001190
 800ccec:	2000117c 	.word	0x2000117c

0800ccf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <xTaskCheckForTimeOut+0x16>
 800cd00:	f000 ffaa 	bl	800dc58 <ulSetInterruptMask>
 800cd04:	e7fe      	b.n	800cd04 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d102      	bne.n	800cd12 <xTaskCheckForTimeOut+0x22>
 800cd0c:	f000 ffa4 	bl	800dc58 <ulSetInterruptMask>
 800cd10:	e7fe      	b.n	800cd10 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800cd12:	f000 fe61 	bl	800d9d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800cd16:	4b1f      	ldr	r3, [pc, #124]	; (800cd94 <xTaskCheckForTimeOut+0xa4>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2e:	d102      	bne.n	800cd36 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800cd30:	2300      	movs	r3, #0
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	e026      	b.n	800cd84 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	4b17      	ldr	r3, [pc, #92]	; (800cd98 <xTaskCheckForTimeOut+0xa8>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d00a      	beq.n	800cd58 <xTaskCheckForTimeOut+0x68>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d305      	bcc.n	800cd58 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	e015      	b.n	800cd84 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d20b      	bcs.n	800cd7a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	1ad2      	subs	r2, r2, r3
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff ffa8 	bl	800ccc4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e004      	b.n	800cd84 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800cd80:	2301      	movs	r3, #1
 800cd82:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800cd84:	f000 fe3a 	bl	800d9fc <vPortExitCritical>

    return xReturn;
 800cd88:	697b      	ldr	r3, [r7, #20]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	2000117c 	.word	0x2000117c
 800cd98:	20001190 	.word	0x20001190

0800cd9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800cda0:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <vTaskMissedYield+0x14>)
 800cda2:	2201      	movs	r2, #1
 800cda4:	601a      	str	r2, [r3, #0]
}
 800cda6:	bf00      	nop
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	2000118c 	.word	0x2000118c

0800cdb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800cdbc:	f000 f84a 	bl	800ce54 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cdc0:	4b03      	ldr	r3, [pc, #12]	; (800cdd0 <prvIdleTask+0x1c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d9f9      	bls.n	800cdbc <prvIdleTask+0x8>
                {
                    taskYIELD();
 800cdc8:	f000 fdf4 	bl	800d9b4 <vPortYield>
        prvCheckTasksWaitingTermination();
 800cdcc:	e7f6      	b.n	800cdbc <prvIdleTask+0x8>
 800cdce:	bf00      	nop
 800cdd0:	20000ca8 	.word	0x20000ca8

0800cdd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdda:	2300      	movs	r3, #0
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	e00c      	b.n	800cdfa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	4613      	mov	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4a12      	ldr	r2, [pc, #72]	; (800ce34 <prvInitialiseTaskLists+0x60>)
 800cdec:	4413      	add	r3, r2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe fafa 	bl	800b3e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	607b      	str	r3, [r7, #4]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b37      	cmp	r3, #55	; 0x37
 800cdfe:	d9ef      	bls.n	800cde0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ce00:	480d      	ldr	r0, [pc, #52]	; (800ce38 <prvInitialiseTaskLists+0x64>)
 800ce02:	f7fe faf1 	bl	800b3e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ce06:	480d      	ldr	r0, [pc, #52]	; (800ce3c <prvInitialiseTaskLists+0x68>)
 800ce08:	f7fe faee 	bl	800b3e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ce0c:	480c      	ldr	r0, [pc, #48]	; (800ce40 <prvInitialiseTaskLists+0x6c>)
 800ce0e:	f7fe faeb 	bl	800b3e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800ce12:	480c      	ldr	r0, [pc, #48]	; (800ce44 <prvInitialiseTaskLists+0x70>)
 800ce14:	f7fe fae8 	bl	800b3e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800ce18:	480b      	ldr	r0, [pc, #44]	; (800ce48 <prvInitialiseTaskLists+0x74>)
 800ce1a:	f7fe fae5 	bl	800b3e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <prvInitialiseTaskLists+0x78>)
 800ce20:	4a05      	ldr	r2, [pc, #20]	; (800ce38 <prvInitialiseTaskLists+0x64>)
 800ce22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <prvInitialiseTaskLists+0x7c>)
 800ce26:	4a05      	ldr	r2, [pc, #20]	; (800ce3c <prvInitialiseTaskLists+0x68>)
 800ce28:	601a      	str	r2, [r3, #0]
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20000ca8 	.word	0x20000ca8
 800ce38:	20001108 	.word	0x20001108
 800ce3c:	2000111c 	.word	0x2000111c
 800ce40:	20001138 	.word	0x20001138
 800ce44:	2000114c 	.word	0x2000114c
 800ce48:	20001164 	.word	0x20001164
 800ce4c:	20001130 	.word	0x20001130
 800ce50:	20001134 	.word	0x20001134

0800ce54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce5a:	e019      	b.n	800ce90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800ce5c:	f000 fdbc 	bl	800d9d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce60:	4b10      	ldr	r3, [pc, #64]	; (800cea4 <prvCheckTasksWaitingTermination+0x50>)
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fb21 	bl	800b4b4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800ce72:	4b0d      	ldr	r3, [pc, #52]	; (800cea8 <prvCheckTasksWaitingTermination+0x54>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	4a0b      	ldr	r2, [pc, #44]	; (800cea8 <prvCheckTasksWaitingTermination+0x54>)
 800ce7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800ce7c:	4b0b      	ldr	r3, [pc, #44]	; (800ceac <prvCheckTasksWaitingTermination+0x58>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	4a0a      	ldr	r2, [pc, #40]	; (800ceac <prvCheckTasksWaitingTermination+0x58>)
 800ce84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800ce86:	f000 fdb9 	bl	800d9fc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f810 	bl	800ceb0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce90:	4b06      	ldr	r3, [pc, #24]	; (800ceac <prvCheckTasksWaitingTermination+0x58>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e1      	bne.n	800ce5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800ce98:	bf00      	nop
 800ce9a:	bf00      	nop
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000114c 	.word	0x2000114c
 800cea8:	20001178 	.word	0x20001178
 800ceac:	20001160 	.word	0x20001160

0800ceb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d108      	bne.n	800ced4 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFreeStack( pxTCB->pxStack );
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 ff7a 	bl	800ddc0 <vPortFree>
                    vPortFree( pxTCB );
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 ff77 	bl	800ddc0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800ced2:	e010      	b.n	800cef6 <prvDeleteTCB+0x46>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d103      	bne.n	800cee6 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 ff6e 	bl	800ddc0 <vPortFree>
    }
 800cee4:	e007      	b.n	800cef6 <prvDeleteTCB+0x46>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d002      	beq.n	800cef6 <prvDeleteTCB+0x46>
 800cef0:	f000 feb2 	bl	800dc58 <ulSetInterruptMask>
 800cef4:	e7fe      	b.n	800cef4 <prvDeleteTCB+0x44>
    }
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
	...

0800cf00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <prvResetNextTaskUnblockTime+0x30>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d104      	bne.n	800cf18 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <prvResetNextTaskUnblockTime+0x34>)
 800cf10:	f04f 32ff 	mov.w	r2, #4294967295
 800cf14:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800cf16:	e005      	b.n	800cf24 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cf18:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <prvResetNextTaskUnblockTime+0x30>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a04      	ldr	r2, [pc, #16]	; (800cf34 <prvResetNextTaskUnblockTime+0x34>)
 800cf22:	6013      	str	r3, [r2, #0]
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20001130 	.word	0x20001130
 800cf34:	20001198 	.word	0x20001198

0800cf38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800cf3e:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <xTaskGetCurrentTaskHandle+0x1c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	607b      	str	r3, [r7, #4]

        return xReturn;
 800cf44:	687b      	ldr	r3, [r7, #4]
    }
 800cf46:	4618      	mov	r0, r3
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	20000ca4 	.word	0x20000ca4

0800cf58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800cf5e:	4b0b      	ldr	r3, [pc, #44]	; (800cf8c <xTaskGetSchedulerState+0x34>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d102      	bne.n	800cf6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800cf66:	2301      	movs	r3, #1
 800cf68:	607b      	str	r3, [r7, #4]
 800cf6a:	e008      	b.n	800cf7e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf6c:	4b08      	ldr	r3, [pc, #32]	; (800cf90 <xTaskGetSchedulerState+0x38>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d102      	bne.n	800cf7a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800cf74:	2302      	movs	r3, #2
 800cf76:	607b      	str	r3, [r7, #4]
 800cf78:	e001      	b.n	800cf7e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800cf7e:	687b      	ldr	r3, [r7, #4]
    }
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	20001184 	.word	0x20001184
 800cf90:	200011a0 	.word	0x200011a0

0800cf94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d079      	beq.n	800d09e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfae:	4b3e      	ldr	r3, [pc, #248]	; (800d0a8 <xTaskPriorityInherit+0x114>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d269      	bcs.n	800d08c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	db06      	blt.n	800cfce <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfc0:	4b39      	ldr	r3, [pc, #228]	; (800d0a8 <xTaskPriorityInherit+0x114>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	6959      	ldr	r1, [r3, #20]
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4a33      	ldr	r2, [pc, #204]	; (800d0ac <xTaskPriorityInherit+0x118>)
 800cfe0:	4413      	add	r3, r2
 800cfe2:	4299      	cmp	r1, r3
 800cfe4:	d14a      	bne.n	800d07c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe fa62 	bl	800b4b4 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cff0:	4b2d      	ldr	r3, [pc, #180]	; (800d0a8 <xTaskPriorityInherit+0x114>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cffe:	4b2c      	ldr	r3, [pc, #176]	; (800d0b0 <xTaskPriorityInherit+0x11c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	429a      	cmp	r2, r3
 800d004:	d903      	bls.n	800d00e <xTaskPriorityInherit+0x7a>
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00a:	4a29      	ldr	r2, [pc, #164]	; (800d0b0 <xTaskPriorityInherit+0x11c>)
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d012:	4926      	ldr	r1, [pc, #152]	; (800d0ac <xTaskPriorityInherit+0x118>)
 800d014:	4613      	mov	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	440b      	add	r3, r1
 800d01e:	3304      	adds	r3, #4
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	609a      	str	r2, [r3, #8]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	689a      	ldr	r2, [r3, #8]
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	60da      	str	r2, [r3, #12]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	3204      	adds	r2, #4
 800d03a:	605a      	str	r2, [r3, #4]
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	1d1a      	adds	r2, r3, #4
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	609a      	str	r2, [r3, #8]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d048:	4613      	mov	r3, r2
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	4a16      	ldr	r2, [pc, #88]	; (800d0ac <xTaskPriorityInherit+0x118>)
 800d052:	441a      	add	r2, r3
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	615a      	str	r2, [r3, #20]
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	4913      	ldr	r1, [pc, #76]	; (800d0ac <xTaskPriorityInherit+0x118>)
 800d05e:	4613      	mov	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	440b      	add	r3, r1
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	1c59      	adds	r1, r3, #1
 800d06c:	480f      	ldr	r0, [pc, #60]	; (800d0ac <xTaskPriorityInherit+0x118>)
 800d06e:	4613      	mov	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4403      	add	r3, r0
 800d078:	6019      	str	r1, [r3, #0]
 800d07a:	e004      	b.n	800d086 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d07c:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <xTaskPriorityInherit+0x114>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800d086:	2301      	movs	r3, #1
 800d088:	617b      	str	r3, [r7, #20]
 800d08a:	e008      	b.n	800d09e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <xTaskPriorityInherit+0x114>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d096:	429a      	cmp	r2, r3
 800d098:	d201      	bcs.n	800d09e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800d09a:	2301      	movs	r3, #1
 800d09c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800d09e:	697b      	ldr	r3, [r7, #20]
    }
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3718      	adds	r7, #24
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20000ca4 	.word	0x20000ca4
 800d0ac:	20000ca8 	.word	0x20000ca8
 800d0b0:	20001180 	.word	0x20001180

0800d0b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d06e      	beq.n	800d1a8 <xTaskPriorityDisinherit+0xf4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800d0ca:	4b3a      	ldr	r3, [pc, #232]	; (800d1b4 <xTaskPriorityDisinherit+0x100>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	693a      	ldr	r2, [r7, #16]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d002      	beq.n	800d0da <xTaskPriorityDisinherit+0x26>
 800d0d4:	f000 fdc0 	bl	800dc58 <ulSetInterruptMask>
 800d0d8:	e7fe      	b.n	800d0d8 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d102      	bne.n	800d0e8 <xTaskPriorityDisinherit+0x34>
 800d0e2:	f000 fdb9 	bl	800dc58 <ulSetInterruptMask>
 800d0e6:	e7fe      	b.n	800d0e6 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ec:	1e5a      	subs	r2, r3, #1
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d054      	beq.n	800d1a8 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d102:	2b00      	cmp	r3, #0
 800d104:	d150      	bne.n	800d1a8 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	3304      	adds	r3, #4
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe f9d2 	bl	800b4b4 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d128:	4b23      	ldr	r3, [pc, #140]	; (800d1b8 <xTaskPriorityDisinherit+0x104>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d903      	bls.n	800d138 <xTaskPriorityDisinherit+0x84>
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	4a20      	ldr	r2, [pc, #128]	; (800d1b8 <xTaskPriorityDisinherit+0x104>)
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13c:	491f      	ldr	r1, [pc, #124]	; (800d1bc <xTaskPriorityDisinherit+0x108>)
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	440b      	add	r3, r1
 800d148:	3304      	adds	r3, #4
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	60fb      	str	r3, [r7, #12]
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	609a      	str	r2, [r3, #8]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	689a      	ldr	r2, [r3, #8]
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	60da      	str	r2, [r3, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	3204      	adds	r2, #4
 800d164:	605a      	str	r2, [r3, #4]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	1d1a      	adds	r2, r3, #4
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	609a      	str	r2, [r3, #8]
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d172:	4613      	mov	r3, r2
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4413      	add	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4a10      	ldr	r2, [pc, #64]	; (800d1bc <xTaskPriorityDisinherit+0x108>)
 800d17c:	441a      	add	r2, r3
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	615a      	str	r2, [r3, #20]
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d186:	490d      	ldr	r1, [pc, #52]	; (800d1bc <xTaskPriorityDisinherit+0x108>)
 800d188:	4613      	mov	r3, r2
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	4413      	add	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	440b      	add	r3, r1
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	1c59      	adds	r1, r3, #1
 800d196:	4809      	ldr	r0, [pc, #36]	; (800d1bc <xTaskPriorityDisinherit+0x108>)
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4403      	add	r3, r0
 800d1a2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800d1a8:	697b      	ldr	r3, [r7, #20]
    }
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20000ca4 	.word	0x20000ca4
 800d1b8:	20001180 	.word	0x20001180
 800d1bc:	20000ca8 	.word	0x20000ca8

0800d1c0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 8083 	beq.w	800d2e0 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d102      	bne.n	800d1e8 <vTaskPriorityDisinheritAfterTimeout+0x28>
 800d1e2:	f000 fd39 	bl	800dc58 <ulSetInterruptMask>
 800d1e6:	e7fe      	b.n	800d1e6 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d902      	bls.n	800d1f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	61fb      	str	r3, [r7, #28]
 800d1f6:	e002      	b.n	800d1fe <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1fc:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	429a      	cmp	r2, r3
 800d206:	d06b      	beq.n	800d2e0 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d20c:	697a      	ldr	r2, [r7, #20]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d166      	bne.n	800d2e0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800d212:	4b35      	ldr	r3, [pc, #212]	; (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	69ba      	ldr	r2, [r7, #24]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d102      	bne.n	800d222 <vTaskPriorityDisinheritAfterTimeout+0x62>
 800d21c:	f000 fd1c 	bl	800dc58 <ulSetInterruptMask>
 800d220:	e7fe      	b.n	800d220 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	69fa      	ldr	r2, [r7, #28]
 800d22c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	2b00      	cmp	r3, #0
 800d234:	db04      	blt.n	800d240 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	6959      	ldr	r1, [r3, #20]
 800d244:	693a      	ldr	r2, [r7, #16]
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4a27      	ldr	r2, [pc, #156]	; (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d250:	4413      	add	r3, r2
 800d252:	4299      	cmp	r1, r3
 800d254:	d144      	bne.n	800d2e0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	3304      	adds	r3, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe f92a 	bl	800b4b4 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d264:	4b22      	ldr	r3, [pc, #136]	; (800d2f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d903      	bls.n	800d274 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d270:	4a1f      	ldr	r2, [pc, #124]	; (800d2f0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d272:	6013      	str	r3, [r2, #0]
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d278:	491c      	ldr	r1, [pc, #112]	; (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	440b      	add	r3, r1
 800d284:	3304      	adds	r3, #4
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	60fb      	str	r3, [r7, #12]
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	609a      	str	r2, [r3, #8]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	689a      	ldr	r2, [r3, #8]
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	60da      	str	r2, [r3, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	3204      	adds	r2, #4
 800d2a0:	605a      	str	r2, [r3, #4]
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	1d1a      	adds	r2, r3, #4
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	609a      	str	r2, [r3, #8]
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d2b8:	441a      	add	r2, r3
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	615a      	str	r2, [r3, #20]
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	490a      	ldr	r1, [pc, #40]	; (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	1c59      	adds	r1, r3, #1
 800d2d2:	4806      	ldr	r0, [pc, #24]	; (800d2ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4413      	add	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4403      	add	r3, r0
 800d2de:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d2e0:	bf00      	nop
 800d2e2:	3720      	adds	r7, #32
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	20000ca4 	.word	0x20000ca4
 800d2ec:	20000ca8 	.word	0x20000ca8
 800d2f0:	20001180 	.word	0x20001180

0800d2f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800d2f4:	b480      	push	{r7}
 800d2f6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800d2f8:	4b07      	ldr	r3, [pc, #28]	; (800d318 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d004      	beq.n	800d30a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800d300:	4b05      	ldr	r3, [pc, #20]	; (800d318 <pvTaskIncrementMutexHeldCount+0x24>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d306:	3201      	adds	r2, #1
 800d308:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 800d30a:	4b03      	ldr	r3, [pc, #12]	; (800d318 <pvTaskIncrementMutexHeldCount+0x24>)
 800d30c:	681b      	ldr	r3, [r3, #0]
    }
 800d30e:	4618      	mov	r0, r3
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	20000ca4 	.word	0x20000ca4

0800d31c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d326:	4b2e      	ldr	r3, [pc, #184]	; (800d3e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d32c:	4b2d      	ldr	r3, [pc, #180]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3304      	adds	r3, #4
 800d332:	4618      	mov	r0, r3
 800d334:	f7fe f8be 	bl	800b4b4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33e:	d124      	bne.n	800d38a <prvAddCurrentTaskToDelayedList+0x6e>
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d021      	beq.n	800d38a <prvAddCurrentTaskToDelayedList+0x6e>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d346:	4b28      	ldr	r3, [pc, #160]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	613b      	str	r3, [r7, #16]
 800d34c:	4b25      	ldr	r3, [pc, #148]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	693a      	ldr	r2, [r7, #16]
 800d352:	609a      	str	r2, [r3, #8]
 800d354:	4b23      	ldr	r3, [pc, #140]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	6892      	ldr	r2, [r2, #8]
 800d35c:	60da      	str	r2, [r3, #12]
 800d35e:	4b21      	ldr	r3, [pc, #132]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	3204      	adds	r2, #4
 800d368:	605a      	str	r2, [r3, #4]
 800d36a:	4b1e      	ldr	r3, [pc, #120]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	1d1a      	adds	r2, r3, #4
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	609a      	str	r2, [r3, #8]
 800d374:	4b1b      	ldr	r3, [pc, #108]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a1b      	ldr	r2, [pc, #108]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d37a:	615a      	str	r2, [r3, #20]
 800d37c:	4b1a      	ldr	r3, [pc, #104]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	3301      	adds	r3, #1
 800d382:	4a19      	ldr	r2, [pc, #100]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800d388:	e026      	b.n	800d3d8 <prvAddCurrentTaskToDelayedList+0xbc>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4413      	add	r3, r2
 800d390:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d392:	4b14      	ldr	r3, [pc, #80]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d209      	bcs.n	800d3b6 <prvAddCurrentTaskToDelayedList+0x9a>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3a2:	4b12      	ldr	r3, [pc, #72]	; (800d3ec <prvAddCurrentTaskToDelayedList+0xd0>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	f7fe f847 	bl	800b442 <vListInsert>
}
 800d3b4:	e010      	b.n	800d3d8 <prvAddCurrentTaskToDelayedList+0xbc>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3b6:	4b0e      	ldr	r3, [pc, #56]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xd4>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	f7fe f83d 	bl	800b442 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800d3c8:	4b0a      	ldr	r3, [pc, #40]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d202      	bcs.n	800d3d8 <prvAddCurrentTaskToDelayedList+0xbc>
                        xNextTaskUnblockTime = xTimeToWake;
 800d3d2:	4a08      	ldr	r2, [pc, #32]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6013      	str	r3, [r2, #0]
}
 800d3d8:	bf00      	nop
 800d3da:	3718      	adds	r7, #24
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	2000117c 	.word	0x2000117c
 800d3e4:	20000ca4 	.word	0x20000ca4
 800d3e8:	20001164 	.word	0x20001164
 800d3ec:	20001134 	.word	0x20001134
 800d3f0:	20001130 	.word	0x20001130
 800d3f4:	20001198 	.word	0x20001198

0800d3f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800d402:	f000 fa59 	bl	800d8b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800d406:	4b18      	ldr	r3, [pc, #96]	; (800d468 <xTimerCreateTimerTask+0x70>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d020      	beq.n	800d450 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800d412:	2300      	movs	r3, #0
 800d414:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d416:	463a      	mov	r2, r7
 800d418:	1d39      	adds	r1, r7, #4
 800d41a:	f107 0308 	add.w	r3, r7, #8
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fd ffc8 	bl	800b3b4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	9202      	str	r2, [sp, #8]
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	2302      	movs	r3, #2
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	2300      	movs	r3, #0
 800d434:	460a      	mov	r2, r1
 800d436:	490d      	ldr	r1, [pc, #52]	; (800d46c <xTimerCreateTimerTask+0x74>)
 800d438:	480d      	ldr	r0, [pc, #52]	; (800d470 <xTimerCreateTimerTask+0x78>)
 800d43a:	f7fe fe7f 	bl	800c13c <xTaskCreateStatic>
 800d43e:	4603      	mov	r3, r0
 800d440:	4a0c      	ldr	r2, [pc, #48]	; (800d474 <xTimerCreateTimerTask+0x7c>)
 800d442:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 800d444:	4b0b      	ldr	r3, [pc, #44]	; (800d474 <xTimerCreateTimerTask+0x7c>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 800d44c:	2301      	movs	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d102      	bne.n	800d45c <xTimerCreateTimerTask+0x64>
 800d456:	f000 fbff 	bl	800dc58 <ulSetInterruptMask>
 800d45a:	e7fe      	b.n	800d45a <xTimerCreateTimerTask+0x62>
        return xReturn;
 800d45c:	68fb      	ldr	r3, [r7, #12]
    }
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200011d4 	.word	0x200011d4
 800d46c:	0800ef50 	.word	0x0800ef50
 800d470:	0800d51d 	.word	0x0800d51d
 800d474:	200011d8 	.word	0x200011d8

0800d478 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d484:	e008      	b.n	800d498 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	699b      	ldr	r3, [r3, #24]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	4413      	add	r3, r2
 800d48e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6a1b      	ldr	r3, [r3, #32]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	699a      	ldr	r2, [r3, #24]
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	18d1      	adds	r1, r2, r3
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f000 f8d5 	bl	800d654 <prvInsertTimerInActiveList>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1ea      	bne.n	800d486 <prvReloadTimer+0xe>
        }
    }
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
	...

0800d4bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c6:	4b14      	ldr	r3, [pc, #80]	; (800d518 <prvProcessExpiredTimer+0x5c>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fd ffed 	bl	800b4b4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4e0:	f003 0304 	and.w	r3, r3, #4
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d005      	beq.n	800d4f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800d4e8:	683a      	ldr	r2, [r7, #0]
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7ff ffc3 	bl	800d478 <prvReloadTimer>
 800d4f2:	e008      	b.n	800d506 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4fa:	f023 0301 	bic.w	r3, r3, #1
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	4798      	blx	r3
    }
 800d50e:	bf00      	nop
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	200011cc 	.word	0x200011cc

0800d51c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d524:	f107 0308 	add.w	r3, r7, #8
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 f84f 	bl	800d5cc <prvGetNextExpireTime>
 800d52e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	4619      	mov	r1, r3
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 f803 	bl	800d540 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800d53a:	f000 f8cd 	bl	800d6d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d53e:	e7f1      	b.n	800d524 <prvTimerTask+0x8>

0800d540 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800d54a:	f7ff f825 	bl	800c598 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d54e:	f107 0308 	add.w	r3, r7, #8
 800d552:	4618      	mov	r0, r3
 800d554:	f000 f85e 	bl	800d614 <prvSampleTimeNow>
 800d558:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d12a      	bne.n	800d5b6 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10a      	bne.n	800d57c <prvProcessTimerOrBlockTask+0x3c>
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d806      	bhi.n	800d57c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800d56e:	f7ff f821 	bl	800c5b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d572:	68f9      	ldr	r1, [r7, #12]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ffa1 	bl	800d4bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800d57a:	e01e      	b.n	800d5ba <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d008      	beq.n	800d594 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d582:	4b10      	ldr	r3, [pc, #64]	; (800d5c4 <prvProcessTimerOrBlockTask+0x84>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <prvProcessTimerOrBlockTask+0x50>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <prvProcessTimerOrBlockTask+0x52>
 800d590:	2300      	movs	r3, #0
 800d592:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d594:	4b0c      	ldr	r3, [pc, #48]	; (800d5c8 <prvProcessTimerOrBlockTask+0x88>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f7fe fd97 	bl	800c0d4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800d5a6:	f7ff f805 	bl	800c5b4 <xTaskResumeAll>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d104      	bne.n	800d5ba <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800d5b0:	f000 fa00 	bl	800d9b4 <vPortYield>
    }
 800d5b4:	e001      	b.n	800d5ba <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800d5b6:	f7fe fffd 	bl	800c5b4 <xTaskResumeAll>
    }
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	200011d0 	.word	0x200011d0
 800d5c8:	200011d4 	.word	0x200011d4

0800d5cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d5d4:	4b0e      	ldr	r3, [pc, #56]	; (800d610 <prvGetNextExpireTime+0x44>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <prvGetNextExpireTime+0x16>
 800d5de:	2201      	movs	r2, #1
 800d5e0:	e000      	b.n	800d5e4 <prvGetNextExpireTime+0x18>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d105      	bne.n	800d5fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5f0:	4b07      	ldr	r3, [pc, #28]	; (800d610 <prvGetNextExpireTime+0x44>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	e001      	b.n	800d600 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800d600:	68fb      	ldr	r3, [r7, #12]
    }
 800d602:	4618      	mov	r0, r3
 800d604:	3714      	adds	r7, #20
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	200011cc 	.word	0x200011cc

0800d614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800d61c:	f7ff f8b6 	bl	800c78c <xTaskGetTickCount>
 800d620:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800d622:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <prvSampleTimeNow+0x3c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d205      	bcs.n	800d638 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800d62c:	f000 f91e 	bl	800d86c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	e002      	b.n	800d63e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800d63e:	4a04      	ldr	r2, [pc, #16]	; (800d650 <prvSampleTimeNow+0x3c>)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800d644:	68fb      	ldr	r3, [r7, #12]
    }
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	200011dc 	.word	0x200011dc

0800d654 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800d662:	2300      	movs	r3, #0
 800d664:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	429a      	cmp	r2, r3
 800d678:	d812      	bhi.n	800d6a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	1ad2      	subs	r2, r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	699b      	ldr	r3, [r3, #24]
 800d684:	429a      	cmp	r2, r3
 800d686:	d302      	bcc.n	800d68e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800d688:	2301      	movs	r3, #1
 800d68a:	617b      	str	r3, [r7, #20]
 800d68c:	e01b      	b.n	800d6c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d68e:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <prvInsertTimerInActiveList+0x7c>)
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	3304      	adds	r3, #4
 800d696:	4619      	mov	r1, r3
 800d698:	4610      	mov	r0, r2
 800d69a:	f7fd fed2 	bl	800b442 <vListInsert>
 800d69e:	e012      	b.n	800d6c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d206      	bcs.n	800d6b6 <prvInsertTimerInActiveList+0x62>
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d302      	bcc.n	800d6b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	617b      	str	r3, [r7, #20]
 800d6b4:	e007      	b.n	800d6c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d6b6:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <prvInsertTimerInActiveList+0x80>)
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	4619      	mov	r1, r3
 800d6c0:	4610      	mov	r0, r2
 800d6c2:	f7fd febe 	bl	800b442 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800d6c6:	697b      	ldr	r3, [r7, #20]
    }
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	200011d0 	.word	0x200011d0
 800d6d4:	200011cc 	.word	0x200011cc

0800d6d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6de:	e0b2      	b.n	800d846 <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	da10      	bge.n	800d708 <prvProcessReceivedCommands+0x30>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d6e6:	1d3b      	adds	r3, r7, #4
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	61fb      	str	r3, [r7, #28]

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <prvProcessReceivedCommands+0x20>
 800d6f2:	f000 fab1 	bl	800dc58 <ulSetInterruptMask>
 800d6f6:	e7fe      	b.n	800d6f6 <prvProcessReceivedCommands+0x1e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69fa      	ldr	r2, [r7, #28]
 800d6fe:	6850      	ldr	r0, [r2, #4]
 800d700:	69fa      	ldr	r2, [r7, #28]
 800d702:	6892      	ldr	r2, [r2, #8]
 800d704:	4611      	mov	r1, r2
 800d706:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f2c0 809b 	blt.w	800d846 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	3304      	adds	r3, #4
 800d720:	4618      	mov	r0, r3
 800d722:	f7fd fec7 	bl	800b4b4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d726:	463b      	mov	r3, r7
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff ff73 	bl	800d614 <prvSampleTimeNow>
 800d72e:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	3b01      	subs	r3, #1
 800d734:	2b08      	cmp	r3, #8
 800d736:	f200 8085 	bhi.w	800d844 <prvProcessReceivedCommands+0x16c>
 800d73a:	a201      	add	r2, pc, #4	; (adr r2, 800d740 <prvProcessReceivedCommands+0x68>)
 800d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d740:	0800d765 	.word	0x0800d765
 800d744:	0800d765 	.word	0x0800d765
 800d748:	0800d7cd 	.word	0x0800d7cd
 800d74c:	0800d7e1 	.word	0x0800d7e1
 800d750:	0800d81b 	.word	0x0800d81b
 800d754:	0800d765 	.word	0x0800d765
 800d758:	0800d765 	.word	0x0800d765
 800d75c:	0800d7cd 	.word	0x0800d7cd
 800d760:	0800d7e1 	.word	0x0800d7e1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d76a:	f043 0301 	orr.w	r3, r3, #1
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	18d1      	adds	r1, r2, r3
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	69b8      	ldr	r0, [r7, #24]
 800d784:	f7ff ff66 	bl	800d654 <prvInsertTimerInActiveList>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d05b      	beq.n	800d846 <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d794:	f003 0304 	and.w	r3, r3, #4
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d009      	beq.n	800d7b0 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	69b8      	ldr	r0, [r7, #24]
 800d7aa:	f7ff fe65 	bl	800d478 <prvReloadTimer>
 800d7ae:	e008      	b.n	800d7c2 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7b6:	f023 0301 	bic.w	r3, r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	69b8      	ldr	r0, [r7, #24]
 800d7c8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800d7ca:	e03c      	b.n	800d846 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7d2:	f023 0301 	bic.w	r3, r3, #1
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800d7de:	e032      	b.n	800d846 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7e6:	f043 0301 	orr.w	r3, r3, #1
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d102      	bne.n	800d806 <prvProcessReceivedCommands+0x12e>
 800d800:	f000 fa2a 	bl	800dc58 <ulSetInterruptMask>
 800d804:	e7fe      	b.n	800d804 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	699a      	ldr	r2, [r3, #24]
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	18d1      	adds	r1, r2, r3
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	69b8      	ldr	r0, [r7, #24]
 800d814:	f7ff ff1e 	bl	800d654 <prvInsertTimerInActiveList>
                        break;
 800d818:	e015      	b.n	800d846 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d820:	f003 0302 	and.w	r3, r3, #2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d103      	bne.n	800d830 <prvProcessReceivedCommands+0x158>
                                {
                                    vPortFree( pxTimer );
 800d828:	69b8      	ldr	r0, [r7, #24]
 800d82a:	f000 fac9 	bl	800ddc0 <vPortFree>
 800d82e:	e00a      	b.n	800d846 <prvProcessReceivedCommands+0x16e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d836:	f023 0301 	bic.w	r3, r3, #1
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800d842:	e000      	b.n	800d846 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800d844:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d846:	4b08      	ldr	r3, [pc, #32]	; (800d868 <prvProcessReceivedCommands+0x190>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	1d39      	adds	r1, r7, #4
 800d84c:	2200      	movs	r2, #0
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe f8f4 	bl	800ba3c <xQueueReceive>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	f47f af42 	bne.w	800d6e0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800d85c:	bf00      	nop
 800d85e:	bf00      	nop
 800d860:	3720      	adds	r7, #32
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	200011d4 	.word	0x200011d4

0800d86c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d872:	e009      	b.n	800d888 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d874:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <prvSwitchTimerLists+0x44>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800d87e:	f04f 31ff 	mov.w	r1, #4294967295
 800d882:	6838      	ldr	r0, [r7, #0]
 800d884:	f7ff fe1a 	bl	800d4bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d888:	4b09      	ldr	r3, [pc, #36]	; (800d8b0 <prvSwitchTimerLists+0x44>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1f0      	bne.n	800d874 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800d892:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <prvSwitchTimerLists+0x44>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800d898:	4b06      	ldr	r3, [pc, #24]	; (800d8b4 <prvSwitchTimerLists+0x48>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a04      	ldr	r2, [pc, #16]	; (800d8b0 <prvSwitchTimerLists+0x44>)
 800d89e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800d8a0:	4a04      	ldr	r2, [pc, #16]	; (800d8b4 <prvSwitchTimerLists+0x48>)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6013      	str	r3, [r2, #0]
    }
 800d8a6:	bf00      	nop
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200011cc 	.word	0x200011cc
 800d8b4:	200011d0 	.word	0x200011d0

0800d8b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800d8be:	f000 f88b 	bl	800d9d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <prvCheckForValidListAndQueue+0x60>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d120      	bne.n	800d90c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800d8ca:	4814      	ldr	r0, [pc, #80]	; (800d91c <prvCheckForValidListAndQueue+0x64>)
 800d8cc:	f7fd fd8c 	bl	800b3e8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800d8d0:	4813      	ldr	r0, [pc, #76]	; (800d920 <prvCheckForValidListAndQueue+0x68>)
 800d8d2:	f7fd fd89 	bl	800b3e8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800d8d6:	4b13      	ldr	r3, [pc, #76]	; (800d924 <prvCheckForValidListAndQueue+0x6c>)
 800d8d8:	4a10      	ldr	r2, [pc, #64]	; (800d91c <prvCheckForValidListAndQueue+0x64>)
 800d8da:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800d8dc:	4b12      	ldr	r3, [pc, #72]	; (800d928 <prvCheckForValidListAndQueue+0x70>)
 800d8de:	4a10      	ldr	r2, [pc, #64]	; (800d920 <prvCheckForValidListAndQueue+0x68>)
 800d8e0:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	4b11      	ldr	r3, [pc, #68]	; (800d92c <prvCheckForValidListAndQueue+0x74>)
 800d8e8:	4a11      	ldr	r2, [pc, #68]	; (800d930 <prvCheckForValidListAndQueue+0x78>)
 800d8ea:	2110      	movs	r1, #16
 800d8ec:	200a      	movs	r0, #10
 800d8ee:	f7fd fe82 	bl	800b5f6 <xQueueGenericCreateStatic>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4a08      	ldr	r2, [pc, #32]	; (800d918 <prvCheckForValidListAndQueue+0x60>)
 800d8f6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800d8f8:	4b07      	ldr	r3, [pc, #28]	; (800d918 <prvCheckForValidListAndQueue+0x60>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d005      	beq.n	800d90c <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d900:	4b05      	ldr	r3, [pc, #20]	; (800d918 <prvCheckForValidListAndQueue+0x60>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	490b      	ldr	r1, [pc, #44]	; (800d934 <prvCheckForValidListAndQueue+0x7c>)
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fb72 	bl	800bff0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800d90c:	f000 f876 	bl	800d9fc <vPortExitCritical>
    }
 800d910:	bf00      	nop
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	200011d4 	.word	0x200011d4
 800d91c:	200011a4 	.word	0x200011a4
 800d920:	200011b8 	.word	0x200011b8
 800d924:	200011cc 	.word	0x200011cc
 800d928:	200011d0 	.word	0x200011d0
 800d92c:	20001280 	.word	0x20001280
 800d930:	200011e0 	.word	0x200011e0
 800d934:	0800ef58 	.word	0x0800ef58

0800d938 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800d938:	b480      	push	{r7}
 800d93a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d93c:	4b0b      	ldr	r3, [pc, #44]	; (800d96c <vPortSetupTimerInterrupt+0x34>)
 800d93e:	2200      	movs	r2, #0
 800d940:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d942:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <vPortSetupTimerInterrupt+0x38>)
 800d944:	2200      	movs	r2, #0
 800d946:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d948:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <vPortSetupTimerInterrupt+0x3c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a0a      	ldr	r2, [pc, #40]	; (800d978 <vPortSetupTimerInterrupt+0x40>)
 800d94e:	fba2 2303 	umull	r2, r3, r2, r3
 800d952:	099b      	lsrs	r3, r3, #6
 800d954:	4a09      	ldr	r2, [pc, #36]	; (800d97c <vPortSetupTimerInterrupt+0x44>)
 800d956:	3b01      	subs	r3, #1
 800d958:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800d95a:	4b04      	ldr	r3, [pc, #16]	; (800d96c <vPortSetupTimerInterrupt+0x34>)
 800d95c:	2207      	movs	r2, #7
 800d95e:	601a      	str	r2, [r3, #0]
}
 800d960:	bf00      	nop
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	e000e010 	.word	0xe000e010
 800d970:	e000e018 	.word	0xe000e018
 800d974:	20000004 	.word	0x20000004
 800d978:	10624dd3 	.word	0x10624dd3
 800d97c:	e000e014 	.word	0xe000e014

0800d980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800d986:	2300      	movs	r3, #0
 800d988:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <prvTaskExitError+0x30>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d992:	d002      	beq.n	800d99a <prvTaskExitError+0x1a>
 800d994:	f000 f960 	bl	800dc58 <ulSetInterruptMask>
 800d998:	e7fe      	b.n	800d998 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800d99a:	f000 f95d 	bl	800dc58 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800d99e:	bf00      	nop
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d0fc      	beq.n	800d9a0 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800d9a6:	bf00      	nop
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20000014 	.word	0x20000014

0800d9b4 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9b8:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <vPortYield+0x20>)
 800d9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9be:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800d9c0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800d9c4:	f3bf 8f6f 	isb	sy
}
 800d9c8:	bf00      	nop
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	e000ed04 	.word	0xe000ed04

0800d9d8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800d9dc:	f000 f93c 	bl	800dc58 <ulSetInterruptMask>
    ulCriticalNesting++;
 800d9e0:	4b05      	ldr	r3, [pc, #20]	; (800d9f8 <vPortEnterCritical+0x20>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	4a04      	ldr	r2, [pc, #16]	; (800d9f8 <vPortEnterCritical+0x20>)
 800d9e8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800d9ea:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800d9ee:	f3bf 8f6f 	isb	sy
}
 800d9f2:	bf00      	nop
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20000014 	.word	0x20000014

0800d9fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800da00:	4b0a      	ldr	r3, [pc, #40]	; (800da2c <vPortExitCritical+0x30>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d102      	bne.n	800da0e <vPortExitCritical+0x12>
 800da08:	f000 f926 	bl	800dc58 <ulSetInterruptMask>
 800da0c:	e7fe      	b.n	800da0c <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <vPortExitCritical+0x30>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	3b01      	subs	r3, #1
 800da14:	4a05      	ldr	r2, [pc, #20]	; (800da2c <vPortExitCritical+0x30>)
 800da16:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800da18:	4b04      	ldr	r3, [pc, #16]	; (800da2c <vPortExitCritical+0x30>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d102      	bne.n	800da26 <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800da20:	2000      	movs	r0, #0
 800da22:	f000 f926 	bl	800dc72 <vClearInterruptMask>
    }
}
 800da26:	bf00      	nop
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	20000014 	.word	0x20000014

0800da30 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800da36:	f000 f90f 	bl	800dc58 <ulSetInterruptMask>
 800da3a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800da3c:	f7fe feb6 	bl	800c7ac <xTaskIncrementTick>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da46:	4b05      	ldr	r3, [pc, #20]	; (800da5c <xPortSysTickHandler+0x2c>)
 800da48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 f90f 	bl	800dc72 <vClearInterruptMask>
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	e000ed04 	.word	0xe000ed04

0800da60 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3b02      	subs	r3, #2
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800da76:	7afb      	ldrb	r3, [r7, #11]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d102      	bne.n	800da82 <vPortSVCHandler_C+0x22>
                }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800da7c:	f000 f8b8 	bl	800dbf0 <vRestoreContextOfFirstTask>
            break;
 800da80:	e002      	b.n	800da88 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800da82:	f000 f8e9 	bl	800dc58 <ulSetInterruptMask>
 800da86:	e7fe      	b.n	800da86 <vPortSVCHandler_C+0x26>
    }
}
 800da88:	bf00      	nop
 800da8a:	3710      	adds	r7, #16
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
 800da9c:	603b      	str	r3, [r7, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3b04      	subs	r3, #4
 800daa2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800daaa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3b04      	subs	r3, #4
 800dab0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	3b04      	subs	r3, #4
 800dabc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800dabe:	4a38      	ldr	r2, [pc, #224]	; (800dba0 <pxPortInitialiseStack+0x110>)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3b04      	subs	r3, #4
 800dac8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800dad0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3b04      	subs	r3, #4
 800dad6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800dade:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3b04      	subs	r3, #4
 800dae4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800daec:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3b04      	subs	r3, #4
 800daf2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800dafa:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3b04      	subs	r3, #4
 800db00:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3b04      	subs	r3, #4
 800db0c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800db14:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3b04      	subs	r3, #4
 800db1a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800db22:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3b04      	subs	r3, #4
 800db28:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800db30:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3b04      	subs	r3, #4
 800db36:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800db3e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3b04      	subs	r3, #4
 800db44:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800db4c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	3b04      	subs	r3, #4
 800db52:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800db5a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	3b04      	subs	r3, #4
 800db60:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800db68:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3b04      	subs	r3, #4
 800db6e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800db76:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3b04      	subs	r3, #4
 800db7c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800db84:	601a      	str	r2, [r3, #0]
                        *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
                    }
                }
            #endif /* configENABLE_MPU */

            pxTopOfStack--;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	3b04      	subs	r3, #4
 800db8a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	601a      	str	r2, [r3, #0]
                }
            #endif /* configENABLE_TRUSTZONE */
        }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800db92:	68fb      	ldr	r3, [r7, #12]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	0800d981 	.word	0x0800d981

0800dba4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800dba8:	4b0c      	ldr	r3, [pc, #48]	; (800dbdc <xPortStartScheduler+0x38>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a0b      	ldr	r2, [pc, #44]	; (800dbdc <xPortStartScheduler+0x38>)
 800dbae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbb2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800dbb4:	4b09      	ldr	r3, [pc, #36]	; (800dbdc <xPortStartScheduler+0x38>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a08      	ldr	r2, [pc, #32]	; (800dbdc <xPortStartScheduler+0x38>)
 800dbba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbbe:	6013      	str	r3, [r2, #0]
        }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800dbc0:	f7ff feba 	bl	800d938 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800dbc4:	4b06      	ldr	r3, [pc, #24]	; (800dbe0 <xPortStartScheduler+0x3c>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800dbca:	f000 f831 	bl	800dc30 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800dbce:	f7fe fefd 	bl	800c9cc <vTaskSwitchContext>
    prvTaskExitError();
 800dbd2:	f7ff fed5 	bl	800d980 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	e000ed20 	.word	0xe000ed20
 800dbe0:	20000014 	.word	0x20000014
	...

0800dbf0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dbf0:	4a0b      	ldr	r2, [pc, #44]	; (800dc20 <pxCurrentTCBConst2>)
 800dbf2:	6811      	ldr	r1, [r2, #0]
 800dbf4:	6808      	ldr	r0, [r1, #0]
 800dbf6:	c806      	ldmia	r0!, {r1, r2}
 800dbf8:	f381 880b 	msr	PSPLIM, r1
 800dbfc:	2102      	movs	r1, #2
 800dbfe:	f381 8814 	msr	CONTROL, r1
 800dc02:	3020      	adds	r0, #32
 800dc04:	f380 8809 	msr	PSP, r0
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f04f 0000 	mov.w	r0, #0
 800dc10:	f380 8811 	msr	BASEPRI, r0
 800dc14:	4710      	bx	r2
 800dc16:	bf00      	nop
 800dc18:	f3af 8000 	nop.w
 800dc1c:	f3af 8000 	nop.w

0800dc20 <pxCurrentTCBConst2>:
 800dc20:	20000ca4 	.word	0x20000ca4
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop
	...

0800dc30 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dc30:	4807      	ldr	r0, [pc, #28]	; (800dc50 <xVTORConst>)
 800dc32:	6800      	ldr	r0, [r0, #0]
 800dc34:	6800      	ldr	r0, [r0, #0]
 800dc36:	f380 8808 	msr	MSP, r0
 800dc3a:	b662      	cpsie	i
 800dc3c:	b661      	cpsie	f
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	df02      	svc	2
 800dc48:	bf00      	nop
 800dc4a:	bf00      	nop
 800dc4c:	f3af 8000 	nop.w

0800dc50 <xVTORConst>:
 800dc50:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800dc54:	bf00      	nop
 800dc56:	bf00      	nop

0800dc58 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dc58:	f3ef 8011 	mrs	r0, BASEPRI
 800dc5c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800dc60:	f381 8811 	msr	BASEPRI, r1
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800dc6e:	bf00      	nop
 800dc70:	4618      	mov	r0, r3

0800dc72 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dc72:	f380 8811 	msr	BASEPRI, r0
 800dc76:	f3bf 8f4f 	dsb	sy
 800dc7a:	f3bf 8f6f 	isb	sy
 800dc7e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800dc80:	bf00      	nop
	...

0800dc90 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dc90:	f3ef 8009 	mrs	r0, PSP
 800dc94:	f3ef 820b 	mrs	r2, PSPLIM
 800dc98:	4673      	mov	r3, lr
 800dc9a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800dc9e:	4a10      	ldr	r2, [pc, #64]	; (800dce0 <pxCurrentTCBConst>)
 800dca0:	6811      	ldr	r1, [r2, #0]
 800dca2:	6008      	str	r0, [r1, #0]
 800dca4:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dca8:	f380 8811 	msr	BASEPRI, r0
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f7fe fe8a 	bl	800c9cc <vTaskSwitchContext>
 800dcb8:	f04f 0000 	mov.w	r0, #0
 800dcbc:	f380 8811 	msr	BASEPRI, r0
 800dcc0:	4a07      	ldr	r2, [pc, #28]	; (800dce0 <pxCurrentTCBConst>)
 800dcc2:	6811      	ldr	r1, [r2, #0]
 800dcc4:	6808      	ldr	r0, [r1, #0]
 800dcc6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800dcca:	f382 880b 	msr	PSPLIM, r2
 800dcce:	f380 8809 	msr	PSP, r0
 800dcd2:	4718      	bx	r3
 800dcd4:	f3af 8000 	nop.w
 800dcd8:	f3af 8000 	nop.w
 800dcdc:	f3af 8000 	nop.w

0800dce0 <pxCurrentTCBConst>:
 800dce0:	20000ca4 	.word	0x20000ca4
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop
	...

0800dcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dcf0:	f01e 0f04 	tst.w	lr, #4
 800dcf4:	bf0c      	ite	eq
 800dcf6:	f3ef 8008 	mrseq	r0, MSP
 800dcfa:	f3ef 8009 	mrsne	r0, PSP
 800dcfe:	4904      	ldr	r1, [pc, #16]	; (800dd10 <svchandler_address_const>)
 800dd00:	4708      	bx	r1
 800dd02:	bf00      	nop
 800dd04:	f3af 8000 	nop.w
 800dd08:	f3af 8000 	nop.w
 800dd0c:	f3af 8000 	nop.w

0800dd10 <svchandler_address_const>:
 800dd10:	0800da61 	.word	0x0800da61
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop

0800dd18 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800dd20:	2300      	movs	r3, #0
 800dd22:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f003 0307 	and.w	r3, r3, #7
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00e      	beq.n	800dd4c <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f023 0307 	bic.w	r3, r3, #7
 800dd34:	3308      	adds	r3, #8
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d205      	bcs.n	800dd48 <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f023 0307 	bic.w	r3, r3, #7
 800dd42:	3308      	adds	r3, #8
 800dd44:	607b      	str	r3, [r7, #4]
 800dd46:	e001      	b.n	800dd4c <pvPortMalloc+0x34>
                }
                else
                {
                    xWantedSize = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 800dd4c:	f7fe fc24 	bl	800c598 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800dd50:	4b17      	ldr	r3, [pc, #92]	; (800ddb0 <pvPortMalloc+0x98>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d105      	bne.n	800dd64 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800dd58:	4b16      	ldr	r3, [pc, #88]	; (800ddb4 <pvPortMalloc+0x9c>)
 800dd5a:	f023 0307 	bic.w	r3, r3, #7
 800dd5e:	461a      	mov	r2, r3
 800dd60:	4b13      	ldr	r3, [pc, #76]	; (800ddb0 <pvPortMalloc+0x98>)
 800dd62:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01a      	beq.n	800dda0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800dd6a:	4b13      	ldr	r3, [pc, #76]	; (800ddb8 <pvPortMalloc+0xa0>)
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 800dd72:	4a12      	ldr	r2, [pc, #72]	; (800ddbc <pvPortMalloc+0xa4>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d813      	bhi.n	800dda0 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800dd78:	4b0f      	ldr	r3, [pc, #60]	; (800ddb8 <pvPortMalloc+0xa0>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	441a      	add	r2, r3
 800dd80:	4b0d      	ldr	r3, [pc, #52]	; (800ddb8 <pvPortMalloc+0xa0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d90b      	bls.n	800dda0 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800dd88:	4b09      	ldr	r3, [pc, #36]	; (800ddb0 <pvPortMalloc+0x98>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	4b0a      	ldr	r3, [pc, #40]	; (800ddb8 <pvPortMalloc+0xa0>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4413      	add	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800dd94:	4b08      	ldr	r3, [pc, #32]	; (800ddb8 <pvPortMalloc+0xa0>)
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	4a06      	ldr	r2, [pc, #24]	; (800ddb8 <pvPortMalloc+0xa0>)
 800dd9e:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800dda0:	f7fe fc08 	bl	800c5b4 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800dda4:	68fb      	ldr	r3, [r7, #12]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	200412d4 	.word	0x200412d4
 800ddb4:	200012d7 	.word	0x200012d7
 800ddb8:	200412d0 	.word	0x200412d0
 800ddbc:	0003fff7 	.word	0x0003fff7

0800ddc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <vPortFree+0x14>
 800ddce:	f7ff ff43 	bl	800dc58 <ulSetInterruptMask>
 800ddd2:	e7fe      	b.n	800ddd2 <vPortFree+0x12>
}
 800ddd4:	bf00      	nop
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <sbrk_aligned>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	4e0e      	ldr	r6, [pc, #56]	; (800de18 <sbrk_aligned+0x3c>)
 800dde0:	460c      	mov	r4, r1
 800dde2:	4605      	mov	r5, r0
 800dde4:	6831      	ldr	r1, [r6, #0]
 800dde6:	b911      	cbnz	r1, 800ddee <sbrk_aligned+0x12>
 800dde8:	f000 fb0e 	bl	800e408 <_sbrk_r>
 800ddec:	6030      	str	r0, [r6, #0]
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	f000 fb09 	bl	800e408 <_sbrk_r>
 800ddf6:	1c43      	adds	r3, r0, #1
 800ddf8:	d00a      	beq.n	800de10 <sbrk_aligned+0x34>
 800ddfa:	1cc4      	adds	r4, r0, #3
 800ddfc:	f024 0403 	bic.w	r4, r4, #3
 800de00:	42a0      	cmp	r0, r4
 800de02:	d007      	beq.n	800de14 <sbrk_aligned+0x38>
 800de04:	1a21      	subs	r1, r4, r0
 800de06:	4628      	mov	r0, r5
 800de08:	f000 fafe 	bl	800e408 <_sbrk_r>
 800de0c:	3001      	adds	r0, #1
 800de0e:	d101      	bne.n	800de14 <sbrk_aligned+0x38>
 800de10:	f04f 34ff 	mov.w	r4, #4294967295
 800de14:	4620      	mov	r0, r4
 800de16:	bd70      	pop	{r4, r5, r6, pc}
 800de18:	200412dc 	.word	0x200412dc

0800de1c <_malloc_r>:
 800de1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de20:	1ccd      	adds	r5, r1, #3
 800de22:	4607      	mov	r7, r0
 800de24:	f025 0503 	bic.w	r5, r5, #3
 800de28:	3508      	adds	r5, #8
 800de2a:	2d0c      	cmp	r5, #12
 800de2c:	bf38      	it	cc
 800de2e:	250c      	movcc	r5, #12
 800de30:	2d00      	cmp	r5, #0
 800de32:	db01      	blt.n	800de38 <_malloc_r+0x1c>
 800de34:	42a9      	cmp	r1, r5
 800de36:	d905      	bls.n	800de44 <_malloc_r+0x28>
 800de38:	230c      	movs	r3, #12
 800de3a:	2600      	movs	r6, #0
 800de3c:	603b      	str	r3, [r7, #0]
 800de3e:	4630      	mov	r0, r6
 800de40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800df18 <_malloc_r+0xfc>
 800de48:	f000 f868 	bl	800df1c <__malloc_lock>
 800de4c:	f8d8 3000 	ldr.w	r3, [r8]
 800de50:	461c      	mov	r4, r3
 800de52:	bb5c      	cbnz	r4, 800deac <_malloc_r+0x90>
 800de54:	4629      	mov	r1, r5
 800de56:	4638      	mov	r0, r7
 800de58:	f7ff ffc0 	bl	800dddc <sbrk_aligned>
 800de5c:	1c43      	adds	r3, r0, #1
 800de5e:	4604      	mov	r4, r0
 800de60:	d155      	bne.n	800df0e <_malloc_r+0xf2>
 800de62:	f8d8 4000 	ldr.w	r4, [r8]
 800de66:	4626      	mov	r6, r4
 800de68:	2e00      	cmp	r6, #0
 800de6a:	d145      	bne.n	800def8 <_malloc_r+0xdc>
 800de6c:	2c00      	cmp	r4, #0
 800de6e:	d048      	beq.n	800df02 <_malloc_r+0xe6>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	4631      	mov	r1, r6
 800de74:	4638      	mov	r0, r7
 800de76:	eb04 0903 	add.w	r9, r4, r3
 800de7a:	f000 fac5 	bl	800e408 <_sbrk_r>
 800de7e:	4581      	cmp	r9, r0
 800de80:	d13f      	bne.n	800df02 <_malloc_r+0xe6>
 800de82:	6821      	ldr	r1, [r4, #0]
 800de84:	4638      	mov	r0, r7
 800de86:	1a6d      	subs	r5, r5, r1
 800de88:	4629      	mov	r1, r5
 800de8a:	f7ff ffa7 	bl	800dddc <sbrk_aligned>
 800de8e:	3001      	adds	r0, #1
 800de90:	d037      	beq.n	800df02 <_malloc_r+0xe6>
 800de92:	6823      	ldr	r3, [r4, #0]
 800de94:	442b      	add	r3, r5
 800de96:	6023      	str	r3, [r4, #0]
 800de98:	f8d8 3000 	ldr.w	r3, [r8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d038      	beq.n	800df12 <_malloc_r+0xf6>
 800dea0:	685a      	ldr	r2, [r3, #4]
 800dea2:	42a2      	cmp	r2, r4
 800dea4:	d12b      	bne.n	800defe <_malloc_r+0xe2>
 800dea6:	2200      	movs	r2, #0
 800dea8:	605a      	str	r2, [r3, #4]
 800deaa:	e00f      	b.n	800decc <_malloc_r+0xb0>
 800deac:	6822      	ldr	r2, [r4, #0]
 800deae:	1b52      	subs	r2, r2, r5
 800deb0:	d41f      	bmi.n	800def2 <_malloc_r+0xd6>
 800deb2:	2a0b      	cmp	r2, #11
 800deb4:	d917      	bls.n	800dee6 <_malloc_r+0xca>
 800deb6:	1961      	adds	r1, r4, r5
 800deb8:	42a3      	cmp	r3, r4
 800deba:	6025      	str	r5, [r4, #0]
 800debc:	bf18      	it	ne
 800debe:	6059      	strne	r1, [r3, #4]
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	bf08      	it	eq
 800dec4:	f8c8 1000 	streq.w	r1, [r8]
 800dec8:	5162      	str	r2, [r4, r5]
 800deca:	604b      	str	r3, [r1, #4]
 800decc:	f104 060b 	add.w	r6, r4, #11
 800ded0:	4638      	mov	r0, r7
 800ded2:	f000 f829 	bl	800df28 <__malloc_unlock>
 800ded6:	1d23      	adds	r3, r4, #4
 800ded8:	f026 0607 	bic.w	r6, r6, #7
 800dedc:	1af2      	subs	r2, r6, r3
 800dede:	d0ae      	beq.n	800de3e <_malloc_r+0x22>
 800dee0:	1b9b      	subs	r3, r3, r6
 800dee2:	50a3      	str	r3, [r4, r2]
 800dee4:	e7ab      	b.n	800de3e <_malloc_r+0x22>
 800dee6:	42a3      	cmp	r3, r4
 800dee8:	6862      	ldr	r2, [r4, #4]
 800deea:	d1dd      	bne.n	800dea8 <_malloc_r+0x8c>
 800deec:	f8c8 2000 	str.w	r2, [r8]
 800def0:	e7ec      	b.n	800decc <_malloc_r+0xb0>
 800def2:	4623      	mov	r3, r4
 800def4:	6864      	ldr	r4, [r4, #4]
 800def6:	e7ac      	b.n	800de52 <_malloc_r+0x36>
 800def8:	4634      	mov	r4, r6
 800defa:	6876      	ldr	r6, [r6, #4]
 800defc:	e7b4      	b.n	800de68 <_malloc_r+0x4c>
 800defe:	4613      	mov	r3, r2
 800df00:	e7cc      	b.n	800de9c <_malloc_r+0x80>
 800df02:	230c      	movs	r3, #12
 800df04:	4638      	mov	r0, r7
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	f000 f80e 	bl	800df28 <__malloc_unlock>
 800df0c:	e797      	b.n	800de3e <_malloc_r+0x22>
 800df0e:	6025      	str	r5, [r4, #0]
 800df10:	e7dc      	b.n	800decc <_malloc_r+0xb0>
 800df12:	605b      	str	r3, [r3, #4]
 800df14:	deff      	udf	#255	; 0xff
 800df16:	bf00      	nop
 800df18:	200412d8 	.word	0x200412d8

0800df1c <__malloc_lock>:
 800df1c:	4801      	ldr	r0, [pc, #4]	; (800df24 <__malloc_lock+0x8>)
 800df1e:	f000 bac0 	b.w	800e4a2 <__retarget_lock_acquire_recursive>
 800df22:	bf00      	nop
 800df24:	20041420 	.word	0x20041420

0800df28 <__malloc_unlock>:
 800df28:	4801      	ldr	r0, [pc, #4]	; (800df30 <__malloc_unlock+0x8>)
 800df2a:	f000 babb 	b.w	800e4a4 <__retarget_lock_release_recursive>
 800df2e:	bf00      	nop
 800df30:	20041420 	.word	0x20041420

0800df34 <std>:
 800df34:	2300      	movs	r3, #0
 800df36:	b510      	push	{r4, lr}
 800df38:	4604      	mov	r4, r0
 800df3a:	6083      	str	r3, [r0, #8]
 800df3c:	8181      	strh	r1, [r0, #12]
 800df3e:	4619      	mov	r1, r3
 800df40:	6643      	str	r3, [r0, #100]	; 0x64
 800df42:	81c2      	strh	r2, [r0, #14]
 800df44:	2208      	movs	r2, #8
 800df46:	6183      	str	r3, [r0, #24]
 800df48:	e9c0 3300 	strd	r3, r3, [r0]
 800df4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df50:	305c      	adds	r0, #92	; 0x5c
 800df52:	f000 fa0f 	bl	800e374 <memset>
 800df56:	4b0d      	ldr	r3, [pc, #52]	; (800df8c <std+0x58>)
 800df58:	6224      	str	r4, [r4, #32]
 800df5a:	6263      	str	r3, [r4, #36]	; 0x24
 800df5c:	4b0c      	ldr	r3, [pc, #48]	; (800df90 <std+0x5c>)
 800df5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800df60:	4b0c      	ldr	r3, [pc, #48]	; (800df94 <std+0x60>)
 800df62:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df64:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <std+0x64>)
 800df66:	6323      	str	r3, [r4, #48]	; 0x30
 800df68:	4b0c      	ldr	r3, [pc, #48]	; (800df9c <std+0x68>)
 800df6a:	429c      	cmp	r4, r3
 800df6c:	d006      	beq.n	800df7c <std+0x48>
 800df6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800df72:	4294      	cmp	r4, r2
 800df74:	d002      	beq.n	800df7c <std+0x48>
 800df76:	33d0      	adds	r3, #208	; 0xd0
 800df78:	429c      	cmp	r4, r3
 800df7a:	d105      	bne.n	800df88 <std+0x54>
 800df7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df84:	f000 ba8c 	b.w	800e4a0 <__retarget_lock_init_recursive>
 800df88:	bd10      	pop	{r4, pc}
 800df8a:	bf00      	nop
 800df8c:	0800e1a5 	.word	0x0800e1a5
 800df90:	0800e1c7 	.word	0x0800e1c7
 800df94:	0800e1ff 	.word	0x0800e1ff
 800df98:	0800e223 	.word	0x0800e223
 800df9c:	200412e0 	.word	0x200412e0

0800dfa0 <stdio_exit_handler>:
 800dfa0:	4a02      	ldr	r2, [pc, #8]	; (800dfac <stdio_exit_handler+0xc>)
 800dfa2:	4903      	ldr	r1, [pc, #12]	; (800dfb0 <stdio_exit_handler+0x10>)
 800dfa4:	4803      	ldr	r0, [pc, #12]	; (800dfb4 <stdio_exit_handler+0x14>)
 800dfa6:	f000 b869 	b.w	800e07c <_fwalk_sglue>
 800dfaa:	bf00      	nop
 800dfac:	20000018 	.word	0x20000018
 800dfb0:	0800ec0d 	.word	0x0800ec0d
 800dfb4:	20000024 	.word	0x20000024

0800dfb8 <cleanup_stdio>:
 800dfb8:	6841      	ldr	r1, [r0, #4]
 800dfba:	4b0c      	ldr	r3, [pc, #48]	; (800dfec <cleanup_stdio+0x34>)
 800dfbc:	4299      	cmp	r1, r3
 800dfbe:	b510      	push	{r4, lr}
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	d001      	beq.n	800dfc8 <cleanup_stdio+0x10>
 800dfc4:	f000 fe22 	bl	800ec0c <_fflush_r>
 800dfc8:	68a1      	ldr	r1, [r4, #8]
 800dfca:	4b09      	ldr	r3, [pc, #36]	; (800dff0 <cleanup_stdio+0x38>)
 800dfcc:	4299      	cmp	r1, r3
 800dfce:	d002      	beq.n	800dfd6 <cleanup_stdio+0x1e>
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 fe1b 	bl	800ec0c <_fflush_r>
 800dfd6:	68e1      	ldr	r1, [r4, #12]
 800dfd8:	4b06      	ldr	r3, [pc, #24]	; (800dff4 <cleanup_stdio+0x3c>)
 800dfda:	4299      	cmp	r1, r3
 800dfdc:	d004      	beq.n	800dfe8 <cleanup_stdio+0x30>
 800dfde:	4620      	mov	r0, r4
 800dfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe4:	f000 be12 	b.w	800ec0c <_fflush_r>
 800dfe8:	bd10      	pop	{r4, pc}
 800dfea:	bf00      	nop
 800dfec:	200412e0 	.word	0x200412e0
 800dff0:	20041348 	.word	0x20041348
 800dff4:	200413b0 	.word	0x200413b0

0800dff8 <global_stdio_init.part.0>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	4b0b      	ldr	r3, [pc, #44]	; (800e028 <global_stdio_init.part.0+0x30>)
 800dffc:	2104      	movs	r1, #4
 800dffe:	4c0b      	ldr	r4, [pc, #44]	; (800e02c <global_stdio_init.part.0+0x34>)
 800e000:	4a0b      	ldr	r2, [pc, #44]	; (800e030 <global_stdio_init.part.0+0x38>)
 800e002:	4620      	mov	r0, r4
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	2200      	movs	r2, #0
 800e008:	f7ff ff94 	bl	800df34 <std>
 800e00c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e010:	2201      	movs	r2, #1
 800e012:	2109      	movs	r1, #9
 800e014:	f7ff ff8e 	bl	800df34 <std>
 800e018:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e01c:	2202      	movs	r2, #2
 800e01e:	2112      	movs	r1, #18
 800e020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e024:	f7ff bf86 	b.w	800df34 <std>
 800e028:	20041418 	.word	0x20041418
 800e02c:	200412e0 	.word	0x200412e0
 800e030:	0800dfa1 	.word	0x0800dfa1

0800e034 <__sfp_lock_acquire>:
 800e034:	4801      	ldr	r0, [pc, #4]	; (800e03c <__sfp_lock_acquire+0x8>)
 800e036:	f000 ba34 	b.w	800e4a2 <__retarget_lock_acquire_recursive>
 800e03a:	bf00      	nop
 800e03c:	20041421 	.word	0x20041421

0800e040 <__sfp_lock_release>:
 800e040:	4801      	ldr	r0, [pc, #4]	; (800e048 <__sfp_lock_release+0x8>)
 800e042:	f000 ba2f 	b.w	800e4a4 <__retarget_lock_release_recursive>
 800e046:	bf00      	nop
 800e048:	20041421 	.word	0x20041421

0800e04c <__sinit>:
 800e04c:	b510      	push	{r4, lr}
 800e04e:	4604      	mov	r4, r0
 800e050:	f7ff fff0 	bl	800e034 <__sfp_lock_acquire>
 800e054:	6a23      	ldr	r3, [r4, #32]
 800e056:	b11b      	cbz	r3, 800e060 <__sinit+0x14>
 800e058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e05c:	f7ff bff0 	b.w	800e040 <__sfp_lock_release>
 800e060:	4b04      	ldr	r3, [pc, #16]	; (800e074 <__sinit+0x28>)
 800e062:	6223      	str	r3, [r4, #32]
 800e064:	4b04      	ldr	r3, [pc, #16]	; (800e078 <__sinit+0x2c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1f5      	bne.n	800e058 <__sinit+0xc>
 800e06c:	f7ff ffc4 	bl	800dff8 <global_stdio_init.part.0>
 800e070:	e7f2      	b.n	800e058 <__sinit+0xc>
 800e072:	bf00      	nop
 800e074:	0800dfb9 	.word	0x0800dfb9
 800e078:	20041418 	.word	0x20041418

0800e07c <_fwalk_sglue>:
 800e07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e080:	4607      	mov	r7, r0
 800e082:	4688      	mov	r8, r1
 800e084:	4614      	mov	r4, r2
 800e086:	2600      	movs	r6, #0
 800e088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e08c:	f1b9 0901 	subs.w	r9, r9, #1
 800e090:	d505      	bpl.n	800e09e <_fwalk_sglue+0x22>
 800e092:	6824      	ldr	r4, [r4, #0]
 800e094:	2c00      	cmp	r4, #0
 800e096:	d1f7      	bne.n	800e088 <_fwalk_sglue+0xc>
 800e098:	4630      	mov	r0, r6
 800e09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e09e:	89ab      	ldrh	r3, [r5, #12]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d907      	bls.n	800e0b4 <_fwalk_sglue+0x38>
 800e0a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	d003      	beq.n	800e0b4 <_fwalk_sglue+0x38>
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	47c0      	blx	r8
 800e0b2:	4306      	orrs	r6, r0
 800e0b4:	3568      	adds	r5, #104	; 0x68
 800e0b6:	e7e9      	b.n	800e08c <_fwalk_sglue+0x10>

0800e0b8 <iprintf>:
 800e0b8:	b40f      	push	{r0, r1, r2, r3}
 800e0ba:	b507      	push	{r0, r1, r2, lr}
 800e0bc:	4906      	ldr	r1, [pc, #24]	; (800e0d8 <iprintf+0x20>)
 800e0be:	ab04      	add	r3, sp, #16
 800e0c0:	6808      	ldr	r0, [r1, #0]
 800e0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0c6:	6881      	ldr	r1, [r0, #8]
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	f000 fa6f 	bl	800e5ac <_vfiprintf_r>
 800e0ce:	b003      	add	sp, #12
 800e0d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0d4:	b004      	add	sp, #16
 800e0d6:	4770      	bx	lr
 800e0d8:	20000070 	.word	0x20000070

0800e0dc <putchar>:
 800e0dc:	4b02      	ldr	r3, [pc, #8]	; (800e0e8 <putchar+0xc>)
 800e0de:	4601      	mov	r1, r0
 800e0e0:	6818      	ldr	r0, [r3, #0]
 800e0e2:	6882      	ldr	r2, [r0, #8]
 800e0e4:	f000 be1b 	b.w	800ed1e <_putc_r>
 800e0e8:	20000070 	.word	0x20000070

0800e0ec <_puts_r>:
 800e0ec:	6a03      	ldr	r3, [r0, #32]
 800e0ee:	b570      	push	{r4, r5, r6, lr}
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	460e      	mov	r6, r1
 800e0f4:	6884      	ldr	r4, [r0, #8]
 800e0f6:	b90b      	cbnz	r3, 800e0fc <_puts_r+0x10>
 800e0f8:	f7ff ffa8 	bl	800e04c <__sinit>
 800e0fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0fe:	07db      	lsls	r3, r3, #31
 800e100:	d405      	bmi.n	800e10e <_puts_r+0x22>
 800e102:	89a3      	ldrh	r3, [r4, #12]
 800e104:	0598      	lsls	r0, r3, #22
 800e106:	d402      	bmi.n	800e10e <_puts_r+0x22>
 800e108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e10a:	f000 f9ca 	bl	800e4a2 <__retarget_lock_acquire_recursive>
 800e10e:	89a3      	ldrh	r3, [r4, #12]
 800e110:	0719      	lsls	r1, r3, #28
 800e112:	d513      	bpl.n	800e13c <_puts_r+0x50>
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	b18b      	cbz	r3, 800e13c <_puts_r+0x50>
 800e118:	3e01      	subs	r6, #1
 800e11a:	68a3      	ldr	r3, [r4, #8]
 800e11c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e120:	3b01      	subs	r3, #1
 800e122:	60a3      	str	r3, [r4, #8]
 800e124:	b9e9      	cbnz	r1, 800e162 <_puts_r+0x76>
 800e126:	2b00      	cmp	r3, #0
 800e128:	da2e      	bge.n	800e188 <_puts_r+0x9c>
 800e12a:	4622      	mov	r2, r4
 800e12c:	210a      	movs	r1, #10
 800e12e:	4628      	mov	r0, r5
 800e130:	f000 f87b 	bl	800e22a <__swbuf_r>
 800e134:	3001      	adds	r0, #1
 800e136:	d007      	beq.n	800e148 <_puts_r+0x5c>
 800e138:	250a      	movs	r5, #10
 800e13a:	e007      	b.n	800e14c <_puts_r+0x60>
 800e13c:	4621      	mov	r1, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	f000 f8b0 	bl	800e2a4 <__swsetup_r>
 800e144:	2800      	cmp	r0, #0
 800e146:	d0e7      	beq.n	800e118 <_puts_r+0x2c>
 800e148:	f04f 35ff 	mov.w	r5, #4294967295
 800e14c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e14e:	07da      	lsls	r2, r3, #31
 800e150:	d405      	bmi.n	800e15e <_puts_r+0x72>
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	059b      	lsls	r3, r3, #22
 800e156:	d402      	bmi.n	800e15e <_puts_r+0x72>
 800e158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e15a:	f000 f9a3 	bl	800e4a4 <__retarget_lock_release_recursive>
 800e15e:	4628      	mov	r0, r5
 800e160:	bd70      	pop	{r4, r5, r6, pc}
 800e162:	2b00      	cmp	r3, #0
 800e164:	da04      	bge.n	800e170 <_puts_r+0x84>
 800e166:	69a2      	ldr	r2, [r4, #24]
 800e168:	429a      	cmp	r2, r3
 800e16a:	dc06      	bgt.n	800e17a <_puts_r+0x8e>
 800e16c:	290a      	cmp	r1, #10
 800e16e:	d004      	beq.n	800e17a <_puts_r+0x8e>
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	6022      	str	r2, [r4, #0]
 800e176:	7019      	strb	r1, [r3, #0]
 800e178:	e7cf      	b.n	800e11a <_puts_r+0x2e>
 800e17a:	4622      	mov	r2, r4
 800e17c:	4628      	mov	r0, r5
 800e17e:	f000 f854 	bl	800e22a <__swbuf_r>
 800e182:	3001      	adds	r0, #1
 800e184:	d1c9      	bne.n	800e11a <_puts_r+0x2e>
 800e186:	e7df      	b.n	800e148 <_puts_r+0x5c>
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	250a      	movs	r5, #10
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	6022      	str	r2, [r4, #0]
 800e190:	701d      	strb	r5, [r3, #0]
 800e192:	e7db      	b.n	800e14c <_puts_r+0x60>

0800e194 <puts>:
 800e194:	4b02      	ldr	r3, [pc, #8]	; (800e1a0 <puts+0xc>)
 800e196:	4601      	mov	r1, r0
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	f7ff bfa7 	b.w	800e0ec <_puts_r>
 800e19e:	bf00      	nop
 800e1a0:	20000070 	.word	0x20000070

0800e1a4 <__sread>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	460c      	mov	r4, r1
 800e1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ac:	f000 f91a 	bl	800e3e4 <_read_r>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	bfab      	itete	ge
 800e1b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e1b8:	181b      	addge	r3, r3, r0
 800e1ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1be:	bfac      	ite	ge
 800e1c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1c2:	81a3      	strhlt	r3, [r4, #12]
 800e1c4:	bd10      	pop	{r4, pc}

0800e1c6 <__swrite>:
 800e1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ca:	461f      	mov	r7, r3
 800e1cc:	898b      	ldrh	r3, [r1, #12]
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	05db      	lsls	r3, r3, #23
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	d505      	bpl.n	800e1e4 <__swrite+0x1e>
 800e1d8:	2302      	movs	r3, #2
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e0:	f000 f8ee 	bl	800e3c0 <_lseek_r>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	4632      	mov	r2, r6
 800e1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1f2:	81a3      	strh	r3, [r4, #12]
 800e1f4:	463b      	mov	r3, r7
 800e1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1fa:	f000 b915 	b.w	800e428 <_write_r>

0800e1fe <__sseek>:
 800e1fe:	b510      	push	{r4, lr}
 800e200:	460c      	mov	r4, r1
 800e202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e206:	f000 f8db 	bl	800e3c0 <_lseek_r>
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	89a3      	ldrh	r3, [r4, #12]
 800e20e:	bf15      	itete	ne
 800e210:	6560      	strne	r0, [r4, #84]	; 0x54
 800e212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e21a:	81a3      	strheq	r3, [r4, #12]
 800e21c:	bf18      	it	ne
 800e21e:	81a3      	strhne	r3, [r4, #12]
 800e220:	bd10      	pop	{r4, pc}

0800e222 <__sclose>:
 800e222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e226:	f000 b8bb 	b.w	800e3a0 <_close_r>

0800e22a <__swbuf_r>:
 800e22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22c:	460e      	mov	r6, r1
 800e22e:	4614      	mov	r4, r2
 800e230:	4605      	mov	r5, r0
 800e232:	b118      	cbz	r0, 800e23c <__swbuf_r+0x12>
 800e234:	6a03      	ldr	r3, [r0, #32]
 800e236:	b90b      	cbnz	r3, 800e23c <__swbuf_r+0x12>
 800e238:	f7ff ff08 	bl	800e04c <__sinit>
 800e23c:	69a3      	ldr	r3, [r4, #24]
 800e23e:	60a3      	str	r3, [r4, #8]
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	071a      	lsls	r2, r3, #28
 800e244:	d525      	bpl.n	800e292 <__swbuf_r+0x68>
 800e246:	6923      	ldr	r3, [r4, #16]
 800e248:	b31b      	cbz	r3, 800e292 <__swbuf_r+0x68>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	b2f6      	uxtb	r6, r6
 800e24e:	6922      	ldr	r2, [r4, #16]
 800e250:	4637      	mov	r7, r6
 800e252:	1a98      	subs	r0, r3, r2
 800e254:	6963      	ldr	r3, [r4, #20]
 800e256:	4283      	cmp	r3, r0
 800e258:	dc04      	bgt.n	800e264 <__swbuf_r+0x3a>
 800e25a:	4621      	mov	r1, r4
 800e25c:	4628      	mov	r0, r5
 800e25e:	f000 fcd5 	bl	800ec0c <_fflush_r>
 800e262:	b9e0      	cbnz	r0, 800e29e <__swbuf_r+0x74>
 800e264:	68a3      	ldr	r3, [r4, #8]
 800e266:	3b01      	subs	r3, #1
 800e268:	60a3      	str	r3, [r4, #8]
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	1c5a      	adds	r2, r3, #1
 800e26e:	6022      	str	r2, [r4, #0]
 800e270:	701e      	strb	r6, [r3, #0]
 800e272:	1c43      	adds	r3, r0, #1
 800e274:	6962      	ldr	r2, [r4, #20]
 800e276:	429a      	cmp	r2, r3
 800e278:	d004      	beq.n	800e284 <__swbuf_r+0x5a>
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	07db      	lsls	r3, r3, #31
 800e27e:	d506      	bpl.n	800e28e <__swbuf_r+0x64>
 800e280:	2e0a      	cmp	r6, #10
 800e282:	d104      	bne.n	800e28e <__swbuf_r+0x64>
 800e284:	4621      	mov	r1, r4
 800e286:	4628      	mov	r0, r5
 800e288:	f000 fcc0 	bl	800ec0c <_fflush_r>
 800e28c:	b938      	cbnz	r0, 800e29e <__swbuf_r+0x74>
 800e28e:	4638      	mov	r0, r7
 800e290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e292:	4621      	mov	r1, r4
 800e294:	4628      	mov	r0, r5
 800e296:	f000 f805 	bl	800e2a4 <__swsetup_r>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d0d5      	beq.n	800e24a <__swbuf_r+0x20>
 800e29e:	f04f 37ff 	mov.w	r7, #4294967295
 800e2a2:	e7f4      	b.n	800e28e <__swbuf_r+0x64>

0800e2a4 <__swsetup_r>:
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	4b2a      	ldr	r3, [pc, #168]	; (800e350 <__swsetup_r+0xac>)
 800e2a8:	4605      	mov	r5, r0
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	6818      	ldr	r0, [r3, #0]
 800e2ae:	b118      	cbz	r0, 800e2b8 <__swsetup_r+0x14>
 800e2b0:	6a03      	ldr	r3, [r0, #32]
 800e2b2:	b90b      	cbnz	r3, 800e2b8 <__swsetup_r+0x14>
 800e2b4:	f7ff feca 	bl	800e04c <__sinit>
 800e2b8:	89a3      	ldrh	r3, [r4, #12]
 800e2ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2be:	0718      	lsls	r0, r3, #28
 800e2c0:	d422      	bmi.n	800e308 <__swsetup_r+0x64>
 800e2c2:	06d9      	lsls	r1, r3, #27
 800e2c4:	d407      	bmi.n	800e2d6 <__swsetup_r+0x32>
 800e2c6:	2309      	movs	r3, #9
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d2:	81a3      	strh	r3, [r4, #12]
 800e2d4:	e034      	b.n	800e340 <__swsetup_r+0x9c>
 800e2d6:	0758      	lsls	r0, r3, #29
 800e2d8:	d512      	bpl.n	800e300 <__swsetup_r+0x5c>
 800e2da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2dc:	b141      	cbz	r1, 800e2f0 <__swsetup_r+0x4c>
 800e2de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2e2:	4299      	cmp	r1, r3
 800e2e4:	d002      	beq.n	800e2ec <__swsetup_r+0x48>
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f000 f8ea 	bl	800e4c0 <_free_r>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	6363      	str	r3, [r4, #52]	; 0x34
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2f6:	81a3      	strh	r3, [r4, #12]
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	6063      	str	r3, [r4, #4]
 800e2fc:	6923      	ldr	r3, [r4, #16]
 800e2fe:	6023      	str	r3, [r4, #0]
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	f043 0308 	orr.w	r3, r3, #8
 800e306:	81a3      	strh	r3, [r4, #12]
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	b94b      	cbnz	r3, 800e320 <__swsetup_r+0x7c>
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e316:	d003      	beq.n	800e320 <__swsetup_r+0x7c>
 800e318:	4621      	mov	r1, r4
 800e31a:	4628      	mov	r0, r5
 800e31c:	f000 fcc3 	bl	800eca6 <__smakebuf_r>
 800e320:	89a0      	ldrh	r0, [r4, #12]
 800e322:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e326:	f010 0301 	ands.w	r3, r0, #1
 800e32a:	d00a      	beq.n	800e342 <__swsetup_r+0x9e>
 800e32c:	2300      	movs	r3, #0
 800e32e:	60a3      	str	r3, [r4, #8]
 800e330:	6963      	ldr	r3, [r4, #20]
 800e332:	425b      	negs	r3, r3
 800e334:	61a3      	str	r3, [r4, #24]
 800e336:	6923      	ldr	r3, [r4, #16]
 800e338:	b943      	cbnz	r3, 800e34c <__swsetup_r+0xa8>
 800e33a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e33e:	d1c4      	bne.n	800e2ca <__swsetup_r+0x26>
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	0781      	lsls	r1, r0, #30
 800e344:	bf58      	it	pl
 800e346:	6963      	ldrpl	r3, [r4, #20]
 800e348:	60a3      	str	r3, [r4, #8]
 800e34a:	e7f4      	b.n	800e336 <__swsetup_r+0x92>
 800e34c:	2000      	movs	r0, #0
 800e34e:	e7f7      	b.n	800e340 <__swsetup_r+0x9c>
 800e350:	20000070 	.word	0x20000070

0800e354 <memcmp>:
 800e354:	3901      	subs	r1, #1
 800e356:	4402      	add	r2, r0
 800e358:	b510      	push	{r4, lr}
 800e35a:	4290      	cmp	r0, r2
 800e35c:	d101      	bne.n	800e362 <memcmp+0xe>
 800e35e:	2000      	movs	r0, #0
 800e360:	e005      	b.n	800e36e <memcmp+0x1a>
 800e362:	7803      	ldrb	r3, [r0, #0]
 800e364:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e368:	42a3      	cmp	r3, r4
 800e36a:	d001      	beq.n	800e370 <memcmp+0x1c>
 800e36c:	1b18      	subs	r0, r3, r4
 800e36e:	bd10      	pop	{r4, pc}
 800e370:	3001      	adds	r0, #1
 800e372:	e7f2      	b.n	800e35a <memcmp+0x6>

0800e374 <memset>:
 800e374:	4402      	add	r2, r0
 800e376:	4603      	mov	r3, r0
 800e378:	4293      	cmp	r3, r2
 800e37a:	d100      	bne.n	800e37e <memset+0xa>
 800e37c:	4770      	bx	lr
 800e37e:	f803 1b01 	strb.w	r1, [r3], #1
 800e382:	e7f9      	b.n	800e378 <memset+0x4>

0800e384 <strchr>:
 800e384:	b2c9      	uxtb	r1, r1
 800e386:	4603      	mov	r3, r0
 800e388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e38c:	b11a      	cbz	r2, 800e396 <strchr+0x12>
 800e38e:	428a      	cmp	r2, r1
 800e390:	d1f9      	bne.n	800e386 <strchr+0x2>
 800e392:	4618      	mov	r0, r3
 800e394:	4770      	bx	lr
 800e396:	2900      	cmp	r1, #0
 800e398:	bf18      	it	ne
 800e39a:	2300      	movne	r3, #0
 800e39c:	e7f9      	b.n	800e392 <strchr+0xe>
	...

0800e3a0 <_close_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	4d05      	ldr	r5, [pc, #20]	; (800e3bc <_close_r+0x1c>)
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	602b      	str	r3, [r5, #0]
 800e3ac:	f7f3 fd25 	bl	8001dfa <_close>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d102      	bne.n	800e3ba <_close_r+0x1a>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	b103      	cbz	r3, 800e3ba <_close_r+0x1a>
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	2004141c 	.word	0x2004141c

0800e3c0 <_lseek_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	4d06      	ldr	r5, [pc, #24]	; (800e3e0 <_lseek_r+0x20>)
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	602a      	str	r2, [r5, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	f7f3 fd3a 	bl	8001e48 <_lseek>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d102      	bne.n	800e3de <_lseek_r+0x1e>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	b103      	cbz	r3, 800e3de <_lseek_r+0x1e>
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	bd38      	pop	{r3, r4, r5, pc}
 800e3e0:	2004141c 	.word	0x2004141c

0800e3e4 <_read_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	4d06      	ldr	r5, [pc, #24]	; (800e404 <_read_r+0x20>)
 800e3ea:	4608      	mov	r0, r1
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	602a      	str	r2, [r5, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f7f3 fcc8 	bl	8001d88 <_read>
 800e3f8:	1c43      	adds	r3, r0, #1
 800e3fa:	d102      	bne.n	800e402 <_read_r+0x1e>
 800e3fc:	682b      	ldr	r3, [r5, #0]
 800e3fe:	b103      	cbz	r3, 800e402 <_read_r+0x1e>
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	bd38      	pop	{r3, r4, r5, pc}
 800e404:	2004141c 	.word	0x2004141c

0800e408 <_sbrk_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	2300      	movs	r3, #0
 800e40c:	4d05      	ldr	r5, [pc, #20]	; (800e424 <_sbrk_r+0x1c>)
 800e40e:	4604      	mov	r4, r0
 800e410:	4608      	mov	r0, r1
 800e412:	602b      	str	r3, [r5, #0]
 800e414:	f7f3 fd26 	bl	8001e64 <_sbrk>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	d102      	bne.n	800e422 <_sbrk_r+0x1a>
 800e41c:	682b      	ldr	r3, [r5, #0]
 800e41e:	b103      	cbz	r3, 800e422 <_sbrk_r+0x1a>
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	bd38      	pop	{r3, r4, r5, pc}
 800e424:	2004141c 	.word	0x2004141c

0800e428 <_write_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4604      	mov	r4, r0
 800e42c:	4d06      	ldr	r5, [pc, #24]	; (800e448 <_write_r+0x20>)
 800e42e:	4608      	mov	r0, r1
 800e430:	4611      	mov	r1, r2
 800e432:	2200      	movs	r2, #0
 800e434:	602a      	str	r2, [r5, #0]
 800e436:	461a      	mov	r2, r3
 800e438:	f7f3 fcc3 	bl	8001dc2 <_write>
 800e43c:	1c43      	adds	r3, r0, #1
 800e43e:	d102      	bne.n	800e446 <_write_r+0x1e>
 800e440:	682b      	ldr	r3, [r5, #0]
 800e442:	b103      	cbz	r3, 800e446 <_write_r+0x1e>
 800e444:	6023      	str	r3, [r4, #0]
 800e446:	bd38      	pop	{r3, r4, r5, pc}
 800e448:	2004141c 	.word	0x2004141c

0800e44c <__errno>:
 800e44c:	4b01      	ldr	r3, [pc, #4]	; (800e454 <__errno+0x8>)
 800e44e:	6818      	ldr	r0, [r3, #0]
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	20000070 	.word	0x20000070

0800e458 <__libc_init_array>:
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	4d0d      	ldr	r5, [pc, #52]	; (800e490 <__libc_init_array+0x38>)
 800e45c:	2600      	movs	r6, #0
 800e45e:	4c0d      	ldr	r4, [pc, #52]	; (800e494 <__libc_init_array+0x3c>)
 800e460:	1b64      	subs	r4, r4, r5
 800e462:	10a4      	asrs	r4, r4, #2
 800e464:	42a6      	cmp	r6, r4
 800e466:	d109      	bne.n	800e47c <__libc_init_array+0x24>
 800e468:	4d0b      	ldr	r5, [pc, #44]	; (800e498 <__libc_init_array+0x40>)
 800e46a:	2600      	movs	r6, #0
 800e46c:	4c0b      	ldr	r4, [pc, #44]	; (800e49c <__libc_init_array+0x44>)
 800e46e:	f000 fcbb 	bl	800ede8 <_init>
 800e472:	1b64      	subs	r4, r4, r5
 800e474:	10a4      	asrs	r4, r4, #2
 800e476:	42a6      	cmp	r6, r4
 800e478:	d105      	bne.n	800e486 <__libc_init_array+0x2e>
 800e47a:	bd70      	pop	{r4, r5, r6, pc}
 800e47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e480:	3601      	adds	r6, #1
 800e482:	4798      	blx	r3
 800e484:	e7ee      	b.n	800e464 <__libc_init_array+0xc>
 800e486:	f855 3b04 	ldr.w	r3, [r5], #4
 800e48a:	3601      	adds	r6, #1
 800e48c:	4798      	blx	r3
 800e48e:	e7f2      	b.n	800e476 <__libc_init_array+0x1e>
 800e490:	0800f114 	.word	0x0800f114
 800e494:	0800f114 	.word	0x0800f114
 800e498:	0800f114 	.word	0x0800f114
 800e49c:	0800f118 	.word	0x0800f118

0800e4a0 <__retarget_lock_init_recursive>:
 800e4a0:	4770      	bx	lr

0800e4a2 <__retarget_lock_acquire_recursive>:
 800e4a2:	4770      	bx	lr

0800e4a4 <__retarget_lock_release_recursive>:
 800e4a4:	4770      	bx	lr

0800e4a6 <memcpy>:
 800e4a6:	440a      	add	r2, r1
 800e4a8:	1e43      	subs	r3, r0, #1
 800e4aa:	4291      	cmp	r1, r2
 800e4ac:	d100      	bne.n	800e4b0 <memcpy+0xa>
 800e4ae:	4770      	bx	lr
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4b6:	4291      	cmp	r1, r2
 800e4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4bc:	d1f9      	bne.n	800e4b2 <memcpy+0xc>
 800e4be:	bd10      	pop	{r4, pc}

0800e4c0 <_free_r>:
 800e4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4c2:	2900      	cmp	r1, #0
 800e4c4:	d043      	beq.n	800e54e <_free_r+0x8e>
 800e4c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4ca:	1f0c      	subs	r4, r1, #4
 800e4cc:	9001      	str	r0, [sp, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bfb8      	it	lt
 800e4d2:	18e4      	addlt	r4, r4, r3
 800e4d4:	f7ff fd22 	bl	800df1c <__malloc_lock>
 800e4d8:	4a1e      	ldr	r2, [pc, #120]	; (800e554 <_free_r+0x94>)
 800e4da:	9801      	ldr	r0, [sp, #4]
 800e4dc:	6813      	ldr	r3, [r2, #0]
 800e4de:	b933      	cbnz	r3, 800e4ee <_free_r+0x2e>
 800e4e0:	6063      	str	r3, [r4, #4]
 800e4e2:	6014      	str	r4, [r2, #0]
 800e4e4:	b003      	add	sp, #12
 800e4e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4ea:	f7ff bd1d 	b.w	800df28 <__malloc_unlock>
 800e4ee:	42a3      	cmp	r3, r4
 800e4f0:	d908      	bls.n	800e504 <_free_r+0x44>
 800e4f2:	6825      	ldr	r5, [r4, #0]
 800e4f4:	1961      	adds	r1, r4, r5
 800e4f6:	428b      	cmp	r3, r1
 800e4f8:	bf01      	itttt	eq
 800e4fa:	6819      	ldreq	r1, [r3, #0]
 800e4fc:	685b      	ldreq	r3, [r3, #4]
 800e4fe:	1949      	addeq	r1, r1, r5
 800e500:	6021      	streq	r1, [r4, #0]
 800e502:	e7ed      	b.n	800e4e0 <_free_r+0x20>
 800e504:	461a      	mov	r2, r3
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	b10b      	cbz	r3, 800e50e <_free_r+0x4e>
 800e50a:	42a3      	cmp	r3, r4
 800e50c:	d9fa      	bls.n	800e504 <_free_r+0x44>
 800e50e:	6811      	ldr	r1, [r2, #0]
 800e510:	1855      	adds	r5, r2, r1
 800e512:	42a5      	cmp	r5, r4
 800e514:	d10b      	bne.n	800e52e <_free_r+0x6e>
 800e516:	6824      	ldr	r4, [r4, #0]
 800e518:	4421      	add	r1, r4
 800e51a:	1854      	adds	r4, r2, r1
 800e51c:	6011      	str	r1, [r2, #0]
 800e51e:	42a3      	cmp	r3, r4
 800e520:	d1e0      	bne.n	800e4e4 <_free_r+0x24>
 800e522:	681c      	ldr	r4, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	440c      	add	r4, r1
 800e528:	6053      	str	r3, [r2, #4]
 800e52a:	6014      	str	r4, [r2, #0]
 800e52c:	e7da      	b.n	800e4e4 <_free_r+0x24>
 800e52e:	d902      	bls.n	800e536 <_free_r+0x76>
 800e530:	230c      	movs	r3, #12
 800e532:	6003      	str	r3, [r0, #0]
 800e534:	e7d6      	b.n	800e4e4 <_free_r+0x24>
 800e536:	6825      	ldr	r5, [r4, #0]
 800e538:	1961      	adds	r1, r4, r5
 800e53a:	428b      	cmp	r3, r1
 800e53c:	bf02      	ittt	eq
 800e53e:	6819      	ldreq	r1, [r3, #0]
 800e540:	685b      	ldreq	r3, [r3, #4]
 800e542:	1949      	addeq	r1, r1, r5
 800e544:	6063      	str	r3, [r4, #4]
 800e546:	bf08      	it	eq
 800e548:	6021      	streq	r1, [r4, #0]
 800e54a:	6054      	str	r4, [r2, #4]
 800e54c:	e7ca      	b.n	800e4e4 <_free_r+0x24>
 800e54e:	b003      	add	sp, #12
 800e550:	bd30      	pop	{r4, r5, pc}
 800e552:	bf00      	nop
 800e554:	200412d8 	.word	0x200412d8

0800e558 <__sfputc_r>:
 800e558:	6893      	ldr	r3, [r2, #8]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	6093      	str	r3, [r2, #8]
 800e560:	b410      	push	{r4}
 800e562:	da08      	bge.n	800e576 <__sfputc_r+0x1e>
 800e564:	6994      	ldr	r4, [r2, #24]
 800e566:	42a3      	cmp	r3, r4
 800e568:	db01      	blt.n	800e56e <__sfputc_r+0x16>
 800e56a:	290a      	cmp	r1, #10
 800e56c:	d103      	bne.n	800e576 <__sfputc_r+0x1e>
 800e56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e572:	f7ff be5a 	b.w	800e22a <__swbuf_r>
 800e576:	6813      	ldr	r3, [r2, #0]
 800e578:	1c58      	adds	r0, r3, #1
 800e57a:	6010      	str	r0, [r2, #0]
 800e57c:	4608      	mov	r0, r1
 800e57e:	7019      	strb	r1, [r3, #0]
 800e580:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e584:	4770      	bx	lr

0800e586 <__sfputs_r>:
 800e586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e588:	4606      	mov	r6, r0
 800e58a:	460f      	mov	r7, r1
 800e58c:	4614      	mov	r4, r2
 800e58e:	18d5      	adds	r5, r2, r3
 800e590:	42ac      	cmp	r4, r5
 800e592:	d101      	bne.n	800e598 <__sfputs_r+0x12>
 800e594:	2000      	movs	r0, #0
 800e596:	e007      	b.n	800e5a8 <__sfputs_r+0x22>
 800e598:	463a      	mov	r2, r7
 800e59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7ff ffda 	bl	800e558 <__sfputc_r>
 800e5a4:	1c43      	adds	r3, r0, #1
 800e5a6:	d1f3      	bne.n	800e590 <__sfputs_r+0xa>
 800e5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5ac <_vfiprintf_r>:
 800e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b0:	460d      	mov	r5, r1
 800e5b2:	b09d      	sub	sp, #116	; 0x74
 800e5b4:	4614      	mov	r4, r2
 800e5b6:	4698      	mov	r8, r3
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	b118      	cbz	r0, 800e5c4 <_vfiprintf_r+0x18>
 800e5bc:	6a03      	ldr	r3, [r0, #32]
 800e5be:	b90b      	cbnz	r3, 800e5c4 <_vfiprintf_r+0x18>
 800e5c0:	f7ff fd44 	bl	800e04c <__sinit>
 800e5c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5c6:	07d9      	lsls	r1, r3, #31
 800e5c8:	d405      	bmi.n	800e5d6 <_vfiprintf_r+0x2a>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	059a      	lsls	r2, r3, #22
 800e5ce:	d402      	bmi.n	800e5d6 <_vfiprintf_r+0x2a>
 800e5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d2:	f7ff ff66 	bl	800e4a2 <__retarget_lock_acquire_recursive>
 800e5d6:	89ab      	ldrh	r3, [r5, #12]
 800e5d8:	071b      	lsls	r3, r3, #28
 800e5da:	d501      	bpl.n	800e5e0 <_vfiprintf_r+0x34>
 800e5dc:	692b      	ldr	r3, [r5, #16]
 800e5de:	b99b      	cbnz	r3, 800e608 <_vfiprintf_r+0x5c>
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f7ff fe5e 	bl	800e2a4 <__swsetup_r>
 800e5e8:	b170      	cbz	r0, 800e608 <_vfiprintf_r+0x5c>
 800e5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5ec:	07dc      	lsls	r4, r3, #31
 800e5ee:	d504      	bpl.n	800e5fa <_vfiprintf_r+0x4e>
 800e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f4:	b01d      	add	sp, #116	; 0x74
 800e5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fa:	89ab      	ldrh	r3, [r5, #12]
 800e5fc:	0598      	lsls	r0, r3, #22
 800e5fe:	d4f7      	bmi.n	800e5f0 <_vfiprintf_r+0x44>
 800e600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e602:	f7ff ff4f 	bl	800e4a4 <__retarget_lock_release_recursive>
 800e606:	e7f3      	b.n	800e5f0 <_vfiprintf_r+0x44>
 800e608:	2300      	movs	r3, #0
 800e60a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e60e:	f04f 0901 	mov.w	r9, #1
 800e612:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800e7cc <_vfiprintf_r+0x220>
 800e616:	9309      	str	r3, [sp, #36]	; 0x24
 800e618:	2320      	movs	r3, #32
 800e61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e61e:	2330      	movs	r3, #48	; 0x30
 800e620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e624:	4623      	mov	r3, r4
 800e626:	469a      	mov	sl, r3
 800e628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e62c:	b10a      	cbz	r2, 800e632 <_vfiprintf_r+0x86>
 800e62e:	2a25      	cmp	r2, #37	; 0x25
 800e630:	d1f9      	bne.n	800e626 <_vfiprintf_r+0x7a>
 800e632:	ebba 0b04 	subs.w	fp, sl, r4
 800e636:	d00b      	beq.n	800e650 <_vfiprintf_r+0xa4>
 800e638:	465b      	mov	r3, fp
 800e63a:	4622      	mov	r2, r4
 800e63c:	4629      	mov	r1, r5
 800e63e:	4630      	mov	r0, r6
 800e640:	f7ff ffa1 	bl	800e586 <__sfputs_r>
 800e644:	3001      	adds	r0, #1
 800e646:	f000 80a9 	beq.w	800e79c <_vfiprintf_r+0x1f0>
 800e64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e64c:	445a      	add	r2, fp
 800e64e:	9209      	str	r2, [sp, #36]	; 0x24
 800e650:	f89a 3000 	ldrb.w	r3, [sl]
 800e654:	2b00      	cmp	r3, #0
 800e656:	f000 80a1 	beq.w	800e79c <_vfiprintf_r+0x1f0>
 800e65a:	2300      	movs	r3, #0
 800e65c:	f04f 32ff 	mov.w	r2, #4294967295
 800e660:	f10a 0a01 	add.w	sl, sl, #1
 800e664:	9304      	str	r3, [sp, #16]
 800e666:	9307      	str	r3, [sp, #28]
 800e668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e66c:	931a      	str	r3, [sp, #104]	; 0x68
 800e66e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e672:	4654      	mov	r4, sl
 800e674:	2205      	movs	r2, #5
 800e676:	4855      	ldr	r0, [pc, #340]	; (800e7cc <_vfiprintf_r+0x220>)
 800e678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67c:	f000 fba6 	bl	800edcc <memchr>
 800e680:	9a04      	ldr	r2, [sp, #16]
 800e682:	b9d8      	cbnz	r0, 800e6bc <_vfiprintf_r+0x110>
 800e684:	06d1      	lsls	r1, r2, #27
 800e686:	bf44      	itt	mi
 800e688:	2320      	movmi	r3, #32
 800e68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e68e:	0713      	lsls	r3, r2, #28
 800e690:	bf44      	itt	mi
 800e692:	232b      	movmi	r3, #43	; 0x2b
 800e694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e698:	f89a 3000 	ldrb.w	r3, [sl]
 800e69c:	2b2a      	cmp	r3, #42	; 0x2a
 800e69e:	d015      	beq.n	800e6cc <_vfiprintf_r+0x120>
 800e6a0:	9a07      	ldr	r2, [sp, #28]
 800e6a2:	4654      	mov	r4, sl
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	f04f 0c0a 	mov.w	ip, #10
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6b0:	3b30      	subs	r3, #48	; 0x30
 800e6b2:	2b09      	cmp	r3, #9
 800e6b4:	d94d      	bls.n	800e752 <_vfiprintf_r+0x1a6>
 800e6b6:	b1b0      	cbz	r0, 800e6e6 <_vfiprintf_r+0x13a>
 800e6b8:	9207      	str	r2, [sp, #28]
 800e6ba:	e014      	b.n	800e6e6 <_vfiprintf_r+0x13a>
 800e6bc:	eba0 0308 	sub.w	r3, r0, r8
 800e6c0:	46a2      	mov	sl, r4
 800e6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	9304      	str	r3, [sp, #16]
 800e6ca:	e7d2      	b.n	800e672 <_vfiprintf_r+0xc6>
 800e6cc:	9b03      	ldr	r3, [sp, #12]
 800e6ce:	1d19      	adds	r1, r3, #4
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	9103      	str	r1, [sp, #12]
 800e6d6:	bfbb      	ittet	lt
 800e6d8:	425b      	neglt	r3, r3
 800e6da:	f042 0202 	orrlt.w	r2, r2, #2
 800e6de:	9307      	strge	r3, [sp, #28]
 800e6e0:	9307      	strlt	r3, [sp, #28]
 800e6e2:	bfb8      	it	lt
 800e6e4:	9204      	strlt	r2, [sp, #16]
 800e6e6:	7823      	ldrb	r3, [r4, #0]
 800e6e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e6ea:	d10c      	bne.n	800e706 <_vfiprintf_r+0x15a>
 800e6ec:	7863      	ldrb	r3, [r4, #1]
 800e6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e6f0:	d134      	bne.n	800e75c <_vfiprintf_r+0x1b0>
 800e6f2:	9b03      	ldr	r3, [sp, #12]
 800e6f4:	3402      	adds	r4, #2
 800e6f6:	1d1a      	adds	r2, r3, #4
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	9203      	str	r2, [sp, #12]
 800e6fe:	bfb8      	it	lt
 800e700:	f04f 33ff 	movlt.w	r3, #4294967295
 800e704:	9305      	str	r3, [sp, #20]
 800e706:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e7dc <_vfiprintf_r+0x230>
 800e70a:	2203      	movs	r2, #3
 800e70c:	7821      	ldrb	r1, [r4, #0]
 800e70e:	4650      	mov	r0, sl
 800e710:	f000 fb5c 	bl	800edcc <memchr>
 800e714:	b138      	cbz	r0, 800e726 <_vfiprintf_r+0x17a>
 800e716:	eba0 000a 	sub.w	r0, r0, sl
 800e71a:	2240      	movs	r2, #64	; 0x40
 800e71c:	9b04      	ldr	r3, [sp, #16]
 800e71e:	3401      	adds	r4, #1
 800e720:	4082      	lsls	r2, r0
 800e722:	4313      	orrs	r3, r2
 800e724:	9304      	str	r3, [sp, #16]
 800e726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e72a:	2206      	movs	r2, #6
 800e72c:	4828      	ldr	r0, [pc, #160]	; (800e7d0 <_vfiprintf_r+0x224>)
 800e72e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e732:	f000 fb4b 	bl	800edcc <memchr>
 800e736:	2800      	cmp	r0, #0
 800e738:	d03f      	beq.n	800e7ba <_vfiprintf_r+0x20e>
 800e73a:	4b26      	ldr	r3, [pc, #152]	; (800e7d4 <_vfiprintf_r+0x228>)
 800e73c:	bb1b      	cbnz	r3, 800e786 <_vfiprintf_r+0x1da>
 800e73e:	9b03      	ldr	r3, [sp, #12]
 800e740:	3307      	adds	r3, #7
 800e742:	f023 0307 	bic.w	r3, r3, #7
 800e746:	3308      	adds	r3, #8
 800e748:	9303      	str	r3, [sp, #12]
 800e74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e74c:	443b      	add	r3, r7
 800e74e:	9309      	str	r3, [sp, #36]	; 0x24
 800e750:	e768      	b.n	800e624 <_vfiprintf_r+0x78>
 800e752:	fb0c 3202 	mla	r2, ip, r2, r3
 800e756:	460c      	mov	r4, r1
 800e758:	2001      	movs	r0, #1
 800e75a:	e7a6      	b.n	800e6aa <_vfiprintf_r+0xfe>
 800e75c:	2300      	movs	r3, #0
 800e75e:	3401      	adds	r4, #1
 800e760:	f04f 0c0a 	mov.w	ip, #10
 800e764:	4619      	mov	r1, r3
 800e766:	9305      	str	r3, [sp, #20]
 800e768:	4620      	mov	r0, r4
 800e76a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e76e:	3a30      	subs	r2, #48	; 0x30
 800e770:	2a09      	cmp	r2, #9
 800e772:	d903      	bls.n	800e77c <_vfiprintf_r+0x1d0>
 800e774:	2b00      	cmp	r3, #0
 800e776:	d0c6      	beq.n	800e706 <_vfiprintf_r+0x15a>
 800e778:	9105      	str	r1, [sp, #20]
 800e77a:	e7c4      	b.n	800e706 <_vfiprintf_r+0x15a>
 800e77c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e780:	4604      	mov	r4, r0
 800e782:	2301      	movs	r3, #1
 800e784:	e7f0      	b.n	800e768 <_vfiprintf_r+0x1bc>
 800e786:	ab03      	add	r3, sp, #12
 800e788:	462a      	mov	r2, r5
 800e78a:	a904      	add	r1, sp, #16
 800e78c:	4630      	mov	r0, r6
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	4b11      	ldr	r3, [pc, #68]	; (800e7d8 <_vfiprintf_r+0x22c>)
 800e792:	f3af 8000 	nop.w
 800e796:	4607      	mov	r7, r0
 800e798:	1c78      	adds	r0, r7, #1
 800e79a:	d1d6      	bne.n	800e74a <_vfiprintf_r+0x19e>
 800e79c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e79e:	07d9      	lsls	r1, r3, #31
 800e7a0:	d405      	bmi.n	800e7ae <_vfiprintf_r+0x202>
 800e7a2:	89ab      	ldrh	r3, [r5, #12]
 800e7a4:	059a      	lsls	r2, r3, #22
 800e7a6:	d402      	bmi.n	800e7ae <_vfiprintf_r+0x202>
 800e7a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7aa:	f7ff fe7b 	bl	800e4a4 <__retarget_lock_release_recursive>
 800e7ae:	89ab      	ldrh	r3, [r5, #12]
 800e7b0:	065b      	lsls	r3, r3, #25
 800e7b2:	f53f af1d 	bmi.w	800e5f0 <_vfiprintf_r+0x44>
 800e7b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7b8:	e71c      	b.n	800e5f4 <_vfiprintf_r+0x48>
 800e7ba:	ab03      	add	r3, sp, #12
 800e7bc:	462a      	mov	r2, r5
 800e7be:	a904      	add	r1, sp, #16
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	9300      	str	r3, [sp, #0]
 800e7c4:	4b04      	ldr	r3, [pc, #16]	; (800e7d8 <_vfiprintf_r+0x22c>)
 800e7c6:	f000 f87d 	bl	800e8c4 <_printf_i>
 800e7ca:	e7e4      	b.n	800e796 <_vfiprintf_r+0x1ea>
 800e7cc:	0800f0d6 	.word	0x0800f0d6
 800e7d0:	0800f0e0 	.word	0x0800f0e0
 800e7d4:	00000000 	.word	0x00000000
 800e7d8:	0800e587 	.word	0x0800e587
 800e7dc:	0800f0dc 	.word	0x0800f0dc

0800e7e0 <_printf_common>:
 800e7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e4:	4616      	mov	r6, r2
 800e7e6:	4699      	mov	r9, r3
 800e7e8:	688a      	ldr	r2, [r1, #8]
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	690b      	ldr	r3, [r1, #16]
 800e7ee:	460c      	mov	r4, r1
 800e7f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	bfb8      	it	lt
 800e7f8:	4613      	movlt	r3, r2
 800e7fa:	6033      	str	r3, [r6, #0]
 800e7fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e800:	b10a      	cbz	r2, 800e806 <_printf_common+0x26>
 800e802:	3301      	adds	r3, #1
 800e804:	6033      	str	r3, [r6, #0]
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	0699      	lsls	r1, r3, #26
 800e80a:	bf42      	ittt	mi
 800e80c:	6833      	ldrmi	r3, [r6, #0]
 800e80e:	3302      	addmi	r3, #2
 800e810:	6033      	strmi	r3, [r6, #0]
 800e812:	6825      	ldr	r5, [r4, #0]
 800e814:	f015 0506 	ands.w	r5, r5, #6
 800e818:	d106      	bne.n	800e828 <_printf_common+0x48>
 800e81a:	f104 0a19 	add.w	sl, r4, #25
 800e81e:	68e3      	ldr	r3, [r4, #12]
 800e820:	6832      	ldr	r2, [r6, #0]
 800e822:	1a9b      	subs	r3, r3, r2
 800e824:	42ab      	cmp	r3, r5
 800e826:	dc2b      	bgt.n	800e880 <_printf_common+0xa0>
 800e828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e82c:	1e13      	subs	r3, r2, #0
 800e82e:	6822      	ldr	r2, [r4, #0]
 800e830:	bf18      	it	ne
 800e832:	2301      	movne	r3, #1
 800e834:	0692      	lsls	r2, r2, #26
 800e836:	d430      	bmi.n	800e89a <_printf_common+0xba>
 800e838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e83c:	4649      	mov	r1, r9
 800e83e:	4638      	mov	r0, r7
 800e840:	47c0      	blx	r8
 800e842:	3001      	adds	r0, #1
 800e844:	d023      	beq.n	800e88e <_printf_common+0xae>
 800e846:	6823      	ldr	r3, [r4, #0]
 800e848:	341a      	adds	r4, #26
 800e84a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e84e:	f003 0306 	and.w	r3, r3, #6
 800e852:	2b04      	cmp	r3, #4
 800e854:	bf0a      	itet	eq
 800e856:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e85a:	2500      	movne	r5, #0
 800e85c:	6833      	ldreq	r3, [r6, #0]
 800e85e:	f04f 0600 	mov.w	r6, #0
 800e862:	bf08      	it	eq
 800e864:	1aed      	subeq	r5, r5, r3
 800e866:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e86a:	bf08      	it	eq
 800e86c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e870:	4293      	cmp	r3, r2
 800e872:	bfc4      	itt	gt
 800e874:	1a9b      	subgt	r3, r3, r2
 800e876:	18ed      	addgt	r5, r5, r3
 800e878:	42b5      	cmp	r5, r6
 800e87a:	d11a      	bne.n	800e8b2 <_printf_common+0xd2>
 800e87c:	2000      	movs	r0, #0
 800e87e:	e008      	b.n	800e892 <_printf_common+0xb2>
 800e880:	2301      	movs	r3, #1
 800e882:	4652      	mov	r2, sl
 800e884:	4649      	mov	r1, r9
 800e886:	4638      	mov	r0, r7
 800e888:	47c0      	blx	r8
 800e88a:	3001      	adds	r0, #1
 800e88c:	d103      	bne.n	800e896 <_printf_common+0xb6>
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295
 800e892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e896:	3501      	adds	r5, #1
 800e898:	e7c1      	b.n	800e81e <_printf_common+0x3e>
 800e89a:	18e1      	adds	r1, r4, r3
 800e89c:	1c5a      	adds	r2, r3, #1
 800e89e:	2030      	movs	r0, #48	; 0x30
 800e8a0:	3302      	adds	r3, #2
 800e8a2:	4422      	add	r2, r4
 800e8a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8b0:	e7c2      	b.n	800e838 <_printf_common+0x58>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	4622      	mov	r2, r4
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	4638      	mov	r0, r7
 800e8ba:	47c0      	blx	r8
 800e8bc:	3001      	adds	r0, #1
 800e8be:	d0e6      	beq.n	800e88e <_printf_common+0xae>
 800e8c0:	3601      	adds	r6, #1
 800e8c2:	e7d9      	b.n	800e878 <_printf_common+0x98>

0800e8c4 <_printf_i>:
 800e8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	7e0f      	ldrb	r7, [r1, #24]
 800e8ca:	4691      	mov	r9, r2
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	2f78      	cmp	r7, #120	; 0x78
 800e8d2:	469a      	mov	sl, r3
 800e8d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8da:	d807      	bhi.n	800e8ec <_printf_i+0x28>
 800e8dc:	2f62      	cmp	r7, #98	; 0x62
 800e8de:	d80a      	bhi.n	800e8f6 <_printf_i+0x32>
 800e8e0:	2f00      	cmp	r7, #0
 800e8e2:	f000 80d3 	beq.w	800ea8c <_printf_i+0x1c8>
 800e8e6:	2f58      	cmp	r7, #88	; 0x58
 800e8e8:	f000 80bf 	beq.w	800ea6a <_printf_i+0x1a6>
 800e8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8f4:	e03a      	b.n	800e96c <_printf_i+0xa8>
 800e8f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8fa:	2b15      	cmp	r3, #21
 800e8fc:	d8f6      	bhi.n	800e8ec <_printf_i+0x28>
 800e8fe:	a101      	add	r1, pc, #4	; (adr r1, 800e904 <_printf_i+0x40>)
 800e900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e904:	0800e95d 	.word	0x0800e95d
 800e908:	0800e971 	.word	0x0800e971
 800e90c:	0800e8ed 	.word	0x0800e8ed
 800e910:	0800e8ed 	.word	0x0800e8ed
 800e914:	0800e8ed 	.word	0x0800e8ed
 800e918:	0800e8ed 	.word	0x0800e8ed
 800e91c:	0800e971 	.word	0x0800e971
 800e920:	0800e8ed 	.word	0x0800e8ed
 800e924:	0800e8ed 	.word	0x0800e8ed
 800e928:	0800e8ed 	.word	0x0800e8ed
 800e92c:	0800e8ed 	.word	0x0800e8ed
 800e930:	0800ea73 	.word	0x0800ea73
 800e934:	0800e99d 	.word	0x0800e99d
 800e938:	0800ea2f 	.word	0x0800ea2f
 800e93c:	0800e8ed 	.word	0x0800e8ed
 800e940:	0800e8ed 	.word	0x0800e8ed
 800e944:	0800ea95 	.word	0x0800ea95
 800e948:	0800e8ed 	.word	0x0800e8ed
 800e94c:	0800e99d 	.word	0x0800e99d
 800e950:	0800e8ed 	.word	0x0800e8ed
 800e954:	0800e8ed 	.word	0x0800e8ed
 800e958:	0800ea37 	.word	0x0800ea37
 800e95c:	682b      	ldr	r3, [r5, #0]
 800e95e:	1d1a      	adds	r2, r3, #4
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	602a      	str	r2, [r5, #0]
 800e964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e96c:	2301      	movs	r3, #1
 800e96e:	e09e      	b.n	800eaae <_printf_i+0x1ea>
 800e970:	6820      	ldr	r0, [r4, #0]
 800e972:	682b      	ldr	r3, [r5, #0]
 800e974:	0607      	lsls	r7, r0, #24
 800e976:	f103 0104 	add.w	r1, r3, #4
 800e97a:	6029      	str	r1, [r5, #0]
 800e97c:	d501      	bpl.n	800e982 <_printf_i+0xbe>
 800e97e:	681e      	ldr	r6, [r3, #0]
 800e980:	e003      	b.n	800e98a <_printf_i+0xc6>
 800e982:	0646      	lsls	r6, r0, #25
 800e984:	d5fb      	bpl.n	800e97e <_printf_i+0xba>
 800e986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e98a:	2e00      	cmp	r6, #0
 800e98c:	da03      	bge.n	800e996 <_printf_i+0xd2>
 800e98e:	232d      	movs	r3, #45	; 0x2d
 800e990:	4276      	negs	r6, r6
 800e992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e996:	4859      	ldr	r0, [pc, #356]	; (800eafc <_printf_i+0x238>)
 800e998:	230a      	movs	r3, #10
 800e99a:	e012      	b.n	800e9c2 <_printf_i+0xfe>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	6820      	ldr	r0, [r4, #0]
 800e9a0:	1d19      	adds	r1, r3, #4
 800e9a2:	6029      	str	r1, [r5, #0]
 800e9a4:	0605      	lsls	r5, r0, #24
 800e9a6:	d501      	bpl.n	800e9ac <_printf_i+0xe8>
 800e9a8:	681e      	ldr	r6, [r3, #0]
 800e9aa:	e002      	b.n	800e9b2 <_printf_i+0xee>
 800e9ac:	0641      	lsls	r1, r0, #25
 800e9ae:	d5fb      	bpl.n	800e9a8 <_printf_i+0xe4>
 800e9b0:	881e      	ldrh	r6, [r3, #0]
 800e9b2:	2f6f      	cmp	r7, #111	; 0x6f
 800e9b4:	4851      	ldr	r0, [pc, #324]	; (800eafc <_printf_i+0x238>)
 800e9b6:	bf0c      	ite	eq
 800e9b8:	2308      	moveq	r3, #8
 800e9ba:	230a      	movne	r3, #10
 800e9bc:	2100      	movs	r1, #0
 800e9be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9c2:	6865      	ldr	r5, [r4, #4]
 800e9c4:	2d00      	cmp	r5, #0
 800e9c6:	60a5      	str	r5, [r4, #8]
 800e9c8:	bfa2      	ittt	ge
 800e9ca:	6821      	ldrge	r1, [r4, #0]
 800e9cc:	f021 0104 	bicge.w	r1, r1, #4
 800e9d0:	6021      	strge	r1, [r4, #0]
 800e9d2:	b90e      	cbnz	r6, 800e9d8 <_printf_i+0x114>
 800e9d4:	2d00      	cmp	r5, #0
 800e9d6:	d04a      	beq.n	800ea6e <_printf_i+0x1aa>
 800e9d8:	4615      	mov	r5, r2
 800e9da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9de:	fb03 6711 	mls	r7, r3, r1, r6
 800e9e2:	5dc7      	ldrb	r7, [r0, r7]
 800e9e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9e8:	4637      	mov	r7, r6
 800e9ea:	460e      	mov	r6, r1
 800e9ec:	42bb      	cmp	r3, r7
 800e9ee:	d9f4      	bls.n	800e9da <_printf_i+0x116>
 800e9f0:	2b08      	cmp	r3, #8
 800e9f2:	d10b      	bne.n	800ea0c <_printf_i+0x148>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	07de      	lsls	r6, r3, #31
 800e9f8:	d508      	bpl.n	800ea0c <_printf_i+0x148>
 800e9fa:	6923      	ldr	r3, [r4, #16]
 800e9fc:	6861      	ldr	r1, [r4, #4]
 800e9fe:	4299      	cmp	r1, r3
 800ea00:	bfde      	ittt	le
 800ea02:	2330      	movle	r3, #48	; 0x30
 800ea04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea0c:	1b52      	subs	r2, r2, r5
 800ea0e:	6122      	str	r2, [r4, #16]
 800ea10:	464b      	mov	r3, r9
 800ea12:	aa03      	add	r2, sp, #12
 800ea14:	4621      	mov	r1, r4
 800ea16:	4640      	mov	r0, r8
 800ea18:	f8cd a000 	str.w	sl, [sp]
 800ea1c:	f7ff fee0 	bl	800e7e0 <_printf_common>
 800ea20:	3001      	adds	r0, #1
 800ea22:	d149      	bne.n	800eab8 <_printf_i+0x1f4>
 800ea24:	f04f 30ff 	mov.w	r0, #4294967295
 800ea28:	b004      	add	sp, #16
 800ea2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	f043 0320 	orr.w	r3, r3, #32
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	2778      	movs	r7, #120	; 0x78
 800ea38:	4831      	ldr	r0, [pc, #196]	; (800eb00 <_printf_i+0x23c>)
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ea40:	061f      	lsls	r7, r3, #24
 800ea42:	6829      	ldr	r1, [r5, #0]
 800ea44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea48:	d402      	bmi.n	800ea50 <_printf_i+0x18c>
 800ea4a:	065f      	lsls	r7, r3, #25
 800ea4c:	bf48      	it	mi
 800ea4e:	b2b6      	uxthmi	r6, r6
 800ea50:	07df      	lsls	r7, r3, #31
 800ea52:	6029      	str	r1, [r5, #0]
 800ea54:	bf44      	itt	mi
 800ea56:	f043 0320 	orrmi.w	r3, r3, #32
 800ea5a:	6023      	strmi	r3, [r4, #0]
 800ea5c:	b91e      	cbnz	r6, 800ea66 <_printf_i+0x1a2>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	f023 0320 	bic.w	r3, r3, #32
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	2310      	movs	r3, #16
 800ea68:	e7a8      	b.n	800e9bc <_printf_i+0xf8>
 800ea6a:	4824      	ldr	r0, [pc, #144]	; (800eafc <_printf_i+0x238>)
 800ea6c:	e7e5      	b.n	800ea3a <_printf_i+0x176>
 800ea6e:	4615      	mov	r5, r2
 800ea70:	e7be      	b.n	800e9f0 <_printf_i+0x12c>
 800ea72:	682b      	ldr	r3, [r5, #0]
 800ea74:	6826      	ldr	r6, [r4, #0]
 800ea76:	1d18      	adds	r0, r3, #4
 800ea78:	6961      	ldr	r1, [r4, #20]
 800ea7a:	6028      	str	r0, [r5, #0]
 800ea7c:	0635      	lsls	r5, r6, #24
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	d501      	bpl.n	800ea86 <_printf_i+0x1c2>
 800ea82:	6019      	str	r1, [r3, #0]
 800ea84:	e002      	b.n	800ea8c <_printf_i+0x1c8>
 800ea86:	0670      	lsls	r0, r6, #25
 800ea88:	d5fb      	bpl.n	800ea82 <_printf_i+0x1be>
 800ea8a:	8019      	strh	r1, [r3, #0]
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4615      	mov	r5, r2
 800ea90:	6123      	str	r3, [r4, #16]
 800ea92:	e7bd      	b.n	800ea10 <_printf_i+0x14c>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	2100      	movs	r1, #0
 800ea98:	1d1a      	adds	r2, r3, #4
 800ea9a:	602a      	str	r2, [r5, #0]
 800ea9c:	681d      	ldr	r5, [r3, #0]
 800ea9e:	6862      	ldr	r2, [r4, #4]
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f000 f993 	bl	800edcc <memchr>
 800eaa6:	b108      	cbz	r0, 800eaac <_printf_i+0x1e8>
 800eaa8:	1b40      	subs	r0, r0, r5
 800eaaa:	6060      	str	r0, [r4, #4]
 800eaac:	6863      	ldr	r3, [r4, #4]
 800eaae:	6123      	str	r3, [r4, #16]
 800eab0:	2300      	movs	r3, #0
 800eab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eab6:	e7ab      	b.n	800ea10 <_printf_i+0x14c>
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	462a      	mov	r2, r5
 800eabc:	4649      	mov	r1, r9
 800eabe:	4640      	mov	r0, r8
 800eac0:	47d0      	blx	sl
 800eac2:	3001      	adds	r0, #1
 800eac4:	d0ae      	beq.n	800ea24 <_printf_i+0x160>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	079b      	lsls	r3, r3, #30
 800eaca:	d413      	bmi.n	800eaf4 <_printf_i+0x230>
 800eacc:	68e0      	ldr	r0, [r4, #12]
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	4298      	cmp	r0, r3
 800ead2:	bfb8      	it	lt
 800ead4:	4618      	movlt	r0, r3
 800ead6:	e7a7      	b.n	800ea28 <_printf_i+0x164>
 800ead8:	2301      	movs	r3, #1
 800eada:	4632      	mov	r2, r6
 800eadc:	4649      	mov	r1, r9
 800eade:	4640      	mov	r0, r8
 800eae0:	47d0      	blx	sl
 800eae2:	3001      	adds	r0, #1
 800eae4:	d09e      	beq.n	800ea24 <_printf_i+0x160>
 800eae6:	3501      	adds	r5, #1
 800eae8:	68e3      	ldr	r3, [r4, #12]
 800eaea:	9903      	ldr	r1, [sp, #12]
 800eaec:	1a5b      	subs	r3, r3, r1
 800eaee:	42ab      	cmp	r3, r5
 800eaf0:	dcf2      	bgt.n	800ead8 <_printf_i+0x214>
 800eaf2:	e7eb      	b.n	800eacc <_printf_i+0x208>
 800eaf4:	2500      	movs	r5, #0
 800eaf6:	f104 0619 	add.w	r6, r4, #25
 800eafa:	e7f5      	b.n	800eae8 <_printf_i+0x224>
 800eafc:	0800f0e7 	.word	0x0800f0e7
 800eb00:	0800f0f8 	.word	0x0800f0f8

0800eb04 <__sflush_r>:
 800eb04:	898a      	ldrh	r2, [r1, #12]
 800eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	0710      	lsls	r0, r2, #28
 800eb0e:	460c      	mov	r4, r1
 800eb10:	d458      	bmi.n	800ebc4 <__sflush_r+0xc0>
 800eb12:	684b      	ldr	r3, [r1, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	dc05      	bgt.n	800eb24 <__sflush_r+0x20>
 800eb18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	dc02      	bgt.n	800eb24 <__sflush_r+0x20>
 800eb1e:	2000      	movs	r0, #0
 800eb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb26:	2e00      	cmp	r6, #0
 800eb28:	d0f9      	beq.n	800eb1e <__sflush_r+0x1a>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb30:	682f      	ldr	r7, [r5, #0]
 800eb32:	6a21      	ldr	r1, [r4, #32]
 800eb34:	602b      	str	r3, [r5, #0]
 800eb36:	d032      	beq.n	800eb9e <__sflush_r+0x9a>
 800eb38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb3a:	89a3      	ldrh	r3, [r4, #12]
 800eb3c:	075a      	lsls	r2, r3, #29
 800eb3e:	d505      	bpl.n	800eb4c <__sflush_r+0x48>
 800eb40:	6863      	ldr	r3, [r4, #4]
 800eb42:	1ac0      	subs	r0, r0, r3
 800eb44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb46:	b10b      	cbz	r3, 800eb4c <__sflush_r+0x48>
 800eb48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb4a:	1ac0      	subs	r0, r0, r3
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	4602      	mov	r2, r0
 800eb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb52:	4628      	mov	r0, r5
 800eb54:	6a21      	ldr	r1, [r4, #32]
 800eb56:	47b0      	blx	r6
 800eb58:	1c43      	adds	r3, r0, #1
 800eb5a:	89a3      	ldrh	r3, [r4, #12]
 800eb5c:	d106      	bne.n	800eb6c <__sflush_r+0x68>
 800eb5e:	6829      	ldr	r1, [r5, #0]
 800eb60:	291d      	cmp	r1, #29
 800eb62:	d82b      	bhi.n	800ebbc <__sflush_r+0xb8>
 800eb64:	4a28      	ldr	r2, [pc, #160]	; (800ec08 <__sflush_r+0x104>)
 800eb66:	410a      	asrs	r2, r1
 800eb68:	07d6      	lsls	r6, r2, #31
 800eb6a:	d427      	bmi.n	800ebbc <__sflush_r+0xb8>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	04d9      	lsls	r1, r3, #19
 800eb70:	6062      	str	r2, [r4, #4]
 800eb72:	6922      	ldr	r2, [r4, #16]
 800eb74:	6022      	str	r2, [r4, #0]
 800eb76:	d504      	bpl.n	800eb82 <__sflush_r+0x7e>
 800eb78:	1c42      	adds	r2, r0, #1
 800eb7a:	d101      	bne.n	800eb80 <__sflush_r+0x7c>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b903      	cbnz	r3, 800eb82 <__sflush_r+0x7e>
 800eb80:	6560      	str	r0, [r4, #84]	; 0x54
 800eb82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb84:	602f      	str	r7, [r5, #0]
 800eb86:	2900      	cmp	r1, #0
 800eb88:	d0c9      	beq.n	800eb1e <__sflush_r+0x1a>
 800eb8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	d002      	beq.n	800eb98 <__sflush_r+0x94>
 800eb92:	4628      	mov	r0, r5
 800eb94:	f7ff fc94 	bl	800e4c0 <_free_r>
 800eb98:	2000      	movs	r0, #0
 800eb9a:	6360      	str	r0, [r4, #52]	; 0x34
 800eb9c:	e7c0      	b.n	800eb20 <__sflush_r+0x1c>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4628      	mov	r0, r5
 800eba2:	47b0      	blx	r6
 800eba4:	1c41      	adds	r1, r0, #1
 800eba6:	d1c8      	bne.n	800eb3a <__sflush_r+0x36>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d0c5      	beq.n	800eb3a <__sflush_r+0x36>
 800ebae:	2b1d      	cmp	r3, #29
 800ebb0:	d001      	beq.n	800ebb6 <__sflush_r+0xb2>
 800ebb2:	2b16      	cmp	r3, #22
 800ebb4:	d101      	bne.n	800ebba <__sflush_r+0xb6>
 800ebb6:	602f      	str	r7, [r5, #0]
 800ebb8:	e7b1      	b.n	800eb1e <__sflush_r+0x1a>
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebc0:	81a3      	strh	r3, [r4, #12]
 800ebc2:	e7ad      	b.n	800eb20 <__sflush_r+0x1c>
 800ebc4:	690f      	ldr	r7, [r1, #16]
 800ebc6:	2f00      	cmp	r7, #0
 800ebc8:	d0a9      	beq.n	800eb1e <__sflush_r+0x1a>
 800ebca:	0793      	lsls	r3, r2, #30
 800ebcc:	680e      	ldr	r6, [r1, #0]
 800ebce:	600f      	str	r7, [r1, #0]
 800ebd0:	bf0c      	ite	eq
 800ebd2:	694b      	ldreq	r3, [r1, #20]
 800ebd4:	2300      	movne	r3, #0
 800ebd6:	eba6 0807 	sub.w	r8, r6, r7
 800ebda:	608b      	str	r3, [r1, #8]
 800ebdc:	f1b8 0f00 	cmp.w	r8, #0
 800ebe0:	dd9d      	ble.n	800eb1e <__sflush_r+0x1a>
 800ebe2:	4643      	mov	r3, r8
 800ebe4:	463a      	mov	r2, r7
 800ebe6:	6a21      	ldr	r1, [r4, #32]
 800ebe8:	4628      	mov	r0, r5
 800ebea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebec:	47b0      	blx	r6
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	dc06      	bgt.n	800ec00 <__sflush_r+0xfc>
 800ebf2:	89a3      	ldrh	r3, [r4, #12]
 800ebf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	e78f      	b.n	800eb20 <__sflush_r+0x1c>
 800ec00:	4407      	add	r7, r0
 800ec02:	eba8 0800 	sub.w	r8, r8, r0
 800ec06:	e7e9      	b.n	800ebdc <__sflush_r+0xd8>
 800ec08:	dfbffffe 	.word	0xdfbffffe

0800ec0c <_fflush_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	690b      	ldr	r3, [r1, #16]
 800ec10:	4605      	mov	r5, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	b913      	cbnz	r3, 800ec1c <_fflush_r+0x10>
 800ec16:	2500      	movs	r5, #0
 800ec18:	4628      	mov	r0, r5
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	b118      	cbz	r0, 800ec26 <_fflush_r+0x1a>
 800ec1e:	6a03      	ldr	r3, [r0, #32]
 800ec20:	b90b      	cbnz	r3, 800ec26 <_fflush_r+0x1a>
 800ec22:	f7ff fa13 	bl	800e04c <__sinit>
 800ec26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d0f3      	beq.n	800ec16 <_fflush_r+0xa>
 800ec2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec30:	07d0      	lsls	r0, r2, #31
 800ec32:	d404      	bmi.n	800ec3e <_fflush_r+0x32>
 800ec34:	0599      	lsls	r1, r3, #22
 800ec36:	d402      	bmi.n	800ec3e <_fflush_r+0x32>
 800ec38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec3a:	f7ff fc32 	bl	800e4a2 <__retarget_lock_acquire_recursive>
 800ec3e:	4628      	mov	r0, r5
 800ec40:	4621      	mov	r1, r4
 800ec42:	f7ff ff5f 	bl	800eb04 <__sflush_r>
 800ec46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec48:	4605      	mov	r5, r0
 800ec4a:	07da      	lsls	r2, r3, #31
 800ec4c:	d4e4      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	059b      	lsls	r3, r3, #22
 800ec52:	d4e1      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec56:	f7ff fc25 	bl	800e4a4 <__retarget_lock_release_recursive>
 800ec5a:	e7dd      	b.n	800ec18 <_fflush_r+0xc>

0800ec5c <__swhatbuf_r>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	460c      	mov	r4, r1
 800ec60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec64:	b096      	sub	sp, #88	; 0x58
 800ec66:	4615      	mov	r5, r2
 800ec68:	2900      	cmp	r1, #0
 800ec6a:	461e      	mov	r6, r3
 800ec6c:	da0c      	bge.n	800ec88 <__swhatbuf_r+0x2c>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	2100      	movs	r1, #0
 800ec72:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec76:	bf0c      	ite	eq
 800ec78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ec7c:	2340      	movne	r3, #64	; 0x40
 800ec7e:	2000      	movs	r0, #0
 800ec80:	6031      	str	r1, [r6, #0]
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	b016      	add	sp, #88	; 0x58
 800ec86:	bd70      	pop	{r4, r5, r6, pc}
 800ec88:	466a      	mov	r2, sp
 800ec8a:	f000 f87d 	bl	800ed88 <_fstat_r>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	dbed      	blt.n	800ec6e <__swhatbuf_r+0x12>
 800ec92:	9901      	ldr	r1, [sp, #4]
 800ec94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ec98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ec9c:	4259      	negs	r1, r3
 800ec9e:	4159      	adcs	r1, r3
 800eca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eca4:	e7eb      	b.n	800ec7e <__swhatbuf_r+0x22>

0800eca6 <__smakebuf_r>:
 800eca6:	898b      	ldrh	r3, [r1, #12]
 800eca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecaa:	079d      	lsls	r5, r3, #30
 800ecac:	4606      	mov	r6, r0
 800ecae:	460c      	mov	r4, r1
 800ecb0:	d507      	bpl.n	800ecc2 <__smakebuf_r+0x1c>
 800ecb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	6123      	str	r3, [r4, #16]
 800ecba:	2301      	movs	r3, #1
 800ecbc:	6163      	str	r3, [r4, #20]
 800ecbe:	b002      	add	sp, #8
 800ecc0:	bd70      	pop	{r4, r5, r6, pc}
 800ecc2:	ab01      	add	r3, sp, #4
 800ecc4:	466a      	mov	r2, sp
 800ecc6:	f7ff ffc9 	bl	800ec5c <__swhatbuf_r>
 800ecca:	9900      	ldr	r1, [sp, #0]
 800eccc:	4605      	mov	r5, r0
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f7ff f8a4 	bl	800de1c <_malloc_r>
 800ecd4:	b948      	cbnz	r0, 800ecea <__smakebuf_r+0x44>
 800ecd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecda:	059a      	lsls	r2, r3, #22
 800ecdc:	d4ef      	bmi.n	800ecbe <__smakebuf_r+0x18>
 800ecde:	f023 0303 	bic.w	r3, r3, #3
 800ece2:	f043 0302 	orr.w	r3, r3, #2
 800ece6:	81a3      	strh	r3, [r4, #12]
 800ece8:	e7e3      	b.n	800ecb2 <__smakebuf_r+0xc>
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	6020      	str	r0, [r4, #0]
 800ecee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecf2:	6120      	str	r0, [r4, #16]
 800ecf4:	81a3      	strh	r3, [r4, #12]
 800ecf6:	9b00      	ldr	r3, [sp, #0]
 800ecf8:	6163      	str	r3, [r4, #20]
 800ecfa:	9b01      	ldr	r3, [sp, #4]
 800ecfc:	b15b      	cbz	r3, 800ed16 <__smakebuf_r+0x70>
 800ecfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed02:	4630      	mov	r0, r6
 800ed04:	f000 f852 	bl	800edac <_isatty_r>
 800ed08:	b128      	cbz	r0, 800ed16 <__smakebuf_r+0x70>
 800ed0a:	89a3      	ldrh	r3, [r4, #12]
 800ed0c:	f023 0303 	bic.w	r3, r3, #3
 800ed10:	f043 0301 	orr.w	r3, r3, #1
 800ed14:	81a3      	strh	r3, [r4, #12]
 800ed16:	89a3      	ldrh	r3, [r4, #12]
 800ed18:	431d      	orrs	r5, r3
 800ed1a:	81a5      	strh	r5, [r4, #12]
 800ed1c:	e7cf      	b.n	800ecbe <__smakebuf_r+0x18>

0800ed1e <_putc_r>:
 800ed1e:	b570      	push	{r4, r5, r6, lr}
 800ed20:	460d      	mov	r5, r1
 800ed22:	4614      	mov	r4, r2
 800ed24:	4606      	mov	r6, r0
 800ed26:	b118      	cbz	r0, 800ed30 <_putc_r+0x12>
 800ed28:	6a03      	ldr	r3, [r0, #32]
 800ed2a:	b90b      	cbnz	r3, 800ed30 <_putc_r+0x12>
 800ed2c:	f7ff f98e 	bl	800e04c <__sinit>
 800ed30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed32:	07d8      	lsls	r0, r3, #31
 800ed34:	d405      	bmi.n	800ed42 <_putc_r+0x24>
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	0599      	lsls	r1, r3, #22
 800ed3a:	d402      	bmi.n	800ed42 <_putc_r+0x24>
 800ed3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed3e:	f7ff fbb0 	bl	800e4a2 <__retarget_lock_acquire_recursive>
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	60a3      	str	r3, [r4, #8]
 800ed4a:	da05      	bge.n	800ed58 <_putc_r+0x3a>
 800ed4c:	69a2      	ldr	r2, [r4, #24]
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	db12      	blt.n	800ed78 <_putc_r+0x5a>
 800ed52:	b2eb      	uxtb	r3, r5
 800ed54:	2b0a      	cmp	r3, #10
 800ed56:	d00f      	beq.n	800ed78 <_putc_r+0x5a>
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	701d      	strb	r5, [r3, #0]
 800ed60:	b2ed      	uxtb	r5, r5
 800ed62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed64:	07da      	lsls	r2, r3, #31
 800ed66:	d405      	bmi.n	800ed74 <_putc_r+0x56>
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	059b      	lsls	r3, r3, #22
 800ed6c:	d402      	bmi.n	800ed74 <_putc_r+0x56>
 800ed6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed70:	f7ff fb98 	bl	800e4a4 <__retarget_lock_release_recursive>
 800ed74:	4628      	mov	r0, r5
 800ed76:	bd70      	pop	{r4, r5, r6, pc}
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7ff fa54 	bl	800e22a <__swbuf_r>
 800ed82:	4605      	mov	r5, r0
 800ed84:	e7ed      	b.n	800ed62 <_putc_r+0x44>
	...

0800ed88 <_fstat_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	4d06      	ldr	r5, [pc, #24]	; (800eda8 <_fstat_r+0x20>)
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	4611      	mov	r1, r2
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	f7f3 f83c 	bl	8001e12 <_fstat>
 800ed9a:	1c43      	adds	r3, r0, #1
 800ed9c:	d102      	bne.n	800eda4 <_fstat_r+0x1c>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	b103      	cbz	r3, 800eda4 <_fstat_r+0x1c>
 800eda2:	6023      	str	r3, [r4, #0]
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	bf00      	nop
 800eda8:	2004141c 	.word	0x2004141c

0800edac <_isatty_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	2300      	movs	r3, #0
 800edb0:	4d05      	ldr	r5, [pc, #20]	; (800edc8 <_isatty_r+0x1c>)
 800edb2:	4604      	mov	r4, r0
 800edb4:	4608      	mov	r0, r1
 800edb6:	602b      	str	r3, [r5, #0]
 800edb8:	f7f3 f83b 	bl	8001e32 <_isatty>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_isatty_r+0x1a>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_isatty_r+0x1a>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	2004141c 	.word	0x2004141c

0800edcc <memchr>:
 800edcc:	b2c9      	uxtb	r1, r1
 800edce:	4402      	add	r2, r0
 800edd0:	b510      	push	{r4, lr}
 800edd2:	4290      	cmp	r0, r2
 800edd4:	4603      	mov	r3, r0
 800edd6:	d101      	bne.n	800eddc <memchr+0x10>
 800edd8:	2300      	movs	r3, #0
 800edda:	e003      	b.n	800ede4 <memchr+0x18>
 800eddc:	781c      	ldrb	r4, [r3, #0]
 800edde:	3001      	adds	r0, #1
 800ede0:	428c      	cmp	r4, r1
 800ede2:	d1f6      	bne.n	800edd2 <memchr+0x6>
 800ede4:	4618      	mov	r0, r3
 800ede6:	bd10      	pop	{r4, pc}

0800ede8 <_init>:
 800ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edea:	bf00      	nop
 800edec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edee:	bc08      	pop	{r3}
 800edf0:	469e      	mov	lr, r3
 800edf2:	4770      	bx	lr

0800edf4 <_fini>:
 800edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf6:	bf00      	nop
 800edf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edfa:	bc08      	pop	{r3}
 800edfc:	469e      	mov	lr, r3
 800edfe:	4770      	bx	lr
